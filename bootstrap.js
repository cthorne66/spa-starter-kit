/** vim: et:ts=4:sw=4:sts=4
 * @license RequireJS 2.1.16 Copyright (c) 2010-2015, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/requirejs for details
 */
//Not using strict: uneven strict support in browsers, #392, and causes
//problems with requirejs.exec()/transpiler plugins that may not be strict.
/*jslint regexp: true, nomen: true, sloppy: true */
/*global window, navigator, document, importScripts, setTimeout, opera */

var requirejs, require, define;
(function (global) {
    var req, s, head, baseElement, dataMain, src,
        interactiveScript, currentlyAddingScript, mainScript, subPath,
        version = '2.1.16',
        commentRegExp = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg,
        cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,
        jsSuffixRegExp = /\.js$/,
        currDirRegExp = /^\.\//,
        op = Object.prototype,
        ostring = op.toString,
        hasOwn = op.hasOwnProperty,
        ap = Array.prototype,
        apsp = ap.splice,
        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),
        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',
        //PS3 indicates loaded and complete, but need to wait for complete
        //specifically. Sequence is 'loading', 'loaded', execution,
        // then 'complete'. The UA check is unfortunate, but not sure how
        //to feature test w/o causing perf issues.
        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?
                      /^complete$/ : /^(complete|loaded)$/,
        defContextName = '_',
        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.
        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',
        contexts = {},
        cfg = {},
        globalDefQueue = [],
        useInteractive = false;

    function isFunction(it) {
        return ostring.call(it) === '[object Function]';
    }

    function isArray(it) {
        return ostring.call(it) === '[object Array]';
    }

    /**
     * Helper function for iterating over an array. If the func returns
     * a true value, it will break out of the loop.
     */
    function each(ary, func) {
        if (ary) {
            var i;
            for (i = 0; i < ary.length; i += 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    /**
     * Helper function for iterating over an array backwards. If the func
     * returns a true value, it will break out of the loop.
     */
    function eachReverse(ary, func) {
        if (ary) {
            var i;
            for (i = ary.length - 1; i > -1; i -= 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    function getOwn(obj, prop) {
        return hasProp(obj, prop) && obj[prop];
    }

    /**
     * Cycles over properties in an object and calls a function for each
     * property value. If the function returns a truthy value, then the
     * iteration is stopped.
     */
    function eachProp(obj, func) {
        var prop;
        for (prop in obj) {
            if (hasProp(obj, prop)) {
                if (func(obj[prop], prop)) {
                    break;
                }
            }
        }
    }

    /**
     * Simple function to mix in properties from source into target,
     * but only if target does not already have a property of the same name.
     */
    function mixin(target, source, force, deepStringMixin) {
        if (source) {
            eachProp(source, function (value, prop) {
                if (force || !hasProp(target, prop)) {
                    if (deepStringMixin && typeof value === 'object' && value &&
                        !isArray(value) && !isFunction(value) &&
                        !(value instanceof RegExp)) {

                        if (!target[prop]) {
                            target[prop] = {};
                        }
                        mixin(target[prop], value, force, deepStringMixin);
                    } else {
                        target[prop] = value;
                    }
                }
            });
        }
        return target;
    }

    //Similar to Function.prototype.bind, but the 'this' object is specified
    //first, since it is easier to read/figure out what 'this' will be.
    function bind(obj, fn) {
        return function () {
            return fn.apply(obj, arguments);
        };
    }

    function scripts() {
        return document.getElementsByTagName('script');
    }

    function defaultOnError(err) {
        throw err;
    }

    //Allow getting a global that is expressed in
    //dot notation, like 'a.b.c'.
    function getGlobal(value) {
        if (!value) {
            return value;
        }
        var g = global;
        each(value.split('.'), function (part) {
            g = g[part];
        });
        return g;
    }

    /**
     * Constructs an error with a pointer to an URL with more information.
     * @param {String} id the error ID that maps to an ID on a web page.
     * @param {String} message human readable error.
     * @param {Error} [err] the original error, if there is one.
     *
     * @returns {Error}
     */
    function makeError(id, msg, err, requireModules) {
        var e = new Error(msg + '\nhttp://requirejs.org/docs/errors.html#' + id);
        e.requireType = id;
        e.requireModules = requireModules;
        if (err) {
            e.originalError = err;
        }
        return e;
    }

    if (typeof define !== 'undefined') {
        //If a define is already in play via another AMD loader,
        //do not overwrite.
        return;
    }

    if (typeof requirejs !== 'undefined') {
        if (isFunction(requirejs)) {
            //Do not overwrite an existing requirejs instance.
            return;
        }
        cfg = requirejs;
        requirejs = undefined;
    }

    //Allow for a require config object
    if (typeof require !== 'undefined' && !isFunction(require)) {
        //assume it is a config object.
        cfg = require;
        require = undefined;
    }

    function newContext(contextName) {
        var inCheckLoaded, Module, context, handlers,
            checkLoadedTimeoutId,
            config = {
                //Defaults. Do not set a default for map
                //config to speed up normalize(), which
                //will run faster if there is no default.
                waitSeconds: 7,
                baseUrl: './',
                paths: {},
                bundles: {},
                pkgs: {},
                shim: {},
                config: {}
            },
            registry = {},
            //registry of just enabled modules, to speed
            //cycle breaking code when lots of modules
            //are registered, but not activated.
            enabledRegistry = {},
            undefEvents = {},
            defQueue = [],
            defined = {},
            urlFetched = {},
            bundlesMap = {},
            requireCounter = 1,
            unnormalizedCounter = 1;

        /**
         * Trims the . and .. from an array of path segments.
         * It will keep a leading path segment if a .. will become
         * the first path segment, to help with module name lookups,
         * which act like paths, but can be remapped. But the end result,
         * all paths that use this function should look normalized.
         * NOTE: this method MODIFIES the input array.
         * @param {Array} ary the array of path segments.
         */
        function trimDots(ary) {
            var i, part;
            for (i = 0; i < ary.length; i++) {
                part = ary[i];
                if (part === '.') {
                    ary.splice(i, 1);
                    i -= 1;
                } else if (part === '..') {
                    // If at the start, or previous value is still ..,
                    // keep them so that when converted to a path it may
                    // still work when converted to a path, even though
                    // as an ID it is less than ideal. In larger point
                    // releases, may be better to just kick out an error.
                    if (i === 0 || (i == 1 && ary[2] === '..') || ary[i - 1] === '..') {
                        continue;
                    } else if (i > 0) {
                        ary.splice(i - 1, 2);
                        i -= 2;
                    }
                }
            }
        }

        /**
         * Given a relative module name, like ./something, normalize it to
         * a real name that can be mapped to a path.
         * @param {String} name the relative name
         * @param {String} baseName a real name that the name arg is relative
         * to.
         * @param {Boolean} applyMap apply the map config to the value. Should
         * only be done if this normalization is for a dependency ID.
         * @returns {String} normalized name
         */
        function normalize(name, baseName, applyMap) {
            var pkgMain, mapValue, nameParts, i, j, nameSegment, lastIndex,
                foundMap, foundI, foundStarMap, starI, normalizedBaseParts,
                baseParts = (baseName && baseName.split('/')),
                map = config.map,
                starMap = map && map['*'];

            //Adjust any relative paths.
            if (name) {
                name = name.split('/');
                lastIndex = name.length - 1;

                // If wanting node ID compatibility, strip .js from end
                // of IDs. Have to do this here, and not in nameToUrl
                // because node allows either .js or non .js to map
                // to same file.
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                // Starts with a '.' so need the baseName
                if (name[0].charAt(0) === '.' && baseParts) {
                    //Convert baseName to array, and lop off the last part,
                    //so that . matches that 'directory' and not name of the baseName's
                    //module. For instance, baseName of 'one/two/three', maps to
                    //'one/two/three.js', but we want the directory, 'one/two' for
                    //this normalization.
                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                    name = normalizedBaseParts.concat(name);
                }

                trimDots(name);
                name = name.join('/');
            }

            //Apply map config if available.
            if (applyMap && map && (baseParts || starMap)) {
                nameParts = name.split('/');

                outerLoop: for (i = nameParts.length; i > 0; i -= 1) {
                    nameSegment = nameParts.slice(0, i).join('/');

                    if (baseParts) {
                        //Find the longest baseName segment match in the config.
                        //So, do joins on the biggest to smallest lengths of baseParts.
                        for (j = baseParts.length; j > 0; j -= 1) {
                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));

                            //baseName segment has config, find if it has one for
                            //this name.
                            if (mapValue) {
                                mapValue = getOwn(mapValue, nameSegment);
                                if (mapValue) {
                                    //Match, update name to the new value.
                                    foundMap = mapValue;
                                    foundI = i;
                                    break outerLoop;
                                }
                            }
                        }
                    }

                    //Check for a star map match, but just hold on to it,
                    //if there is a shorter segment match later in a matching
                    //config, then favor over this star map.
                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {
                        foundStarMap = getOwn(starMap, nameSegment);
                        starI = i;
                    }
                }

                if (!foundMap && foundStarMap) {
                    foundMap = foundStarMap;
                    foundI = starI;
                }

                if (foundMap) {
                    nameParts.splice(0, foundI, foundMap);
                    name = nameParts.join('/');
                }
            }

            // If the name points to a package's name, use
            // the package main instead.
            pkgMain = getOwn(config.pkgs, name);

            return pkgMain ? pkgMain : name;
        }

        function removeScript(name) {
            if (isBrowser) {
                each(scripts(), function (scriptNode) {
                    if (scriptNode.getAttribute('data-requiremodule') === name &&
                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {
                        scriptNode.parentNode.removeChild(scriptNode);
                        return true;
                    }
                });
            }
        }

        function hasPathFallback(id) {
            var pathConfig = getOwn(config.paths, id);
            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {
                //Pop off the first array value, since it failed, and
                //retry
                pathConfig.shift();
                context.require.undef(id);

                //Custom require that does not do map translation, since
                //ID is "absolute", already mapped/resolved.
                context.makeRequire(null, {
                    skipMap: true
                })([id]);

                return true;
            }
        }

        //Turns a plugin!resource to [plugin, resource]
        //with the plugin being undefined if the name
        //did not have a plugin prefix.
        function splitPrefix(name) {
            var prefix,
                index = name ? name.indexOf('!') : -1;
            if (index > -1) {
                prefix = name.substring(0, index);
                name = name.substring(index + 1, name.length);
            }
            return [prefix, name];
        }

        /**
         * Creates a module mapping that includes plugin prefix, module
         * name, and path. If parentModuleMap is provided it will
         * also normalize the name via require.normalize()
         *
         * @param {String} name the module name
         * @param {String} [parentModuleMap] parent module map
         * for the module name, used to resolve relative names.
         * @param {Boolean} isNormalized: is the ID already normalized.
         * This is true if this call is done for a define() module ID.
         * @param {Boolean} applyMap: apply the map config to the ID.
         * Should only be true if this map is for a dependency.
         *
         * @returns {Object}
         */
        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {
            var url, pluginModule, suffix, nameParts,
                prefix = null,
                parentName = parentModuleMap ? parentModuleMap.name : null,
                originalName = name,
                isDefine = true,
                normalizedName = '';

            //If no name, then it means it is a require call, generate an
            //internal name.
            if (!name) {
                isDefine = false;
                name = '_@r' + (requireCounter += 1);
            }

            nameParts = splitPrefix(name);
            prefix = nameParts[0];
            name = nameParts[1];

            if (prefix) {
                prefix = normalize(prefix, parentName, applyMap);
                pluginModule = getOwn(defined, prefix);
            }

            //Account for relative paths if there is a base name.
            if (name) {
                if (prefix) {
                    if (pluginModule && pluginModule.normalize) {
                        //Plugin is loaded, use its normalize method.
                        normalizedName = pluginModule.normalize(name, function (name) {
                            return normalize(name, parentName, applyMap);
                        });
                    } else {
                        // If nested plugin references, then do not try to
                        // normalize, as it will not normalize correctly. This
                        // places a restriction on resourceIds, and the longer
                        // term solution is not to normalize until plugins are
                        // loaded and all normalizations to allow for async
                        // loading of a loader plugin. But for now, fixes the
                        // common uses. Details in #1131
                        normalizedName = name.indexOf('!') === -1 ?
                                         normalize(name, parentName, applyMap) :
                                         name;
                    }
                } else {
                    //A regular module.
                    normalizedName = normalize(name, parentName, applyMap);

                    //Normalized name may be a plugin ID due to map config
                    //application in normalize. The map config values must
                    //already be normalized, so do not need to redo that part.
                    nameParts = splitPrefix(normalizedName);
                    prefix = nameParts[0];
                    normalizedName = nameParts[1];
                    isNormalized = true;

                    url = context.nameToUrl(normalizedName);
                }
            }

            //If the id is a plugin id that cannot be determined if it needs
            //normalization, stamp it with a unique ID so two matching relative
            //ids that may conflict can be separate.
            suffix = prefix && !pluginModule && !isNormalized ?
                     '_unnormalized' + (unnormalizedCounter += 1) :
                     '';

            return {
                prefix: prefix,
                name: normalizedName,
                parentMap: parentModuleMap,
                unnormalized: !!suffix,
                url: url,
                originalName: originalName,
                isDefine: isDefine,
                id: (prefix ?
                        prefix + '!' + normalizedName :
                        normalizedName) + suffix
            };
        }

        function getModule(depMap) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (!mod) {
                mod = registry[id] = new context.Module(depMap);
            }

            return mod;
        }

        function on(depMap, name, fn) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (hasProp(defined, id) &&
                    (!mod || mod.defineEmitComplete)) {
                if (name === 'defined') {
                    fn(defined[id]);
                }
            } else {
                mod = getModule(depMap);
                if (mod.error && name === 'error') {
                    fn(mod.error);
                } else {
                    mod.on(name, fn);
                }
            }
        }

        function onError(err, errback) {
            var ids = err.requireModules,
                notified = false;

            if (errback) {
                errback(err);
            } else {
                each(ids, function (id) {
                    var mod = getOwn(registry, id);
                    if (mod) {
                        //Set error on module, so it skips timeout checks.
                        mod.error = err;
                        if (mod.events.error) {
                            notified = true;
                            mod.emit('error', err);
                        }
                    }
                });

                if (!notified) {
                    req.onError(err);
                }
            }
        }

        /**
         * Internal method to transfer globalQueue items to this context's
         * defQueue.
         */
        function takeGlobalQueue() {
            //Push all the globalDefQueue items into the context's defQueue
            if (globalDefQueue.length) {
                //Array splice in the values since the context code has a
                //local var ref to defQueue, so cannot just reassign the one
                //on context.
                apsp.apply(defQueue,
                           [defQueue.length, 0].concat(globalDefQueue));
                globalDefQueue = [];
            }
        }

        handlers = {
            'require': function (mod) {
                if (mod.require) {
                    return mod.require;
                } else {
                    return (mod.require = context.makeRequire(mod.map));
                }
            },
            'exports': function (mod) {
                mod.usingExports = true;
                if (mod.map.isDefine) {
                    if (mod.exports) {
                        return (defined[mod.map.id] = mod.exports);
                    } else {
                        return (mod.exports = defined[mod.map.id] = {});
                    }
                }
            },
            'module': function (mod) {
                if (mod.module) {
                    return mod.module;
                } else {
                    return (mod.module = {
                        id: mod.map.id,
                        uri: mod.map.url,
                        config: function () {
                            return  getOwn(config.config, mod.map.id) || {};
                        },
                        exports: mod.exports || (mod.exports = {})
                    });
                }
            }
        };

        function cleanRegistry(id) {
            //Clean up machinery used for waiting modules.
            delete registry[id];
            delete enabledRegistry[id];
        }

        function breakCycle(mod, traced, processed) {
            var id = mod.map.id;

            if (mod.error) {
                mod.emit('error', mod.error);
            } else {
                traced[id] = true;
                each(mod.depMaps, function (depMap, i) {
                    var depId = depMap.id,
                        dep = getOwn(registry, depId);

                    //Only force things that have not completed
                    //being defined, so still in the registry,
                    //and only if it has not been matched up
                    //in the module already.
                    if (dep && !mod.depMatched[i] && !processed[depId]) {
                        if (getOwn(traced, depId)) {
                            mod.defineDep(i, defined[depId]);
                            mod.check(); //pass false?
                        } else {
                            breakCycle(dep, traced, processed);
                        }
                    }
                });
                processed[id] = true;
            }
        }

        function checkLoaded() {
            var err, usingPathFallback,
                waitInterval = config.waitSeconds * 1000,
                //It is possible to disable the wait interval by using waitSeconds of 0.
                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),
                noLoads = [],
                reqCalls = [],
                stillLoading = false,
                needCycleCheck = true;

            //Do not bother if this call was a result of a cycle break.
            if (inCheckLoaded) {
                return;
            }

            inCheckLoaded = true;

            //Figure out the state of all the modules.
            eachProp(enabledRegistry, function (mod) {
                var map = mod.map,
                    modId = map.id;

                //Skip things that are not enabled or in error state.
                if (!mod.enabled) {
                    return;
                }

                if (!map.isDefine) {
                    reqCalls.push(mod);
                }

                if (!mod.error) {
                    //If the module should be executed, and it has not
                    //been inited and time is up, remember it.
                    if (!mod.inited && expired) {
                        if (hasPathFallback(modId)) {
                            usingPathFallback = true;
                            stillLoading = true;
                        } else {
                            noLoads.push(modId);
                            removeScript(modId);
                        }
                    } else if (!mod.inited && mod.fetched && map.isDefine) {
                        stillLoading = true;
                        if (!map.prefix) {
                            //No reason to keep looking for unfinished
                            //loading. If the only stillLoading is a
                            //plugin resource though, keep going,
                            //because it may be that a plugin resource
                            //is waiting on a non-plugin cycle.
                            return (needCycleCheck = false);
                        }
                    }
                }
            });

            if (expired && noLoads.length) {
                //If wait time expired, throw error of unloaded modules.
                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);
                err.contextName = context.contextName;
                return onError(err);
            }

            //Not expired, check for a cycle.
            if (needCycleCheck) {
                each(reqCalls, function (mod) {
                    breakCycle(mod, {}, {});
                });
            }

            //If still waiting on loads, and the waiting load is something
            //other than a plugin resource, or there are still outstanding
            //scripts, then just try back later.
            if ((!expired || usingPathFallback) && stillLoading) {
                //Something is still waiting to load. Wait for it, but only
                //if a timeout is not already in effect.
                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {
                    checkLoadedTimeoutId = setTimeout(function () {
                        checkLoadedTimeoutId = 0;
                        checkLoaded();
                    }, 50);
                }
            }

            inCheckLoaded = false;
        }

        Module = function (map) {
            this.events = getOwn(undefEvents, map.id) || {};
            this.map = map;
            this.shim = getOwn(config.shim, map.id);
            this.depExports = [];
            this.depMaps = [];
            this.depMatched = [];
            this.pluginMaps = {};
            this.depCount = 0;

            /* this.exports this.factory
               this.depMaps = [],
               this.enabled, this.fetched
            */
        };

        Module.prototype = {
            init: function (depMaps, factory, errback, options) {
                options = options || {};

                //Do not do more inits if already done. Can happen if there
                //are multiple define calls for the same module. That is not
                //a normal, common case, but it is also not unexpected.
                if (this.inited) {
                    return;
                }

                this.factory = factory;

                if (errback) {
                    //Register for errors on this module.
                    this.on('error', errback);
                } else if (this.events.error) {
                    //If no errback already, but there are error listeners
                    //on this module, set up an errback to pass to the deps.
                    errback = bind(this, function (err) {
                        this.emit('error', err);
                    });
                }

                //Do a copy of the dependency array, so that
                //source inputs are not modified. For example
                //"shim" deps are passed in here directly, and
                //doing a direct modification of the depMaps array
                //would affect that config.
                this.depMaps = depMaps && depMaps.slice(0);

                this.errback = errback;

                //Indicate this module has be initialized
                this.inited = true;

                this.ignore = options.ignore;

                //Could have option to init this module in enabled mode,
                //or could have been previously marked as enabled. However,
                //the dependencies are not known until init is called. So
                //if enabled previously, now trigger dependencies as enabled.
                if (options.enabled || this.enabled) {
                    //Enable this module and dependencies.
                    //Will call this.check()
                    this.enable();
                } else {
                    this.check();
                }
            },

            defineDep: function (i, depExports) {
                //Because of cycles, defined callback for a given
                //export can be called more than once.
                if (!this.depMatched[i]) {
                    this.depMatched[i] = true;
                    this.depCount -= 1;
                    this.depExports[i] = depExports;
                }
            },

            fetch: function () {
                if (this.fetched) {
                    return;
                }
                this.fetched = true;

                context.startTime = (new Date()).getTime();

                var map = this.map;

                //If the manager is for a plugin managed resource,
                //ask the plugin to load it now.
                if (this.shim) {
                    context.makeRequire(this.map, {
                        enableBuildCallback: true
                    })(this.shim.deps || [], bind(this, function () {
                        return map.prefix ? this.callPlugin() : this.load();
                    }));
                } else {
                    //Regular dependency.
                    return map.prefix ? this.callPlugin() : this.load();
                }
            },

            load: function () {
                var url = this.map.url;

                //Regular dependency.
                if (!urlFetched[url]) {
                    urlFetched[url] = true;
                    context.load(this.map.id, url);
                }
            },

            /**
             * Checks if the module is ready to define itself, and if so,
             * define it.
             */
            check: function () {
                if (!this.enabled || this.enabling) {
                    return;
                }

                var err, cjsModule,
                    id = this.map.id,
                    depExports = this.depExports,
                    exports = this.exports,
                    factory = this.factory;

                if (!this.inited) {
                    this.fetch();
                } else if (this.error) {
                    this.emit('error', this.error);
                } else if (!this.defining) {
                    //The factory could trigger another require call
                    //that would result in checking this module to
                    //define itself again. If already in the process
                    //of doing that, skip this work.
                    this.defining = true;

                    if (this.depCount < 1 && !this.defined) {
                        if (isFunction(factory)) {
                            //If there is an error listener, favor passing
                            //to that instead of throwing an error. However,
                            //only do it for define()'d  modules. require
                            //errbacks should not be called for failures in
                            //their callbacks (#699). However if a global
                            //onError is set, use that.
                            if ((this.events.error && this.map.isDefine) ||
                                req.onError !== defaultOnError) {
                                try {
                                    exports = context.execCb(id, factory, depExports, exports);
                                } catch (e) {
                                    err = e;
                                }
                            } else {
                                exports = context.execCb(id, factory, depExports, exports);
                            }

                            // Favor return value over exports. If node/cjs in play,
                            // then will not have a return value anyway. Favor
                            // module.exports assignment over exports object.
                            if (this.map.isDefine && exports === undefined) {
                                cjsModule = this.module;
                                if (cjsModule) {
                                    exports = cjsModule.exports;
                                } else if (this.usingExports) {
                                    //exports already set the defined value.
                                    exports = this.exports;
                                }
                            }

                            if (err) {
                                err.requireMap = this.map;
                                err.requireModules = this.map.isDefine ? [this.map.id] : null;
                                err.requireType = this.map.isDefine ? 'define' : 'require';
                                return onError((this.error = err));
                            }

                        } else {
                            //Just a literal value
                            exports = factory;
                        }

                        this.exports = exports;

                        if (this.map.isDefine && !this.ignore) {
                            defined[id] = exports;

                            if (req.onResourceLoad) {
                                req.onResourceLoad(context, this.map, this.depMaps);
                            }
                        }

                        //Clean up
                        cleanRegistry(id);

                        this.defined = true;
                    }

                    //Finished the define stage. Allow calling check again
                    //to allow define notifications below in the case of a
                    //cycle.
                    this.defining = false;

                    if (this.defined && !this.defineEmitted) {
                        this.defineEmitted = true;
                        this.emit('defined', this.exports);
                        this.defineEmitComplete = true;
                    }

                }
            },

            callPlugin: function () {
                var map = this.map,
                    id = map.id,
                    //Map already normalized the prefix.
                    pluginMap = makeModuleMap(map.prefix);

                //Mark this as a dependency for this plugin, so it
                //can be traced for cycles.
                this.depMaps.push(pluginMap);

                on(pluginMap, 'defined', bind(this, function (plugin) {
                    var load, normalizedMap, normalizedMod,
                        bundleId = getOwn(bundlesMap, this.map.id),
                        name = this.map.name,
                        parentName = this.map.parentMap ? this.map.parentMap.name : null,
                        localRequire = context.makeRequire(map.parentMap, {
                            enableBuildCallback: true
                        });

                    //If current map is not normalized, wait for that
                    //normalized name to load instead of continuing.
                    if (this.map.unnormalized) {
                        //Normalize the ID if the plugin allows it.
                        if (plugin.normalize) {
                            name = plugin.normalize(name, function (name) {
                                return normalize(name, parentName, true);
                            }) || '';
                        }

                        //prefix and name should already be normalized, no need
                        //for applying map config again either.
                        normalizedMap = makeModuleMap(map.prefix + '!' + name,
                                                      this.map.parentMap);
                        on(normalizedMap,
                            'defined', bind(this, function (value) {
                                this.init([], function () { return value; }, null, {
                                    enabled: true,
                                    ignore: true
                                });
                            }));

                        normalizedMod = getOwn(registry, normalizedMap.id);
                        if (normalizedMod) {
                            //Mark this as a dependency for this plugin, so it
                            //can be traced for cycles.
                            this.depMaps.push(normalizedMap);

                            if (this.events.error) {
                                normalizedMod.on('error', bind(this, function (err) {
                                    this.emit('error', err);
                                }));
                            }
                            normalizedMod.enable();
                        }

                        return;
                    }

                    //If a paths config, then just load that file instead to
                    //resolve the plugin, as it is built into that paths layer.
                    if (bundleId) {
                        this.map.url = context.nameToUrl(bundleId);
                        this.load();
                        return;
                    }

                    load = bind(this, function (value) {
                        this.init([], function () { return value; }, null, {
                            enabled: true
                        });
                    });

                    load.error = bind(this, function (err) {
                        this.inited = true;
                        this.error = err;
                        err.requireModules = [id];

                        //Remove temp unnormalized modules for this module,
                        //since they will never be resolved otherwise now.
                        eachProp(registry, function (mod) {
                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {
                                cleanRegistry(mod.map.id);
                            }
                        });

                        onError(err);
                    });

                    //Allow plugins to load other code without having to know the
                    //context or how to 'complete' the load.
                    load.fromText = bind(this, function (text, textAlt) {
                        /*jslint evil: true */
                        var moduleName = map.name,
                            moduleMap = makeModuleMap(moduleName),
                            hasInteractive = useInteractive;

                        //As of 2.1.0, support just passing the text, to reinforce
                        //fromText only being called once per resource. Still
                        //support old style of passing moduleName but discard
                        //that moduleName in favor of the internal ref.
                        if (textAlt) {
                            text = textAlt;
                        }

                        //Turn off interactive script matching for IE for any define
                        //calls in the text, then turn it back on at the end.
                        if (hasInteractive) {
                            useInteractive = false;
                        }

                        //Prime the system by creating a module instance for
                        //it.
                        getModule(moduleMap);

                        //Transfer any config to this other module.
                        if (hasProp(config.config, id)) {
                            config.config[moduleName] = config.config[id];
                        }

                        try {
                            req.exec(text);
                        } catch (e) {
                            return onError(makeError('fromtexteval',
                                             'fromText eval for ' + id +
                                            ' failed: ' + e,
                                             e,
                                             [id]));
                        }

                        if (hasInteractive) {
                            useInteractive = true;
                        }

                        //Mark this as a dependency for the plugin
                        //resource
                        this.depMaps.push(moduleMap);

                        //Support anonymous modules.
                        context.completeLoad(moduleName);

                        //Bind the value of that module to the value for this
                        //resource ID.
                        localRequire([moduleName], load);
                    });

                    //Use parentName here since the plugin's name is not reliable,
                    //could be some weird string with no path that actually wants to
                    //reference the parentName's path.
                    plugin.load(map.name, localRequire, load, config);
                }));

                context.enable(pluginMap, this);
                this.pluginMaps[pluginMap.id] = pluginMap;
            },

            enable: function () {
                enabledRegistry[this.map.id] = this;
                this.enabled = true;

                //Set flag mentioning that the module is enabling,
                //so that immediate calls to the defined callbacks
                //for dependencies do not trigger inadvertent load
                //with the depCount still being zero.
                this.enabling = true;

                //Enable each dependency
                each(this.depMaps, bind(this, function (depMap, i) {
                    var id, mod, handler;

                    if (typeof depMap === 'string') {
                        //Dependency needs to be converted to a depMap
                        //and wired up to this module.
                        depMap = makeModuleMap(depMap,
                                               (this.map.isDefine ? this.map : this.map.parentMap),
                                               false,
                                               !this.skipMap);
                        this.depMaps[i] = depMap;

                        handler = getOwn(handlers, depMap.id);

                        if (handler) {
                            this.depExports[i] = handler(this);
                            return;
                        }

                        this.depCount += 1;

                        on(depMap, 'defined', bind(this, function (depExports) {
                            this.defineDep(i, depExports);
                            this.check();
                        }));

                        if (this.errback) {
                            on(depMap, 'error', bind(this, this.errback));
                        } else if (this.events.error) {
                            // No direct errback on this module, but something
                            // else is listening for errors, so be sure to
                            // propagate the error correctly.
                            on(depMap, 'error', bind(this, function(err) {
                                this.emit('error', err);
                            }));
                        }
                    }

                    id = depMap.id;
                    mod = registry[id];

                    //Skip special modules like 'require', 'exports', 'module'
                    //Also, don't call enable if it is already enabled,
                    //important in circular dependency cases.
                    if (!hasProp(handlers, id) && mod && !mod.enabled) {
                        context.enable(depMap, this);
                    }
                }));

                //Enable each plugin that is used in
                //a dependency
                eachProp(this.pluginMaps, bind(this, function (pluginMap) {
                    var mod = getOwn(registry, pluginMap.id);
                    if (mod && !mod.enabled) {
                        context.enable(pluginMap, this);
                    }
                }));

                this.enabling = false;

                this.check();
            },

            on: function (name, cb) {
                var cbs = this.events[name];
                if (!cbs) {
                    cbs = this.events[name] = [];
                }
                cbs.push(cb);
            },

            emit: function (name, evt) {
                each(this.events[name], function (cb) {
                    cb(evt);
                });
                if (name === 'error') {
                    //Now that the error handler was triggered, remove
                    //the listeners, since this broken Module instance
                    //can stay around for a while in the registry.
                    delete this.events[name];
                }
            }
        };

        function callGetModule(args) {
            //Skip modules already defined.
            if (!hasProp(defined, args[0])) {
                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);
            }
        }

        function removeListener(node, func, name, ieName) {
            //Favor detachEvent because of IE9
            //issue, see attachEvent/addEventListener comment elsewhere
            //in this file.
            if (node.detachEvent && !isOpera) {
                //Probably IE. If not it will throw an error, which will be
                //useful to know.
                if (ieName) {
                    node.detachEvent(ieName, func);
                }
            } else {
                node.removeEventListener(name, func, false);
            }
        }

        /**
         * Given an event from a script node, get the requirejs info from it,
         * and then removes the event listeners on the node.
         * @param {Event} evt
         * @returns {Object}
         */
        function getScriptData(evt) {
            //Using currentTarget instead of target for Firefox 2.0's sake. Not
            //all old browsers will be supported, but this one was easy enough
            //to support and still makes sense.
            var node = evt.currentTarget || evt.srcElement;

            //Remove the listeners once here.
            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');
            removeListener(node, context.onScriptError, 'error');

            return {
                node: node,
                id: node && node.getAttribute('data-requiremodule')
            };
        }

        function intakeDefines() {
            var args;

            //Any defined modules in the global queue, intake them now.
            takeGlobalQueue();

            //Make sure any remaining defQueue items get properly processed.
            while (defQueue.length) {
                args = defQueue.shift();
                if (args[0] === null) {
                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' + args[args.length - 1]));
                } else {
                    //args are id, deps, factory. Should be normalized by the
                    //define() function.
                    callGetModule(args);
                }
            }
        }

        context = {
            config: config,
            contextName: contextName,
            registry: registry,
            defined: defined,
            urlFetched: urlFetched,
            defQueue: defQueue,
            Module: Module,
            makeModuleMap: makeModuleMap,
            nextTick: req.nextTick,
            onError: onError,

            /**
             * Set a configuration for the context.
             * @param {Object} cfg config object to integrate.
             */
            configure: function (cfg) {
                //Make sure the baseUrl ends in a slash.
                if (cfg.baseUrl) {
                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {
                        cfg.baseUrl += '/';
                    }
                }

                //Save off the paths since they require special processing,
                //they are additive.
                var shim = config.shim,
                    objs = {
                        paths: true,
                        bundles: true,
                        config: true,
                        map: true
                    };

                eachProp(cfg, function (value, prop) {
                    if (objs[prop]) {
                        if (!config[prop]) {
                            config[prop] = {};
                        }
                        mixin(config[prop], value, true, true);
                    } else {
                        config[prop] = value;
                    }
                });

                //Reverse map the bundles
                if (cfg.bundles) {
                    eachProp(cfg.bundles, function (value, prop) {
                        each(value, function (v) {
                            if (v !== prop) {
                                bundlesMap[v] = prop;
                            }
                        });
                    });
                }

                //Merge shim
                if (cfg.shim) {
                    eachProp(cfg.shim, function (value, id) {
                        //Normalize the structure
                        if (isArray(value)) {
                            value = {
                                deps: value
                            };
                        }
                        if ((value.exports || value.init) && !value.exportsFn) {
                            value.exportsFn = context.makeShimExports(value);
                        }
                        shim[id] = value;
                    });
                    config.shim = shim;
                }

                //Adjust packages if necessary.
                if (cfg.packages) {
                    each(cfg.packages, function (pkgObj) {
                        var location, name;

                        pkgObj = typeof pkgObj === 'string' ? { name: pkgObj } : pkgObj;

                        name = pkgObj.name;
                        location = pkgObj.location;
                        if (location) {
                            config.paths[name] = pkgObj.location;
                        }

                        //Save pointer to main module ID for pkg name.
                        //Remove leading dot in main, so main paths are normalized,
                        //and remove any trailing .js, since different package
                        //envs have different conventions: some use a module name,
                        //some use a file name.
                        config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main')
                                     .replace(currDirRegExp, '')
                                     .replace(jsSuffixRegExp, '');
                    });
                }

                //If there are any "waiting to execute" modules in the registry,
                //update the maps for them, since their info, like URLs to load,
                //may have changed.
                eachProp(registry, function (mod, id) {
                    //If module already has init called, since it is too
                    //late to modify them, and ignore unnormalized ones
                    //since they are transient.
                    if (!mod.inited && !mod.map.unnormalized) {
                        mod.map = makeModuleMap(id);
                    }
                });

                //If a deps array or a config callback is specified, then call
                //require with those args. This is useful when require is defined as a
                //config object before require.js is loaded.
                if (cfg.deps || cfg.callback) {
                    context.require(cfg.deps || [], cfg.callback);
                }
            },

            makeShimExports: function (value) {
                function fn() {
                    var ret;
                    if (value.init) {
                        ret = value.init.apply(global, arguments);
                    }
                    return ret || (value.exports && getGlobal(value.exports));
                }
                return fn;
            },

            makeRequire: function (relMap, options) {
                options = options || {};

                function localRequire(deps, callback, errback) {
                    var id, map, requireMod;

                    if (options.enableBuildCallback && callback && isFunction(callback)) {
                        callback.__requireJsBuild = true;
                    }

                    if (typeof deps === 'string') {
                        if (isFunction(callback)) {
                            //Invalid call
                            return onError(makeError('requireargs', 'Invalid require call'), errback);
                        }

                        //If require|exports|module are requested, get the
                        //value for them from the special handlers. Caveat:
                        //this only works while module is being defined.
                        if (relMap && hasProp(handlers, deps)) {
                            return handlers[deps](registry[relMap.id]);
                        }

                        //Synchronous access to one module. If require.get is
                        //available (as in the Node adapter), prefer that.
                        if (req.get) {
                            return req.get(context, deps, relMap, localRequire);
                        }

                        //Normalize module name, if it contains . or ..
                        map = makeModuleMap(deps, relMap, false, true);
                        id = map.id;

                        if (!hasProp(defined, id)) {
                            return onError(makeError('notloaded', 'Module name "' +
                                        id +
                                        '" has not been loaded yet for context: ' +
                                        contextName +
                                        (relMap ? '' : '. Use require([])')));
                        }
                        return defined[id];
                    }

                    //Grab defines waiting in the global queue.
                    intakeDefines();

                    //Mark all the dependencies as needing to be loaded.
                    context.nextTick(function () {
                        //Some defines could have been added since the
                        //require call, collect them.
                        intakeDefines();

                        requireMod = getModule(makeModuleMap(null, relMap));

                        //Store if map config should be applied to this require
                        //call for dependencies.
                        requireMod.skipMap = options.skipMap;

                        requireMod.init(deps, callback, errback, {
                            enabled: true
                        });

                        checkLoaded();
                    });

                    return localRequire;
                }

                mixin(localRequire, {
                    isBrowser: isBrowser,

                    /**
                     * Converts a module name + .extension into an URL path.
                     * *Requires* the use of a module name. It does not support using
                     * plain URLs like nameToUrl.
                     */
                    toUrl: function (moduleNamePlusExt) {
                        var ext,
                            index = moduleNamePlusExt.lastIndexOf('.'),
                            segment = moduleNamePlusExt.split('/')[0],
                            isRelative = segment === '.' || segment === '..';

                        //Have a file extension alias, and it is not the
                        //dots from a relative path.
                        if (index !== -1 && (!isRelative || index > 1)) {
                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);
                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);
                        }

                        return context.nameToUrl(normalize(moduleNamePlusExt,
                                                relMap && relMap.id, true), ext,  true);
                    },

                    defined: function (id) {
                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);
                    },

                    specified: function (id) {
                        id = makeModuleMap(id, relMap, false, true).id;
                        return hasProp(defined, id) || hasProp(registry, id);
                    }
                });

                //Only allow undef on top level require calls
                if (!relMap) {
                    localRequire.undef = function (id) {
                        //Bind any waiting define() calls to this context,
                        //fix for #408
                        takeGlobalQueue();

                        var map = makeModuleMap(id, relMap, true),
                            mod = getOwn(registry, id);

                        removeScript(id);

                        delete defined[id];
                        delete urlFetched[map.url];
                        delete undefEvents[id];

                        //Clean queued defines too. Go backwards
                        //in array so that the splices do not
                        //mess up the iteration.
                        eachReverse(defQueue, function(args, i) {
                            if(args[0] === id) {
                                defQueue.splice(i, 1);
                            }
                        });

                        if (mod) {
                            //Hold on to listeners in case the
                            //module will be attempted to be reloaded
                            //using a different config.
                            if (mod.events.defined) {
                                undefEvents[id] = mod.events;
                            }

                            cleanRegistry(id);
                        }
                    };
                }

                return localRequire;
            },

            /**
             * Called to enable a module if it is still in the registry
             * awaiting enablement. A second arg, parent, the parent module,
             * is passed in for context, when this method is overridden by
             * the optimizer. Not shown here to keep code compact.
             */
            enable: function (depMap) {
                var mod = getOwn(registry, depMap.id);
                if (mod) {
                    getModule(depMap).enable();
                }
            },

            /**
             * Internal method used by environment adapters to complete a load event.
             * A load event could be a script load or just a load pass from a synchronous
             * load call.
             * @param {String} moduleName the name of the module to potentially complete.
             */
            completeLoad: function (moduleName) {
                var found, args, mod,
                    shim = getOwn(config.shim, moduleName) || {},
                    shExports = shim.exports;

                takeGlobalQueue();

                while (defQueue.length) {
                    args = defQueue.shift();
                    if (args[0] === null) {
                        args[0] = moduleName;
                        //If already found an anonymous module and bound it
                        //to this name, then this is some other anon module
                        //waiting for its completeLoad to fire.
                        if (found) {
                            break;
                        }
                        found = true;
                    } else if (args[0] === moduleName) {
                        //Found matching define call for this script!
                        found = true;
                    }

                    callGetModule(args);
                }

                //Do this after the cycle of callGetModule in case the result
                //of those calls/init calls changes the registry.
                mod = getOwn(registry, moduleName);

                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {
                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {
                        if (hasPathFallback(moduleName)) {
                            return;
                        } else {
                            return onError(makeError('nodefine',
                                             'No define call for ' + moduleName,
                                             null,
                                             [moduleName]));
                        }
                    } else {
                        //A script that does not call define(), so just simulate
                        //the call for it.
                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);
                    }
                }

                checkLoaded();
            },

            /**
             * Converts a module name to a file path. Supports cases where
             * moduleName may actually be just an URL.
             * Note that it **does not** call normalize on the moduleName,
             * it is assumed to have already been normalized. This is an
             * internal API, not a public one. Use toUrl for the public API.
             */
            nameToUrl: function (moduleName, ext, skipExt) {
                var paths, syms, i, parentModule, url,
                    parentPath, bundleId,
                    pkgMain = getOwn(config.pkgs, moduleName);

                if (pkgMain) {
                    moduleName = pkgMain;
                }

                bundleId = getOwn(bundlesMap, moduleName);

                if (bundleId) {
                    return context.nameToUrl(bundleId, ext, skipExt);
                }

                //If a colon is in the URL, it indicates a protocol is used and it is just
                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)
                //or ends with .js, then assume the user meant to use an url and not a module id.
                //The slash is important for protocol-less URLs as well as full paths.
                if (req.jsExtRegExp.test(moduleName)) {
                    //Just a plain path, not module name lookup, so just return it.
                    //Add extension if it is included. This is a bit wonky, only non-.js things pass
                    //an extension, this method probably needs to be reworked.
                    url = moduleName + (ext || '');
                } else {
                    //A module that needs to be converted to a path.
                    paths = config.paths;

                    syms = moduleName.split('/');
                    //For each module name segment, see if there is a path
                    //registered for it. Start with most specific name
                    //and work up from it.
                    for (i = syms.length; i > 0; i -= 1) {
                        parentModule = syms.slice(0, i).join('/');

                        parentPath = getOwn(paths, parentModule);
                        if (parentPath) {
                            //If an array, it means there are a few choices,
                            //Choose the one that is desired
                            if (isArray(parentPath)) {
                                parentPath = parentPath[0];
                            }
                            syms.splice(0, i, parentPath);
                            break;
                        }
                    }

                    //Join the path parts together, then figure out if baseUrl is needed.
                    url = syms.join('/');
                    url += (ext || (/^data\:|\?/.test(url) || skipExt ? '' : '.js'));
                    url = (url.charAt(0) === '/' || url.match(/^[\w\+\.\-]+:/) ? '' : config.baseUrl) + url;
                }

                return config.urlArgs ? url +
                                        ((url.indexOf('?') === -1 ? '?' : '&') +
                                         config.urlArgs) : url;
            },

            //Delegates to req.load. Broken out as a separate function to
            //allow overriding in the optimizer.
            load: function (id, url) {
                req.load(context, id, url);
            },

            /**
             * Executes a module callback function. Broken out as a separate function
             * solely to allow the build system to sequence the files in the built
             * layer in the right sequence.
             *
             * @private
             */
            execCb: function (name, callback, args, exports) {
                return callback.apply(exports, args);
            },

            /**
             * callback for script loads, used to check status of loading.
             *
             * @param {Event} evt the event from the browser for the script
             * that was loaded.
             */
            onScriptLoad: function (evt) {
                //Using currentTarget instead of target for Firefox 2.0's sake. Not
                //all old browsers will be supported, but this one was easy enough
                //to support and still makes sense.
                if (evt.type === 'load' ||
                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {
                    //Reset interactive script so a script node is not held onto for
                    //to long.
                    interactiveScript = null;

                    //Pull out the name of the module and the context.
                    var data = getScriptData(evt);
                    context.completeLoad(data.id);
                }
            },

            /**
             * Callback for script errors.
             */
            onScriptError: function (evt) {
                var data = getScriptData(evt);
                if (!hasPathFallback(data.id)) {
                    return onError(makeError('scripterror', 'Script error for: ' + data.id, evt, [data.id]));
                }
            }
        };

        context.require = context.makeRequire();
        return context;
    }

    /**
     * Main entry point.
     *
     * If the only argument to require is a string, then the module that
     * is represented by that string is fetched for the appropriate context.
     *
     * If the first argument is an array, then it will be treated as an array
     * of dependency string names to fetch. An optional function callback can
     * be specified to execute when all of those dependencies are available.
     *
     * Make a local req variable to help Caja compliance (it assumes things
     * on a require that are not standardized), and to give a short
     * name for minification/local scope use.
     */
    req = requirejs = function (deps, callback, errback, optional) {

        //Find the right context, use default
        var context, config,
            contextName = defContextName;

        // Determine if have config object in the call.
        if (!isArray(deps) && typeof deps !== 'string') {
            // deps is a config object
            config = deps;
            if (isArray(callback)) {
                // Adjust args if there are dependencies
                deps = callback;
                callback = errback;
                errback = optional;
            } else {
                deps = [];
            }
        }

        if (config && config.context) {
            contextName = config.context;
        }

        context = getOwn(contexts, contextName);
        if (!context) {
            context = contexts[contextName] = req.s.newContext(contextName);
        }

        if (config) {
            context.configure(config);
        }

        return context.require(deps, callback, errback);
    };

    /**
     * Support require.config() to make it easier to cooperate with other
     * AMD loaders on globally agreed names.
     */
    req.config = function (config) {
        return req(config);
    };

    /**
     * Execute something after the current tick
     * of the event loop. Override for other envs
     * that have a better solution than setTimeout.
     * @param  {Function} fn function to execute later.
     */
    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {
        setTimeout(fn, 4);
    } : function (fn) { fn(); };

    /**
     * Export require as a global, but only if it does not already exist.
     */
    if (!require) {
        require = req;
    }

    req.version = version;

    //Used to filter out dependencies that are already paths.
    req.jsExtRegExp = /^\/|:|\?|\.js$/;
    req.isBrowser = isBrowser;
    s = req.s = {
        contexts: contexts,
        newContext: newContext
    };

    //Create default context.
    req({});

    //Exports some context-sensitive methods on global require.
    each([
        'toUrl',
        'undef',
        'defined',
        'specified'
    ], function (prop) {
        //Reference from contexts instead of early binding to default context,
        //so that during builds, the latest instance of the default context
        //with its config gets used.
        req[prop] = function () {
            var ctx = contexts[defContextName];
            return ctx.require[prop].apply(ctx, arguments);
        };
    });

    if (isBrowser) {
        head = s.head = document.getElementsByTagName('head')[0];
        //If BASE tag is in play, using appendChild is a problem for IE6.
        //When that browser dies, this can be removed. Details in this jQuery bug:
        //http://dev.jquery.com/ticket/2709
        baseElement = document.getElementsByTagName('base')[0];
        if (baseElement) {
            head = s.head = baseElement.parentNode;
        }
    }

    /**
     * Any errors that require explicitly generates will be passed to this
     * function. Intercept/override it if you want custom error handling.
     * @param {Error} err the error object.
     */
    req.onError = defaultOnError;

    /**
     * Creates the node for the load command. Only used in browser envs.
     */
    req.createNode = function (config, moduleName, url) {
        var node = config.xhtml ?
                document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :
                document.createElement('script');
        node.type = config.scriptType || 'text/javascript';
        node.charset = 'utf-8';
        node.async = true;
        return node;
    };

    /**
     * Does the request to load a module for the browser case.
     * Make this a separate function to allow other environments
     * to override it.
     *
     * @param {Object} context the require context to find state.
     * @param {String} moduleName the name of the module.
     * @param {Object} url the URL to the module.
     */
    req.load = function (context, moduleName, url) {
        var config = (context && context.config) || {},
            node;
        if (isBrowser) {
            //In the browser so use a script tag
            node = req.createNode(config, moduleName, url);

            node.setAttribute('data-requirecontext', context.contextName);
            node.setAttribute('data-requiremodule', moduleName);

            //Set up load listener. Test attachEvent first because IE9 has
            //a subtle issue in its addEventListener and script onload firings
            //that do not match the behavior of all other browsers with
            //addEventListener support, which fire the onload event for a
            //script right after the script execution. See:
            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution
            //UNFORTUNATELY Opera implements attachEvent but does not follow the script
            //script execution mode.
            if (node.attachEvent &&
                    //Check if node.attachEvent is artificially added by custom script or
                    //natively supported by browser
                    //read https://github.com/jrburke/requirejs/issues/187
                    //if we can NOT find [native code] then it must NOT natively supported.
                    //in IE8, node.attachEvent does not have toString()
                    //Note the test for "[native code" with no closing brace, see:
                    //https://github.com/jrburke/requirejs/issues/273
                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&
                    !isOpera) {
                //Probably IE. IE (at least 6-8) do not fire
                //script onload right after executing the script, so
                //we cannot tie the anonymous define call to a name.
                //However, IE reports the script as being in 'interactive'
                //readyState at the time of the define call.
                useInteractive = true;

                node.attachEvent('onreadystatechange', context.onScriptLoad);
                //It would be great to add an error handler here to catch
                //404s in IE9+. However, onreadystatechange will fire before
                //the error handler, so that does not help. If addEventListener
                //is used, then IE will fire error before load, but we cannot
                //use that pathway given the connect.microsoft.com issue
                //mentioned above about not doing the 'script execute,
                //then fire the script load event listener before execute
                //next script' that other browsers do.
                //Best hope: IE10 fixes the issues,
                //and then destroys all installs of IE 6-9.
                //node.attachEvent('onerror', context.onScriptError);
            } else {
                node.addEventListener('load', context.onScriptLoad, false);
                node.addEventListener('error', context.onScriptError, false);
            }
            node.src = url;

            //For some cache cases in IE 6-8, the script executes before the end
            //of the appendChild execution, so to tie an anonymous define
            //call to the module name (which is stored on the node), hold on
            //to a reference to this node, but clear after the DOM insertion.
            currentlyAddingScript = node;
            if (baseElement) {
                head.insertBefore(node, baseElement);
            } else {
                head.appendChild(node);
            }
            currentlyAddingScript = null;

            return node;
        } else if (isWebWorker) {
            try {
                //In a web worker, use importScripts. This is not a very
                //efficient use of importScripts, importScripts will block until
                //its script is downloaded and evaluated. However, if web workers
                //are in play, the expectation that a build has been done so that
                //only one script needs to be loaded anyway. This may need to be
                //reevaluated if other use cases become common.
                importScripts(url);

                //Account for anonymous modules
                context.completeLoad(moduleName);
            } catch (e) {
                context.onError(makeError('importscripts',
                                'importScripts failed for ' +
                                    moduleName + ' at ' + url,
                                e,
                                [moduleName]));
            }
        }
    };

    function getInteractiveScript() {
        if (interactiveScript && interactiveScript.readyState === 'interactive') {
            return interactiveScript;
        }

        eachReverse(scripts(), function (script) {
            if (script.readyState === 'interactive') {
                return (interactiveScript = script);
            }
        });
        return interactiveScript;
    }

    //Look for a data-main script attribute, which could also adjust the baseUrl.
    if (isBrowser && !cfg.skipDataMain) {
        //Figure out baseUrl. Get it from the script tag with require.js in it.
        eachReverse(scripts(), function (script) {
            //Set the 'head' where we can append children by
            //using the script's parent.
            if (!head) {
                head = script.parentNode;
            }

            //Look for a data-main attribute to set main script for the page
            //to load. If it is there, the path to data main becomes the
            //baseUrl, if it is not already set.
            dataMain = script.getAttribute('data-main');
            if (dataMain) {
                //Preserve dataMain in case it is a path (i.e. contains '?')
                mainScript = dataMain;

                //Set final baseUrl if there is not already an explicit one.
                if (!cfg.baseUrl) {
                    //Pull off the directory of data-main for use as the
                    //baseUrl.
                    src = mainScript.split('/');
                    mainScript = src.pop();
                    subPath = src.length ? src.join('/')  + '/' : './';

                    cfg.baseUrl = subPath;
                }

                //Strip off any trailing .js since mainScript is now
                //like a module name.
                mainScript = mainScript.replace(jsSuffixRegExp, '');

                 //If mainScript is still a path, fall back to dataMain
                if (req.jsExtRegExp.test(mainScript)) {
                    mainScript = dataMain;
                }

                //Put the data-main script in the files to load.
                cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];

                return true;
            }
        });
    }

    /**
     * The function that handles definitions of modules. Differs from
     * require() in that a string for the module should be the first argument,
     * and the function to execute after dependencies are loaded should
     * return a value to define the module corresponding to the first argument's
     * name.
     */
    define = function (name, deps, callback) {
        var node, context;

        //Allow for anonymous modules
        if (typeof name !== 'string') {
            //Adjust args appropriately
            callback = deps;
            deps = name;
            name = null;
        }

        //This module may not have dependencies
        if (!isArray(deps)) {
            callback = deps;
            deps = null;
        }

        //If no name, and callback is a function, then figure out if it a
        //CommonJS thing with dependencies.
        if (!deps && isFunction(callback)) {
            deps = [];
            //Remove comments from the callback string,
            //look for require calls, and pull them into the dependencies,
            //but only if there are function args.
            if (callback.length) {
                callback
                    .toString()
                    .replace(commentRegExp, '')
                    .replace(cjsRequireRegExp, function (match, dep) {
                        deps.push(dep);
                    });

                //May be a CommonJS thing even without require calls, but still
                //could use exports, and module. Avoid doing exports and module
                //work though if it just needs require.
                //REQUIRES the function to expect the CommonJS variables in the
                //order listed below.
                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);
            }
        }

        //If in IE 6-8 and hit an anonymous define() call, do the interactive
        //work.
        if (useInteractive) {
            node = currentlyAddingScript || getInteractiveScript();
            if (node) {
                if (!name) {
                    name = node.getAttribute('data-requiremodule');
                }
                context = contexts[node.getAttribute('data-requirecontext')];
            }
        }

        //Always save off evaluating the def call until the script onload handler.
        //This allows multiple modules to be in a file without prematurely
        //tracing dependencies, and allows for anonymous module support,
        //where the module name is not known until the script onload event
        //occurs. If no context, use the global queue, and get it processed
        //in the onscript load callback.
        (context ? context.defQueue : globalDefQueue).push([name, deps, callback]);
    };

    define.amd = {
        jQuery: true
    };


    /**
     * Executes the text. Normally just uses eval, but can be modified
     * to use a better, environment-specific call. Only used for transpiling
     * loader plugins, not for plain JS modules.
     * @param {String} text the text to execute/evaluate.
     */
    req.exec = function (text) {
        /*jslint evil: true */
        return eval(text);
    };

    //Set up with config info.
    req(cfg);
}(this));

define("requirejs", function(){});

/**
 * @license AngularJS v1.4.0-build.3851+sha.ec27ce7
 * (c) 2010-2015 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, document, undefined) {

/**
 * @description
 *
 * This object provides a utility for producing rich Error messages within
 * Angular. It can be called as follows:
 *
 * var exampleMinErr = minErr('example');
 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
 *
 * The above creates an instance of minErr in the example namespace. The
 * resulting error will have a namespaced error code of example.one.  The
 * resulting error will replace {0} with the value of foo, and {1} with the
 * value of bar. The object is not restricted in the number of arguments it can
 * take.
 *
 * If fewer arguments are specified than necessary for interpolation, the extra
 * interpolation markers will be preserved in the final string.
 *
 * Since data will be parsed statically during a build step, some restrictions
 * are applied with respect to how minErr instances are created and called.
 * Instances should have names of the form namespaceMinErr for a minErr created
 * using minErr('namespace') . Error codes, namespaces and template strings
 * should all be static strings, not variables or general expressions.
 *
 * @param {string} module The namespace to use for the new minErr instance.
 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
 *   error from returned function, for cases when a particular type of error is useful.
 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
 */

function minErr(module, ErrorConstructor) {
  ErrorConstructor = ErrorConstructor || Error;
  return function() {
    var SKIP_INDEXES = 2;

    var templateArgs = arguments,
      code = templateArgs[0],
      message = '[' + (module ? module + ':' : '') + code + '] ',
      template = templateArgs[1],
      paramPrefix, i;

    message += template.replace(/\{\d+\}/g, function(match) {
      var index = +match.slice(1, -1),
        shiftedIndex = index + SKIP_INDEXES;

      if (shiftedIndex < templateArgs.length) {
        return toDebugString(templateArgs[shiftedIndex]);
      }

      return match;
    });

    message += '\nhttp://errors.angularjs.org/1.4.0-build.3851+sha.ec27ce7/' +
      (module ? module + '/' : '') + code;

    for (i = SKIP_INDEXES, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {
      message += paramPrefix + 'p' + (i - SKIP_INDEXES) + '=' +
        encodeURIComponent(toDebugString(templateArgs[i]));
    }

    return new ErrorConstructor(message);
  };
}

/* We need to tell jshint what variables are being exported */
/* global angular: true,
  msie: true,
  jqLite: true,
  jQuery: true,
  slice: true,
  splice: true,
  push: true,
  toString: true,
  ngMinErr: true,
  angularModule: true,
  uid: true,
  REGEX_STRING_REGEXP: true,
  VALIDITY_STATE_PROPERTY: true,

  lowercase: true,
  uppercase: true,
  manualLowercase: true,
  manualUppercase: true,
  nodeName_: true,
  isArrayLike: true,
  forEach: true,
  forEachSorted: true,
  reverseParams: true,
  nextUid: true,
  setHashKey: true,
  extend: true,
  toInt: true,
  inherit: true,
  noop: true,
  identity: true,
  valueFn: true,
  isUndefined: true,
  isDefined: true,
  isObject: true,
  isString: true,
  isNumber: true,
  isDate: true,
  isArray: true,
  isFunction: true,
  isRegExp: true,
  isWindow: true,
  isScope: true,
  isFile: true,
  isFormData: true,
  isBlob: true,
  isBoolean: true,
  isPromiseLike: true,
  trim: true,
  escapeForRegexp: true,
  isElement: true,
  makeMap: true,
  includes: true,
  arrayRemove: true,
  copy: true,
  shallowCopy: true,
  equals: true,
  csp: true,
  jq: true,
  concat: true,
  sliceArgs: true,
  bind: true,
  toJsonReplacer: true,
  toJson: true,
  fromJson: true,
  startingTag: true,
  tryDecodeURIComponent: true,
  parseKeyValue: true,
  toKeyValue: true,
  encodeUriSegment: true,
  encodeUriQuery: true,
  angularInit: true,
  bootstrap: true,
  getTestability: true,
  snake_case: true,
  bindJQuery: true,
  assertArg: true,
  assertArgFn: true,
  assertNotHasOwnProperty: true,
  getter: true,
  getBlockNodes: true,
  hasOwnProperty: true,
  createMap: true,

  NODE_TYPE_ELEMENT: true,
  NODE_TYPE_TEXT: true,
  NODE_TYPE_COMMENT: true,
  NODE_TYPE_DOCUMENT: true,
  NODE_TYPE_DOCUMENT_FRAGMENT: true,
*/

////////////////////////////////////

/**
 * @ngdoc module
 * @name ng
 * @module ng
 * @description
 *
 * # ng (core module)
 * The ng module is loaded by default when an AngularJS application is started. The module itself
 * contains the essential components for an AngularJS application to function. The table below
 * lists a high level breakdown of each of the services/factories, filters, directives and testing
 * components available within this core module.
 *
 * <div doc-module-components="ng"></div>
 */

var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;

// The name of a form control's ValidityState property.
// This is used so that it's possible for internal tests to create mock ValidityStates.
var VALIDITY_STATE_PROPERTY = 'validity';

/**
 * @ngdoc function
 * @name angular.lowercase
 * @module ng
 * @kind function
 *
 * @description Converts the specified string to lowercase.
 * @param {string} string String to be converted to lowercase.
 * @returns {string} Lowercased string.
 */
var lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};
var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * @ngdoc function
 * @name angular.uppercase
 * @module ng
 * @kind function
 *
 * @description Converts the specified string to uppercase.
 * @param {string} string String to be converted to uppercase.
 * @returns {string} Uppercased string.
 */
var uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};


var manualLowercase = function(s) {
  /* jshint bitwise: false */
  return isString(s)
      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})
      : s;
};
var manualUppercase = function(s) {
  /* jshint bitwise: false */
  return isString(s)
      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})
      : s;
};


// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
// with correct but slower alternatives.
if ('i' !== 'I'.toLowerCase()) {
  lowercase = manualLowercase;
  uppercase = manualUppercase;
}


var
    msie,             // holds major version number for IE, or NaN if UA is not IE.
    jqLite,           // delay binding since jQuery could be loaded after us.
    jQuery,           // delay binding
    slice             = [].slice,
    splice            = [].splice,
    push              = [].push,
    toString          = Object.prototype.toString,
    ngMinErr          = minErr('ng'),

    /** @name angular */
    angular           = window.angular || (window.angular = {}),
    angularModule,
    uid               = 0;

/**
 * documentMode is an IE-only property
 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
 */
msie = document.documentMode;


/**
 * @private
 * @param {*} obj
 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
 *                   String ...)
 */
function isArrayLike(obj) {
  if (obj == null || isWindow(obj)) {
    return false;
  }

  var length = obj.length;

  if (obj.nodeType === NODE_TYPE_ELEMENT && length) {
    return true;
  }

  return isString(obj) || isArray(obj) || length === 0 ||
         typeof length === 'number' && length > 0 && (length - 1) in obj;
}

/**
 * @ngdoc function
 * @name angular.forEach
 * @module ng
 * @kind function
 *
 * @description
 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
 * is the value of an object property or an array element, `key` is the object property key or
 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
 *
 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
 * using the `hasOwnProperty` method.
 *
 * Unlike ES262's
 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
 * Providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
 * return the value provided.
 *
   ```js
     var values = {name: 'misko', gender: 'male'};
     var log = [];
     angular.forEach(values, function(value, key) {
       this.push(key + ': ' + value);
     }, log);
     expect(log).toEqual(['name: misko', 'gender: male']);
   ```
 *
 * @param {Object|Array} obj Object to iterate over.
 * @param {Function} iterator Iterator function.
 * @param {Object=} context Object to become context (`this`) for the iterator function.
 * @returns {Object|Array} Reference to `obj`.
 */

function forEach(obj, iterator, context) {
  var key, length;
  if (obj) {
    if (isFunction(obj)) {
      for (key in obj) {
        // Need to check if hasOwnProperty exists,
        // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
        if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
          iterator.call(context, obj[key], key, obj);
        }
      }
    } else if (isArray(obj) || isArrayLike(obj)) {
      var isPrimitive = typeof obj !== 'object';
      for (key = 0, length = obj.length; key < length; key++) {
        if (isPrimitive || key in obj) {
          iterator.call(context, obj[key], key, obj);
        }
      }
    } else if (obj.forEach && obj.forEach !== forEach) {
        obj.forEach(iterator, context, obj);
    } else {
      for (key in obj) {
        if (obj.hasOwnProperty(key)) {
          iterator.call(context, obj[key], key, obj);
        }
      }
    }
  }
  return obj;
}

function forEachSorted(obj, iterator, context) {
  var keys = Object.keys(obj).sort();
  for (var i = 0; i < keys.length; i++) {
    iterator.call(context, obj[keys[i]], keys[i]);
  }
  return keys;
}


/**
 * when using forEach the params are value, key, but it is often useful to have key, value.
 * @param {function(string, *)} iteratorFn
 * @returns {function(*, string)}
 */
function reverseParams(iteratorFn) {
  return function(value, key) { iteratorFn(key, value); };
}

/**
 * A consistent way of creating unique IDs in angular.
 *
 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
 * we hit number precision issues in JavaScript.
 *
 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
 *
 * @returns {number} an unique alpha-numeric string
 */
function nextUid() {
  return ++uid;
}


/**
 * Set or clear the hashkey for an object.
 * @param obj object
 * @param h the hashkey (!truthy to delete the hashkey)
 */
function setHashKey(obj, h) {
  if (h) {
    obj.$$hashKey = h;
  } else {
    delete obj.$$hashKey;
  }
}

/**
 * @ngdoc function
 * @name angular.extend
 * @module ng
 * @kind function
 *
 * @description
 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
 * Note: Keep in mind that `angular.extend` does not support recursive merge (deep copy).
 *
 * @param {Object} dst Destination object.
 * @param {...Object} src Source object(s).
 * @returns {Object} Reference to `dst`.
 */
function extend(dst) {
  var h = dst.$$hashKey;

  for (var i = 1, ii = arguments.length; i < ii; i++) {
    var obj = arguments[i];
    if (obj) {
      var keys = Object.keys(obj);
      for (var j = 0, jj = keys.length; j < jj; j++) {
        var key = keys[j];
        dst[key] = obj[key];
      }
    }
  }

  setHashKey(dst, h);
  return dst;
}

function toInt(str) {
  return parseInt(str, 10);
}


function inherit(parent, extra) {
  return extend(Object.create(parent), extra);
}

/**
 * @ngdoc function
 * @name angular.noop
 * @module ng
 * @kind function
 *
 * @description
 * A function that performs no operations. This function can be useful when writing code in the
 * functional style.
   ```js
     function foo(callback) {
       var result = calculateResult();
       (callback || angular.noop)(result);
     }
   ```
 */
function noop() {}
noop.$inject = [];


/**
 * @ngdoc function
 * @name angular.identity
 * @module ng
 * @kind function
 *
 * @description
 * A function that returns its first argument. This function is useful when writing code in the
 * functional style.
 *
   ```js
     function transformer(transformationFn, value) {
       return (transformationFn || angular.identity)(value);
     };
   ```
  * @param {*} value to be returned.
  * @returns {*} the value passed in.
 */
function identity($) {return $;}
identity.$inject = [];


function valueFn(value) {return function() {return value;};}

/**
 * @ngdoc function
 * @name angular.isUndefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is undefined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is undefined.
 */
function isUndefined(value) {return typeof value === 'undefined';}


/**
 * @ngdoc function
 * @name angular.isDefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is defined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is defined.
 */
function isDefined(value) {return typeof value !== 'undefined';}


/**
 * @ngdoc function
 * @name angular.isObject
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
 * considered to be objects. Note that JavaScript arrays are objects.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Object` but not `null`.
 */
function isObject(value) {
  // http://jsperf.com/isobject4
  return value !== null && typeof value === 'object';
}


/**
 * @ngdoc function
 * @name angular.isString
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `String`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `String`.
 */
function isString(value) {return typeof value === 'string';}


/**
 * @ngdoc function
 * @name angular.isNumber
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Number`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Number`.
 */
function isNumber(value) {return typeof value === 'number';}


/**
 * @ngdoc function
 * @name angular.isDate
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a value is a date.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Date`.
 */
function isDate(value) {
  return toString.call(value) === '[object Date]';
}


/**
 * @ngdoc function
 * @name angular.isArray
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Array`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Array`.
 */
var isArray = Array.isArray;

/**
 * @ngdoc function
 * @name angular.isFunction
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Function`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Function`.
 */
function isFunction(value) {return typeof value === 'function';}


/**
 * Determines if a value is a regular expression object.
 *
 * @private
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `RegExp`.
 */
function isRegExp(value) {
  return toString.call(value) === '[object RegExp]';
}


/**
 * Checks if `obj` is a window object.
 *
 * @private
 * @param {*} obj Object to check
 * @returns {boolean} True if `obj` is a window obj.
 */
function isWindow(obj) {
  return obj && obj.window === obj;
}


function isScope(obj) {
  return obj && obj.$evalAsync && obj.$watch;
}


function isFile(obj) {
  return toString.call(obj) === '[object File]';
}


function isFormData(obj) {
  return toString.call(obj) === '[object FormData]';
}


function isBlob(obj) {
  return toString.call(obj) === '[object Blob]';
}


function isBoolean(value) {
  return typeof value === 'boolean';
}


function isPromiseLike(obj) {
  return obj && isFunction(obj.then);
}


var TYPED_ARRAY_REGEXP = /^\[object (Uint8(Clamped)?)|(Uint16)|(Uint32)|(Int8)|(Int16)|(Int32)|(Float(32)|(64))Array\]$/;
function isTypedArray(value) {
  return TYPED_ARRAY_REGEXP.test(toString.call(value));
}


var trim = function(value) {
  return isString(value) ? value.trim() : value;
};

// Copied from:
// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
// Prereq: s is a string.
var escapeForRegexp = function(s) {
  return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
           replace(/\x08/g, '\\x08');
};


/**
 * @ngdoc function
 * @name angular.isElement
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a DOM element (or wrapped jQuery element).
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
 */
function isElement(node) {
  return !!(node &&
    (node.nodeName  // we are a direct element
    || (node.prop && node.attr && node.find)));  // we have an on and find method part of jQuery API
}

/**
 * @param str 'key1,key2,...'
 * @returns {object} in the form of {key1:true, key2:true, ...}
 */
function makeMap(str) {
  var obj = {}, items = str.split(","), i;
  for (i = 0; i < items.length; i++) {
    obj[items[i]] = true;
  }
  return obj;
}


function nodeName_(element) {
  return lowercase(element.nodeName || (element[0] && element[0].nodeName));
}

function includes(array, obj) {
  return Array.prototype.indexOf.call(array, obj) != -1;
}

function arrayRemove(array, value) {
  var index = array.indexOf(value);
  if (index >= 0) {
    array.splice(index, 1);
  }
  return index;
}

/**
 * @ngdoc function
 * @name angular.copy
 * @module ng
 * @kind function
 *
 * @description
 * Creates a deep copy of `source`, which should be an object or an array.
 *
 * * If no destination is supplied, a copy of the object or array is created.
 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
 *   are deleted and then all elements/properties from the source are copied to it.
 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
 * * If `source` is identical to 'destination' an exception will be thrown.
 *
 * @param {*} source The source that will be used to make a copy.
 *                   Can be any type, including primitives, `null`, and `undefined`.
 * @param {(Object|Array)=} destination Destination into which the source is copied. If
 *     provided, must be of the same type as `source`.
 * @returns {*} The copy or updated `destination`, if `destination` was specified.
 *
 * @example
 <example module="copyExample">
 <file name="index.html">
 <div ng-controller="ExampleController">
 <form novalidate class="simple-form">
 Name: <input type="text" ng-model="user.name" /><br />
 E-mail: <input type="email" ng-model="user.email" /><br />
 Gender: <input type="radio" ng-model="user.gender" value="male" />male
 <input type="radio" ng-model="user.gender" value="female" />female<br />
 <button ng-click="reset()">RESET</button>
 <button ng-click="update(user)">SAVE</button>
 </form>
 <pre>form = {{user | json}}</pre>
 <pre>master = {{master | json}}</pre>
 </div>

 <script>
  angular.module('copyExample', [])
    .controller('ExampleController', ['$scope', function($scope) {
      $scope.master= {};

      $scope.update = function(user) {
        // Example with 1 argument
        $scope.master= angular.copy(user);
      };

      $scope.reset = function() {
        // Example with 2 arguments
        angular.copy($scope.master, $scope.user);
      };

      $scope.reset();
    }]);
 </script>
 </file>
 </example>
 */
function copy(source, destination, stackSource, stackDest) {
  if (isWindow(source) || isScope(source)) {
    throw ngMinErr('cpws',
      "Can't copy! Making copies of Window or Scope instances is not supported.");
  }
  if (isTypedArray(destination)) {
    throw ngMinErr('cpta',
      "Can't copy! TypedArray destination cannot be mutated.");
  }

  if (!destination) {
    destination = source;
    if (source) {
      if (isArray(source)) {
        destination = copy(source, [], stackSource, stackDest);
      } else if (isTypedArray(source)) {
        destination = new source.constructor(source);
      } else if (isDate(source)) {
        destination = new Date(source.getTime());
      } else if (isRegExp(source)) {
        destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
        destination.lastIndex = source.lastIndex;
      } else if (isObject(source)) {
        var emptyObject = Object.create(Object.getPrototypeOf(source));
        destination = copy(source, emptyObject, stackSource, stackDest);
      }
    }
  } else {
    if (source === destination) throw ngMinErr('cpi',
      "Can't copy! Source and destination are identical.");

    stackSource = stackSource || [];
    stackDest = stackDest || [];

    if (isObject(source)) {
      var index = stackSource.indexOf(source);
      if (index !== -1) return stackDest[index];

      stackSource.push(source);
      stackDest.push(destination);
    }

    var result;
    if (isArray(source)) {
      destination.length = 0;
      for (var i = 0; i < source.length; i++) {
        result = copy(source[i], null, stackSource, stackDest);
        if (isObject(source[i])) {
          stackSource.push(source[i]);
          stackDest.push(result);
        }
        destination.push(result);
      }
    } else {
      var h = destination.$$hashKey;
      if (isArray(destination)) {
        destination.length = 0;
      } else {
        forEach(destination, function(value, key) {
          delete destination[key];
        });
      }
      for (var key in source) {
        if (source.hasOwnProperty(key)) {
          result = copy(source[key], null, stackSource, stackDest);
          if (isObject(source[key])) {
            stackSource.push(source[key]);
            stackDest.push(result);
          }
          destination[key] = result;
        }
      }
      setHashKey(destination,h);
    }

  }
  return destination;
}

/**
 * Creates a shallow copy of an object, an array or a primitive.
 *
 * Assumes that there are no proto properties for objects.
 */
function shallowCopy(src, dst) {
  if (isArray(src)) {
    dst = dst || [];

    for (var i = 0, ii = src.length; i < ii; i++) {
      dst[i] = src[i];
    }
  } else if (isObject(src)) {
    dst = dst || {};

    for (var key in src) {
      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
        dst[key] = src[key];
      }
    }
  }

  return dst || src;
}


/**
 * @ngdoc function
 * @name angular.equals
 * @module ng
 * @kind function
 *
 * @description
 * Determines if two objects or two values are equivalent. Supports value types, regular
 * expressions, arrays and objects.
 *
 * Two objects or values are considered equivalent if at least one of the following is true:
 *
 * * Both objects or values pass `===` comparison.
 * * Both objects or values are of the same type and all of their properties are equal by
 *   comparing them with `angular.equals`.
 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
 * * Both values represent the same regular expression (In JavaScript,
 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
 *   representation matches).
 *
 * During a property comparison, properties of `function` type and properties with names
 * that begin with `$` are ignored.
 *
 * Scope and DOMWindow objects are being compared only by identify (`===`).
 *
 * @param {*} o1 Object or value to compare.
 * @param {*} o2 Object or value to compare.
 * @returns {boolean} True if arguments are equal.
 */
function equals(o1, o2) {
  if (o1 === o2) return true;
  if (o1 === null || o2 === null) return false;
  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
  if (t1 == t2) {
    if (t1 == 'object') {
      if (isArray(o1)) {
        if (!isArray(o2)) return false;
        if ((length = o1.length) == o2.length) {
          for (key = 0; key < length; key++) {
            if (!equals(o1[key], o2[key])) return false;
          }
          return true;
        }
      } else if (isDate(o1)) {
        if (!isDate(o2)) return false;
        return equals(o1.getTime(), o2.getTime());
      } else if (isRegExp(o1) && isRegExp(o2)) {
        return o1.toString() == o2.toString();
      } else {
        if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) || isArray(o2)) return false;
        keySet = {};
        for (key in o1) {
          if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
          if (!equals(o1[key], o2[key])) return false;
          keySet[key] = true;
        }
        for (key in o2) {
          if (!keySet.hasOwnProperty(key) &&
              key.charAt(0) !== '$' &&
              o2[key] !== undefined &&
              !isFunction(o2[key])) return false;
        }
        return true;
      }
    }
  }
  return false;
}

var csp = function() {
  if (isDefined(csp.isActive_)) return csp.isActive_;

  var active = !!(document.querySelector('[ng-csp]') ||
                  document.querySelector('[data-ng-csp]'));

  if (!active) {
    try {
      /* jshint -W031, -W054 */
      new Function('');
      /* jshint +W031, +W054 */
    } catch (e) {
      active = true;
    }
  }

  return (csp.isActive_ = active);
};

/**
 * @ngdoc directive
 * @module ng
 * @name ngJq
 *
 * @element ANY
 * @param {string=} the name of the library available under `window`
 * to be used for angular.element
 * @description
 * Use this directive to force the angular.element library.  This should be
 * used to force either jqLite by leaving ng-jq blank or setting the name of
 * the jquery variable under window (eg. jQuery).
 *
 * Since this directive is global for the angular library, it is recommended
 * that it's added to the same element as ng-app or the HTML element, but it is not mandatory.
 * It needs to be noted that only the first instance of `ng-jq` will be used and all others
 * ignored.
 *
 * @example
 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.
 ```html
 <!doctype html>
 <html ng-app ng-jq>
 ...
 ...
 </html>
 ```
 * @example
 * This example shows how to use a jQuery based library of a different name.
 * The library name must be available at the top most 'window'.
 ```html
 <!doctype html>
 <html ng-app ng-jq="jQueryLib">
 ...
 ...
 </html>
 ```
 */
var jq = function() {
  if (isDefined(jq.name_)) return jq.name_;
  var el;
  var i, ii = ngAttrPrefixes.length;
  for (i = 0; i < ii; ++i) {
    if (el = document.querySelector('[' + ngAttrPrefixes[i].replace(':', '\\:') + 'jq]')) {
      break;
    }
  }

  var name;
  if (el) {
    name = getNgAttribute(el, "jq");
  }

  return (jq.name_ = name);
};

function concat(array1, array2, index) {
  return array1.concat(slice.call(array2, index));
}

function sliceArgs(args, startIndex) {
  return slice.call(args, startIndex || 0);
}


/* jshint -W101 */
/**
 * @ngdoc function
 * @name angular.bind
 * @module ng
 * @kind function
 *
 * @description
 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
 *
 * @param {Object} self Context which `fn` should be evaluated in.
 * @param {function()} fn Function to be bound.
 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
 */
/* jshint +W101 */
function bind(self, fn) {
  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
  if (isFunction(fn) && !(fn instanceof RegExp)) {
    return curryArgs.length
      ? function() {
          return arguments.length
            ? fn.apply(self, concat(curryArgs, arguments, 0))
            : fn.apply(self, curryArgs);
        }
      : function() {
          return arguments.length
            ? fn.apply(self, arguments)
            : fn.call(self);
        };
  } else {
    // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)
    return fn;
  }
}


function toJsonReplacer(key, value) {
  var val = value;

  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
    val = undefined;
  } else if (isWindow(value)) {
    val = '$WINDOW';
  } else if (value &&  document === value) {
    val = '$DOCUMENT';
  } else if (isScope(value)) {
    val = '$SCOPE';
  }

  return val;
}


/**
 * @ngdoc function
 * @name angular.toJson
 * @module ng
 * @kind function
 *
 * @description
 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
 * stripped since angular uses this notation internally.
 *
 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
 * @param {boolean|number=} pretty If set to true, the JSON output will contain newlines and whitespace.
 *    If set to an integer, the JSON output will contain that many spaces per indentation (the default is 2).
 * @returns {string|undefined} JSON-ified string representing `obj`.
 */
function toJson(obj, pretty) {
  if (typeof obj === 'undefined') return undefined;
  if (!isNumber(pretty)) {
    pretty = pretty ? 2 : null;
  }
  return JSON.stringify(obj, toJsonReplacer, pretty);
}


/**
 * @ngdoc function
 * @name angular.fromJson
 * @module ng
 * @kind function
 *
 * @description
 * Deserializes a JSON string.
 *
 * @param {string} json JSON string to deserialize.
 * @returns {Object|Array|string|number} Deserialized JSON string.
 */
function fromJson(json) {
  return isString(json)
      ? JSON.parse(json)
      : json;
}


/**
 * @returns {string} Returns the string representation of the element.
 */
function startingTag(element) {
  element = jqLite(element).clone();
  try {
    // turns out IE does not let you set .html() on elements which
    // are not allowed to have children. So we just ignore it.
    element.empty();
  } catch (e) {}
  var elemHtml = jqLite('<div>').append(element).html();
  try {
    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :
        elemHtml.
          match(/^(<[^>]+>)/)[1].
          replace(/^<([\w\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });
  } catch (e) {
    return lowercase(elemHtml);
  }

}


/////////////////////////////////////////////////

/**
 * Tries to decode the URI component without throwing an exception.
 *
 * @private
 * @param str value potential URI component to check.
 * @returns {boolean} True if `value` can be decoded
 * with the decodeURIComponent function.
 */
function tryDecodeURIComponent(value) {
  try {
    return decodeURIComponent(value);
  } catch (e) {
    // Ignore any invalid uri component
  }
}


/**
 * Parses an escaped url query string into key-value pairs.
 * @returns {Object.<string,boolean|Array>}
 */
function parseKeyValue(/**string*/keyValue) {
  var obj = {}, key_value, key;
  forEach((keyValue || "").split('&'), function(keyValue) {
    if (keyValue) {
      key_value = keyValue.replace(/\+/g,'%20').split('=');
      key = tryDecodeURIComponent(key_value[0]);
      if (isDefined(key)) {
        var val = isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;
        if (!hasOwnProperty.call(obj, key)) {
          obj[key] = val;
        } else if (isArray(obj[key])) {
          obj[key].push(val);
        } else {
          obj[key] = [obj[key],val];
        }
      }
    }
  });
  return obj;
}

function toKeyValue(obj) {
  var parts = [];
  forEach(obj, function(value, key) {
    if (isArray(value)) {
      forEach(value, function(arrayValue) {
        parts.push(encodeUriQuery(key, true) +
                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
      });
    } else {
    parts.push(encodeUriQuery(key, true) +
               (value === true ? '' : '=' + encodeUriQuery(value, true)));
    }
  });
  return parts.length ? parts.join('&') : '';
}


/**
 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
 * segments:
 *    segment       = *pchar
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
function encodeUriSegment(val) {
  return encodeUriQuery(val, true).
             replace(/%26/gi, '&').
             replace(/%3D/gi, '=').
             replace(/%2B/gi, '+');
}


/**
 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
 * encoded per http://tools.ietf.org/html/rfc3986:
 *    query       = *( pchar / "/" / "?" )
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
function encodeUriQuery(val, pctEncodeSpaces) {
  return encodeURIComponent(val).
             replace(/%40/gi, '@').
             replace(/%3A/gi, ':').
             replace(/%24/g, '$').
             replace(/%2C/gi, ',').
             replace(/%3B/gi, ';').
             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
}

var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];

function getNgAttribute(element, ngAttr) {
  var attr, i, ii = ngAttrPrefixes.length;
  element = jqLite(element);
  for (i = 0; i < ii; ++i) {
    attr = ngAttrPrefixes[i] + ngAttr;
    if (isString(attr = element.attr(attr))) {
      return attr;
    }
  }
  return null;
}

/**
 * @ngdoc directive
 * @name ngApp
 * @module ng
 *
 * @element ANY
 * @param {angular.Module} ngApp an optional application
 *   {@link angular.module module} name to load.
 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
 *   tracking down the root of these bugs.
 *
 * @description
 *
 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
 * designates the **root element** of the application and is typically placed near the root element
 * of the page - e.g. on the `<body>` or `<html>` tags.
 *
 * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
 * found in the document will be used to define the root element to auto-bootstrap as an
 * application. To run multiple applications in an HTML document you must manually bootstrap them using
 * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.
 *
 * You can specify an **AngularJS module** to be used as the root module for the application.  This
 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
 * should contain the application code needed or have dependencies on other modules that will
 * contain the code. See {@link angular.module} for more information.
 *
 * In the example below if the `ngApp` directive were not placed on the `html` element then the
 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
 * would not be resolved to `3`.
 *
 * `ngApp` is the easiest, and most common way to bootstrap an application.
 *
 <example module="ngAppDemo">
   <file name="index.html">
   <div ng-controller="ngAppDemoController">
     I can add: {{a}} + {{b}} =  {{ a+b }}
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
     $scope.a = 1;
     $scope.b = 2;
   });
   </file>
 </example>
 *
 * Using `ngStrictDi`, you would see something like this:
 *
 <example ng-app-included="true">
   <file name="index.html">
   <div ng-app="ngAppStrictDemo" ng-strict-di>
       <div ng-controller="GoodController1">
           I can add: {{a}} + {{b}} =  {{ a+b }}

           <p>This renders because the controller does not fail to
              instantiate, by using explicit annotation style (see
              script.js for details)
           </p>
       </div>

       <div ng-controller="GoodController2">
           Name: <input ng-model="name"><br />
           Hello, {{name}}!

           <p>This renders because the controller does not fail to
              instantiate, by using explicit annotation style
              (see script.js for details)
           </p>
       </div>

       <div ng-controller="BadController">
           I can add: {{a}} + {{b}} =  {{ a+b }}

           <p>The controller could not be instantiated, due to relying
              on automatic function annotations (which are disabled in
              strict mode). As such, the content of this section is not
              interpolated, and there should be an error in your web console.
           </p>
       </div>
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppStrictDemo', [])
     // BadController will fail to instantiate, due to relying on automatic function annotation,
     // rather than an explicit annotation
     .controller('BadController', function($scope) {
       $scope.a = 1;
       $scope.b = 2;
     })
     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
     // due to using explicit annotations using the array style and $inject property, respectively.
     .controller('GoodController1', ['$scope', function($scope) {
       $scope.a = 1;
       $scope.b = 2;
     }])
     .controller('GoodController2', GoodController2);
     function GoodController2($scope) {
       $scope.name = "World";
     }
     GoodController2.$inject = ['$scope'];
   </file>
   <file name="style.css">
   div[ng-controller] {
       margin-bottom: 1em;
       -webkit-border-radius: 4px;
       border-radius: 4px;
       border: 1px solid;
       padding: .5em;
   }
   div[ng-controller^=Good] {
       border-color: #d6e9c6;
       background-color: #dff0d8;
       color: #3c763d;
   }
   div[ng-controller^=Bad] {
       border-color: #ebccd1;
       background-color: #f2dede;
       color: #a94442;
       margin-bottom: 0;
   }
   </file>
 </example>
 */
function angularInit(element, bootstrap) {
  var appElement,
      module,
      config = {};

  // The element `element` has priority over any other element
  forEach(ngAttrPrefixes, function(prefix) {
    var name = prefix + 'app';

    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
      appElement = element;
      module = element.getAttribute(name);
    }
  });
  forEach(ngAttrPrefixes, function(prefix) {
    var name = prefix + 'app';
    var candidate;

    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {
      appElement = candidate;
      module = candidate.getAttribute(name);
    }
  });
  if (appElement) {
    config.strictDi = getNgAttribute(appElement, "strict-di") !== null;
    bootstrap(appElement, module ? [module] : [], config);
  }
}

/**
 * @ngdoc function
 * @name angular.bootstrap
 * @module ng
 * @description
 * Use this function to manually start up angular application.
 *
 * See: {@link guide/bootstrap Bootstrap}
 *
 * Note that Protractor based end-to-end tests cannot use this function to bootstrap manually.
 * They must use {@link ng.directive:ngApp ngApp}.
 *
 * Angular will detect if it has been loaded into the browser more than once and only allow the
 * first loaded script to be bootstrapped and will report a warning to the browser console for
 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
 * multiple instances of Angular try to work on the DOM.
 *
 * ```html
 * <!doctype html>
 * <html>
 * <body>
 * <div ng-controller="WelcomeController">
 *   {{greeting}}
 * </div>
 *
 * <script src="angular.js"></script>
 * <script>
 *   var app = angular.module('demo', [])
 *   .controller('WelcomeController', function($scope) {
 *       $scope.greeting = 'Welcome!';
 *   });
 *   angular.bootstrap(document, ['demo']);
 * </script>
 * </body>
 * </html>
 * ```
 *
 * @param {DOMElement} element DOM element which is the root of angular application.
 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
 *     Each item in the array should be the name of a predefined module or a (DI annotated)
 *     function that will be invoked by the injector as a `config` block.
 *     See: {@link angular.module modules}
 * @param {Object=} config an object for defining configuration options for the application. The
 *     following keys are supported:
 *
 * * `strictDi` - disable automatic function annotation for the application. This is meant to
 *   assist in finding bugs which break minified code. Defaults to `false`.
 *
 * @returns {auto.$injector} Returns the newly created injector for this app.
 */
function bootstrap(element, modules, config) {
  if (!isObject(config)) config = {};
  var defaultConfig = {
    strictDi: false
  };
  config = extend(defaultConfig, config);
  var doBootstrap = function() {
    element = jqLite(element);

    if (element.injector()) {
      var tag = (element[0] === document) ? 'document' : startingTag(element);
      //Encode angle brackets to prevent input from being sanitized to empty string #8683
      throw ngMinErr(
          'btstrpd',
          "App Already Bootstrapped with this Element '{0}'",
          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));
    }

    modules = modules || [];
    modules.unshift(['$provide', function($provide) {
      $provide.value('$rootElement', element);
    }]);

    if (config.debugInfoEnabled) {
      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
      modules.push(['$compileProvider', function($compileProvider) {
        $compileProvider.debugInfoEnabled(true);
      }]);
    }

    modules.unshift('ng');
    var injector = createInjector(modules, config.strictDi);
    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',
       function bootstrapApply(scope, element, compile, injector) {
        scope.$apply(function() {
          element.data('$injector', injector);
          compile(element)(scope);
        });
      }]
    );
    return injector;
  };

  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;
  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;

  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
    config.debugInfoEnabled = true;
    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');
  }

  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
    return doBootstrap();
  }

  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
  angular.resumeBootstrap = function(extraModules) {
    forEach(extraModules, function(module) {
      modules.push(module);
    });
    return doBootstrap();
  };

  if (isFunction(angular.resumeDeferredBootstrap)) {
    angular.resumeDeferredBootstrap();
  }
}

/**
 * @ngdoc function
 * @name angular.reloadWithDebugInfo
 * @module ng
 * @description
 * Use this function to reload the current application with debug information turned on.
 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
 *
 * See {@link ng.$compileProvider#debugInfoEnabled} for more.
 */
function reloadWithDebugInfo() {
  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;
  window.location.reload();
}

/**
 * @name angular.getTestability
 * @module ng
 * @description
 * Get the testability service for the instance of Angular on the given
 * element.
 * @param {DOMElement} element DOM element which is the root of angular application.
 */
function getTestability(rootElement) {
  var injector = angular.element(rootElement).injector();
  if (!injector) {
    throw ngMinErr('test',
      'no injector found for element argument to getTestability');
  }
  return injector.get('$$testability');
}

var SNAKE_CASE_REGEXP = /[A-Z]/g;
function snake_case(name, separator) {
  separator = separator || '_';
  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
    return (pos ? separator : '') + letter.toLowerCase();
  });
}

var bindJQueryFired = false;
var skipDestroyOnNextJQueryCleanData;
function bindJQuery() {
  var originalCleanData;

  if (bindJQueryFired) {
    return;
  }

  // bind to jQuery if present;
  var jqName = jq();
  jQuery = window.jQuery; // use default jQuery.
  if (isDefined(jqName)) { // `ngJq` present
    jQuery = jqName === null ? undefined : window[jqName]; // if empty; use jqLite. if not empty, use jQuery specified by `ngJq`.
  }

  // Use jQuery if it exists with proper functionality, otherwise default to us.
  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
  // versions. It will not work for sure with jQuery <1.7, though.
  if (jQuery && jQuery.fn.on) {
    jqLite = jQuery;
    extend(jQuery.fn, {
      scope: JQLitePrototype.scope,
      isolateScope: JQLitePrototype.isolateScope,
      controller: JQLitePrototype.controller,
      injector: JQLitePrototype.injector,
      inheritedData: JQLitePrototype.inheritedData
    });

    // All nodes removed from the DOM via various jQuery APIs like .remove()
    // are passed through jQuery.cleanData. Monkey-patch this method to fire
    // the $destroy event on all removed nodes.
    originalCleanData = jQuery.cleanData;
    jQuery.cleanData = function(elems) {
      var events;
      if (!skipDestroyOnNextJQueryCleanData) {
        for (var i = 0, elem; (elem = elems[i]) != null; i++) {
          events = jQuery._data(elem, "events");
          if (events && events.$destroy) {
            jQuery(elem).triggerHandler('$destroy');
          }
        }
      } else {
        skipDestroyOnNextJQueryCleanData = false;
      }
      originalCleanData(elems);
    };
  } else {
    jqLite = JQLite;
  }

  angular.element = jqLite;

  // Prevent double-proxying.
  bindJQueryFired = true;
}

/**
 * throw error if the argument is falsy.
 */
function assertArg(arg, name, reason) {
  if (!arg) {
    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
  }
  return arg;
}

function assertArgFn(arg, name, acceptArrayAnnotation) {
  if (acceptArrayAnnotation && isArray(arg)) {
      arg = arg[arg.length - 1];
  }

  assertArg(isFunction(arg), name, 'not a function, got ' +
      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
  return arg;
}

/**
 * throw error if the name given is hasOwnProperty
 * @param  {String} name    the name to test
 * @param  {String} context the context in which the name is used, such as module or directive
 */
function assertNotHasOwnProperty(name, context) {
  if (name === 'hasOwnProperty') {
    throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);
  }
}

/**
 * Return the value accessible from the object by path. Any undefined traversals are ignored
 * @param {Object} obj starting object
 * @param {String} path path to traverse
 * @param {boolean} [bindFnToScope=true]
 * @returns {Object} value as accessible by path
 */
//TODO(misko): this function needs to be removed
function getter(obj, path, bindFnToScope) {
  if (!path) return obj;
  var keys = path.split('.');
  var key;
  var lastInstance = obj;
  var len = keys.length;

  for (var i = 0; i < len; i++) {
    key = keys[i];
    if (obj) {
      obj = (lastInstance = obj)[key];
    }
  }
  if (!bindFnToScope && isFunction(obj)) {
    return bind(lastInstance, obj);
  }
  return obj;
}

/**
 * Return the DOM siblings between the first and last node in the given array.
 * @param {Array} array like object
 * @returns {jqLite} jqLite collection containing the nodes
 */
function getBlockNodes(nodes) {
  // TODO(perf): just check if all items in `nodes` are siblings and if they are return the original
  //             collection, otherwise update the original collection.
  var node = nodes[0];
  var endNode = nodes[nodes.length - 1];
  var blockNodes = [node];

  do {
    node = node.nextSibling;
    if (!node) break;
    blockNodes.push(node);
  } while (node !== endNode);

  return jqLite(blockNodes);
}


/**
 * Creates a new object without a prototype. This object is useful for lookup without having to
 * guard against prototypically inherited properties via hasOwnProperty.
 *
 * Related micro-benchmarks:
 * - http://jsperf.com/object-create2
 * - http://jsperf.com/proto-map-lookup/2
 * - http://jsperf.com/for-in-vs-object-keys2
 *
 * @returns {Object}
 */
function createMap() {
  return Object.create(null);
}

var NODE_TYPE_ELEMENT = 1;
var NODE_TYPE_TEXT = 3;
var NODE_TYPE_COMMENT = 8;
var NODE_TYPE_DOCUMENT = 9;
var NODE_TYPE_DOCUMENT_FRAGMENT = 11;

/**
 * @ngdoc type
 * @name angular.Module
 * @module ng
 * @description
 *
 * Interface for configuring angular {@link angular.module modules}.
 */

function setupModuleLoader(window) {

  var $injectorMinErr = minErr('$injector');
  var ngMinErr = minErr('ng');

  function ensure(obj, name, factory) {
    return obj[name] || (obj[name] = factory());
  }

  var angular = ensure(window, 'angular', Object);

  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
  angular.$$minErr = angular.$$minErr || minErr;

  return ensure(angular, 'module', function() {
    /** @type {Object.<string, angular.Module>} */
    var modules = {};

    /**
     * @ngdoc function
     * @name angular.module
     * @module ng
     * @description
     *
     * The `angular.module` is a global place for creating, registering and retrieving Angular
     * modules.
     * All modules (angular core or 3rd party) that should be available to an application must be
     * registered using this mechanism.
     *
     * When passed two or more arguments, a new module is created.  If passed only one argument, an
     * existing module (the name passed as the first argument to `module`) is retrieved.
     *
     *
     * # Module
     *
     * A module is a collection of services, directives, controllers, filters, and configuration information.
     * `angular.module` is used to configure the {@link auto.$injector $injector}.
     *
     * ```js
     * // Create a new module
     * var myModule = angular.module('myModule', []);
     *
     * // register a new service
     * myModule.value('appName', 'MyCoolApp');
     *
     * // configure existing services inside initialization blocks.
     * myModule.config(['$locationProvider', function($locationProvider) {
     *   // Configure existing providers
     *   $locationProvider.hashPrefix('!');
     * }]);
     * ```
     *
     * Then you can create an injector and load your modules like this:
     *
     * ```js
     * var injector = angular.injector(['ng', 'myModule'])
     * ```
     *
     * However it's more likely that you'll just use
     * {@link ng.directive:ngApp ngApp} or
     * {@link angular.bootstrap} to simplify this process for you.
     *
     * @param {!string} name The name of the module to create or retrieve.
     * @param {!Array.<string>=} requires If specified then new module is being created. If
     *        unspecified then the module is being retrieved for further configuration.
     * @param {Function=} configFn Optional configuration function for the module. Same as
     *        {@link angular.Module#config Module#config()}.
     * @returns {module} new module with the {@link angular.Module} api.
     */
    return function module(name, requires, configFn) {
      var assertNotHasOwnProperty = function(name, context) {
        if (name === 'hasOwnProperty') {
          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
        }
      };

      assertNotHasOwnProperty(name, 'module');
      if (requires && modules.hasOwnProperty(name)) {
        modules[name] = null;
      }
      return ensure(modules, name, function() {
        if (!requires) {
          throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +
             "the module name or forgot to load it. If registering a module ensure that you " +
             "specify the dependencies as the second argument.", name);
        }

        /** @type {!Array.<Array.<*>>} */
        var invokeQueue = [];

        /** @type {!Array.<Function>} */
        var configBlocks = [];

        /** @type {!Array.<Function>} */
        var runBlocks = [];

        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);

        /** @type {angular.Module} */
        var moduleInstance = {
          // Private state
          _invokeQueue: invokeQueue,
          _configBlocks: configBlocks,
          _runBlocks: runBlocks,

          /**
           * @ngdoc property
           * @name angular.Module#requires
           * @module ng
           *
           * @description
           * Holds the list of modules which the injector will load before the current module is
           * loaded.
           */
          requires: requires,

          /**
           * @ngdoc property
           * @name angular.Module#name
           * @module ng
           *
           * @description
           * Name of the module.
           */
          name: name,


          /**
           * @ngdoc method
           * @name angular.Module#provider
           * @module ng
           * @param {string} name service name
           * @param {Function} providerType Construction function for creating new instance of the
           *                                service.
           * @description
           * See {@link auto.$provide#provider $provide.provider()}.
           */
          provider: invokeLater('$provide', 'provider'),

          /**
           * @ngdoc method
           * @name angular.Module#factory
           * @module ng
           * @param {string} name service name
           * @param {Function} providerFunction Function for creating new instance of the service.
           * @description
           * See {@link auto.$provide#factory $provide.factory()}.
           */
          factory: invokeLater('$provide', 'factory'),

          /**
           * @ngdoc method
           * @name angular.Module#service
           * @module ng
           * @param {string} name service name
           * @param {Function} constructor A constructor function that will be instantiated.
           * @description
           * See {@link auto.$provide#service $provide.service()}.
           */
          service: invokeLater('$provide', 'service'),

          /**
           * @ngdoc method
           * @name angular.Module#value
           * @module ng
           * @param {string} name service name
           * @param {*} object Service instance object.
           * @description
           * See {@link auto.$provide#value $provide.value()}.
           */
          value: invokeLater('$provide', 'value'),

          /**
           * @ngdoc method
           * @name angular.Module#constant
           * @module ng
           * @param {string} name constant name
           * @param {*} object Constant value.
           * @description
           * Because the constant are fixed, they get applied before other provide methods.
           * See {@link auto.$provide#constant $provide.constant()}.
           */
          constant: invokeLater('$provide', 'constant', 'unshift'),

          /**
           * @ngdoc method
           * @name angular.Module#animation
           * @module ng
           * @param {string} name animation name
           * @param {Function} animationFactory Factory function for creating new instance of an
           *                                    animation.
           * @description
           *
           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
           *
           *
           * Defines an animation hook that can be later used with
           * {@link ngAnimate.$animate $animate} service and directives that use this service.
           *
           * ```js
           * module.animation('.animation-name', function($inject1, $inject2) {
           *   return {
           *     eventName : function(element, done) {
           *       //code to run the animation
           *       //once complete, then run done()
           *       return function cancellationFunction(element) {
           *         //code to cancel the animation
           *       }
           *     }
           *   }
           * })
           * ```
           *
           * See {@link ng.$animateProvider#register $animateProvider.register()} and
           * {@link ngAnimate ngAnimate module} for more information.
           */
          animation: invokeLater('$animateProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#filter
           * @module ng
           * @param {string} name Filter name.
           * @param {Function} filterFactory Factory function for creating new instance of filter.
           * @description
           * See {@link ng.$filterProvider#register $filterProvider.register()}.
           */
          filter: invokeLater('$filterProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#controller
           * @module ng
           * @param {string|Object} name Controller name, or an object map of controllers where the
           *    keys are the names and the values are the constructors.
           * @param {Function} constructor Controller constructor function.
           * @description
           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
           */
          controller: invokeLater('$controllerProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#directive
           * @module ng
           * @param {string|Object} name Directive name, or an object map of directives where the
           *    keys are the names and the values are the factories.
           * @param {Function} directiveFactory Factory function for creating new instance of
           * directives.
           * @description
           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
           */
          directive: invokeLater('$compileProvider', 'directive'),

          /**
           * @ngdoc method
           * @name angular.Module#config
           * @module ng
           * @param {Function} configFn Execute this function on module load. Useful for service
           *    configuration.
           * @description
           * Use this method to register work which needs to be performed on module loading.
           * For more about how to configure services, see
           * {@link providers#provider-recipe Provider Recipe}.
           */
          config: config,

          /**
           * @ngdoc method
           * @name angular.Module#run
           * @module ng
           * @param {Function} initializationFn Execute this function after injector creation.
           *    Useful for application initialization.
           * @description
           * Use this method to register work which should be performed when the injector is done
           * loading all modules.
           */
          run: function(block) {
            runBlocks.push(block);
            return this;
          }
        };

        if (configFn) {
          config(configFn);
        }

        return moduleInstance;

        /**
         * @param {string} provider
         * @param {string} method
         * @param {String=} insertMethod
         * @returns {angular.Module}
         */
        function invokeLater(provider, method, insertMethod, queue) {
          if (!queue) queue = invokeQueue;
          return function() {
            queue[insertMethod || 'push']([provider, method, arguments]);
            return moduleInstance;
          };
        }
      });
    };
  });

}

/* global: toDebugString: true */

function serializeObject(obj) {
  var seen = [];

  return JSON.stringify(obj, function(key, val) {
    val = toJsonReplacer(key, val);
    if (isObject(val)) {

      if (seen.indexOf(val) >= 0) return '<<already seen>>';

      seen.push(val);
    }
    return val;
  });
}

function toDebugString(obj) {
  if (typeof obj === 'function') {
    return obj.toString().replace(/ \{[\s\S]*$/, '');
  } else if (typeof obj === 'undefined') {
    return 'undefined';
  } else if (typeof obj !== 'string') {
    return serializeObject(obj);
  }
  return obj;
}

/* global angularModule: true,
  version: true,

  $LocaleProvider,
  $CompileProvider,

  htmlAnchorDirective,
  inputDirective,
  inputDirective,
  formDirective,
  scriptDirective,
  selectDirective,
  styleDirective,
  optionDirective,
  ngBindDirective,
  ngBindHtmlDirective,
  ngBindTemplateDirective,
  ngClassDirective,
  ngClassEvenDirective,
  ngClassOddDirective,
  ngCspDirective,
  ngCloakDirective,
  ngControllerDirective,
  ngFormDirective,
  ngHideDirective,
  ngIfDirective,
  ngIncludeDirective,
  ngIncludeFillContentDirective,
  ngInitDirective,
  ngNonBindableDirective,
  ngPluralizeDirective,
  ngRepeatDirective,
  ngShowDirective,
  ngStyleDirective,
  ngSwitchDirective,
  ngSwitchWhenDirective,
  ngSwitchDefaultDirective,
  ngOptionsDirective,
  ngTranscludeDirective,
  ngModelDirective,
  ngListDirective,
  ngChangeDirective,
  patternDirective,
  patternDirective,
  requiredDirective,
  requiredDirective,
  minlengthDirective,
  minlengthDirective,
  maxlengthDirective,
  maxlengthDirective,
  ngValueDirective,
  ngModelOptionsDirective,
  ngAttributeAliasDirectives,
  ngEventDirectives,

  $AnchorScrollProvider,
  $AnimateProvider,
  $BrowserProvider,
  $CacheFactoryProvider,
  $ControllerProvider,
  $DocumentProvider,
  $ExceptionHandlerProvider,
  $FilterProvider,
  $InterpolateProvider,
  $IntervalProvider,
  $HttpProvider,
  $HttpBackendProvider,
  $LocationProvider,
  $LogProvider,
  $ParseProvider,
  $RootScopeProvider,
  $QProvider,
  $$QProvider,
  $$SanitizeUriProvider,
  $SceProvider,
  $SceDelegateProvider,
  $SnifferProvider,
  $TemplateCacheProvider,
  $TemplateRequestProvider,
  $$TestabilityProvider,
  $TimeoutProvider,
  $$RAFProvider,
  $$AsyncCallbackProvider,
  $WindowProvider,
  $$jqLiteProvider
*/


/**
 * @ngdoc object
 * @name angular.version
 * @module ng
 * @description
 * An object that contains information about the current AngularJS version. This object has the
 * following properties:
 *
 * - `full` – `{string}` – Full version string, such as "0.9.18".
 * - `major` – `{number}` – Major version number, such as "0".
 * - `minor` – `{number}` – Minor version number, such as "9".
 * - `dot` – `{number}` – Dot version number, such as "18".
 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
 */
var version = {
  full: '1.4.0-build.3851+sha.ec27ce7',    // all of these placeholder strings will be replaced by grunt's
  major: 1,    // package task
  minor: 4,
  dot: 0,
  codeName: 'snapshot'
};


function publishExternalAPI(angular) {
  extend(angular, {
    'bootstrap': bootstrap,
    'copy': copy,
    'extend': extend,
    'equals': equals,
    'element': jqLite,
    'forEach': forEach,
    'injector': createInjector,
    'noop': noop,
    'bind': bind,
    'toJson': toJson,
    'fromJson': fromJson,
    'identity': identity,
    'isUndefined': isUndefined,
    'isDefined': isDefined,
    'isString': isString,
    'isFunction': isFunction,
    'isObject': isObject,
    'isNumber': isNumber,
    'isElement': isElement,
    'isArray': isArray,
    'version': version,
    'isDate': isDate,
    'lowercase': lowercase,
    'uppercase': uppercase,
    'callbacks': {counter: 0},
    'getTestability': getTestability,
    '$$minErr': minErr,
    '$$csp': csp,
    'reloadWithDebugInfo': reloadWithDebugInfo
  });

  angularModule = setupModuleLoader(window);
  try {
    angularModule('ngLocale');
  } catch (e) {
    angularModule('ngLocale', []).provider('$locale', $LocaleProvider);
  }

  angularModule('ng', ['ngLocale'], ['$provide',
    function ngModule($provide) {
      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
      $provide.provider({
        $$sanitizeUri: $$SanitizeUriProvider
      });
      $provide.provider('$compile', $CompileProvider).
        directive({
            a: htmlAnchorDirective,
            input: inputDirective,
            textarea: inputDirective,
            form: formDirective,
            script: scriptDirective,
            select: selectDirective,
            style: styleDirective,
            option: optionDirective,
            ngBind: ngBindDirective,
            ngBindHtml: ngBindHtmlDirective,
            ngBindTemplate: ngBindTemplateDirective,
            ngClass: ngClassDirective,
            ngClassEven: ngClassEvenDirective,
            ngClassOdd: ngClassOddDirective,
            ngCloak: ngCloakDirective,
            ngController: ngControllerDirective,
            ngForm: ngFormDirective,
            ngHide: ngHideDirective,
            ngIf: ngIfDirective,
            ngInclude: ngIncludeDirective,
            ngInit: ngInitDirective,
            ngNonBindable: ngNonBindableDirective,
            ngPluralize: ngPluralizeDirective,
            ngRepeat: ngRepeatDirective,
            ngShow: ngShowDirective,
            ngStyle: ngStyleDirective,
            ngSwitch: ngSwitchDirective,
            ngSwitchWhen: ngSwitchWhenDirective,
            ngSwitchDefault: ngSwitchDefaultDirective,
            ngOptions: ngOptionsDirective,
            ngTransclude: ngTranscludeDirective,
            ngModel: ngModelDirective,
            ngList: ngListDirective,
            ngChange: ngChangeDirective,
            pattern: patternDirective,
            ngPattern: patternDirective,
            required: requiredDirective,
            ngRequired: requiredDirective,
            minlength: minlengthDirective,
            ngMinlength: minlengthDirective,
            maxlength: maxlengthDirective,
            ngMaxlength: maxlengthDirective,
            ngValue: ngValueDirective,
            ngModelOptions: ngModelOptionsDirective
        }).
        directive({
          ngInclude: ngIncludeFillContentDirective
        }).
        directive(ngAttributeAliasDirectives).
        directive(ngEventDirectives);
      $provide.provider({
        $anchorScroll: $AnchorScrollProvider,
        $animate: $AnimateProvider,
        $browser: $BrowserProvider,
        $cacheFactory: $CacheFactoryProvider,
        $controller: $ControllerProvider,
        $document: $DocumentProvider,
        $exceptionHandler: $ExceptionHandlerProvider,
        $filter: $FilterProvider,
        $interpolate: $InterpolateProvider,
        $interval: $IntervalProvider,
        $http: $HttpProvider,
        $httpBackend: $HttpBackendProvider,
        $location: $LocationProvider,
        $log: $LogProvider,
        $parse: $ParseProvider,
        $rootScope: $RootScopeProvider,
        $q: $QProvider,
        $$q: $$QProvider,
        $sce: $SceProvider,
        $sceDelegate: $SceDelegateProvider,
        $sniffer: $SnifferProvider,
        $templateCache: $TemplateCacheProvider,
        $templateRequest: $TemplateRequestProvider,
        $$testability: $$TestabilityProvider,
        $timeout: $TimeoutProvider,
        $window: $WindowProvider,
        $$rAF: $$RAFProvider,
        $$asyncCallback: $$AsyncCallbackProvider,
        $$jqLite: $$jqLiteProvider
      });
    }
  ]);
}

/* global JQLitePrototype: true,
  addEventListenerFn: true,
  removeEventListenerFn: true,
  BOOLEAN_ATTR: true,
  ALIASED_ATTR: true,
*/

//////////////////////////////////
//JQLite
//////////////////////////////////

/**
 * @ngdoc function
 * @name angular.element
 * @module ng
 * @kind function
 *
 * @description
 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
 *
 * If jQuery is available, `angular.element` is an alias for the
 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."
 *
 * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows
 * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most
 * commonly needed functionality with the goal of having a very small footprint.</div>
 *
 * To use jQuery, simply load it before `DOMContentLoaded` event fired.
 *
 * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or
 * jqLite; they are never raw DOM references.</div>
 *
 * ## Angular's jqLite
 * jqLite provides only the following jQuery methods:
 *
 * - [`addClass()`](http://api.jquery.com/addClass/)
 * - [`after()`](http://api.jquery.com/after/)
 * - [`append()`](http://api.jquery.com/append/)
 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
 * - [`clone()`](http://api.jquery.com/clone/)
 * - [`contents()`](http://api.jquery.com/contents/)
 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`
 * - [`data()`](http://api.jquery.com/data/)
 * - [`detach()`](http://api.jquery.com/detach/)
 * - [`empty()`](http://api.jquery.com/empty/)
 * - [`eq()`](http://api.jquery.com/eq/)
 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
 * - [`hasClass()`](http://api.jquery.com/hasClass/)
 * - [`html()`](http://api.jquery.com/html/)
 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces or selectors
 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
 * - [`prepend()`](http://api.jquery.com/prepend/)
 * - [`prop()`](http://api.jquery.com/prop/)
 * - [`ready()`](http://api.jquery.com/ready/)
 * - [`remove()`](http://api.jquery.com/remove/)
 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
 * - [`removeClass()`](http://api.jquery.com/removeClass/)
 * - [`removeData()`](http://api.jquery.com/removeData/)
 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
 * - [`text()`](http://api.jquery.com/text/)
 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)
 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.
 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces
 * - [`val()`](http://api.jquery.com/val/)
 * - [`wrap()`](http://api.jquery.com/wrap/)
 *
 * ## jQuery/jqLite Extras
 * Angular also provides the following additional methods and events to both jQuery and jqLite:
 *
 * ### Events
 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
 *    element before it is removed.
 *
 * ### Methods
 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
 *   `'ngModel'`).
 * - `injector()` - retrieves the injector of the current element or its parent.
 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
 *   be enabled.
 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
 *   parent element is reached.
 *
 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
 * @returns {Object} jQuery object.
 */

JQLite.expando = 'ng339';

var jqCache = JQLite.cache = {},
    jqId = 1,
    addEventListenerFn = function(element, type, fn) {
      element.addEventListener(type, fn, false);
    },
    removeEventListenerFn = function(element, type, fn) {
      element.removeEventListener(type, fn, false);
    };

/*
 * !!! This is an undocumented "private" function !!!
 */
JQLite._data = function(node) {
  //jQuery always returns an object on cache miss
  return this.cache[node[this.expando]] || {};
};

function jqNextId() { return ++jqId; }


var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
var MOZ_HACK_REGEXP = /^moz([A-Z])/;
var MOUSE_EVENT_MAP= { mouseleave: "mouseout", mouseenter: "mouseover"};
var jqLiteMinErr = minErr('jqLite');

/**
 * Converts snake_case to camelCase.
 * Also there is special case for Moz prefix starting with upper case letter.
 * @param name Name to normalize
 */
function camelCase(name) {
  return name.
    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
      return offset ? letter.toUpperCase() : letter;
    }).
    replace(MOZ_HACK_REGEXP, 'Moz$1');
}

var SINGLE_TAG_REGEXP = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
var HTML_REGEXP = /<|&#?\w+;/;
var TAG_NAME_REGEXP = /<([\w:]+)/;
var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;

var wrapMap = {
  'option': [1, '<select multiple="multiple">', '</select>'],

  'thead': [1, '<table>', '</table>'],
  'col': [2, '<table><colgroup>', '</colgroup></table>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],
  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],
  '_default': [0, "", ""]
};

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function jqLiteIsTextNode(html) {
  return !HTML_REGEXP.test(html);
}

function jqLiteAcceptsData(node) {
  // The window object can accept data but has no nodeType
  // Otherwise we are only interested in elements (1) and documents (9)
  var nodeType = node.nodeType;
  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
}

function jqLiteBuildFragment(html, context) {
  var tmp, tag, wrap,
      fragment = context.createDocumentFragment(),
      nodes = [], i;

  if (jqLiteIsTextNode(html)) {
    // Convert non-html into a text node
    nodes.push(context.createTextNode(html));
  } else {
    // Convert html into DOM nodes
    tmp = tmp || fragment.appendChild(context.createElement("div"));
    tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();
    wrap = wrapMap[tag] || wrapMap._default;
    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];

    // Descend through wrappers to the right content
    i = wrap[0];
    while (i--) {
      tmp = tmp.lastChild;
    }

    nodes = concat(nodes, tmp.childNodes);

    tmp = fragment.firstChild;
    tmp.textContent = "";
  }

  // Remove wrapper from fragment
  fragment.textContent = "";
  fragment.innerHTML = ""; // Clear inner HTML
  forEach(nodes, function(node) {
    fragment.appendChild(node);
  });

  return fragment;
}

function jqLiteParseHTML(html, context) {
  context = context || document;
  var parsed;

  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {
    return [context.createElement(parsed[1])];
  }

  if ((parsed = jqLiteBuildFragment(html, context))) {
    return parsed.childNodes;
  }

  return [];
}

/////////////////////////////////////////////
function JQLite(element) {
  if (element instanceof JQLite) {
    return element;
  }

  var argIsString;

  if (isString(element)) {
    element = trim(element);
    argIsString = true;
  }
  if (!(this instanceof JQLite)) {
    if (argIsString && element.charAt(0) != '<') {
      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
    }
    return new JQLite(element);
  }

  if (argIsString) {
    jqLiteAddNodes(this, jqLiteParseHTML(element));
  } else {
    jqLiteAddNodes(this, element);
  }
}

function jqLiteClone(element) {
  return element.cloneNode(true);
}

function jqLiteDealoc(element, onlyDescendants) {
  if (!onlyDescendants) jqLiteRemoveData(element);

  if (element.querySelectorAll) {
    var descendants = element.querySelectorAll('*');
    for (var i = 0, l = descendants.length; i < l; i++) {
      jqLiteRemoveData(descendants[i]);
    }
  }
}

function jqLiteOff(element, type, fn, unsupported) {
  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');

  var expandoStore = jqLiteExpandoStore(element);
  var events = expandoStore && expandoStore.events;
  var handle = expandoStore && expandoStore.handle;

  if (!handle) return; //no listeners registered

  if (!type) {
    for (type in events) {
      if (type !== '$destroy') {
        removeEventListenerFn(element, type, handle);
      }
      delete events[type];
    }
  } else {
    forEach(type.split(' '), function(type) {
      if (isDefined(fn)) {
        var listenerFns = events[type];
        arrayRemove(listenerFns || [], fn);
        if (listenerFns && listenerFns.length > 0) {
          return;
        }
      }

      removeEventListenerFn(element, type, handle);
      delete events[type];
    });
  }
}

function jqLiteRemoveData(element, name) {
  var expandoId = element.ng339;
  var expandoStore = expandoId && jqCache[expandoId];

  if (expandoStore) {
    if (name) {
      delete expandoStore.data[name];
      return;
    }

    if (expandoStore.handle) {
      if (expandoStore.events.$destroy) {
        expandoStore.handle({}, '$destroy');
      }
      jqLiteOff(element);
    }
    delete jqCache[expandoId];
    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it
  }
}


function jqLiteExpandoStore(element, createIfNecessary) {
  var expandoId = element.ng339,
      expandoStore = expandoId && jqCache[expandoId];

  if (createIfNecessary && !expandoStore) {
    element.ng339 = expandoId = jqNextId();
    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};
  }

  return expandoStore;
}


function jqLiteData(element, key, value) {
  if (jqLiteAcceptsData(element)) {

    var isSimpleSetter = isDefined(value);
    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);
    var massGetter = !key;
    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);
    var data = expandoStore && expandoStore.data;

    if (isSimpleSetter) { // data('key', value)
      data[key] = value;
    } else {
      if (massGetter) {  // data()
        return data;
      } else {
        if (isSimpleGetter) { // data('key')
          // don't force creation of expandoStore if it doesn't exist yet
          return data && data[key];
        } else { // mass-setter: data({key1: val1, key2: val2})
          extend(data, key);
        }
      }
    }
  }
}

function jqLiteHasClass(element, selector) {
  if (!element.getAttribute) return false;
  return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").
      indexOf(" " + selector + " ") > -1);
}

function jqLiteRemoveClass(element, cssClasses) {
  if (cssClasses && element.setAttribute) {
    forEach(cssClasses.split(' '), function(cssClass) {
      element.setAttribute('class', trim(
          (" " + (element.getAttribute('class') || '') + " ")
          .replace(/[\n\t]/g, " ")
          .replace(" " + trim(cssClass) + " ", " "))
      );
    });
  }
}

function jqLiteAddClass(element, cssClasses) {
  if (cssClasses && element.setAttribute) {
    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')
                            .replace(/[\n\t]/g, " ");

    forEach(cssClasses.split(' '), function(cssClass) {
      cssClass = trim(cssClass);
      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
        existingClasses += cssClass + ' ';
      }
    });

    element.setAttribute('class', trim(existingClasses));
  }
}


function jqLiteAddNodes(root, elements) {
  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.

  if (elements) {

    // if a Node (the most common case)
    if (elements.nodeType) {
      root[root.length++] = elements;
    } else {
      var length = elements.length;

      // if an Array or NodeList and not a Window
      if (typeof length === 'number' && elements.window !== elements) {
        if (length) {
          for (var i = 0; i < length; i++) {
            root[root.length++] = elements[i];
          }
        }
      } else {
        root[root.length++] = elements;
      }
    }
  }
}


function jqLiteController(element, name) {
  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
}

function jqLiteInheritedData(element, name, value) {
  // if element is the document object work with the html element instead
  // this makes $(document).scope() possible
  if (element.nodeType == NODE_TYPE_DOCUMENT) {
    element = element.documentElement;
  }
  var names = isArray(name) ? name : [name];

  while (element) {
    for (var i = 0, ii = names.length; i < ii; i++) {
      if ((value = jqLite.data(element, names[i])) !== undefined) return value;
    }

    // If dealing with a document fragment node with a host element, and no parent, use the host
    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
    // to lookup parent controllers.
    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);
  }
}

function jqLiteEmpty(element) {
  jqLiteDealoc(element, true);
  while (element.firstChild) {
    element.removeChild(element.firstChild);
  }
}

function jqLiteRemove(element, keepData) {
  if (!keepData) jqLiteDealoc(element);
  var parent = element.parentNode;
  if (parent) parent.removeChild(element);
}


function jqLiteDocumentLoaded(action, win) {
  win = win || window;
  if (win.document.readyState === 'complete') {
    // Force the action to be run async for consistent behaviour
    // from the action's point of view
    // i.e. it will definitely not be in a $apply
    win.setTimeout(action);
  } else {
    // No need to unbind this handler as load is only ever called once
    jqLite(win).on('load', action);
  }
}

//////////////////////////////////////////
// Functions which are declared directly.
//////////////////////////////////////////
var JQLitePrototype = JQLite.prototype = {
  ready: function(fn) {
    var fired = false;

    function trigger() {
      if (fired) return;
      fired = true;
      fn();
    }

    // check if document is already loaded
    if (document.readyState === 'complete') {
      setTimeout(trigger);
    } else {
      this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9
      // we can not use jqLite since we are not done loading and jQuery could be loaded later.
      // jshint -W064
      JQLite(window).on('load', trigger); // fallback to window.onload for others
      // jshint +W064
    }
  },
  toString: function() {
    var value = [];
    forEach(this, function(e) { value.push('' + e);});
    return '[' + value.join(', ') + ']';
  },

  eq: function(index) {
      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);
  },

  length: 0,
  push: push,
  sort: [].sort,
  splice: [].splice
};

//////////////////////////////////////////
// Functions iterating getter/setters.
// these functions return self on setter and
// value on get.
//////////////////////////////////////////
var BOOLEAN_ATTR = {};
forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {
  BOOLEAN_ATTR[lowercase(value)] = value;
});
var BOOLEAN_ELEMENTS = {};
forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {
  BOOLEAN_ELEMENTS[value] = true;
});
var ALIASED_ATTR = {
  'ngMinlength': 'minlength',
  'ngMaxlength': 'maxlength',
  'ngMin': 'min',
  'ngMax': 'max',
  'ngPattern': 'pattern'
};

function getBooleanAttrName(element, name) {
  // check dom last since we will most likely fail on name
  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];

  // booleanAttr is here twice to minimize DOM access
  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
}

function getAliasedAttrName(element, name) {
  var nodeName = element.nodeName;
  return (nodeName === 'INPUT' || nodeName === 'TEXTAREA') && ALIASED_ATTR[name];
}

forEach({
  data: jqLiteData,
  removeData: jqLiteRemoveData
}, function(fn, name) {
  JQLite[name] = fn;
});

forEach({
  data: jqLiteData,
  inheritedData: jqLiteInheritedData,

  scope: function(element) {
    // Can't use jqLiteData here directly so we stay compatible with jQuery!
    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
  },

  isolateScope: function(element) {
    // Can't use jqLiteData here directly so we stay compatible with jQuery!
    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
  },

  controller: jqLiteController,

  injector: function(element) {
    return jqLiteInheritedData(element, '$injector');
  },

  removeAttr: function(element, name) {
    element.removeAttribute(name);
  },

  hasClass: jqLiteHasClass,

  css: function(element, name, value) {
    name = camelCase(name);

    if (isDefined(value)) {
      element.style[name] = value;
    } else {
      return element.style[name];
    }
  },

  attr: function(element, name, value) {
    var lowercasedName = lowercase(name);
    if (BOOLEAN_ATTR[lowercasedName]) {
      if (isDefined(value)) {
        if (!!value) {
          element[name] = true;
          element.setAttribute(name, lowercasedName);
        } else {
          element[name] = false;
          element.removeAttribute(lowercasedName);
        }
      } else {
        return (element[name] ||
                 (element.attributes.getNamedItem(name) || noop).specified)
               ? lowercasedName
               : undefined;
      }
    } else if (isDefined(value)) {
      element.setAttribute(name, value);
    } else if (element.getAttribute) {
      // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
      // some elements (e.g. Document) don't have get attribute, so return undefined
      var ret = element.getAttribute(name, 2);
      // normalize non-existing attributes to undefined (as jQuery)
      return ret === null ? undefined : ret;
    }
  },

  prop: function(element, name, value) {
    if (isDefined(value)) {
      element[name] = value;
    } else {
      return element[name];
    }
  },

  text: (function() {
    getText.$dv = '';
    return getText;

    function getText(element, value) {
      if (isUndefined(value)) {
        var nodeType = element.nodeType;
        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';
      }
      element.textContent = value;
    }
  })(),

  val: function(element, value) {
    if (isUndefined(value)) {
      if (element.multiple && nodeName_(element) === 'select') {
        var result = [];
        forEach(element.options, function(option) {
          if (option.selected) {
            result.push(option.value || option.text);
          }
        });
        return result.length === 0 ? null : result;
      }
      return element.value;
    }
    element.value = value;
  },

  html: function(element, value) {
    if (isUndefined(value)) {
      return element.innerHTML;
    }
    jqLiteDealoc(element, true);
    element.innerHTML = value;
  },

  empty: jqLiteEmpty
}, function(fn, name) {
  /**
   * Properties: writes return selection, reads return first value
   */
  JQLite.prototype[name] = function(arg1, arg2) {
    var i, key;
    var nodeCount = this.length;

    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
    // in a way that survives minification.
    // jqLiteEmpty takes no arguments but is a setter.
    if (fn !== jqLiteEmpty &&
        (((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2) === undefined)) {
      if (isObject(arg1)) {

        // we are a write, but the object properties are the key/values
        for (i = 0; i < nodeCount; i++) {
          if (fn === jqLiteData) {
            // data() takes the whole object in jQuery
            fn(this[i], arg1);
          } else {
            for (key in arg1) {
              fn(this[i], key, arg1[key]);
            }
          }
        }
        // return self for chaining
        return this;
      } else {
        // we are a read, so read the first child.
        // TODO: do we still need this?
        var value = fn.$dv;
        // Only if we have $dv do we iterate over all, otherwise it is just the first element.
        var jj = (value === undefined) ? Math.min(nodeCount, 1) : nodeCount;
        for (var j = 0; j < jj; j++) {
          var nodeValue = fn(this[j], arg1, arg2);
          value = value ? value + nodeValue : nodeValue;
        }
        return value;
      }
    } else {
      // we are a write, so apply to all children
      for (i = 0; i < nodeCount; i++) {
        fn(this[i], arg1, arg2);
      }
      // return self for chaining
      return this;
    }
  };
});

function createEventHandler(element, events) {
  var eventHandler = function(event, type) {
    // jQuery specific api
    event.isDefaultPrevented = function() {
      return event.defaultPrevented;
    };

    var eventFns = events[type || event.type];
    var eventFnsLength = eventFns ? eventFns.length : 0;

    if (!eventFnsLength) return;

    if (isUndefined(event.immediatePropagationStopped)) {
      var originalStopImmediatePropagation = event.stopImmediatePropagation;
      event.stopImmediatePropagation = function() {
        event.immediatePropagationStopped = true;

        if (event.stopPropagation) {
          event.stopPropagation();
        }

        if (originalStopImmediatePropagation) {
          originalStopImmediatePropagation.call(event);
        }
      };
    }

    event.isImmediatePropagationStopped = function() {
      return event.immediatePropagationStopped === true;
    };

    // Copy event handlers in case event handlers array is modified during execution.
    if ((eventFnsLength > 1)) {
      eventFns = shallowCopy(eventFns);
    }

    for (var i = 0; i < eventFnsLength; i++) {
      if (!event.isImmediatePropagationStopped()) {
        eventFns[i].call(element, event);
      }
    }
  };

  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
  //       events on `element`
  eventHandler.elem = element;
  return eventHandler;
}

//////////////////////////////////////////
// Functions iterating traversal.
// These functions chain results into a single
// selector.
//////////////////////////////////////////
forEach({
  removeData: jqLiteRemoveData,

  on: function jqLiteOn(element, type, fn, unsupported) {
    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');

    // Do not add event handlers to non-elements because they will not be cleaned up.
    if (!jqLiteAcceptsData(element)) {
      return;
    }

    var expandoStore = jqLiteExpandoStore(element, true);
    var events = expandoStore.events;
    var handle = expandoStore.handle;

    if (!handle) {
      handle = expandoStore.handle = createEventHandler(element, events);
    }

    // http://jsperf.com/string-indexof-vs-split
    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];
    var i = types.length;

    while (i--) {
      type = types[i];
      var eventFns = events[type];

      if (!eventFns) {
        events[type] = [];

        if (type === 'mouseenter' || type === 'mouseleave') {
          // Refer to jQuery's implementation of mouseenter & mouseleave
          // Read about mouseenter and mouseleave:
          // http://www.quirksmode.org/js/events_mouse.html#link8

          jqLiteOn(element, MOUSE_EVENT_MAP[type], function(event) {
            var target = this, related = event.relatedTarget;
            // For mousenter/leave call the handler if related is outside the target.
            // NB: No relatedTarget if the mouse left/entered the browser window
            if (!related || (related !== target && !target.contains(related))) {
              handle(event, type);
            }
          });

        } else {
          if (type !== '$destroy') {
            addEventListenerFn(element, type, handle);
          }
        }
        eventFns = events[type];
      }
      eventFns.push(fn);
    }
  },

  off: jqLiteOff,

  one: function(element, type, fn) {
    element = jqLite(element);

    //add the listener twice so that when it is called
    //you can remove the original function and still be
    //able to call element.off(ev, fn) normally
    element.on(type, function onFn() {
      element.off(type, fn);
      element.off(type, onFn);
    });
    element.on(type, fn);
  },

  replaceWith: function(element, replaceNode) {
    var index, parent = element.parentNode;
    jqLiteDealoc(element);
    forEach(new JQLite(replaceNode), function(node) {
      if (index) {
        parent.insertBefore(node, index.nextSibling);
      } else {
        parent.replaceChild(node, element);
      }
      index = node;
    });
  },

  children: function(element) {
    var children = [];
    forEach(element.childNodes, function(element) {
      if (element.nodeType === NODE_TYPE_ELEMENT) {
        children.push(element);
      }
    });
    return children;
  },

  contents: function(element) {
    return element.contentDocument || element.childNodes || [];
  },

  append: function(element, node) {
    var nodeType = element.nodeType;
    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;

    node = new JQLite(node);

    for (var i = 0, ii = node.length; i < ii; i++) {
      var child = node[i];
      element.appendChild(child);
    }
  },

  prepend: function(element, node) {
    if (element.nodeType === NODE_TYPE_ELEMENT) {
      var index = element.firstChild;
      forEach(new JQLite(node), function(child) {
        element.insertBefore(child, index);
      });
    }
  },

  wrap: function(element, wrapNode) {
    wrapNode = jqLite(wrapNode).eq(0).clone()[0];
    var parent = element.parentNode;
    if (parent) {
      parent.replaceChild(wrapNode, element);
    }
    wrapNode.appendChild(element);
  },

  remove: jqLiteRemove,

  detach: function(element) {
    jqLiteRemove(element, true);
  },

  after: function(element, newElement) {
    var index = element, parent = element.parentNode;
    newElement = new JQLite(newElement);

    for (var i = 0, ii = newElement.length; i < ii; i++) {
      var node = newElement[i];
      parent.insertBefore(node, index.nextSibling);
      index = node;
    }
  },

  addClass: jqLiteAddClass,
  removeClass: jqLiteRemoveClass,

  toggleClass: function(element, selector, condition) {
    if (selector) {
      forEach(selector.split(' '), function(className) {
        var classCondition = condition;
        if (isUndefined(classCondition)) {
          classCondition = !jqLiteHasClass(element, className);
        }
        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
      });
    }
  },

  parent: function(element) {
    var parent = element.parentNode;
    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
  },

  next: function(element) {
    return element.nextElementSibling;
  },

  find: function(element, selector) {
    if (element.getElementsByTagName) {
      return element.getElementsByTagName(selector);
    } else {
      return [];
    }
  },

  clone: jqLiteClone,

  triggerHandler: function(element, event, extraParameters) {

    var dummyEvent, eventFnsCopy, handlerArgs;
    var eventName = event.type || event;
    var expandoStore = jqLiteExpandoStore(element);
    var events = expandoStore && expandoStore.events;
    var eventFns = events && events[eventName];

    if (eventFns) {
      // Create a dummy event to pass to the handlers
      dummyEvent = {
        preventDefault: function() { this.defaultPrevented = true; },
        isDefaultPrevented: function() { return this.defaultPrevented === true; },
        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },
        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },
        stopPropagation: noop,
        type: eventName,
        target: element
      };

      // If a custom event was provided then extend our dummy event with it
      if (event.type) {
        dummyEvent = extend(dummyEvent, event);
      }

      // Copy event handlers in case event handlers array is modified during execution.
      eventFnsCopy = shallowCopy(eventFns);
      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];

      forEach(eventFnsCopy, function(fn) {
        if (!dummyEvent.isImmediatePropagationStopped()) {
          fn.apply(element, handlerArgs);
        }
      });
    }
  }
}, function(fn, name) {
  /**
   * chaining functions
   */
  JQLite.prototype[name] = function(arg1, arg2, arg3) {
    var value;

    for (var i = 0, ii = this.length; i < ii; i++) {
      if (isUndefined(value)) {
        value = fn(this[i], arg1, arg2, arg3);
        if (isDefined(value)) {
          // any function which returns a value needs to be wrapped
          value = jqLite(value);
        }
      } else {
        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
      }
    }
    return isDefined(value) ? value : this;
  };

  // bind legacy bind/unbind to on/off
  JQLite.prototype.bind = JQLite.prototype.on;
  JQLite.prototype.unbind = JQLite.prototype.off;
});


// Provider for private $$jqLite service
function $$jqLiteProvider() {
  this.$get = function $$jqLite() {
    return extend(JQLite, {
      hasClass: function(node, classes) {
        if (node.attr) node = node[0];
        return jqLiteHasClass(node, classes);
      },
      addClass: function(node, classes) {
        if (node.attr) node = node[0];
        return jqLiteAddClass(node, classes);
      },
      removeClass: function(node, classes) {
        if (node.attr) node = node[0];
        return jqLiteRemoveClass(node, classes);
      }
    });
  };
}

/**
 * Computes a hash of an 'obj'.
 * Hash of a:
 *  string is string
 *  number is number as string
 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
 *         that is also assigned to the $$hashKey property of the object.
 *
 * @param obj
 * @returns {string} hash string such that the same input will have the same hash string.
 *         The resulting string key is in 'type:hashKey' format.
 */
function hashKey(obj, nextUidFn) {
  var key = obj && obj.$$hashKey;

  if (key) {
    if (typeof key === 'function') {
      key = obj.$$hashKey();
    }
    return key;
  }

  var objType = typeof obj;
  if (objType == 'function' || (objType == 'object' && obj !== null)) {
    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();
  } else {
    key = objType + ':' + obj;
  }

  return key;
}

/**
 * HashMap which can use objects as keys
 */
function HashMap(array, isolatedUid) {
  if (isolatedUid) {
    var uid = 0;
    this.nextUid = function() {
      return ++uid;
    };
  }
  forEach(array, this.put, this);
}
HashMap.prototype = {
  /**
   * Store key value pair
   * @param key key to store can be any type
   * @param value value to store can be any type
   */
  put: function(key, value) {
    this[hashKey(key, this.nextUid)] = value;
  },

  /**
   * @param key
   * @returns {Object} the value for the key
   */
  get: function(key) {
    return this[hashKey(key, this.nextUid)];
  },

  /**
   * Remove the key/value pair
   * @param key
   */
  remove: function(key) {
    var value = this[key = hashKey(key, this.nextUid)];
    delete this[key];
    return value;
  }
};

/**
 * @ngdoc function
 * @module ng
 * @name angular.injector
 * @kind function
 *
 * @description
 * Creates an injector object that can be used for retrieving services as well as for
 * dependency injection (see {@link guide/di dependency injection}).
 *
 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
 *     {@link angular.module}. The `ng` module must be explicitly added.
 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
 *     disallows argument name annotation inference.
 * @returns {injector} Injector object. See {@link auto.$injector $injector}.
 *
 * @example
 * Typical usage
 * ```js
 *   // create an injector
 *   var $injector = angular.injector(['ng']);
 *
 *   // use the injector to kick off your application
 *   // use the type inference to auto inject arguments, or use implicit injection
 *   $injector.invoke(function($rootScope, $compile, $document) {
 *     $compile($document)($rootScope);
 *     $rootScope.$digest();
 *   });
 * ```
 *
 * Sometimes you want to get access to the injector of a currently running Angular app
 * from outside Angular. Perhaps, you want to inject and compile some markup after the
 * application has been bootstrapped. You can do this using the extra `injector()` added
 * to JQuery/jqLite elements. See {@link angular.element}.
 *
 * *This is fairly rare but could be the case if a third party library is injecting the
 * markup.*
 *
 * In the following example a new block of HTML containing a `ng-controller`
 * directive is added to the end of the document body by JQuery. We then compile and link
 * it into the current AngularJS scope.
 *
 * ```js
 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
 * $(document.body).append($div);
 *
 * angular.element(document).injector().invoke(function($compile) {
 *   var scope = angular.element($div).scope();
 *   $compile($div)(scope);
 * });
 * ```
 */


/**
 * @ngdoc module
 * @name auto
 * @description
 *
 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
 */

var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
var FN_ARG_SPLIT = /,/;
var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
var $injectorMinErr = minErr('$injector');

function anonFn(fn) {
  // For anonymous functions, showing at the very least the function signature can help in
  // debugging.
  var fnText = fn.toString().replace(STRIP_COMMENTS, ''),
      args = fnText.match(FN_ARGS);
  if (args) {
    return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';
  }
  return 'fn';
}

function annotate(fn, strictDi, name) {
  var $inject,
      fnText,
      argDecl,
      last;

  if (typeof fn === 'function') {
    if (!($inject = fn.$inject)) {
      $inject = [];
      if (fn.length) {
        if (strictDi) {
          if (!isString(name) || !name) {
            name = fn.name || anonFn(fn);
          }
          throw $injectorMinErr('strictdi',
            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);
        }
        fnText = fn.toString().replace(STRIP_COMMENTS, '');
        argDecl = fnText.match(FN_ARGS);
        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {
          arg.replace(FN_ARG, function(all, underscore, name) {
            $inject.push(name);
          });
        });
      }
      fn.$inject = $inject;
    }
  } else if (isArray(fn)) {
    last = fn.length - 1;
    assertArgFn(fn[last], 'fn');
    $inject = fn.slice(0, last);
  } else {
    assertArgFn(fn, 'fn', true);
  }
  return $inject;
}

///////////////////////////////////////

/**
 * @ngdoc service
 * @name $injector
 *
 * @description
 *
 * `$injector` is used to retrieve object instances as defined by
 * {@link auto.$provide provider}, instantiate types, invoke methods,
 * and load modules.
 *
 * The following always holds true:
 *
 * ```js
 *   var $injector = angular.injector();
 *   expect($injector.get('$injector')).toBe($injector);
 *   expect($injector.invoke(function($injector) {
 *     return $injector;
 *   })).toBe($injector);
 * ```
 *
 * # Injection Function Annotation
 *
 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
 * following are all valid ways of annotating function with injection arguments and are equivalent.
 *
 * ```js
 *   // inferred (only works if code not minified/obfuscated)
 *   $injector.invoke(function(serviceA){});
 *
 *   // annotated
 *   function explicit(serviceA) {};
 *   explicit.$inject = ['serviceA'];
 *   $injector.invoke(explicit);
 *
 *   // inline
 *   $injector.invoke(['serviceA', function(serviceA){}]);
 * ```
 *
 * ## Inference
 *
 * In JavaScript calling `toString()` on a function returns the function definition. The definition
 * can then be parsed and the function arguments can be extracted. This method of discovering
 * annotations is disallowed when the injector is in strict mode.
 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
 * argument names.
 *
 * ## `$inject` Annotation
 * By adding an `$inject` property onto a function the injection parameters can be specified.
 *
 * ## Inline
 * As an array of injection names, where the last item in the array is the function to call.
 */

/**
 * @ngdoc method
 * @name $injector#get
 *
 * @description
 * Return an instance of the service.
 *
 * @param {string} name The name of the instance to retrieve.
 * @param {string} caller An optional string to provide the origin of the function call for error messages.
 * @return {*} The instance.
 */

/**
 * @ngdoc method
 * @name $injector#invoke
 *
 * @description
 * Invoke the method and supply the method arguments from the `$injector`.
 *
 * @param {!Function} fn The function to invoke. Function parameters are injected according to the
 *   {@link guide/di $inject Annotation} rules.
 * @param {Object=} self The `this` for the invoked method.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 *                         object first, before the `$injector` is consulted.
 * @returns {*} the value returned by the invoked `fn` function.
 */

/**
 * @ngdoc method
 * @name $injector#has
 *
 * @description
 * Allows the user to query if the particular service exists.
 *
 * @param {string} name Name of the service to query.
 * @returns {boolean} `true` if injector has given service.
 */

/**
 * @ngdoc method
 * @name $injector#instantiate
 * @description
 * Create a new instance of JS type. The method takes a constructor function, invokes the new
 * operator, and supplies all of the arguments to the constructor function as specified by the
 * constructor annotation.
 *
 * @param {Function} Type Annotated constructor function.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 * object first, before the `$injector` is consulted.
 * @returns {Object} new instance of `Type`.
 */

/**
 * @ngdoc method
 * @name $injector#annotate
 *
 * @description
 * Returns an array of service names which the function is requesting for injection. This API is
 * used by the injector to determine which services need to be injected into the function when the
 * function is invoked. There are three ways in which the function can be annotated with the needed
 * dependencies.
 *
 * # Argument names
 *
 * The simplest form is to extract the dependencies from the arguments of the function. This is done
 * by converting the function into a string using `toString()` method and extracting the argument
 * names.
 * ```js
 *   // Given
 *   function MyController($scope, $route) {
 *     // ...
 *   }
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * You can disallow this method by using strict injection mode.
 *
 * This method does not work with code minification / obfuscation. For this reason the following
 * annotation strategies are supported.
 *
 * # The `$inject` property
 *
 * If a function has an `$inject` property and its value is an array of strings, then the strings
 * represent names of services to be injected into the function.
 * ```js
 *   // Given
 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
 *     // ...
 *   }
 *   // Define function dependencies
 *   MyController['$inject'] = ['$scope', '$route'];
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * # The array notation
 *
 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
 * is very inconvenient. In these situations using the array notation to specify the dependencies in
 * a way that survives minification is a better choice:
 *
 * ```js
 *   // We wish to write this (not minification / obfuscation safe)
 *   injector.invoke(function($compile, $rootScope) {
 *     // ...
 *   });
 *
 *   // We are forced to write break inlining
 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
 *     // ...
 *   };
 *   tmpFn.$inject = ['$compile', '$rootScope'];
 *   injector.invoke(tmpFn);
 *
 *   // To better support inline function the inline annotation is supported
 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
 *     // ...
 *   }]);
 *
 *   // Therefore
 *   expect(injector.annotate(
 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
 *    ).toEqual(['$compile', '$rootScope']);
 * ```
 *
 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
 * be retrieved as described above.
 *
 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
 *
 * @returns {Array.<string>} The names of the services which the function requires.
 */




/**
 * @ngdoc service
 * @name $provide
 *
 * @description
 *
 * The {@link auto.$provide $provide} service has a number of methods for registering components
 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
 * {@link angular.Module}.
 *
 * An Angular **service** is a singleton object created by a **service factory**.  These **service
 * factories** are functions which, in turn, are created by a **service provider**.
 * The **service providers** are constructor functions. When instantiated they must contain a
 * property called `$get`, which holds the **service factory** function.
 *
 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
 * function to get the instance of the **service**.
 *
 * Often services have no configuration options and there is no need to add methods to the service
 * provider.  The provider will be no more than a constructor function with a `$get` property. For
 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
 * services without specifying a provider.
 *
 * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the
 *     {@link auto.$injector $injector}
 * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by
 *     providers and services.
 * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by
 *     services, not providers.
 * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,
 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
 *     given factory function.
 * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`
 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
 *      a new object using the given constructor function.
 *
 * See the individual methods for more information and examples.
 */

/**
 * @ngdoc method
 * @name $provide#provider
 * @description
 *
 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
 * are constructor functions, whose instances are responsible for "providing" a factory for a
 * service.
 *
 * Service provider names start with the name of the service they provide followed by `Provider`.
 * For example, the {@link ng.$log $log} service has a provider called
 * {@link ng.$logProvider $logProvider}.
 *
 * Service provider objects can have additional methods which allow configuration of the provider
 * and its service. Importantly, you can configure what kind of service is created by the `$get`
 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
 * method {@link ng.$logProvider#debugEnabled debugEnabled}
 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
 * console or not.
 *
 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
                        'Provider'` key.
 * @param {(Object|function())} provider If the provider is:
 *
 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
 *   - `Constructor`: a new instance of the provider will be created using
 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
 *
 * @returns {Object} registered provider instance

 * @example
 *
 * The following example shows how to create a simple event tracking service and register it using
 * {@link auto.$provide#provider $provide.provider()}.
 *
 * ```js
 *  // Define the eventTracker provider
 *  function EventTrackerProvider() {
 *    var trackingUrl = '/track';
 *
 *    // A provider method for configuring where the tracked events should been saved
 *    this.setTrackingUrl = function(url) {
 *      trackingUrl = url;
 *    };
 *
 *    // The service factory function
 *    this.$get = ['$http', function($http) {
 *      var trackedEvents = {};
 *      return {
 *        // Call this to track an event
 *        event: function(event) {
 *          var count = trackedEvents[event] || 0;
 *          count += 1;
 *          trackedEvents[event] = count;
 *          return count;
 *        },
 *        // Call this to save the tracked events to the trackingUrl
 *        save: function() {
 *          $http.post(trackingUrl, trackedEvents);
 *        }
 *      };
 *    }];
 *  }
 *
 *  describe('eventTracker', function() {
 *    var postSpy;
 *
 *    beforeEach(module(function($provide) {
 *      // Register the eventTracker provider
 *      $provide.provider('eventTracker', EventTrackerProvider);
 *    }));
 *
 *    beforeEach(module(function(eventTrackerProvider) {
 *      // Configure eventTracker provider
 *      eventTrackerProvider.setTrackingUrl('/custom-track');
 *    }));
 *
 *    it('tracks events', inject(function(eventTracker) {
 *      expect(eventTracker.event('login')).toEqual(1);
 *      expect(eventTracker.event('login')).toEqual(2);
 *    }));
 *
 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
 *      postSpy = spyOn($http, 'post');
 *      eventTracker.event('login');
 *      eventTracker.save();
 *      expect(postSpy).toHaveBeenCalled();
 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
 *    }));
 *  });
 * ```
 */

/**
 * @ngdoc method
 * @name $provide#factory
 * @description
 *
 * Register a **service factory**, which will be called to return the service instance.
 * This is short for registering a service where its provider consists of only a `$get` property,
 * which is the given service factory function.
 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
 * configure your service in a provider.
 *
 * @param {string} name The name of the instance.
 * @param {function()} $getFn The $getFn for the instance creation. Internally this is a short hand
 *                            for `$provide.provider(name, {$get: $getFn})`.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service
 * ```js
 *   $provide.factory('ping', ['$http', function($http) {
 *     return function ping() {
 *       return $http.send('/ping');
 *     };
 *   }]);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping();
 *   }]);
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#service
 * @description
 *
 * Register a **service constructor**, which will be invoked with `new` to create the service
 * instance.
 * This is short for registering a service where its provider's `$get` property is the service
 * constructor function that will be used to instantiate the service instance.
 *
 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
 * as a type/class.
 *
 * @param {string} name The name of the instance.
 * @param {Function} constructor A class (constructor function) that will be instantiated.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service using
 * {@link auto.$provide#service $provide.service(class)}.
 * ```js
 *   var Ping = function($http) {
 *     this.$http = $http;
 *   };
 *
 *   Ping.$inject = ['$http'];
 *
 *   Ping.prototype.send = function() {
 *     return this.$http.get('/ping');
 *   };
 *   $provide.service('ping', Ping);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping.send();
 *   }]);
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#value
 * @description
 *
 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
 * number, an array, an object or a function.  This is short for registering a service where its
 * provider's `$get` property is a factory function that takes no arguments and returns the **value
 * service**.
 *
 * Value services are similar to constant services, except that they cannot be injected into a
 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
 * an Angular
 * {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the instance.
 * @param {*} value The value.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here are some examples of creating value services.
 * ```js
 *   $provide.value('ADMIN_USER', 'admin');
 *
 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
 *
 *   $provide.value('halfOf', function(value) {
 *     return value / 2;
 *   });
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#constant
 * @description
 *
 * Register a **constant service**, such as a string, a number, an array, an object or a function,
 * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be
 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the constant.
 * @param {*} value The constant value.
 * @returns {Object} registered instance
 *
 * @example
 * Here a some examples of creating constants:
 * ```js
 *   $provide.constant('SHARD_HEIGHT', 306);
 *
 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
 *
 *   $provide.constant('double', function(value) {
 *     return value * 2;
 *   });
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#decorator
 * @description
 *
 * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator
 * intercepts the creation of a service, allowing it to override or modify the behaviour of the
 * service. The object returned by the decorator may be the original service, or a new service
 * object which replaces or wraps and delegates to the original service.
 *
 * @param {string} name The name of the service to decorate.
 * @param {function()} decorator This function will be invoked when the service needs to be
 *    instantiated and should return the decorated service instance. The function is called using
 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
 *    Local injection arguments:
 *
 *    * `$delegate` - The original service instance, which can be monkey patched, configured,
 *      decorated or delegated to.
 *
 * @example
 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
 * calls to {@link ng.$log#error $log.warn()}.
 * ```js
 *   $provide.decorator('$log', ['$delegate', function($delegate) {
 *     $delegate.warn = $delegate.error;
 *     return $delegate;
 *   }]);
 * ```
 */


function createInjector(modulesToLoad, strictDi) {
  strictDi = (strictDi === true);
  var INSTANTIATING = {},
      providerSuffix = 'Provider',
      path = [],
      loadedModules = new HashMap([], true),
      providerCache = {
        $provide: {
            provider: supportObject(provider),
            factory: supportObject(factory),
            service: supportObject(service),
            value: supportObject(value),
            constant: supportObject(constant),
            decorator: decorator
          }
      },
      providerInjector = (providerCache.$injector =
          createInternalInjector(providerCache, function(serviceName, caller) {
            if (angular.isString(caller)) {
              path.push(caller);
            }
            throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));
          })),
      instanceCache = {},
      instanceInjector = (instanceCache.$injector =
          createInternalInjector(instanceCache, function(serviceName, caller) {
            var provider = providerInjector.get(serviceName + providerSuffix, caller);
            return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);
          }));


  forEach(loadModules(modulesToLoad), function(fn) { instanceInjector.invoke(fn || noop); });

  return instanceInjector;

  ////////////////////////////////////
  // $provider
  ////////////////////////////////////

  function supportObject(delegate) {
    return function(key, value) {
      if (isObject(key)) {
        forEach(key, reverseParams(delegate));
      } else {
        return delegate(key, value);
      }
    };
  }

  function provider(name, provider_) {
    assertNotHasOwnProperty(name, 'service');
    if (isFunction(provider_) || isArray(provider_)) {
      provider_ = providerInjector.instantiate(provider_);
    }
    if (!provider_.$get) {
      throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
    }
    return providerCache[name + providerSuffix] = provider_;
  }

  function enforceReturnValue(name, factory) {
    return function enforcedReturnValue() {
      var result = instanceInjector.invoke(factory, this);
      if (isUndefined(result)) {
        throw $injectorMinErr('undef', "Provider '{0}' must return a value from $get factory method.", name);
      }
      return result;
    };
  }

  function factory(name, factoryFn, enforce) {
    return provider(name, {
      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn
    });
  }

  function service(name, constructor) {
    return factory(name, ['$injector', function($injector) {
      return $injector.instantiate(constructor);
    }]);
  }

  function value(name, val) { return factory(name, valueFn(val), false); }

  function constant(name, value) {
    assertNotHasOwnProperty(name, 'constant');
    providerCache[name] = value;
    instanceCache[name] = value;
  }

  function decorator(serviceName, decorFn) {
    var origProvider = providerInjector.get(serviceName + providerSuffix),
        orig$get = origProvider.$get;

    origProvider.$get = function() {
      var origInstance = instanceInjector.invoke(orig$get, origProvider);
      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});
    };
  }

  ////////////////////////////////////
  // Module Loading
  ////////////////////////////////////
  function loadModules(modulesToLoad) {
    var runBlocks = [], moduleFn;
    forEach(modulesToLoad, function(module) {
      if (loadedModules.get(module)) return;
      loadedModules.put(module, true);

      function runInvokeQueue(queue) {
        var i, ii;
        for (i = 0, ii = queue.length; i < ii; i++) {
          var invokeArgs = queue[i],
              provider = providerInjector.get(invokeArgs[0]);

          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
        }
      }

      try {
        if (isString(module)) {
          moduleFn = angularModule(module);
          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
          runInvokeQueue(moduleFn._invokeQueue);
          runInvokeQueue(moduleFn._configBlocks);
        } else if (isFunction(module)) {
            runBlocks.push(providerInjector.invoke(module));
        } else if (isArray(module)) {
            runBlocks.push(providerInjector.invoke(module));
        } else {
          assertArgFn(module, 'module');
        }
      } catch (e) {
        if (isArray(module)) {
          module = module[module.length - 1];
        }
        if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
          // Safari & FF's stack traces don't contain error.message content
          // unlike those of Chrome and IE
          // So if stack doesn't contain message, we create a new string that contains both.
          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
          /* jshint -W022 */
          e = e.message + '\n' + e.stack;
        }
        throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",
                  module, e.stack || e.message || e);
      }
    });
    return runBlocks;
  }

  ////////////////////////////////////
  // internal Injector
  ////////////////////////////////////

  function createInternalInjector(cache, factory) {

    function getService(serviceName, caller) {
      if (cache.hasOwnProperty(serviceName)) {
        if (cache[serviceName] === INSTANTIATING) {
          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',
                    serviceName + ' <- ' + path.join(' <- '));
        }
        return cache[serviceName];
      } else {
        try {
          path.unshift(serviceName);
          cache[serviceName] = INSTANTIATING;
          return cache[serviceName] = factory(serviceName, caller);
        } catch (err) {
          if (cache[serviceName] === INSTANTIATING) {
            delete cache[serviceName];
          }
          throw err;
        } finally {
          path.shift();
        }
      }
    }

    function invoke(fn, self, locals, serviceName) {
      if (typeof locals === 'string') {
        serviceName = locals;
        locals = null;
      }

      var args = [],
          $inject = createInjector.$$annotate(fn, strictDi, serviceName),
          length, i,
          key;

      for (i = 0, length = $inject.length; i < length; i++) {
        key = $inject[i];
        if (typeof key !== 'string') {
          throw $injectorMinErr('itkn',
                  'Incorrect injection token! Expected service name as string, got {0}', key);
        }
        args.push(
          locals && locals.hasOwnProperty(key)
          ? locals[key]
          : getService(key, serviceName)
        );
      }
      if (isArray(fn)) {
        fn = fn[length];
      }

      // http://jsperf.com/angularjs-invoke-apply-vs-switch
      // #5388
      return fn.apply(self, args);
    }

    function instantiate(Type, locals, serviceName) {
      // Check if Type is annotated and use just the given function at n-1 as parameter
      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
      // Object creation: http://jsperf.com/create-constructor/2
      var instance = Object.create((isArray(Type) ? Type[Type.length - 1] : Type).prototype || null);
      var returnedValue = invoke(Type, instance, locals, serviceName);

      return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;
    }

    return {
      invoke: invoke,
      instantiate: instantiate,
      get: getService,
      annotate: createInjector.$$annotate,
      has: function(name) {
        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
      }
    };
  }
}

createInjector.$$annotate = annotate;

/**
 * @ngdoc provider
 * @name $anchorScrollProvider
 *
 * @description
 * Use `$anchorScrollProvider` to disable automatic scrolling whenever
 * {@link ng.$location#hash $location.hash()} changes.
 */
function $AnchorScrollProvider() {

  var autoScrollingEnabled = true;

  /**
   * @ngdoc method
   * @name $anchorScrollProvider#disableAutoScrolling
   *
   * @description
   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
   * Use this method to disable automatic scrolling.
   *
   * If automatic scrolling is disabled, one must explicitly call
   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
   * current hash.
   */
  this.disableAutoScrolling = function() {
    autoScrollingEnabled = false;
  };

  /**
   * @ngdoc service
   * @name $anchorScroll
   * @kind function
   * @requires $window
   * @requires $location
   * @requires $rootScope
   *
   * @description
   * When called, it checks the current value of {@link ng.$location#hash $location.hash()} and
   * scrolls to the related element, according to the rules specified in the
   * [Html5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).
   *
   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
   * match any anchor whenever it changes. This can be disabled by calling
   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
   *
   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
   * vertical scroll-offset (either fixed or dynamic).
   *
   * @property {(number|function|jqLite)} yOffset
   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
   * positioned elements at the top of the page, such as navbars, headers etc.
   *
   * `yOffset` can be specified in various ways:
   * - **number**: A fixed number of pixels to be used as offset.<br /><br />
   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
   *   a number representing the offset (in pixels).<br /><br />
   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
   *   the top of the page to the element's bottom will be used as offset.<br />
   *   **Note**: The element will be taken into account only as long as its `position` is set to
   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
   *   their height and/or positioning according to the viewport's size.
   *
   * <br />
   * <div class="alert alert-warning">
   * In order for `yOffset` to work properly, scrolling should take place on the document's root and
   * not some child element.
   * </div>
   *
   * @example
     <example module="anchorScrollExample">
       <file name="index.html">
         <div id="scrollArea" ng-controller="ScrollController">
           <a ng-click="gotoBottom()">Go to bottom</a>
           <a id="bottom"></a> You're at the bottom!
         </div>
       </file>
       <file name="script.js">
         angular.module('anchorScrollExample', [])
           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
             function ($scope, $location, $anchorScroll) {
               $scope.gotoBottom = function() {
                 // set the location.hash to the id of
                 // the element you wish to scroll to.
                 $location.hash('bottom');

                 // call $anchorScroll()
                 $anchorScroll();
               };
             }]);
       </file>
       <file name="style.css">
         #scrollArea {
           height: 280px;
           overflow: auto;
         }

         #bottom {
           display: block;
           margin-top: 2000px;
         }
       </file>
     </example>
   *
   * <hr />
   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
   *
   * @example
     <example module="anchorScrollOffsetExample">
       <file name="index.html">
         <div class="fixed-header" ng-controller="headerCtrl">
           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
             Go to anchor {{x}}
           </a>
         </div>
         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
           Anchor {{x}} of 5
         </div>
       </file>
       <file name="script.js">
         angular.module('anchorScrollOffsetExample', [])
           .run(['$anchorScroll', function($anchorScroll) {
             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
           }])
           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
             function ($anchorScroll, $location, $scope) {
               $scope.gotoAnchor = function(x) {
                 var newHash = 'anchor' + x;
                 if ($location.hash() !== newHash) {
                   // set the $location.hash to `newHash` and
                   // $anchorScroll will automatically scroll to it
                   $location.hash('anchor' + x);
                 } else {
                   // call $anchorScroll() explicitly,
                   // since $location.hash hasn't changed
                   $anchorScroll();
                 }
               };
             }
           ]);
       </file>
       <file name="style.css">
         body {
           padding-top: 50px;
         }

         .anchor {
           border: 2px dashed DarkOrchid;
           padding: 10px 10px 200px 10px;
         }

         .fixed-header {
           background-color: rgba(0, 0, 0, 0.2);
           height: 50px;
           position: fixed;
           top: 0; left: 0; right: 0;
         }

         .fixed-header > a {
           display: inline-block;
           margin: 5px 15px;
         }
       </file>
     </example>
   */
  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {
    var document = $window.document;

    // Helper function to get first anchor from a NodeList
    // (using `Array#some()` instead of `angular#forEach()` since it's more performant
    //  and working in all supported browsers.)
    function getFirstAnchor(list) {
      var result = null;
      Array.prototype.some.call(list, function(element) {
        if (nodeName_(element) === 'a') {
          result = element;
          return true;
        }
      });
      return result;
    }

    function getYOffset() {

      var offset = scroll.yOffset;

      if (isFunction(offset)) {
        offset = offset();
      } else if (isElement(offset)) {
        var elem = offset[0];
        var style = $window.getComputedStyle(elem);
        if (style.position !== 'fixed') {
          offset = 0;
        } else {
          offset = elem.getBoundingClientRect().bottom;
        }
      } else if (!isNumber(offset)) {
        offset = 0;
      }

      return offset;
    }

    function scrollTo(elem) {
      if (elem) {
        elem.scrollIntoView();

        var offset = getYOffset();

        if (offset) {
          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
          // top of the viewport.
          //
          // IF the number of pixels from the top of `elem` to the end of the page's content is less
          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
          // way down the page.
          //
          // This is often the case for elements near the bottom of the page.
          //
          // In such cases we do not need to scroll the whole `offset` up, just the difference between
          // the top of the element and the offset, which is enough to align the top of `elem` at the
          // desired position.
          var elemTop = elem.getBoundingClientRect().top;
          $window.scrollBy(0, elemTop - offset);
        }
      } else {
        $window.scrollTo(0, 0);
      }
    }

    function scroll() {
      var hash = $location.hash(), elm;

      // empty hash, scroll to the top of the page
      if (!hash) scrollTo(null);

      // element with given id
      else if ((elm = document.getElementById(hash))) scrollTo(elm);

      // first anchor with given name :-D
      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);

      // no element and hash == 'top', scroll to the top of the page
      else if (hash === 'top') scrollTo(null);
    }

    // does not scroll when user clicks on anchor link that is currently on
    // (no url change, no $location.hash() change), browser native does scroll
    if (autoScrollingEnabled) {
      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},
        function autoScrollWatchAction(newVal, oldVal) {
          // skip the initial scroll if $location.hash is empty
          if (newVal === oldVal && newVal === '') return;

          jqLiteDocumentLoaded(function() {
            $rootScope.$evalAsync(scroll);
          });
        });
    }

    return scroll;
  }];
}

var $animateMinErr = minErr('$animate');

/**
 * @ngdoc provider
 * @name $animateProvider
 *
 * @description
 * Default implementation of $animate that doesn't perform any animations, instead just
 * synchronously performs DOM
 * updates and calls done() callbacks.
 *
 * In order to enable animations the ngAnimate module has to be loaded.
 *
 * To see the functional implementation check out src/ngAnimate/animate.js
 */
var $AnimateProvider = ['$provide', function($provide) {


  this.$$selectors = {};


  /**
   * @ngdoc method
   * @name $animateProvider#register
   *
   * @description
   * Registers a new injectable animation factory function. The factory function produces the
   * animation object which contains callback functions for each event that is expected to be
   * animated.
   *
   *   * `eventFn`: `function(Element, doneFunction)` The element to animate, the `doneFunction`
   *   must be called once the element animation is complete. If a function is returned then the
   *   animation service will use this function to cancel the animation whenever a cancel event is
   *   triggered.
   *
   *
   * ```js
   *   return {
     *     eventFn : function(element, done) {
     *       //code to run the animation
     *       //once complete, then run done()
     *       return function cancellationFunction() {
     *         //code to cancel the animation
     *       }
     *     }
     *   }
   * ```
   *
   * @param {string} name The name of the animation.
   * @param {Function} factory The factory function that will be executed to return the animation
   *                           object.
   */
  this.register = function(name, factory) {
    var key = name + '-animation';
    if (name && name.charAt(0) != '.') throw $animateMinErr('notcsel',
        "Expecting class selector starting with '.' got '{0}'.", name);
    this.$$selectors[name.substr(1)] = key;
    $provide.factory(key, factory);
  };

  /**
   * @ngdoc method
   * @name $animateProvider#classNameFilter
   *
   * @description
   * Sets and/or returns the CSS class regular expression that is checked when performing
   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
   * therefore enable $animate to attempt to perform an animation on any element.
   * When setting the classNameFilter value, animations will only be performed on elements
   * that successfully match the filter expression. This in turn can boost performance
   * for low-powered devices as well as applications containing a lot of structural operations.
   * @param {RegExp=} expression The className expression which will be checked against all animations
   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
   */
  this.classNameFilter = function(expression) {
    if (arguments.length === 1) {
      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;
    }
    return this.$$classNameFilter;
  };

  this.$get = ['$$q', '$$asyncCallback', '$rootScope', function($$q, $$asyncCallback, $rootScope) {

    var currentDefer;

    function runAnimationPostDigest(fn) {
      var cancelFn, defer = $$q.defer();
      defer.promise.$$cancelFn = function ngAnimateMaybeCancel() {
        cancelFn && cancelFn();
      };

      $rootScope.$$postDigest(function ngAnimatePostDigest() {
        cancelFn = fn(function ngAnimateNotifyComplete() {
          defer.resolve();
        });
      });

      return defer.promise;
    }

    function resolveElementClasses(element, classes) {
      var toAdd = [], toRemove = [];

      var hasClasses = createMap();
      forEach((element.attr('class') || '').split(/\s+/), function(className) {
        hasClasses[className] = true;
      });

      forEach(classes, function(status, className) {
        var hasClass = hasClasses[className];

        // If the most recent class manipulation (via $animate) was to remove the class, and the
        // element currently has the class, the class is scheduled for removal. Otherwise, if
        // the most recent class manipulation (via $animate) was to add the class, and the
        // element does not currently have the class, the class is scheduled to be added.
        if (status === false && hasClass) {
          toRemove.push(className);
        } else if (status === true && !hasClass) {
          toAdd.push(className);
        }
      });

      return (toAdd.length + toRemove.length) > 0 &&
        [toAdd.length ? toAdd : null, toRemove.length ? toRemove : null];
    }

    function cachedClassManipulation(cache, classes, op) {
      for (var i=0, ii = classes.length; i < ii; ++i) {
        var className = classes[i];
        cache[className] = op;
      }
    }

    function asyncPromise() {
      // only serve one instance of a promise in order to save CPU cycles
      if (!currentDefer) {
        currentDefer = $$q.defer();
        $$asyncCallback(function() {
          currentDefer.resolve();
          currentDefer = null;
        });
      }
      return currentDefer.promise;
    }

    function applyStyles(element, options) {
      if (angular.isObject(options)) {
        var styles = extend(options.from || {}, options.to || {});
        element.css(styles);
      }
    }

    /**
     *
     * @ngdoc service
     * @name $animate
     * @description The $animate service provides rudimentary DOM manipulation functions to
     * insert, remove and move elements within the DOM, as well as adding and removing classes.
     * This service is the core service used by the ngAnimate $animator service which provides
     * high-level animation hooks for CSS and JavaScript.
     *
     * $animate is available in the AngularJS core, however, the ngAnimate module must be included
     * to enable full out animation support. Otherwise, $animate will only perform simple DOM
     * manipulation operations.
     *
     * To learn more about enabling animation support, click here to visit the {@link ngAnimate
     * ngAnimate module page} as well as the {@link ngAnimate.$animate ngAnimate $animate service
     * page}.
     */
    return {
      animate: function(element, from, to) {
        applyStyles(element, { from: from, to: to });
        return asyncPromise();
      },

      /**
       *
       * @ngdoc method
       * @name $animate#enter
       * @kind function
       * @description Inserts the element into the DOM either after the `after` element or
       * as the first child within the `parent` element. When the function is called a promise
       * is returned that will be resolved at a later time.
       * @param {DOMElement} element the element which will be inserted into the DOM
       * @param {DOMElement} parent the parent element which will append the element as
       *   a child (if the after element is not present)
       * @param {DOMElement} after the sibling element which will append the element
       *   after itself
       * @param {object=} options an optional collection of styles that will be applied to the element.
       * @return {Promise} the animation callback promise
       */
      enter: function(element, parent, after, options) {
        applyStyles(element, options);
        after ? after.after(element)
              : parent.prepend(element);
        return asyncPromise();
      },

      /**
       *
       * @ngdoc method
       * @name $animate#leave
       * @kind function
       * @description Removes the element from the DOM. When the function is called a promise
       * is returned that will be resolved at a later time.
       * @param {DOMElement} element the element which will be removed from the DOM
       * @param {object=} options an optional collection of options that will be applied to the element.
       * @return {Promise} the animation callback promise
       */
      leave: function(element, options) {
        element.remove();
        return asyncPromise();
      },

      /**
       *
       * @ngdoc method
       * @name $animate#move
       * @kind function
       * @description Moves the position of the provided element within the DOM to be placed
       * either after the `after` element or inside of the `parent` element. When the function
       * is called a promise is returned that will be resolved at a later time.
       *
       * @param {DOMElement} element the element which will be moved around within the
       *   DOM
       * @param {DOMElement} parent the parent element where the element will be
       *   inserted into (if the after element is not present)
       * @param {DOMElement} after the sibling element where the element will be
       *   positioned next to
       * @param {object=} options an optional collection of options that will be applied to the element.
       * @return {Promise} the animation callback promise
       */
      move: function(element, parent, after, options) {
        // Do not remove element before insert. Removing will cause data associated with the
        // element to be dropped. Insert will implicitly do the remove.
        return this.enter(element, parent, after, options);
      },

      /**
       *
       * @ngdoc method
       * @name $animate#addClass
       * @kind function
       * @description Adds the provided className CSS class value to the provided element.
       * When the function is called a promise is returned that will be resolved at a later time.
       * @param {DOMElement} element the element which will have the className value
       *   added to it
       * @param {string} className the CSS class which will be added to the element
       * @param {object=} options an optional collection of options that will be applied to the element.
       * @return {Promise} the animation callback promise
       */
      addClass: function(element, className, options) {
        return this.setClass(element, className, [], options);
      },

      $$addClassImmediately: function(element, className, options) {
        element = jqLite(element);
        className = !isString(className)
                        ? (isArray(className) ? className.join(' ') : '')
                        : className;
        forEach(element, function(element) {
          jqLiteAddClass(element, className);
        });
        applyStyles(element, options);
        return asyncPromise();
      },

      /**
       *
       * @ngdoc method
       * @name $animate#removeClass
       * @kind function
       * @description Removes the provided className CSS class value from the provided element.
       * When the function is called a promise is returned that will be resolved at a later time.
       * @param {DOMElement} element the element which will have the className value
       *   removed from it
       * @param {string} className the CSS class which will be removed from the element
       * @param {object=} options an optional collection of options that will be applied to the element.
       * @return {Promise} the animation callback promise
       */
      removeClass: function(element, className, options) {
        return this.setClass(element, [], className, options);
      },

      $$removeClassImmediately: function(element, className, options) {
        element = jqLite(element);
        className = !isString(className)
                        ? (isArray(className) ? className.join(' ') : '')
                        : className;
        forEach(element, function(element) {
          jqLiteRemoveClass(element, className);
        });
        applyStyles(element, options);
        return asyncPromise();
      },

      /**
       *
       * @ngdoc method
       * @name $animate#setClass
       * @kind function
       * @description Adds and/or removes the given CSS classes to and from the element.
       * When the function is called a promise is returned that will be resolved at a later time.
       * @param {DOMElement} element the element which will have its CSS classes changed
       *   removed from it
       * @param {string} add the CSS classes which will be added to the element
       * @param {string} remove the CSS class which will be removed from the element
       * @param {object=} options an optional collection of options that will be applied to the element.
       * @return {Promise} the animation callback promise
       */
      setClass: function(element, add, remove, options) {
        var self = this;
        var STORAGE_KEY = '$$animateClasses';
        var createdCache = false;
        element = jqLite(element);

        var cache = element.data(STORAGE_KEY);
        if (!cache) {
          cache = {
            classes: {},
            options: options
          };
          createdCache = true;
        } else if (options && cache.options) {
          cache.options = angular.extend(cache.options || {}, options);
        }

        var classes = cache.classes;

        add = isArray(add) ? add : add.split(' ');
        remove = isArray(remove) ? remove : remove.split(' ');
        cachedClassManipulation(classes, add, true);
        cachedClassManipulation(classes, remove, false);

        if (createdCache) {
          cache.promise = runAnimationPostDigest(function(done) {
            var cache = element.data(STORAGE_KEY);
            element.removeData(STORAGE_KEY);

            // in the event that the element is removed before postDigest
            // is run then the cache will be undefined and there will be
            // no need anymore to add or remove and of the element classes
            if (cache) {
              var classes = resolveElementClasses(element, cache.classes);
              if (classes) {
                self.$$setClassImmediately(element, classes[0], classes[1], cache.options);
              }
            }

            done();
          });
          element.data(STORAGE_KEY, cache);
        }

        return cache.promise;
      },

      $$setClassImmediately: function(element, add, remove, options) {
        add && this.$$addClassImmediately(element, add);
        remove && this.$$removeClassImmediately(element, remove);
        applyStyles(element, options);
        return asyncPromise();
      },

      enabled: noop,
      cancel: noop
    };
  }];
}];

function $$AsyncCallbackProvider() {
  this.$get = ['$$rAF', '$timeout', function($$rAF, $timeout) {
    return $$rAF.supported
      ? function(fn) { return $$rAF(fn); }
      : function(fn) {
        return $timeout(fn, 0, false);
      };
  }];
}

/* global stripHash: true */

/**
 * ! This is a private undocumented service !
 *
 * @name $browser
 * @requires $log
 * @description
 * This object has two goals:
 *
 * - hide all the global state in the browser caused by the window object
 * - abstract away all the browser specific features and inconsistencies
 *
 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
 * service, which can be used for convenient testing of the application without the interaction with
 * the real browser apis.
 */
/**
 * @param {object} window The global window object.
 * @param {object} document jQuery wrapped document.
 * @param {object} $log window.console or an object with the same interface.
 * @param {object} $sniffer $sniffer service
 */
function Browser(window, document, $log, $sniffer) {
  var self = this,
      rawDocument = document[0],
      location = window.location,
      history = window.history,
      setTimeout = window.setTimeout,
      clearTimeout = window.clearTimeout,
      pendingDeferIds = {};

  self.isMock = false;

  var outstandingRequestCount = 0;
  var outstandingRequestCallbacks = [];

  // TODO(vojta): remove this temporary api
  self.$$completeOutstandingRequest = completeOutstandingRequest;
  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };

  /**
   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
   */
  function completeOutstandingRequest(fn) {
    try {
      fn.apply(null, sliceArgs(arguments, 1));
    } finally {
      outstandingRequestCount--;
      if (outstandingRequestCount === 0) {
        while (outstandingRequestCallbacks.length) {
          try {
            outstandingRequestCallbacks.pop()();
          } catch (e) {
            $log.error(e);
          }
        }
      }
    }
  }

  function getHash(url) {
    var index = url.indexOf('#');
    return index === -1 ? '' : url.substr(index + 1);
  }

  /**
   * @private
   * Note: this method is used only by scenario runner
   * TODO(vojta): prefix this method with $$ ?
   * @param {function()} callback Function that will be called when no outstanding request
   */
  self.notifyWhenNoOutstandingRequests = function(callback) {
    // force browser to execute all pollFns - this is needed so that cookies and other pollers fire
    // at some deterministic time in respect to the test runner's actions. Leaving things up to the
    // regular poller would result in flaky tests.
    forEach(pollFns, function(pollFn) { pollFn(); });

    if (outstandingRequestCount === 0) {
      callback();
    } else {
      outstandingRequestCallbacks.push(callback);
    }
  };

  //////////////////////////////////////////////////////////////
  // Poll Watcher API
  //////////////////////////////////////////////////////////////
  var pollFns = [],
      pollTimeout;

  /**
   * @name $browser#addPollFn
   *
   * @param {function()} fn Poll function to add
   *
   * @description
   * Adds a function to the list of functions that poller periodically executes,
   * and starts polling if not started yet.
   *
   * @returns {function()} the added function
   */
  self.addPollFn = function(fn) {
    if (isUndefined(pollTimeout)) startPoller(100, setTimeout);
    pollFns.push(fn);
    return fn;
  };

  /**
   * @param {number} interval How often should browser call poll functions (ms)
   * @param {function()} setTimeout Reference to a real or fake `setTimeout` function.
   *
   * @description
   * Configures the poller to run in the specified intervals, using the specified
   * setTimeout fn and kicks it off.
   */
  function startPoller(interval, setTimeout) {
    (function check() {
      forEach(pollFns, function(pollFn) { pollFn(); });
      pollTimeout = setTimeout(check, interval);
    })();
  }

  //////////////////////////////////////////////////////////////
  // URL API
  //////////////////////////////////////////////////////////////

  var cachedState, lastHistoryState,
      lastBrowserUrl = location.href,
      baseElement = document.find('base'),
      reloadLocation = null;

  cacheState();
  lastHistoryState = cachedState;

  /**
   * @name $browser#url
   *
   * @description
   * GETTER:
   * Without any argument, this method just returns current value of location.href.
   *
   * SETTER:
   * With at least one argument, this method sets url to new value.
   * If html5 history api supported, pushState/replaceState is used, otherwise
   * location.href/location.replace is used.
   * Returns its own instance to allow chaining
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to change url.
   *
   * @param {string} url New url (when used as setter)
   * @param {boolean=} replace Should new url replace current history record?
   * @param {object=} state object to use with pushState/replaceState
   */
  self.url = function(url, replace, state) {
    // In modern browsers `history.state` is `null` by default; treating it separately
    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`
    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
    if (isUndefined(state)) {
      state = null;
    }

    // Android Browser BFCache causes location, history reference to become stale.
    if (location !== window.location) location = window.location;
    if (history !== window.history) history = window.history;

    // setter
    if (url) {
      var sameState = lastHistoryState === state;

      // Don't change anything if previous and current URLs and states match. This also prevents
      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
      // See https://github.com/angular/angular.js/commit/ffb2701
      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
        return self;
      }
      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
      lastBrowserUrl = url;
      lastHistoryState = state;
      // Don't use history API if only the hash changed
      // due to a bug in IE10/IE11 which leads
      // to not firing a `hashchange` nor `popstate` event
      // in some cases (see #9143).
      if ($sniffer.history && (!sameBase || !sameState)) {
        history[replace ? 'replaceState' : 'pushState'](state, '', url);
        cacheState();
        // Do the assignment again so that those two variables are referentially identical.
        lastHistoryState = cachedState;
      } else {
        if (!sameBase) {
          reloadLocation = url;
        }
        if (replace) {
          location.replace(url);
        } else if (!sameBase) {
          location.href = url;
        } else {
          location.hash = getHash(url);
        }
      }
      return self;
    // getter
    } else {
      // - reloadLocation is needed as browsers don't allow to read out
      //   the new location.href if a reload happened.
      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
      return reloadLocation || location.href.replace(/%27/g,"'");
    }
  };

  /**
   * @name $browser#state
   *
   * @description
   * This method is a getter.
   *
   * Return history.state or null if history.state is undefined.
   *
   * @returns {object} state
   */
  self.state = function() {
    return cachedState;
  };

  var urlChangeListeners = [],
      urlChangeInit = false;

  function cacheStateAndFireUrlChange() {
    cacheState();
    fireUrlChange();
  }

  // This variable should be used *only* inside the cacheState function.
  var lastCachedState = null;
  function cacheState() {
    // This should be the only place in $browser where `history.state` is read.
    cachedState = window.history.state;
    cachedState = isUndefined(cachedState) ? null : cachedState;

    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.
    if (equals(cachedState, lastCachedState)) {
      cachedState = lastCachedState;
    }
    lastCachedState = cachedState;
  }

  function fireUrlChange() {
    if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {
      return;
    }

    lastBrowserUrl = self.url();
    lastHistoryState = cachedState;
    forEach(urlChangeListeners, function(listener) {
      listener(self.url(), cachedState);
    });
  }

  /**
   * @name $browser#onUrlChange
   *
   * @description
   * Register callback function that will be called, when url changes.
   *
   * It's only called when the url is changed from outside of angular:
   * - user types different url into address bar
   * - user clicks on history (forward/back) button
   * - user clicks on a link
   *
   * It's not called when url is changed by $browser.url() method
   *
   * The listener gets called with new url as parameter.
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to monitor url changes in angular apps.
   *
   * @param {function(string)} listener Listener function to be called when url changes.
   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
   */
  self.onUrlChange = function(callback) {
    // TODO(vojta): refactor to use node's syntax for events
    if (!urlChangeInit) {
      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
      // don't fire popstate when user change the address bar and don't fire hashchange when url
      // changed by push/replaceState

      // html5 history api - popstate event
      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);
      // hashchange event
      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);

      urlChangeInit = true;
    }

    urlChangeListeners.push(callback);
    return callback;
  };

  /**
   * Checks whether the url has changed outside of Angular.
   * Needs to be exported to be able to check for changes that have been done in sync,
   * as hashchange/popstate events fire in async.
   */
  self.$$checkUrlChange = fireUrlChange;

  //////////////////////////////////////////////////////////////
  // Misc API
  //////////////////////////////////////////////////////////////

  /**
   * @name $browser#baseHref
   *
   * @description
   * Returns current <base href>
   * (always relative - without domain)
   *
   * @returns {string} The current base href
   */
  self.baseHref = function() {
    var href = baseElement.attr('href');
    return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
  };

  //////////////////////////////////////////////////////////////
  // Cookies API
  //////////////////////////////////////////////////////////////
  var lastCookies = {};
  var lastCookieString = '';
  var cookiePath = self.baseHref();

  function safeDecodeURIComponent(str) {
    try {
      return decodeURIComponent(str);
    } catch (e) {
      return str;
    }
  }

  /**
   * @name $browser#cookies
   *
   * @param {string=} name Cookie name
   * @param {string=} value Cookie value
   *
   * @description
   * The cookies method provides a 'private' low level access to browser cookies.
   * It is not meant to be used directly, use the $cookie service instead.
   *
   * The return values vary depending on the arguments that the method was called with as follows:
   *
   * - cookies() -> hash of all cookies, this is NOT a copy of the internal state, so do not modify
   *   it
   * - cookies(name, value) -> set name to value, if value is undefined delete the cookie
   * - cookies(name) -> the same as (name, undefined) == DELETES (no one calls it right now that
   *   way)
   *
   * @returns {Object} Hash of all cookies (if called without any parameter)
   */
  self.cookies = function(name, value) {
    var cookieLength, cookieArray, cookie, i, index;

    if (name) {
      if (value === undefined) {
        rawDocument.cookie = encodeURIComponent(name) + "=;path=" + cookiePath +
                                ";expires=Thu, 01 Jan 1970 00:00:00 GMT";
      } else {
        if (isString(value)) {
          cookieLength = (rawDocument.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value) +
                                ';path=' + cookiePath).length + 1;

          // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
          // - 300 cookies
          // - 20 cookies per unique domain
          // - 4096 bytes per cookie
          if (cookieLength > 4096) {
            $log.warn("Cookie '" + name +
              "' possibly not set or overflowed because it was too large (" +
              cookieLength + " > 4096 bytes)!");
          }
        }
      }
    } else {
      if (rawDocument.cookie !== lastCookieString) {
        lastCookieString = rawDocument.cookie;
        cookieArray = lastCookieString.split("; ");
        lastCookies = {};

        for (i = 0; i < cookieArray.length; i++) {
          cookie = cookieArray[i];
          index = cookie.indexOf('=');
          if (index > 0) { //ignore nameless cookies
            name = safeDecodeURIComponent(cookie.substring(0, index));
            // the first value that is seen for a cookie is the most
            // specific one.  values for the same cookie name that
            // follow are for less specific paths.
            if (lastCookies[name] === undefined) {
              lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
            }
          }
        }
      }
      return lastCookies;
    }
  };


  /**
   * @name $browser#defer
   * @param {function()} fn A function, who's execution should be deferred.
   * @param {number=} [delay=0] of milliseconds to defer the function execution.
   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
   *
   * @description
   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
   *
   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
   * via `$browser.defer.flush()`.
   *
   */
  self.defer = function(fn, delay) {
    var timeoutId;
    outstandingRequestCount++;
    timeoutId = setTimeout(function() {
      delete pendingDeferIds[timeoutId];
      completeOutstandingRequest(fn);
    }, delay || 0);
    pendingDeferIds[timeoutId] = true;
    return timeoutId;
  };


  /**
   * @name $browser#defer.cancel
   *
   * @description
   * Cancels a deferred task identified with `deferId`.
   *
   * @param {*} deferId Token returned by the `$browser.defer` function.
   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
   *                    canceled.
   */
  self.defer.cancel = function(deferId) {
    if (pendingDeferIds[deferId]) {
      delete pendingDeferIds[deferId];
      clearTimeout(deferId);
      completeOutstandingRequest(noop);
      return true;
    }
    return false;
  };

}

function $BrowserProvider() {
  this.$get = ['$window', '$log', '$sniffer', '$document',
      function($window, $log, $sniffer, $document) {
        return new Browser($window, $document, $log, $sniffer);
      }];
}

/**
 * @ngdoc service
 * @name $cacheFactory
 *
 * @description
 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
 * them.
 *
 * ```js
 *
 *  var cache = $cacheFactory('cacheId');
 *  expect($cacheFactory.get('cacheId')).toBe(cache);
 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
 *
 *  cache.put("key", "value");
 *  cache.put("another key", "another value");
 *
 *  // We've specified no options on creation
 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
 *
 * ```
 *
 *
 * @param {string} cacheId Name or id of the newly created cache.
 * @param {object=} options Options object that specifies the cache behavior. Properties:
 *
 *   - `{number=}` `capacity` — turns the cache into LRU cache.
 *
 * @returns {object} Newly created cache object with the following set of methods:
 *
 * - `{object}` `info()` — Returns id, size, and options of cache.
 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
 *   it.
 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
 * - `{void}` `removeAll()` — Removes all cached values.
 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
 *
 * @example
   <example module="cacheExampleApp">
     <file name="index.html">
       <div ng-controller="CacheController">
         <input ng-model="newCacheKey" placeholder="Key">
         <input ng-model="newCacheValue" placeholder="Value">
         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

         <p ng-if="keys.length">Cached Values</p>
         <div ng-repeat="key in keys">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="cache.get(key)"></b>
         </div>

         <p>Cache Info</p>
         <div ng-repeat="(key, value) in cache.info()">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="value"></b>
         </div>
       </div>
     </file>
     <file name="script.js">
       angular.module('cacheExampleApp', []).
         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
           $scope.keys = [];
           $scope.cache = $cacheFactory('cacheId');
           $scope.put = function(key, value) {
             if ($scope.cache.get(key) === undefined) {
               $scope.keys.push(key);
             }
             $scope.cache.put(key, value === undefined ? null : value);
           };
         }]);
     </file>
     <file name="style.css">
       p {
         margin: 10px 0 3px;
       }
     </file>
   </example>
 */
function $CacheFactoryProvider() {

  this.$get = function() {
    var caches = {};

    function cacheFactory(cacheId, options) {
      if (cacheId in caches) {
        throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);
      }

      var size = 0,
          stats = extend({}, options, {id: cacheId}),
          data = {},
          capacity = (options && options.capacity) || Number.MAX_VALUE,
          lruHash = {},
          freshEnd = null,
          staleEnd = null;

      /**
       * @ngdoc type
       * @name $cacheFactory.Cache
       *
       * @description
       * A cache object used to store and retrieve data, primarily used by
       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
       * templates and other data.
       *
       * ```js
       *  angular.module('superCache')
       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
       *      return $cacheFactory('super-cache');
       *    }]);
       * ```
       *
       * Example test:
       *
       * ```js
       *  it('should behave like a cache', inject(function(superCache) {
       *    superCache.put('key', 'value');
       *    superCache.put('another key', 'another value');
       *
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 2
       *    });
       *
       *    superCache.remove('another key');
       *    expect(superCache.get('another key')).toBeUndefined();
       *
       *    superCache.removeAll();
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 0
       *    });
       *  }));
       * ```
       */
      return caches[cacheId] = {

        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#put
         * @kind function
         *
         * @description
         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
         * retrieved later, and incrementing the size of the cache if the key was not already
         * present in the cache. If behaving like an LRU cache, it will also remove stale
         * entries from the set.
         *
         * It will not insert undefined values into the cache.
         *
         * @param {string} key the key under which the cached data is stored.
         * @param {*} value the value to store alongside the key. If it is undefined, the key
         *    will not be stored.
         * @returns {*} the value stored.
         */
        put: function(key, value) {
          if (isUndefined(value)) return;
          if (capacity < Number.MAX_VALUE) {
            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});

            refresh(lruEntry);
          }

          if (!(key in data)) size++;
          data[key] = value;

          if (size > capacity) {
            this.remove(staleEnd.key);
          }

          return value;
        },

        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#get
         * @kind function
         *
         * @description
         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
         *
         * @param {string} key the key of the data to be retrieved
         * @returns {*} the value stored.
         */
        get: function(key) {
          if (capacity < Number.MAX_VALUE) {
            var lruEntry = lruHash[key];

            if (!lruEntry) return;

            refresh(lruEntry);
          }

          return data[key];
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#remove
         * @kind function
         *
         * @description
         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
         *
         * @param {string} key the key of the entry to be removed
         */
        remove: function(key) {
          if (capacity < Number.MAX_VALUE) {
            var lruEntry = lruHash[key];

            if (!lruEntry) return;

            if (lruEntry == freshEnd) freshEnd = lruEntry.p;
            if (lruEntry == staleEnd) staleEnd = lruEntry.n;
            link(lruEntry.n,lruEntry.p);

            delete lruHash[key];
          }

          delete data[key];
          size--;
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#removeAll
         * @kind function
         *
         * @description
         * Clears the cache object of any entries.
         */
        removeAll: function() {
          data = {};
          size = 0;
          lruHash = {};
          freshEnd = staleEnd = null;
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#destroy
         * @kind function
         *
         * @description
         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
         * removing it from the {@link $cacheFactory $cacheFactory} set.
         */
        destroy: function() {
          data = null;
          stats = null;
          lruHash = null;
          delete caches[cacheId];
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#info
         * @kind function
         *
         * @description
         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
         *
         * @returns {object} an object with the following properties:
         *   <ul>
         *     <li>**id**: the id of the cache instance</li>
         *     <li>**size**: the number of entries kept in the cache instance</li>
         *     <li>**...**: any additional properties from the options object when creating the
         *       cache.</li>
         *   </ul>
         */
        info: function() {
          return extend({}, stats, {size: size});
        }
      };


      /**
       * makes the `entry` the freshEnd of the LRU linked list
       */
      function refresh(entry) {
        if (entry != freshEnd) {
          if (!staleEnd) {
            staleEnd = entry;
          } else if (staleEnd == entry) {
            staleEnd = entry.n;
          }

          link(entry.n, entry.p);
          link(entry, freshEnd);
          freshEnd = entry;
          freshEnd.n = null;
        }
      }


      /**
       * bidirectionally links two entries of the LRU linked list
       */
      function link(nextEntry, prevEntry) {
        if (nextEntry != prevEntry) {
          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
        }
      }
    }


  /**
   * @ngdoc method
   * @name $cacheFactory#info
   *
   * @description
   * Get information about all the caches that have been created
   *
   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
   */
    cacheFactory.info = function() {
      var info = {};
      forEach(caches, function(cache, cacheId) {
        info[cacheId] = cache.info();
      });
      return info;
    };


  /**
   * @ngdoc method
   * @name $cacheFactory#get
   *
   * @description
   * Get access to a cache object by the `cacheId` used when it was created.
   *
   * @param {string} cacheId Name or id of a cache to access.
   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
   */
    cacheFactory.get = function(cacheId) {
      return caches[cacheId];
    };


    return cacheFactory;
  };
}

/**
 * @ngdoc service
 * @name $templateCache
 *
 * @description
 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
 * can load templates directly into the cache in a `script` tag, or by consuming the
 * `$templateCache` service directly.
 *
 * Adding via the `script` tag:
 *
 * ```html
 *   <script type="text/ng-template" id="templateId.html">
 *     <p>This is the content of the template</p>
 *   </script>
 * ```
 *
 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
 * element with ng-app attribute), otherwise the template will be ignored.
 *
 * Adding via the $templateCache service:
 *
 * ```js
 * var myApp = angular.module('myApp', []);
 * myApp.run(function($templateCache) {
 *   $templateCache.put('templateId.html', 'This is the content of the template');
 * });
 * ```
 *
 * To retrieve the template later, simply use it in your HTML:
 * ```html
 * <div ng-include=" 'templateId.html' "></div>
 * ```
 *
 * or get it via Javascript:
 * ```js
 * $templateCache.get('templateId.html')
 * ```
 *
 * See {@link ng.$cacheFactory $cacheFactory}.
 *
 */
function $TemplateCacheProvider() {
  this.$get = ['$cacheFactory', function($cacheFactory) {
    return $cacheFactory('templates');
  }];
}

/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
 *
 * DOM-related variables:
 *
 * - "node" - DOM Node
 * - "element" - DOM Element or Node
 * - "$node" or "$element" - jqLite-wrapped node or element
 *
 *
 * Compiler related stuff:
 *
 * - "linkFn" - linking fn of a single directive
 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
 */


/**
 * @ngdoc service
 * @name $compile
 * @kind function
 *
 * @description
 * Compiles an HTML string or DOM into a template and produces a template function, which
 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
 *
 * The compilation is a process of walking the DOM tree and matching DOM elements to
 * {@link ng.$compileProvider#directive directives}.
 *
 * <div class="alert alert-warning">
 * **Note:** This document is an in-depth reference of all directive options.
 * For a gentle introduction to directives with examples of common use cases,
 * see the {@link guide/directive directive guide}.
 * </div>
 *
 * ## Comprehensive Directive API
 *
 * There are many different options for a directive.
 *
 * The difference resides in the return value of the factory function.
 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,
 * or just the `postLink` function (all other properties will have the default values).
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's recommended to use the "directive definition object" form.
 * </div>
 *
 * Here's an example directive declared with a Directive Definition Object:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       priority: 0,
 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
 *       // or
 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
 *       transclude: false,
 *       restrict: 'A',
 *       templateNamespace: 'html',
 *       scope: false,
 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
 *       controllerAs: 'stringIdentifier',
 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
 *       compile: function compile(tElement, tAttrs, transclude) {
 *         return {
 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *         }
 *         // or
 *         // return function postLink( ... ) { ... }
 *       },
 *       // or
 *       // link: {
 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *       // }
 *       // or
 *       // link: function postLink( ... ) { ... }
 *     };
 *     return directiveDefinitionObject;
 *   });
 * ```
 *
 * <div class="alert alert-warning">
 * **Note:** Any unspecified options will use the default value. You can see the default values below.
 * </div>
 *
 * Therefore the above can be simplified as:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       link: function postLink(scope, iElement, iAttrs) { ... }
 *     };
 *     return directiveDefinitionObject;
 *     // or
 *     // return function postLink(scope, iElement, iAttrs) { ... }
 *   });
 * ```
 *
 *
 *
 * ### Directive Definition Object
 *
 * The directive definition object provides instructions to the {@link ng.$compile
 * compiler}. The attributes are:
 *
 * #### `multiElement`
 * When this property is set to true, the HTML compiler will collect DOM nodes between
 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
 * together as the directive elements. It is recommended that this feature be used on directives
 * which are not strictly behavioural (such as {@link ngClick}), and which
 * do not manipulate or replace child nodes (such as {@link ngInclude}).
 *
 * #### `priority`
 * When there are multiple directives defined on a single DOM element, sometimes it
 * is necessary to specify the order in which the directives are applied. The `priority` is used
 * to sort the directives before their `compile` functions get called. Priority is defined as a
 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
 * are also run in priority order, but post-link functions are run in reverse order. The order
 * of directives with the same priority is undefined. The default priority is `0`.
 *
 * #### `terminal`
 * If set to true then the current `priority` will be the last set of directives
 * which will execute (any directives at the current priority will still execute
 * as the order of execution on same `priority` is undefined). Note that expressions
 * and other directives used in the directive's template will also be excluded from execution.
 *
 * #### `scope`
 * **If set to `true`,** then a new scope will be created for this directive. If multiple directives on the
 * same element request a new scope, only one new scope is created. The new scope rule does not
 * apply for the root of the template since the root of the template always gets a new scope.
 *
 * **If set to `{}` (object hash),** then a new "isolate" scope is created. The 'isolate' scope differs from
 * normal scope in that it does not prototypically inherit from the parent scope. This is useful
 * when creating reusable components, which should not accidentally read or modify data in the
 * parent scope.
 *
 * The 'isolate' scope takes an object hash which defines a set of local scope properties
 * derived from the parent scope. These local properties are useful for aliasing values for
 * templates. Locals definition is a hash of local scope property to its source:
 *
 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
 *   always a string since DOM attributes are strings. If no `attr` name is specified  then the
 *   attribute name is assumed to be the same as the local name.
 *   Given `<widget my-attr="hello {{name}}">` and widget definition
 *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect
 *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the
 *   `localName` property on the widget scope. The `name` is read from the parent scope (not
 *   component scope).
 *
 * * `=` or `=attr` - set up bi-directional binding between a local scope property and the
 *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`
 *   name is specified then the attribute name is assumed to be the same as the local name.
 *   Given `<widget my-attr="parentModel">` and widget definition of
 *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the
 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
 *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent
 *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You
 *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional. If
 *   you want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use
 *   `=*` or `=*attr` (`=*?` or `=*?attr` if the property is optional).
 *
 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.
 *   If no `attr` name is specified then the attribute name is assumed to be the same as the
 *   local name. Given `<widget my-attr="count = count + value">` and widget definition of
 *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to
 *   a function wrapper for the `count = count + value` expression. Often it's desirable to
 *   pass data from the isolated scope via an expression to the parent scope, this can be
 *   done by passing a map of local variable names and values into the expression wrapper fn.
 *   For example, if the expression is `increment(amount)` then we can specify the amount value
 *   by calling the `localFn` as `localFn({amount: 22})`.
 *
 *
 * #### `bindToController`
 * When an isolate scope is used for a component (see above), and `controllerAs` is used, `bindToController: true` will
 * allow a component to have its properties bound to the controller, rather than to scope. When the controller
 * is instantiated, the initial values of the isolate scope bindings are already available.
 *
 * #### `controller`
 * Controller constructor function. The controller is instantiated before the
 * pre-linking phase and it is shared with other directives (see
 * `require` attribute). This allows the directives to communicate with each other and augment
 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
 *
 * * `$scope` - Current scope associated with the element
 * * `$element` - Current element
 * * `$attrs` - Current attributes object for the element
 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
 *   `function([scope], cloneLinkingFn, futureParentElement)`.
 *    * `scope`: optional argument to override the scope.
 *    * `cloneLinkingFn`: optional argument to create clones of the original transcluded content.
 *    * `futureParentElement`:
 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
 *          and when the `cloneLinkinFn` is passed,
 *          as those elements need to created and cloned in a special way when they are defined outside their
 *          usual containers (e.g. like `<svg>`).
 *        * See also the `directive.templateNamespace` property.
 *
 *
 * #### `require`
 * Require another directive and inject its controller as the fourth argument to the linking function. The
 * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the
 * injected argument will be an array in corresponding order. If no such directive can be
 * found, or if the directive does not have a controller, then an error is raised. The name can be prefixed with:
 *
 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
 *   `null` to the `link` fn if not found.
 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
 *   `null` to the `link` fn if not found.
 *
 *
 * #### `controllerAs`
 * Identifier name for a reference to the controller in the directive's scope.
 * This allows the controller to be referenced from the directive template. The directive
 * needs to define a scope for this configuration to be used. Useful in the case when
 * directive is used as component.
 *
 *
 * #### `restrict`
 * String of subset of `EACM` which restricts the directive to a specific directive
 * declaration style. If omitted, the defaults (elements and attributes) are used.
 *
 * * `E` - Element name (default): `<my-directive></my-directive>`
 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
 * * `C` - Class: `<div class="my-directive: exp;"></div>`
 * * `M` - Comment: `<!-- directive: my-directive exp -->`
 *
 *
 * #### `templateNamespace`
 * String representing the document type used by the markup in the template.
 * AngularJS needs this information as those elements need to be created and cloned
 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
 *
 * * `html` - All root nodes in the template are HTML. Root nodes may also be
 *   top-level elements such as `<svg>` or `<math>`.
 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
 *
 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
 *
 * #### `template`
 * HTML markup that may:
 * * Replace the contents of the directive's element (default).
 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
 * * Wrap the contents of the directive's element (if `transclude` is true).
 *
 * Value may be:
 *
 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
 *   function api below) and returns a string value.
 *
 *
 * #### `templateUrl`
 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
 *
 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
 * for later when the template has been resolved.  In the meantime it will continue to compile and link
 * sibling and parent elements as though this element had not contained any directives.
 *
 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
 * case when only one deeply nested directive has `templateUrl`.
 *
 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
 *
 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
 * a string value representing the url.  In either case, the template URL is passed through {@link
 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
 *
 *
 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
 * specify what the template should replace. Defaults to `false`.
 *
 * * `true` - the template will replace the directive's element.
 * * `false` - the template will replace the contents of the directive's element.
 *
 * The replacement process migrates all of the attributes / classes from the old element to the new
 * one. See the {@link guide/directive#template-expanding-directive
 * Directives Guide} for an example.
 *
 * There are very few scenarios where element replacement is required for the application function,
 * the main one being reusable custom components that are used within SVG contexts
 * (because SVG doesn't work with custom elements in the DOM tree).
 *
 * #### `transclude`
 * Extract the contents of the element where the directive appears and make it available to the directive.
 * The contents are compiled and provided to the directive as a **transclusion function**. See the
 * {@link $compile#transclusion Transclusion} section below.
 *
 * There are two kinds of transclusion depending upon whether you want to transclude just the contents of the
 * directive's element or the entire element:
 *
 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
 * * `'element'` - transclude the whole of the directive's element including any directives on this
 *   element that defined at a lower priority than this directive. When used, the `template`
 *   property is ignored.
 *
 *
 * #### `compile`
 *
 * ```js
 *   function compile(tElement, tAttrs, transclude) { ... }
 * ```
 *
 * The compile function deals with transforming the template DOM. Since most directives do not do
 * template transformation, it is not used often. The compile function takes the following arguments:
 *
 *   * `tElement` - template element - The element where the directive has been declared. It is
 *     safe to do template transformation on the element and child elements only.
 *
 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
 *     between all directive compile functions.
 *
 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
 *
 * <div class="alert alert-warning">
 * **Note:** The template instance and the link instance may be different objects if the template has
 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
 * should be done in a linking function rather than in a compile function.
 * </div>

 * <div class="alert alert-warning">
 * **Note:** The compile function cannot handle directives that recursively use themselves in their
 * own templates or compile functions. Compiling these directives results in an infinite loop and a
 * stack overflow errors.
 *
 * This can be avoided by manually using $compile in the postLink function to imperatively compile
 * a directive's template instead of relying on automatic template compilation via `template` or
 * `templateUrl` declaration or manual compilation inside the compile function.
 * </div>
 *
 * <div class="alert alert-error">
 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
 *   to the link function instead.
 * </div>

 * A compile function can have a return value which can be either a function or an object.
 *
 * * returning a (post-link) function - is equivalent to registering the linking function via the
 *   `link` property of the config object when the compile function is empty.
 *
 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
 *   control when a linking function should be called during the linking phase. See info about
 *   pre-linking and post-linking functions below.
 *
 *
 * #### `link`
 * This property is used only if the `compile` property is not defined.
 *
 * ```js
 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
 * ```
 *
 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
 * executed after the template has been cloned. This is where most of the directive logic will be
 * put.
 *
 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
 *
 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
 *     manipulate the children of the element only in `postLink` function since the children have
 *     already been linked.
 *
 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
 *     between all directive linking functions.
 *
 *   * `controller` - a controller instance - A controller instance if at least one directive on the
 *     element defines a controller. The controller is shared among all the directives, which allows
 *     the directives to use the controllers as a communication channel.
 *
 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
 *     This is the same as the `$transclude`
 *     parameter of directive controllers, see there for details.
 *     `function([scope], cloneLinkingFn, futureParentElement)`.
 *
 * #### Pre-linking function
 *
 * Executed before the child elements are linked. Not safe to do DOM transformation since the
 * compiler linking function will fail to locate the correct elements for linking.
 *
 * #### Post-linking function
 *
 * Executed after the child elements are linked.
 *
 * Note that child elements that contain `templateUrl` directives will not have been compiled
 * and linked since they are waiting for their template to load asynchronously and their own
 * compilation and linking has been suspended until that occurs.
 *
 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
 * for their async templates to be resolved.
 *
 *
 * ### Transclusion
 *
 * Transclusion is the process of extracting a collection of DOM element from one part of the DOM and
 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
 * scope from where they were taken.
 *
 * Transclusion is used (often with {@link ngTransclude}) to insert the
 * original contents of a directive's element into a specified place in the template of the directive.
 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
 * content has access to the properties on the scope from which it was taken, even if the directive
 * has isolated scope.
 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
 *
 * This makes it possible for the widget to have private state for its template, while the transcluded
 * content has access to its originating scope.
 *
 * <div class="alert alert-warning">
 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
 * Testing Transclusion Directives}.
 * </div>
 *
 * #### Transclusion Functions
 *
 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
 * function** to the directive's `link` function and `controller`. This transclusion function is a special
 * **linking function** that will return the compiled contents linked to a new transclusion scope.
 *
 * <div class="alert alert-info">
 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
 * ngTransclude will deal with it for us.
 * </div>
 *
 * If you want to manually control the insertion and removal of the transcluded content in your directive
 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
 * object that contains the compiled DOM, which is linked to the correct transclusion scope.
 *
 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
 * content and the `scope` is the newly created transclusion scope, to which the clone is bound.
 *
 * <div class="alert alert-info">
 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a translude function
 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
 * </div>
 *
 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
 * attach function**:
 *
 * ```js
 * var transcludedContent, transclusionScope;
 *
 * $transclude(function(clone, scope) {
 *   element.append(clone);
 *   transcludedContent = clone;
 *   transclusionScope = scope;
 * });
 * ```
 *
 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
 * associated transclusion scope:
 *
 * ```js
 * transcludedContent.remove();
 * transclusionScope.$destroy();
 * ```
 *
 * <div class="alert alert-info">
 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),
 * then you are also responsible for calling `$destroy` on the transclusion scope.
 * </div>
 *
 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
 * automatically destroy their transluded clones as necessary so you do not need to worry about this if
 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
 *
 *
 * #### Transclusion Scopes
 *
 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
 * was taken.
 *
 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
 * like this:
 *
 * ```html
 * <div ng-app>
 *   <div isolate>
 *     <div transclusion>
 *     </div>
 *   </div>
 * </div>
 * ```
 *
 * The `$parent` scope hierarchy will look like this:
 *
 * ```
 * - $rootScope
 *   - isolate
 *     - transclusion
 * ```
 *
 * but the scopes will inherit prototypically from different scopes to their `$parent`.
 *
 * ```
 * - $rootScope
 *   - transclusion
 * - isolate
 * ```
 *
 *
 * ### Attributes
 *
 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
 * `link()` or `compile()` functions. It has a variety of uses.
 *
 * accessing *Normalized attribute names:*
 * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.
 * the attributes object allows for normalized access to
 *   the attributes.
 *
 * * *Directive inter-communication:* All directives share the same instance of the attributes
 *   object which allows the directives to use the attributes object as inter directive
 *   communication.
 *
 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
 *   allowing other directives to read the interpolated value.
 *
 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
 *   the only way to easily get the actual value because during the linking phase the interpolation
 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
 *
 * ```js
 * function linkingFn(scope, elm, attrs, ctrl) {
 *   // get the attribute value
 *   console.log(attrs.ngModel);
 *
 *   // change the attribute
 *   attrs.$set('ngModel', 'new value');
 *
 *   // observe changes to interpolated attribute
 *   attrs.$observe('ngModel', function(value) {
 *     console.log('ngModel has changed value to ' + value);
 *   });
 * }
 * ```
 *
 * ## Example
 *
 * <div class="alert alert-warning">
 * **Note**: Typically directives are registered with `module.directive`. The example below is
 * to illustrate how `$compile` works.
 * </div>
 *
 <example module="compileExample">
   <file name="index.html">
    <script>
      angular.module('compileExample', [], function($compileProvider) {
        // configure new 'compile' directive by passing a directive
        // factory function. The factory function injects the '$compile'
        $compileProvider.directive('compile', function($compile) {
          // directive factory creates a link function
          return function(scope, element, attrs) {
            scope.$watch(
              function(scope) {
                 // watch the 'compile' expression for changes
                return scope.$eval(attrs.compile);
              },
              function(value) {
                // when the 'compile' expression changes
                // assign it into the current DOM
                element.html(value);

                // compile the new DOM and link it to the current
                // scope.
                // NOTE: we only compile .childNodes so that
                // we don't get into infinite loop compiling ourselves
                $compile(element.contents())(scope);
              }
            );
          };
        });
      })
      .controller('GreeterController', ['$scope', function($scope) {
        $scope.name = 'Angular';
        $scope.html = 'Hello {{name}}';
      }]);
    </script>
    <div ng-controller="GreeterController">
      <input ng-model="name"> <br>
      <textarea ng-model="html"></textarea> <br>
      <div compile="html"></div>
    </div>
   </file>
   <file name="protractor.js" type="protractor">
     it('should auto compile', function() {
       var textarea = $('textarea');
       var output = $('div[compile]');
       // The initial state reads 'Hello Angular'.
       expect(output.getText()).toBe('Hello Angular');
       textarea.clear();
       textarea.sendKeys('{{name}}!');
       expect(output.getText()).toBe('Angular!');
     });
   </file>
 </example>

 *
 *
 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
 *
 * <div class="alert alert-error">
 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
 *   e.g. will not use the right outer scope. Please pass the transclude function as a
 *   `parentBoundTranscludeFn` to the link function instead.
 * </div>
 *
 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
 *                 root element(s), not their children)
 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
 * (a DOM element/tree) to a scope. Where:
 *
 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
 *  called as: <br> `cloneAttachFn(clonedElement, scope)` where:
 *
 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
 *      * `scope` - is the current scope with which the linking function is working with.
 *
 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
 *  keys may be used to control linking behavior:
 *
 *      * `parentBoundTranscludeFn` - the transclude function made available to
 *        directives; if given, it will be passed through to the link functions of
 *        directives found in `element` during compilation.
 *      * `transcludeControllers` - an object hash with keys that map controller names
 *        to controller instances; if given, it will make the controllers
 *        available to directives.
 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
 *        the cloned elements; only needed for transcludes that are allowed to contain non html
 *        elements (e.g. SVG elements). See also the directive.controller property.
 *
 * Calling the linking function returns the element of the template. It is either the original
 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
 *
 * After linking the view is not updated until after a call to $digest which typically is done by
 * Angular automatically.
 *
 * If you need access to the bound view, there are two ways to do it:
 *
 * - If you are not asking the linking function to clone the template, create the DOM element(s)
 *   before you send them to the compiler and keep this reference around.
 *   ```js
 *     var element = $compile('<p>{{total}}</p>')(scope);
 *   ```
 *
 * - if on the other hand, you need the element to be cloned, the view reference from the original
 *   example would not point to the clone, but rather to the original template that was cloned. In
 *   this case, you can access the clone via the cloneAttachFn:
 *   ```js
 *     var templateElement = angular.element('<p>{{total}}</p>'),
 *         scope = ....;
 *
 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
 *       //attach the clone to DOM document at the right place
 *     });
 *
 *     //now we have reference to the cloned DOM via `clonedElement`
 *   ```
 *
 *
 * For information on how the compiler works, see the
 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
 */

var $compileMinErr = minErr('$compile');

/**
 * @ngdoc provider
 * @name $compileProvider
 *
 * @description
 */
$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];
function $CompileProvider($provide, $$sanitizeUriProvider) {
  var hasDirectives = {},
      Suffix = 'Directive',
      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/,
      CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/,
      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),
      REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;

  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
  // The assumption is that future DOM event attribute names will begin with
  // 'on' and be composed of only English letters.
  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;

  function parseIsolateBindings(scope, directiveName, isController) {
    var LOCAL_REGEXP = /^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/;

    var bindings = {};

    forEach(scope, function(definition, scopeName) {
      var match = definition.match(LOCAL_REGEXP);

      if (!match) {
        throw $compileMinErr('iscp',
            "Invalid {3} for directive '{0}'." +
            " Definition: {... {1}: '{2}' ...}",
            directiveName, scopeName, definition,
            (isController ? "controller bindings definition" :
            "isolate scope definition"));
      }

      bindings[scopeName] = {
        mode: match[1][0],
        collection: match[2] === '*',
        optional: match[3] === '?',
        attrName: match[4] || scopeName
      };
    });

    return bindings;
  }

  function parseDirectiveBindings(directive, directiveName) {
    var bindings = {
      isolateScope: null,
      bindToController: null
    };
    if (isObject(directive.scope)) {
      if (directive.bindToController === true) {
        bindings.bindToController = parseIsolateBindings(directive.scope,
                                                         directiveName, true);
        bindings.isolateScope = {};
      } else {
        bindings.isolateScope = parseIsolateBindings(directive.scope,
                                                     directiveName, false);
      }
    }
    if (isObject(directive.bindToController)) {
      bindings.bindToController =
          parseIsolateBindings(directive.bindToController, directiveName, true);
    }
    if (isObject(bindings.bindToController)) {
      var controller = directive.controller;
      var controllerAs = directive.controllerAs;
      if (!controller) {
        // There is no controller, there may or may not be a controllerAs property
        throw $compileMinErr('noctrl',
              "Cannot bind to controller without directive '{0}'s controller.",
              directiveName);
      } else if (!identifierForController(controller, controllerAs)) {
        // There is a controller, but no identifier or controllerAs property
        throw $compileMinErr('noident',
              "Cannot bind to controller without identifier for directive '{0}'.",
              directiveName);
      }
    }
    return bindings;
  }

  /**
   * @ngdoc method
   * @name $compileProvider#directive
   * @kind function
   *
   * @description
   * Register a new directive with the compiler.
   *
   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
   *    names and the values are the factories.
   * @param {Function|Array} directiveFactory An injectable directive factory function. See
   *    {@link guide/directive} for more info.
   * @returns {ng.$compileProvider} Self for chaining.
   */
   this.directive = function registerDirective(name, directiveFactory) {
    assertNotHasOwnProperty(name, 'directive');
    if (isString(name)) {
      assertArg(directiveFactory, 'directiveFactory');
      if (!hasDirectives.hasOwnProperty(name)) {
        hasDirectives[name] = [];
        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',
          function($injector, $exceptionHandler) {
            var directives = [];
            forEach(hasDirectives[name], function(directiveFactory, index) {
              try {
                var directive = $injector.invoke(directiveFactory);
                if (isFunction(directive)) {
                  directive = { compile: valueFn(directive) };
                } else if (!directive.compile && directive.link) {
                  directive.compile = valueFn(directive.link);
                }
                directive.priority = directive.priority || 0;
                directive.index = index;
                directive.name = directive.name || name;
                directive.require = directive.require || (directive.controller && directive.name);
                directive.restrict = directive.restrict || 'EA';
                var bindings = directive.$$bindings =
                    parseDirectiveBindings(directive, directive.name);
                if (isObject(bindings.isolateScope)) {
                  directive.$$isolateBindings = bindings.isolateScope;
                }
                directives.push(directive);
              } catch (e) {
                $exceptionHandler(e);
              }
            });
            return directives;
          }]);
      }
      hasDirectives[name].push(directiveFactory);
    } else {
      forEach(name, reverseParams(registerDirective));
    }
    return this;
  };


  /**
   * @ngdoc method
   * @name $compileProvider#aHrefSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at preventing XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.aHrefSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
      return this;
    } else {
      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
    }
  };


  /**
   * @ngdoc method
   * @name $compileProvider#imgSrcSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.imgSrcSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
      return this;
    } else {
      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
    }
  };

  /**
   * @ngdoc method
   * @name  $compileProvider#debugInfoEnabled
   *
   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
   * current debugInfoEnabled state
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   *
   * @kind function
   *
   * @description
   * Call this method to enable/disable various debug runtime information in the compiler such as adding
   * binding information and a reference to the current scope on to DOM elements.
   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
   * * `ng-binding` CSS class
   * * `$binding` data property containing an array of the binding expressions
   *
   * You may want to disable this in production for a significant performance boost. See
   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
   *
   * The default value is true.
   */
  var debugInfoEnabled = true;
  this.debugInfoEnabled = function(enabled) {
    if (isDefined(enabled)) {
      debugInfoEnabled = enabled;
      return this;
    }
    return debugInfoEnabled;
  };

  this.$get = [
            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',
            '$controller', '$rootScope', '$document', '$sce', '$animate', '$$sanitizeUri',
    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,
             $controller,   $rootScope,   $document,   $sce,   $animate,   $$sanitizeUri) {

    var Attributes = function(element, attributesToCopy) {
      if (attributesToCopy) {
        var keys = Object.keys(attributesToCopy);
        var i, l, key;

        for (i = 0, l = keys.length; i < l; i++) {
          key = keys[i];
          this[key] = attributesToCopy[key];
        }
      } else {
        this.$attr = {};
      }

      this.$$element = element;
    };

    Attributes.prototype = {
      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$normalize
       * @kind function
       *
       * @description
       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or
       * `data-`) to its normalized, camelCase form.
       *
       * Also there is special case for Moz prefix starting with upper case letter.
       *
       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
       *
       * @param {string} name Name to normalize
       */
      $normalize: directiveNormalize,


      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$addClass
       * @kind function
       *
       * @description
       * Adds the CSS class value specified by the classVal parameter to the element. If animations
       * are enabled then an animation will be triggered for the class addition.
       *
       * @param {string} classVal The className value that will be added to the element
       */
      $addClass: function(classVal) {
        if (classVal && classVal.length > 0) {
          $animate.addClass(this.$$element, classVal);
        }
      },

      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$removeClass
       * @kind function
       *
       * @description
       * Removes the CSS class value specified by the classVal parameter from the element. If
       * animations are enabled then an animation will be triggered for the class removal.
       *
       * @param {string} classVal The className value that will be removed from the element
       */
      $removeClass: function(classVal) {
        if (classVal && classVal.length > 0) {
          $animate.removeClass(this.$$element, classVal);
        }
      },

      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$updateClass
       * @kind function
       *
       * @description
       * Adds and removes the appropriate CSS class values to the element based on the difference
       * between the new and old CSS class values (specified as newClasses and oldClasses).
       *
       * @param {string} newClasses The current CSS className value
       * @param {string} oldClasses The former CSS className value
       */
      $updateClass: function(newClasses, oldClasses) {
        var toAdd = tokenDifference(newClasses, oldClasses);
        if (toAdd && toAdd.length) {
          $animate.addClass(this.$$element, toAdd);
        }

        var toRemove = tokenDifference(oldClasses, newClasses);
        if (toRemove && toRemove.length) {
          $animate.removeClass(this.$$element, toRemove);
        }
      },

      /**
       * Set a normalized attribute on the element in a way such that all directives
       * can share the attribute. This function properly handles boolean attributes.
       * @param {string} key Normalized key. (ie ngAttribute)
       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
       *     Defaults to true.
       * @param {string=} attrName Optional none normalized name. Defaults to key.
       */
      $set: function(key, value, writeAttr, attrName) {
        // TODO: decide whether or not to throw an error if "class"
        //is set through this function since it may cause $updateClass to
        //become unstable.

        var node = this.$$element[0],
            booleanKey = getBooleanAttrName(node, key),
            aliasedKey = getAliasedAttrName(node, key),
            observer = key,
            nodeName;

        if (booleanKey) {
          this.$$element.prop(key, value);
          attrName = booleanKey;
        } else if (aliasedKey) {
          this[aliasedKey] = value;
          observer = aliasedKey;
        }

        this[key] = value;

        // translate normalized key to actual key
        if (attrName) {
          this.$attr[key] = attrName;
        } else {
          attrName = this.$attr[key];
          if (!attrName) {
            this.$attr[key] = attrName = snake_case(key, '-');
          }
        }

        nodeName = nodeName_(this.$$element);

        if ((nodeName === 'a' && key === 'href') ||
            (nodeName === 'img' && key === 'src')) {
          // sanitize a[href] and img[src] values
          this[key] = value = $$sanitizeUri(value, key === 'src');
        } else if (nodeName === 'img' && key === 'srcset') {
          // sanitize img[srcset] values
          var result = "";

          // first check if there are spaces because it's not the same pattern
          var trimmedSrcset = trim(value);
          //                (   999x   ,|   999w   ,|   ,|,   )
          var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;
          var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;

          // split srcset into tuple of uri and descriptor except for the last item
          var rawUris = trimmedSrcset.split(pattern);

          // for each tuples
          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);
          for (var i = 0; i < nbrUrisWith2parts; i++) {
            var innerIdx = i * 2;
            // sanitize the uri
            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);
            // add the descriptor
            result += (" " + trim(rawUris[innerIdx + 1]));
          }

          // split the last item into uri and descriptor
          var lastTuple = trim(rawUris[i * 2]).split(/\s/);

          // sanitize the last uri
          result += $$sanitizeUri(trim(lastTuple[0]), true);

          // and add the last descriptor if any
          if (lastTuple.length === 2) {
            result += (" " + trim(lastTuple[1]));
          }
          this[key] = value = result;
        }

        if (writeAttr !== false) {
          if (value === null || value === undefined) {
            this.$$element.removeAttr(attrName);
          } else {
            this.$$element.attr(attrName, value);
          }
        }

        // fire observers
        var $$observers = this.$$observers;
        $$observers && forEach($$observers[observer], function(fn) {
          try {
            fn(value);
          } catch (e) {
            $exceptionHandler(e);
          }
        });
      },


      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$observe
       * @kind function
       *
       * @description
       * Observes an interpolated attribute.
       *
       * The observer function will be invoked once during the next `$digest` following
       * compilation. The observer is then invoked whenever the interpolated value
       * changes.
       *
       * @param {string} key Normalized key. (ie ngAttribute) .
       * @param {function(interpolatedValue)} fn Function that will be called whenever
                the interpolated value of the attribute changes.
       *        See the {@link guide/directive#text-and-attribute-bindings Directives} guide for more info.
       * @returns {function()} Returns a deregistration function for this observer.
       */
      $observe: function(key, fn) {
        var attrs = this,
            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),
            listeners = ($$observers[key] || ($$observers[key] = []));

        listeners.push(fn);
        $rootScope.$evalAsync(function() {
          if (!listeners.$$inter && attrs.hasOwnProperty(key)) {
            // no one registered attribute interpolation function, so lets call it manually
            fn(attrs[key]);
          }
        });

        return function() {
          arrayRemove(listeners, fn);
        };
      }
    };


    function safeAddClass($element, className) {
      try {
        $element.addClass(className);
      } catch (e) {
        // ignore, since it means that we are trying to set class on
        // SVG element, where class name is read-only.
      }
    }


    var startSymbol = $interpolate.startSymbol(),
        endSymbol = $interpolate.endSymbol(),
        denormalizeTemplate = (startSymbol == '{{' || endSymbol  == '}}')
            ? identity
            : function denormalizeTemplate(template) {
              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
        },
        NG_ATTR_BINDING = /^ngAttr[A-Z]/;

    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {
      var bindings = $element.data('$binding') || [];

      if (isArray(binding)) {
        bindings = bindings.concat(binding);
      } else {
        bindings.push(binding);
      }

      $element.data('$binding', bindings);
    } : noop;

    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {
      safeAddClass($element, 'ng-binding');
    } : noop;

    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';
      $element.data(dataName, scope);
    } : noop;

    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {
      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');
    } : noop;

    return compile;

    //================================

    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,
                        previousCompileContext) {
      if (!($compileNodes instanceof jqLite)) {
        // jquery always rewraps, whereas we need to preserve the original selector so that we can
        // modify it.
        $compileNodes = jqLite($compileNodes);
      }
      // We can not compile top level text elements since text nodes can be merged and we will
      // not be able to attach scope data to them, so we will wrap them in <span>
      forEach($compileNodes, function(node, index) {
        if (node.nodeType == NODE_TYPE_TEXT && node.nodeValue.match(/\S+/) /* non-empty */ ) {
          $compileNodes[index] = jqLite(node).wrap('<span></span>').parent()[0];
        }
      });
      var compositeLinkFn =
              compileNodes($compileNodes, transcludeFn, $compileNodes,
                           maxPriority, ignoreDirective, previousCompileContext);
      compile.$$addScopeClass($compileNodes);
      var namespace = null;
      return function publicLinkFn(scope, cloneConnectFn, options) {
        assertArg(scope, 'scope');

        options = options || {};
        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,
          transcludeControllers = options.transcludeControllers,
          futureParentElement = options.futureParentElement;

        // When `parentBoundTranscludeFn` is passed, it is a
        // `controllersBoundTransclude` function (it was previously passed
        // as `transclude` to directive.link) so we must unwrap it to get
        // its `boundTranscludeFn`
        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;
        }

        if (!namespace) {
          namespace = detectNamespaceForChildElements(futureParentElement);
        }
        var $linkNode;
        if (namespace !== 'html') {
          // When using a directive with replace:true and templateUrl the $compileNodes
          // (or a child element inside of them)
          // might change, so we need to recreate the namespace adapted compileNodes
          // for call to the link function.
          // Note: This will already clone the nodes...
          $linkNode = jqLite(
            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())
          );
        } else if (cloneConnectFn) {
          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
          // and sometimes changes the structure of the DOM.
          $linkNode = JQLitePrototype.clone.call($compileNodes);
        } else {
          $linkNode = $compileNodes;
        }

        if (transcludeControllers) {
          for (var controllerName in transcludeControllers) {
            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);
          }
        }

        compile.$$addScopeInfo($linkNode, scope);

        if (cloneConnectFn) cloneConnectFn($linkNode, scope);
        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
        return $linkNode;
      };
    }

    function detectNamespaceForChildElements(parentElement) {
      // TODO: Make this detect MathML as well...
      var node = parentElement && parentElement[0];
      if (!node) {
        return 'html';
      } else {
        return nodeName_(node) !== 'foreignobject' && node.toString().match(/SVG/) ? 'svg' : 'html';
      }
    }

    /**
     * Compile function matches each node in nodeList against the directives. Once all directives
     * for a particular node are collected their compile functions are executed. The compile
     * functions return values - the linking functions - are combined into a composite linking
     * function, which is the a linking function for the node.
     *
     * @param {NodeList} nodeList an array of nodes or NodeList to compile
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *        scope argument is auto-generated to the new child of the transcluded parent scope.
     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
     *        the rootElement must be set the jqLite collection of the compile root. This is
     *        needed so that the jqLite collection items can be replaced with widgets.
     * @param {number=} maxPriority Max directive priority.
     * @returns {Function} A composite linking function of all of the matched directives or null.
     */
    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,
                            previousCompileContext) {
      var linkFns = [],
          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;

      for (var i = 0; i < nodeList.length; i++) {
        attrs = new Attributes();

        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,
                                        ignoreDirective);

        nodeLinkFn = (directives.length)
            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,
                                      null, [], [], previousCompileContext)
            : null;

        if (nodeLinkFn && nodeLinkFn.scope) {
          compile.$$addScopeClass(attrs.$$element);
        }

        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||
                      !(childNodes = nodeList[i].childNodes) ||
                      !childNodes.length)
            ? null
            : compileNodes(childNodes,
                 nodeLinkFn ? (
                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)
                     && nodeLinkFn.transclude) : transcludeFn);

        if (nodeLinkFn || childLinkFn) {
          linkFns.push(i, nodeLinkFn, childLinkFn);
          linkFnFound = true;
          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
        }

        //use the previous context only for the first element in the virtual group
        previousCompileContext = null;
      }

      // return a linking function if we have found anything, null otherwise
      return linkFnFound ? compositeLinkFn : null;

      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;
        var stableNodeList;


        if (nodeLinkFnFound) {
          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
          // offsets don't get screwed up
          var nodeListLength = nodeList.length;
          stableNodeList = new Array(nodeListLength);

          // create a sparse array by only copying the elements which have a linkFn
          for (i = 0; i < linkFns.length; i+=3) {
            idx = linkFns[i];
            stableNodeList[idx] = nodeList[idx];
          }
        } else {
          stableNodeList = nodeList;
        }

        for (i = 0, ii = linkFns.length; i < ii;) {
          node = stableNodeList[linkFns[i++]];
          nodeLinkFn = linkFns[i++];
          childLinkFn = linkFns[i++];

          if (nodeLinkFn) {
            if (nodeLinkFn.scope) {
              childScope = scope.$new();
              compile.$$addScopeInfo(jqLite(node), childScope);
              var destroyBindings = nodeLinkFn.$$destroyBindings;
              if (destroyBindings) {
                nodeLinkFn.$$destroyBindings = null;
                childScope.$on('$destroyed', destroyBindings);
              }
            } else {
              childScope = scope;
            }

            if (nodeLinkFn.transcludeOnThisElement) {
              childBoundTranscludeFn = createBoundTranscludeFn(
                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn,
                  nodeLinkFn.elementTranscludeOnThisElement);

            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
              childBoundTranscludeFn = parentBoundTranscludeFn;

            } else if (!parentBoundTranscludeFn && transcludeFn) {
              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);

            } else {
              childBoundTranscludeFn = null;
            }

            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn,
                       nodeLinkFn);

          } else if (childLinkFn) {
            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
          }
        }
      }
    }

    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn, elementTransclusion) {

      var boundTranscludeFn = function(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {

        if (!transcludedScope) {
          transcludedScope = scope.$new(false, containingScope);
          transcludedScope.$$transcluded = true;
        }

        return transcludeFn(transcludedScope, cloneFn, {
          parentBoundTranscludeFn: previousBoundTranscludeFn,
          transcludeControllers: controllers,
          futureParentElement: futureParentElement
        });
      };

      return boundTranscludeFn;
    }

    /**
     * Looks for directives on the given node and adds them to the directive collection which is
     * sorted.
     *
     * @param node Node to search.
     * @param directives An array to which the directives are added to. This array is sorted before
     *        the function returns.
     * @param attrs The shared attrs object which is used to populate the normalized attributes.
     * @param {number=} maxPriority Max directive priority.
     */
    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
      var nodeType = node.nodeType,
          attrsMap = attrs.$attr,
          match,
          className;

      switch (nodeType) {
        case NODE_TYPE_ELEMENT: /* Element */
          // use the node name: <directive>
          addDirective(directives,
              directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);

          // iterate over the attributes
          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,
                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
            var attrStartName = false;
            var attrEndName = false;

            attr = nAttrs[j];
            name = attr.name;
            value = trim(attr.value);

            // support ngAttr attribute binding
            ngAttrName = directiveNormalize(name);
            if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {
              name = name.replace(PREFIX_REGEXP, '')
                .substr(8).replace(/_(.)/g, function(match, letter) {
                  return letter.toUpperCase();
                });
            }

            var directiveNName = ngAttrName.replace(/(Start|End)$/, '');
            if (directiveIsMultiElement(directiveNName)) {
              if (ngAttrName === directiveNName + 'Start') {
                attrStartName = name;
                attrEndName = name.substr(0, name.length - 5) + 'end';
                name = name.substr(0, name.length - 6);
              }
            }

            nName = directiveNormalize(name.toLowerCase());
            attrsMap[nName] = name;
            if (isNgAttr || !attrs.hasOwnProperty(nName)) {
                attrs[nName] = value;
                if (getBooleanAttrName(node, nName)) {
                  attrs[nName] = true; // presence means true
                }
            }
            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,
                          attrEndName);
          }

          // use class as directive
          className = node.className;
          if (isObject(className)) {
              // Maybe SVGAnimatedString
              className = className.animVal;
          }
          if (isString(className) && className !== '') {
            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
              nName = directiveNormalize(match[2]);
              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
                attrs[nName] = trim(match[3]);
              }
              className = className.substr(match.index + match[0].length);
            }
          }
          break;
        case NODE_TYPE_TEXT: /* Text Node */
          addTextInterpolateDirective(directives, node.nodeValue);
          break;
        case NODE_TYPE_COMMENT: /* Comment */
          try {
            match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
            if (match) {
              nName = directiveNormalize(match[1]);
              if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
                attrs[nName] = trim(match[2]);
              }
            }
          } catch (e) {
            // turns out that under some circumstances IE9 throws errors when one attempts to read
            // comment's node value.
            // Just ignore it and continue. (Can't seem to reproduce in test case.)
          }
          break;
      }

      directives.sort(byPriority);
      return directives;
    }

    /**
     * Given a node with an directive-start it collects all of the siblings until it finds
     * directive-end.
     * @param node
     * @param attrStart
     * @param attrEnd
     * @returns {*}
     */
    function groupScan(node, attrStart, attrEnd) {
      var nodes = [];
      var depth = 0;
      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
        do {
          if (!node) {
            throw $compileMinErr('uterdir',
                      "Unterminated attribute, found '{0}' but no matching '{1}' found.",
                      attrStart, attrEnd);
          }
          if (node.nodeType == NODE_TYPE_ELEMENT) {
            if (node.hasAttribute(attrStart)) depth++;
            if (node.hasAttribute(attrEnd)) depth--;
          }
          nodes.push(node);
          node = node.nextSibling;
        } while (depth > 0);
      } else {
        nodes.push(node);
      }

      return jqLite(nodes);
    }

    /**
     * Wrapper for linking function which converts normal linking function into a grouped
     * linking function.
     * @param linkFn
     * @param attrStart
     * @param attrEnd
     * @returns {Function}
     */
    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
      return function(scope, element, attrs, controllers, transcludeFn) {
        element = groupScan(element[0], attrStart, attrEnd);
        return linkFn(scope, element, attrs, controllers, transcludeFn);
      };
    }

    /**
     * Once the directives have been collected, their compile functions are executed. This method
     * is responsible for inlining directive templates as well as terminating the application
     * of the directives if the terminal directive has been reached.
     *
     * @param {Array} directives Array of collected directives to execute their compile function.
     *        this needs to be pre-sorted by priority order.
     * @param {Node} compileNode The raw DOM node to apply the compile functions to
     * @param {Object} templateAttrs The shared attribute function
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *                                                  scope argument is auto-generated to the new
     *                                                  child of the transcluded parent scope.
     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
     *                              argument has the root jqLite array so that we can replace nodes
     *                              on it.
     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
     *                                           compiling the transclusion.
     * @param {Array.<Function>} preLinkFns
     * @param {Array.<Function>} postLinkFns
     * @param {Object} previousCompileContext Context used for previous compilation of the current
     *                                        node
     * @returns {Function} linkFn
     */
    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,
                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,
                                   previousCompileContext) {
      previousCompileContext = previousCompileContext || {};

      var terminalPriority = -Number.MAX_VALUE,
          newScopeDirective,
          controllerDirectives = previousCompileContext.controllerDirectives,
          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,
          templateDirective = previousCompileContext.templateDirective,
          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,
          hasTranscludeDirective = false,
          hasTemplate = false,
          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,
          $compileNode = templateAttrs.$$element = jqLite(compileNode),
          directive,
          directiveName,
          $template,
          replaceDirective = originalReplaceDirective,
          childTranscludeFn = transcludeFn,
          linkFn,
          directiveValue;

      // executes all directives on the current element
      for (var i = 0, ii = directives.length; i < ii; i++) {
        directive = directives[i];
        var attrStart = directive.$$start;
        var attrEnd = directive.$$end;

        // collect multiblock sections
        if (attrStart) {
          $compileNode = groupScan(compileNode, attrStart, attrEnd);
        }
        $template = undefined;

        if (terminalPriority > directive.priority) {
          break; // prevent further processing of directives
        }

        if (directiveValue = directive.scope) {

          // skip the check for directives with async templates, we'll check the derived sync
          // directive when the template arrives
          if (!directive.templateUrl) {
            if (isObject(directiveValue)) {
              // This directive is trying to add an isolated scope.
              // Check that there is no scope of any kind already
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,
                                directive, $compileNode);
              newIsolateScopeDirective = directive;
            } else {
              // This directive is trying to add a child scope.
              // Check that there is no isolated scope already
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,
                                $compileNode);
            }
          }

          newScopeDirective = newScopeDirective || directive;
        }

        directiveName = directive.name;

        if (!directive.templateUrl && directive.controller) {
          directiveValue = directive.controller;
          controllerDirectives = controllerDirectives || createMap();
          assertNoDuplicate("'" + directiveName + "' controller",
              controllerDirectives[directiveName], directive, $compileNode);
          controllerDirectives[directiveName] = directive;
        }

        if (directiveValue = directive.transclude) {
          hasTranscludeDirective = true;

          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
          // This option should only be used by directives that know how to safely handle element transclusion,
          // where the transcluded nodes are added or replaced after linking.
          if (!directive.$$tlb) {
            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
            nonTlbTranscludeDirective = directive;
          }

          if (directiveValue == 'element') {
            hasElementTranscludeDirective = true;
            terminalPriority = directive.priority;
            $template = $compileNode;
            $compileNode = templateAttrs.$$element =
                jqLite(document.createComment(' ' + directiveName + ': ' +
                                              templateAttrs[directiveName] + ' '));
            compileNode = $compileNode[0];
            replaceWith(jqCollection, sliceArgs($template), compileNode);

            childTranscludeFn = compile($template, transcludeFn, terminalPriority,
                                        replaceDirective && replaceDirective.name, {
                                          // Don't pass in:
                                          // - controllerDirectives - otherwise we'll create duplicates controllers
                                          // - newIsolateScopeDirective or templateDirective - combining templates with
                                          //   element transclusion doesn't make sense.
                                          //
                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
                                          // on the same element more than once.
                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective
                                        });
          } else {
            $template = jqLite(jqLiteClone(compileNode)).contents();
            $compileNode.empty(); // clear contents
            childTranscludeFn = compile($template, transcludeFn);
          }
        }

        if (directive.template) {
          hasTemplate = true;
          assertNoDuplicate('template', templateDirective, directive, $compileNode);
          templateDirective = directive;

          directiveValue = (isFunction(directive.template))
              ? directive.template($compileNode, templateAttrs)
              : directive.template;

          directiveValue = denormalizeTemplate(directiveValue);

          if (directive.replace) {
            replaceDirective = directive;
            if (jqLiteIsTextNode(directiveValue)) {
              $template = [];
            } else {
              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
            }
            compileNode = $template[0];

            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
              throw $compileMinErr('tplrt',
                  "Template for directive '{0}' must have exactly one root element. {1}",
                  directiveName, '');
            }

            replaceWith(jqCollection, $compileNode, compileNode);

            var newTemplateAttrs = {$attr: {}};

            // combine directives from the original node and from the template:
            // - take the array of directives for this element
            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
            // - collect directives from the template and sort them by priority
            // - combine directives as: processed + template + unprocessed
            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));

            if (newIsolateScopeDirective) {
              markDirectivesAsIsolate(templateDirectives);
            }
            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);

            ii = directives.length;
          } else {
            $compileNode.html(directiveValue);
          }
        }

        if (directive.templateUrl) {
          hasTemplate = true;
          assertNoDuplicate('template', templateDirective, directive, $compileNode);
          templateDirective = directive;

          if (directive.replace) {
            replaceDirective = directive;
          }

          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,
              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
                controllerDirectives: controllerDirectives,
                newIsolateScopeDirective: newIsolateScopeDirective,
                templateDirective: templateDirective,
                nonTlbTranscludeDirective: nonTlbTranscludeDirective
              });
          ii = directives.length;
        } else if (directive.compile) {
          try {
            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
            if (isFunction(linkFn)) {
              addLinkFns(null, linkFn, attrStart, attrEnd);
            } else if (linkFn) {
              addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
            }
          } catch (e) {
            $exceptionHandler(e, startingTag($compileNode));
          }
        }

        if (directive.terminal) {
          nodeLinkFn.terminal = true;
          terminalPriority = Math.max(terminalPriority, directive.priority);
        }

      }

      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
      nodeLinkFn.elementTranscludeOnThisElement = hasElementTranscludeDirective;
      nodeLinkFn.templateOnThisElement = hasTemplate;
      nodeLinkFn.transclude = childTranscludeFn;

      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;

      // might be normal or delayed nodeLinkFn depending on if templateUrl is present
      return nodeLinkFn;

      ////////////////////

      function addLinkFns(pre, post, attrStart, attrEnd) {
        if (pre) {
          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
          pre.require = directive.require;
          pre.directiveName = directiveName;
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
            pre = cloneAndAnnotateFn(pre, {isolateScope: true});
          }
          preLinkFns.push(pre);
        }
        if (post) {
          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
          post.require = directive.require;
          post.directiveName = directiveName;
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
            post = cloneAndAnnotateFn(post, {isolateScope: true});
          }
          postLinkFns.push(post);
        }
      }


      function getControllers(directiveName, require, $element, elementControllers) {
        var value;

        if (isString(require)) {
          var match = require.match(REQUIRE_PREFIX_REGEXP);
          var name = require.substring(match[0].length);
          var inheritType = match[1] || match[3];
          var optional = match[2] === '?';

          //If only parents then start at the parent element
          if (inheritType === '^^') {
            $element = $element.parent();
          //Otherwise attempt getting the controller from elementControllers in case
          //the element is transcluded (and has no data) and to avoid .data if possible
          } else {
            value = elementControllers && elementControllers[name];
            value = value && value.instance;
          }

          if (!value) {
            var dataName = '$' + name + 'Controller';
            value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);
          }

          if (!value && !optional) {
            throw $compileMinErr('ctreq',
                "Controller '{0}', required by directive '{1}', can't be found!",
                name, directiveName);
          }
        } else if (isArray(require)) {
          value = [];
          for (var i = 0, ii = require.length; i < ii; i++) {
            value[i] = getControllers(directiveName, require[i], $element, elementControllers);
          }
        }

        return value || null;
      }

      function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope) {
        var elementControllers = createMap();
        for (var controllerKey in controllerDirectives) {
          var directive = controllerDirectives[controllerKey];
          var locals = {
            $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
            $element: $element,
            $attrs: attrs,
            $transclude: transcludeFn
          };

          var controller = directive.controller;
          if (controller == '@') {
            controller = attrs[directive.name];
          }

          var controllerInstance = $controller(controller, locals, true, directive.controllerAs);

          // For directives with element transclusion the element is a comment,
          // but jQuery .data doesn't support attaching data to comment nodes as it's hard to
          // clean up (http://bugs.jquery.com/ticket/8335).
          // Instead, we save the controllers for the element in a local hash and attach to .data
          // later, once we have the actual element.
          elementControllers[directive.name] = controllerInstance;
          if (!hasElementTranscludeDirective) {
            $element.data('$' + directive.name + 'Controller', controllerInstance.instance);
          }
        }
        return elementControllers;
      }

      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn,
                          thisLinkFn) {
        var i, ii, linkFn, controller, isolateScope, elementControllers, transcludeFn, $element,
            attrs;

        if (compileNode === linkNode) {
          attrs = templateAttrs;
          $element = templateAttrs.$$element;
        } else {
          $element = jqLite(linkNode);
          attrs = new Attributes($element, templateAttrs);
        }

        if (newIsolateScopeDirective) {
          isolateScope = scope.$new(true);
        }

        if (boundTranscludeFn) {
          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
          transcludeFn = controllersBoundTransclude;
          transcludeFn.$$boundTransclude = boundTranscludeFn;
        }

        if (controllerDirectives) {
          elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope);
        }

        if (newIsolateScopeDirective) {
          // Initialize isolate scope bindings for new isolate scope directive.
          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
              templateDirective === newIsolateScopeDirective.$$originalDirective)));
          compile.$$addScopeClass($element, true);
          isolateScope.$$isolateBindings =
              newIsolateScopeDirective.$$isolateBindings;
          initializeDirectiveBindings(scope, attrs, isolateScope,
                                      isolateScope.$$isolateBindings,
                                      newIsolateScopeDirective, isolateScope);
        }
        if (elementControllers) {
          // Initialize bindToController bindings for new/isolate scopes
          var scopeDirective = newIsolateScopeDirective || newScopeDirective;
          var bindings;
          var controllerForBindings;
          if (scopeDirective && elementControllers[scopeDirective.name]) {
            bindings = scopeDirective.$$bindings.bindToController;
            controller = elementControllers[scopeDirective.name];

            if (controller && controller.identifier && bindings) {
              controllerForBindings = controller;
              thisLinkFn.$$destroyBindings =
                  initializeDirectiveBindings(scope, attrs, controller.instance,
                                              bindings, scopeDirective);
            }
          }
          for (i in elementControllers) {
            controller = elementControllers[i];
            var controllerResult = controller();
            if (controllerResult !== controller.instance &&
                controller === controllerForBindings) {
              // Remove and re-install bindToController bindings
              thisLinkFn.$$destroyBindings();
              thisLinkFn.$$destroyBindings =
                  initializeDirectiveBindings(scope, attrs, controllerResult,
                                              bindings, scopeDirective);
            }
          }
        }

        // PRELINKING
        for (i = 0, ii = preLinkFns.length; i < ii; i++) {
          linkFn = preLinkFns[i];
          invokeLinkFn(linkFn,
              linkFn.isolateScope ? isolateScope : scope,
              $element,
              attrs,
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
              transcludeFn
          );
        }

        // RECURSION
        // We only pass the isolate scope, if the isolate directive has a template,
        // otherwise the child elements do not belong to the isolate directive.
        var scopeToChild = scope;
        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
          scopeToChild = isolateScope;
        }
        childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);

        // POSTLINKING
        for (i = postLinkFns.length - 1; i >= 0; i--) {
          linkFn = postLinkFns[i];
          invokeLinkFn(linkFn,
              linkFn.isolateScope ? isolateScope : scope,
              $element,
              attrs,
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
              transcludeFn
          );
        }

        // This is the function that is injected as `$transclude`.
        // Note: all arguments are optional!
        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement) {
          var transcludeControllers;

          // No scope passed in:
          if (!isScope(scope)) {
            futureParentElement = cloneAttachFn;
            cloneAttachFn = scope;
            scope = undefined;
          }

          if (hasElementTranscludeDirective) {
            transcludeControllers = elementControllers;
          }
          if (!futureParentElement) {
            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;
          }
          return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
        }
      }
    }

    function markDirectivesAsIsolate(directives) {
      // mark all directives as needing isolate scope.
      for (var j = 0, jj = directives.length; j < jj; j++) {
        directives[j] = inherit(directives[j], {$$isolateScope: true});
      }
    }

    /**
     * looks up the directive and decorates it with exception handling and proper parameters. We
     * call this the boundDirective.
     *
     * @param {string} name name of the directive to look up.
     * @param {string} location The directive must be found in specific format.
     *   String containing any of theses characters:
     *
     *   * `E`: element name
     *   * `A': attribute
     *   * `C`: class
     *   * `M`: comment
     * @returns {boolean} true if directive was added.
     */
    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,
                          endAttrName) {
      if (name === ignoreDirective) return null;
      var match = null;
      if (hasDirectives.hasOwnProperty(name)) {
        for (var directive, directives = $injector.get(name + Suffix),
            i = 0, ii = directives.length; i < ii; i++) {
          try {
            directive = directives[i];
            if ((maxPriority === undefined || maxPriority > directive.priority) &&
                 directive.restrict.indexOf(location) != -1) {
              if (startAttrName) {
                directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});
              }
              tDirectives.push(directive);
              match = directive;
            }
          } catch (e) { $exceptionHandler(e); }
        }
      }
      return match;
    }


    /**
     * looks up the directive and returns true if it is a multi-element directive,
     * and therefore requires DOM nodes between -start and -end markers to be grouped
     * together.
     *
     * @param {string} name name of the directive to look up.
     * @returns true if directive was registered as multi-element.
     */
    function directiveIsMultiElement(name) {
      if (hasDirectives.hasOwnProperty(name)) {
        for (var directive, directives = $injector.get(name + Suffix),
            i = 0, ii = directives.length; i < ii; i++) {
          directive = directives[i];
          if (directive.multiElement) {
            return true;
          }
        }
      }
      return false;
    }

    /**
     * When the element is replaced with HTML template then the new attributes
     * on the template need to be merged with the existing attributes in the DOM.
     * The desired effect is to have both of the attributes present.
     *
     * @param {object} dst destination attributes (original DOM)
     * @param {object} src source attributes (from the directive template)
     */
    function mergeTemplateAttributes(dst, src) {
      var srcAttr = src.$attr,
          dstAttr = dst.$attr,
          $element = dst.$$element;

      // reapply the old attributes to the new element
      forEach(dst, function(value, key) {
        if (key.charAt(0) != '$') {
          if (src[key] && src[key] !== value) {
            value += (key === 'style' ? ';' : ' ') + src[key];
          }
          dst.$set(key, value, true, srcAttr[key]);
        }
      });

      // copy the new attributes on the old attrs object
      forEach(src, function(value, key) {
        if (key == 'class') {
          safeAddClass($element, value);
          dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;
        } else if (key == 'style') {
          $element.attr('style', $element.attr('style') + ';' + value);
          dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;
          // `dst` will never contain hasOwnProperty as DOM parser won't let it.
          // You will get an "InvalidCharacterError: DOM Exception 5" error if you
          // have an attribute like "has-own-property" or "data-has-own-property", etc.
        } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {
          dst[key] = value;
          dstAttr[key] = srcAttr[key];
        }
      });
    }


    function compileTemplateUrl(directives, $compileNode, tAttrs,
        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
      var linkQueue = [],
          afterTemplateNodeLinkFn,
          afterTemplateChildLinkFn,
          beforeTemplateCompileNode = $compileNode[0],
          origAsyncDirective = directives.shift(),
          derivedSyncDirective = inherit(origAsyncDirective, {
            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective
          }),
          templateUrl = (isFunction(origAsyncDirective.templateUrl))
              ? origAsyncDirective.templateUrl($compileNode, tAttrs)
              : origAsyncDirective.templateUrl,
          templateNamespace = origAsyncDirective.templateNamespace;

      $compileNode.empty();

      $templateRequest($sce.getTrustedResourceUrl(templateUrl))
        .then(function(content) {
          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;

          content = denormalizeTemplate(content);

          if (origAsyncDirective.replace) {
            if (jqLiteIsTextNode(content)) {
              $template = [];
            } else {
              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));
            }
            compileNode = $template[0];

            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
              throw $compileMinErr('tplrt',
                  "Template for directive '{0}' must have exactly one root element. {1}",
                  origAsyncDirective.name, templateUrl);
            }

            tempTemplateAttrs = {$attr: {}};
            replaceWith($rootElement, $compileNode, compileNode);
            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);

            if (isObject(origAsyncDirective.scope)) {
              markDirectivesAsIsolate(templateDirectives);
            }
            directives = templateDirectives.concat(directives);
            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
          } else {
            compileNode = beforeTemplateCompileNode;
            $compileNode.html(content);
          }

          directives.unshift(derivedSyncDirective);

          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,
              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,
              previousCompileContext);
          forEach($rootElement, function(node, i) {
            if (node == compileNode) {
              $rootElement[i] = $compileNode[0];
            }
          });
          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);

          while (linkQueue.length) {
            var scope = linkQueue.shift(),
                beforeTemplateLinkNode = linkQueue.shift(),
                linkRootElement = linkQueue.shift(),
                boundTranscludeFn = linkQueue.shift(),
                linkNode = $compileNode[0];

            if (scope.$$destroyed) continue;

            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
              var oldClasses = beforeTemplateLinkNode.className;

              if (!(previousCompileContext.hasElementTranscludeDirective &&
                  origAsyncDirective.replace)) {
                // it was cloned therefore we have to clone as well.
                linkNode = jqLiteClone(compileNode);
              }
              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);

              // Copy in CSS classes from original node
              safeAddClass(jqLite(linkNode), oldClasses);
            }
            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
            } else {
              childBoundTranscludeFn = boundTranscludeFn;
            }
            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,
              childBoundTranscludeFn, afterTemplateNodeLinkFn);
          }
          linkQueue = null;
        });

      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
        var childBoundTranscludeFn = boundTranscludeFn;
        if (scope.$$destroyed) return;
        if (linkQueue) {
          linkQueue.push(scope,
                         node,
                         rootElement,
                         childBoundTranscludeFn);
        } else {
          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
          }
          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn,
                                  afterTemplateNodeLinkFn);
        }
      };
    }


    /**
     * Sorting function for bound directives.
     */
    function byPriority(a, b) {
      var diff = b.priority - a.priority;
      if (diff !== 0) return diff;
      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;
      return a.index - b.index;
    }


    function assertNoDuplicate(what, previousDirective, directive, element) {
      if (previousDirective) {
        throw $compileMinErr('multidir', 'Multiple directives [{0}, {1}] asking for {2} on: {3}',
            previousDirective.name, directive.name, what, startingTag(element));
      }
    }


    function addTextInterpolateDirective(directives, text) {
      var interpolateFn = $interpolate(text, true);
      if (interpolateFn) {
        directives.push({
          priority: 0,
          compile: function textInterpolateCompileFn(templateNode) {
            var templateNodeParent = templateNode.parent(),
                hasCompileParent = !!templateNodeParent.length;

            // When transcluding a template that has bindings in the root
            // we don't have a parent and thus need to add the class during linking fn.
            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);

            return function textInterpolateLinkFn(scope, node) {
              var parent = node.parent();
              if (!hasCompileParent) compile.$$addBindingClass(parent);
              compile.$$addBindingInfo(parent, interpolateFn.expressions);
              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
                node[0].nodeValue = value;
              });
            };
          }
        });
      }
    }


    function wrapTemplate(type, template) {
      type = lowercase(type || 'html');
      switch (type) {
      case 'svg':
      case 'math':
        var wrapper = document.createElement('div');
        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';
        return wrapper.childNodes[0].childNodes;
      default:
        return template;
      }
    }


    function getTrustedContext(node, attrNormalizedName) {
      if (attrNormalizedName == "srcdoc") {
        return $sce.HTML;
      }
      var tag = nodeName_(node);
      // maction[xlink:href] can source SVG.  It's not limited to <maction>.
      if (attrNormalizedName == "xlinkHref" ||
          (tag == "form" && attrNormalizedName == "action") ||
          (tag != "img" && (attrNormalizedName == "src" ||
                            attrNormalizedName == "ngSrc"))) {
        return $sce.RESOURCE_URL;
      }
    }


    function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {
      var trustedContext = getTrustedContext(node, name);
      allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;

      var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);

      // no interpolation found -> ignore
      if (!interpolateFn) return;


      if (name === "multiple" && nodeName_(node) === "select") {
        throw $compileMinErr("selmulti",
            "Binding to the 'multiple' attribute is not supported. Element: {0}",
            startingTag(node));
      }

      directives.push({
        priority: 100,
        compile: function() {
            return {
              pre: function attrInterpolatePreLinkFn(scope, element, attr) {
                var $$observers = (attr.$$observers || (attr.$$observers = {}));

                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
                  throw $compileMinErr('nodomevents',
                      "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +
                          "ng- versions (such as ng-click instead of onclick) instead.");
                }

                // If the attribute has changed since last $interpolate()ed
                var newValue = attr[name];
                if (newValue !== value) {
                  // we need to interpolate again since the attribute value has been updated
                  // (e.g. by another directive's compile function)
                  // ensure unset/empty values make interpolateFn falsy
                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);
                  value = newValue;
                }

                // if attribute was updated so that there is no interpolation going on we don't want to
                // register any observers
                if (!interpolateFn) return;

                // initialize attr object so that it's ready in case we need the value for isolate
                // scope initialization, otherwise the value would not be available from isolate
                // directive's linking fn during linking phase
                attr[name] = interpolateFn(scope);

                ($$observers[name] || ($$observers[name] = [])).$$inter = true;
                (attr.$$observers && attr.$$observers[name].$$scope || scope).
                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
                    //special case for class attribute addition + removal
                    //so that class changes can tap into the animation
                    //hooks provided by the $animate service. Be sure to
                    //skip animations when the first digest occurs (when
                    //both the new and the old values are the same) since
                    //the CSS classes are the non-interpolated values
                    if (name === 'class' && newValue != oldValue) {
                      attr.$updateClass(newValue, oldValue);
                    } else {
                      attr.$set(name, newValue);
                    }
                  });
              }
            };
          }
      });
    }


    /**
     * This is a special jqLite.replaceWith, which can replace items which
     * have no parents, provided that the containing jqLite collection is provided.
     *
     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
     *                               in the root of the tree.
     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
     *                                  the shell, but replace its DOM node reference.
     * @param {Node} newNode The new DOM node.
     */
    function replaceWith($rootElement, elementsToRemove, newNode) {
      var firstElementToRemove = elementsToRemove[0],
          removeCount = elementsToRemove.length,
          parent = firstElementToRemove.parentNode,
          i, ii;

      if ($rootElement) {
        for (i = 0, ii = $rootElement.length; i < ii; i++) {
          if ($rootElement[i] == firstElementToRemove) {
            $rootElement[i++] = newNode;
            for (var j = i, j2 = j + removeCount - 1,
                     jj = $rootElement.length;
                 j < jj; j++, j2++) {
              if (j2 < jj) {
                $rootElement[j] = $rootElement[j2];
              } else {
                delete $rootElement[j];
              }
            }
            $rootElement.length -= removeCount - 1;

            // If the replaced element is also the jQuery .context then replace it
            // .context is a deprecated jQuery api, so we should set it only when jQuery set it
            // http://api.jquery.com/context/
            if ($rootElement.context === firstElementToRemove) {
              $rootElement.context = newNode;
            }
            break;
          }
        }
      }

      if (parent) {
        parent.replaceChild(newNode, firstElementToRemove);
      }

      // TODO(perf): what's this document fragment for? is it needed? can we at least reuse it?
      var fragment = document.createDocumentFragment();
      fragment.appendChild(firstElementToRemove);

      // Copy over user data (that includes Angular's $scope etc.). Don't copy private
      // data here because there's no public interface in jQuery to do that and copying over
      // event listeners (which is the main use of private data) wouldn't work anyway.
      jqLite(newNode).data(jqLite(firstElementToRemove).data());

      // Remove data of the replaced element. We cannot just call .remove()
      // on the element it since that would deallocate scope that is needed
      // for the new node. Instead, remove the data "manually".
      if (!jQuery) {
        delete jqLite.cache[firstElementToRemove[jqLite.expando]];
      } else {
        // jQuery 2.x doesn't expose the data storage. Use jQuery.cleanData to clean up after
        // the replaced element. The cleanData version monkey-patched by Angular would cause
        // the scope to be trashed and we do need the very same scope to work with the new
        // element. However, we cannot just cache the non-patched version and use it here as
        // that would break if another library patches the method after Angular does (one
        // example is jQuery UI). Instead, set a flag indicating scope destroying should be
        // skipped this one time.
        skipDestroyOnNextJQueryCleanData = true;
        jQuery.cleanData([firstElementToRemove]);
      }

      for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {
        var element = elementsToRemove[k];
        jqLite(element).remove(); // must do this way to clean up expando
        fragment.appendChild(element);
        delete elementsToRemove[k];
      }

      elementsToRemove[0] = newNode;
      elementsToRemove.length = 1;
    }


    function cloneAndAnnotateFn(fn, annotation) {
      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);
    }


    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
      try {
        linkFn(scope, $element, attrs, controllers, transcludeFn);
      } catch (e) {
        $exceptionHandler(e, startingTag($element));
      }
    }


    // Set up $watches for isolate scope and controller bindings. This process
    // only occurs for isolate scopes and new scopes with controllerAs.
    function initializeDirectiveBindings(scope, attrs, destination, bindings,
                                         directive, newScope) {
      var onNewScopeDestroyed;
      forEach(bindings, function(definition, scopeName) {
        var attrName = definition.attrName,
        optional = definition.optional,
        mode = definition.mode, // @, =, or &
        lastValue,
        parentGet, parentSet, compare;

        switch (mode) {

          case '@':
            attrs.$observe(attrName, function(value) {
              destination[scopeName] = value;
            });
            attrs.$$observers[attrName].$$scope = scope;
            if (attrs[attrName]) {
              // If the attribute has been provided then we trigger an interpolation to ensure
              // the value is there for use in the link fn
              destination[scopeName] = $interpolate(attrs[attrName])(scope);
            }
            break;

          case '=':
            if (optional && !attrs[attrName]) {
              return;
            }
            parentGet = $parse(attrs[attrName]);
            if (parentGet.literal) {
              compare = equals;
            } else {
              compare = function(a, b) { return a === b || (a !== a && b !== b); };
            }
            parentSet = parentGet.assign || function() {
              // reset the change, or we will throw this exception on every $digest
              lastValue = destination[scopeName] = parentGet(scope);
              throw $compileMinErr('nonassign',
                  "Expression '{0}' used with directive '{1}' is non-assignable!",
                  attrs[attrName], directive.name);
            };
            lastValue = destination[scopeName] = parentGet(scope);
            var parentValueWatch = function parentValueWatch(parentValue) {
              if (!compare(parentValue, destination[scopeName])) {
                // we are out of sync and need to copy
                if (!compare(parentValue, lastValue)) {
                  // parent changed and it has precedence
                  destination[scopeName] = parentValue;
                } else {
                  // if the parent can be assigned then do so
                  parentSet(scope, parentValue = destination[scopeName]);
                }
              }
              return lastValue = parentValue;
            };
            parentValueWatch.$stateful = true;
            var unwatch;
            if (definition.collection) {
              unwatch = scope.$watchCollection(attrs[attrName], parentValueWatch);
            } else {
              unwatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
            }
            onNewScopeDestroyed = (onNewScopeDestroyed || []);
            onNewScopeDestroyed.push(unwatch);
            break;

          case '&':
            // Don't assign Object.prototype method to scope
            if (!attrs.hasOwnProperty(attrName) && optional) break;

            parentGet = $parse(attrs[attrName]);

            // Don't assign noop to destination if expression is not valid
            if (parentGet === noop && optional) break;

            destination[scopeName] = function(locals) {
              return parentGet(scope, locals);
            };
            break;
        }
      });
      var destroyBindings = onNewScopeDestroyed ? function destroyBindings() {
        for (var i = 0, ii = onNewScopeDestroyed.length; i < ii; ++i) {
          onNewScopeDestroyed[i]();
        }
      } : noop;
      if (newScope && destroyBindings !== noop) {
        newScope.$on('$destroy', destroyBindings);
        return noop;
      }
      return destroyBindings;
    }
  }];
}

var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;
/**
 * Converts all accepted directives format into proper directive name.
 * @param name Name to normalize
 */
function directiveNormalize(name) {
  return camelCase(name.replace(PREFIX_REGEXP, ''));
}

/**
 * @ngdoc type
 * @name $compile.directive.Attributes
 *
 * @description
 * A shared object between directive compile / linking functions which contains normalized DOM
 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
 * needed since all of these are treated as equivalent in Angular:
 *
 * ```
 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
 * ```
 */

/**
 * @ngdoc property
 * @name $compile.directive.Attributes#$attr
 *
 * @description
 * A map of DOM element attribute names to the normalized name. This is
 * needed to do reverse lookup from normalized name back to actual name.
 */


/**
 * @ngdoc method
 * @name $compile.directive.Attributes#$set
 * @kind function
 *
 * @description
 * Set DOM element attribute value.
 *
 *
 * @param {string} name Normalized element attribute name of the property to modify. The name is
 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
 *          property to the original name.
 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
 */



/**
 * Closure compiler type information
 */

function nodesetLinkingFn(
  /* angular.Scope */ scope,
  /* NodeList */ nodeList,
  /* Element */ rootElement,
  /* function(Function) */ boundTranscludeFn
) {}

function directiveLinkingFn(
  /* nodesetLinkingFn */ nodesetLinkingFn,
  /* angular.Scope */ scope,
  /* Node */ node,
  /* Element */ rootElement,
  /* function(Function) */ boundTranscludeFn
) {}

function tokenDifference(str1, str2) {
  var values = '',
      tokens1 = str1.split(/\s+/),
      tokens2 = str2.split(/\s+/);

  outer:
  for (var i = 0; i < tokens1.length; i++) {
    var token = tokens1[i];
    for (var j = 0; j < tokens2.length; j++) {
      if (token == tokens2[j]) continue outer;
    }
    values += (values.length > 0 ? ' ' : '') + token;
  }
  return values;
}

function removeComments(jqNodes) {
  jqNodes = jqLite(jqNodes);
  var i = jqNodes.length;

  if (i <= 1) {
    return jqNodes;
  }

  while (i--) {
    var node = jqNodes[i];
    if (node.nodeType === NODE_TYPE_COMMENT) {
      splice.call(jqNodes, i, 1);
    }
  }
  return jqNodes;
}

var $controllerMinErr = minErr('$controller');


var CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;
function identifierForController(controller, ident) {
  if (ident && isString(ident)) return ident;
  if (isString(controller)) {
    var match = CNTRL_REG.exec(controller);
    if (match) return match[3];
  }
}


/**
 * @ngdoc provider
 * @name $controllerProvider
 * @description
 * The {@link ng.$controller $controller service} is used by Angular to create new
 * controllers.
 *
 * This provider allows controller registration via the
 * {@link ng.$controllerProvider#register register} method.
 */
function $ControllerProvider() {
  var controllers = {},
      globals = false;

  /**
   * @ngdoc method
   * @name $controllerProvider#register
   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
   *    the names and the values are the constructors.
   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
   *    annotations in the array notation).
   */
  this.register = function(name, constructor) {
    assertNotHasOwnProperty(name, 'controller');
    if (isObject(name)) {
      extend(controllers, name);
    } else {
      controllers[name] = constructor;
    }
  };

  /**
   * @ngdoc method
   * @name $controllerProvider#allowGlobals
   * @description If called, allows `$controller` to find controller constructors on `window`
   */
  this.allowGlobals = function() {
    globals = true;
  };


  this.$get = ['$injector', '$window', function($injector, $window) {

    /**
     * @ngdoc service
     * @name $controller
     * @requires $injector
     *
     * @param {Function|string} constructor If called with a function then it's considered to be the
     *    controller constructor function. Otherwise it's considered to be a string which is used
     *    to retrieve the controller constructor using the following steps:
     *
     *    * check if a controller with given name is registered via `$controllerProvider`
     *    * check if evaluating the string on the current scope returns a constructor
     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
     *      `window` object (not recommended)
     *
     *    The string can use the `controller as property` syntax, where the controller instance is published
     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
     *    to work correctly.
     *
     * @param {Object} locals Injection locals for Controller.
     * @return {Object} Instance of given controller.
     *
     * @description
     * `$controller` service is responsible for instantiating controllers.
     *
     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
     */
    return function(expression, locals, later, ident) {
      // PRIVATE API:
      //   param `later` --- indicates that the controller's constructor is invoked at a later time.
      //                     If true, $controller will allocate the object with the correct
      //                     prototype chain, but will not invoke the controller until a returned
      //                     callback is invoked.
      //   param `ident` --- An optional label which overrides the label parsed from the controller
      //                     expression, if any.
      var instance, match, constructor, identifier;
      later = later === true;
      if (ident && isString(ident)) {
        identifier = ident;
      }

      if (isString(expression)) {
        match = expression.match(CNTRL_REG);
        if (!match) {
          throw $controllerMinErr('ctrlfmt',
            "Badly formed controller string '{0}'. " +
            "Must match `__name__ as __id__` or `__name__`.", expression);
        }
        constructor = match[1],
        identifier = identifier || match[3];
        expression = controllers.hasOwnProperty(constructor)
            ? controllers[constructor]
            : getter(locals.$scope, constructor, true) ||
                (globals ? getter($window, constructor, true) : undefined);

        assertArgFn(expression, constructor, true);
      }

      if (later) {
        // Instantiate controller later:
        // This machinery is used to create an instance of the object before calling the
        // controller's constructor itself.
        //
        // This allows properties to be added to the controller before the constructor is
        // invoked. Primarily, this is used for isolate scope bindings in $compile.
        //
        // This feature is not intended for use by applications, and is thus not documented
        // publicly.
        // Object creation: http://jsperf.com/create-constructor/2
        var controllerPrototype = (isArray(expression) ?
          expression[expression.length - 1] : expression).prototype;
        instance = Object.create(controllerPrototype || null);

        if (identifier) {
          addIdentifier(locals, identifier, instance, constructor || expression.name);
        }

        var instantiate;
        return instantiate = extend(function() {
          var result = $injector.invoke(expression, instance, locals, constructor);
          if (result !== instance && (isObject(result) || isFunction(result))) {
            instance = result;
            if (identifier) {
              // If result changed, re-assign controllerAs value to scope.
              addIdentifier(locals, identifier, instance, constructor || expression.name);
            }
          }
          return instance;
        }, {
          instance: instance,
          identifier: identifier
        });
      }

      instance = $injector.instantiate(expression, locals, constructor);

      if (identifier) {
        addIdentifier(locals, identifier, instance, constructor || expression.name);
      }

      return instance;
    };

    function addIdentifier(locals, identifier, instance, name) {
      if (!(locals && isObject(locals.$scope))) {
        throw minErr('$controller')('noscp',
          "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",
          name, identifier);
      }

      locals.$scope[identifier] = instance;
    }
  }];
}

/**
 * @ngdoc service
 * @name $document
 * @requires $window
 *
 * @description
 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
 *
 * @example
   <example module="documentExample">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <p>$document title: <b ng-bind="title"></b></p>
         <p>window.document title: <b ng-bind="windowTitle"></b></p>
       </div>
     </file>
     <file name="script.js">
       angular.module('documentExample', [])
         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
           $scope.title = $document[0].title;
           $scope.windowTitle = angular.element(window.document)[0].title;
         }]);
     </file>
   </example>
 */
function $DocumentProvider() {
  this.$get = ['$window', function(window) {
    return jqLite(window.document);
  }];
}

/**
 * @ngdoc service
 * @name $exceptionHandler
 * @requires ng.$log
 *
 * @description
 * Any uncaught exception in angular expressions is delegated to this service.
 * The default implementation simply delegates to `$log.error` which logs it into
 * the browser console.
 *
 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
 *
 * ## Example:
 *
 * ```js
 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {
 *     return function(exception, cause) {
 *       exception.message += ' (caused by "' + cause + '")';
 *       throw exception;
 *     };
 *   });
 * ```
 *
 * This example will override the normal action of `$exceptionHandler`, to make angular
 * exceptions fail hard when they happen, instead of just logging to the console.
 *
 * <hr />
 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
 * (unless executed during a digest).
 *
 * If you wish, you can manually delegate exceptions, e.g.
 * `try { ... } catch(e) { $exceptionHandler(e); }`
 *
 * @param {Error} exception Exception associated with the error.
 * @param {string=} cause optional information about the context in which
 *       the error was thrown.
 *
 */
function $ExceptionHandlerProvider() {
  this.$get = ['$log', function($log) {
    return function(exception, cause) {
      $log.error.apply($log, arguments);
    };
  }];
}

var APPLICATION_JSON = 'application/json';
var CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};
var JSON_START = /^\[|^\{(?!\{)/;
var JSON_ENDS = {
  '[': /]$/,
  '{': /}$/
};
var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;

function defaultHttpResponseTransform(data, headers) {
  if (isString(data)) {
    // Strip json vulnerability protection prefix and trim whitespace
    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();

    if (tempData) {
      var contentType = headers('Content-Type');
      if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {
        data = fromJson(tempData);
      }
    }
  }

  return data;
}

function isJsonLike(str) {
    var jsonStart = str.match(JSON_START);
    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
}

/**
 * Parse headers into key value object
 *
 * @param {string} headers Raw headers as a string
 * @returns {Object} Parsed headers as key value object
 */
function parseHeaders(headers) {
  var parsed = createMap(), i;

  function fillInParsed(key, val) {
    if (key) {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  }

  if (isString(headers)) {
    forEach(headers.split('\n'), function(line) {
      i = line.indexOf(':');
      fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));
    });
  } else if (isObject(headers)) {
    forEach(headers, function(headerVal, headerKey) {
      fillInParsed(lowercase(headerKey), trim(headerVal));
    });
  }

  return parsed;
}


/**
 * Returns a function that provides access to parsed headers.
 *
 * Headers are lazy parsed when first requested.
 * @see parseHeaders
 *
 * @param {(string|Object)} headers Headers to provide access to.
 * @returns {function(string=)} Returns a getter function which if called with:
 *
 *   - if called with single an argument returns a single header value or null
 *   - if called with no arguments returns an object containing all headers.
 */
function headersGetter(headers) {
  var headersObj;

  return function(name) {
    if (!headersObj) headersObj =  parseHeaders(headers);

    if (name) {
      var value = headersObj[lowercase(name)];
      if (value === void 0) {
        value = null;
      }
      return value;
    }

    return headersObj;
  };
}


/**
 * Chain all given functions
 *
 * This function is used for both request and response transforming
 *
 * @param {*} data Data to transform.
 * @param {function(string=)} headers HTTP headers getter fn.
 * @param {number} status HTTP status code of the response.
 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
 * @returns {*} Transformed data.
 */
function transformData(data, headers, status, fns) {
  if (isFunction(fns)) {
    return fns(data, headers, status);
  }

  forEach(fns, function(fn) {
    data = fn(data, headers, status);
  });

  return data;
}


function isSuccess(status) {
  return 200 <= status && status < 300;
}


/**
 * @ngdoc provider
 * @name $httpProvider
 * @description
 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
 * */
function $HttpProvider() {
  /**
   * @ngdoc property
   * @name $httpProvider#defaults
   * @description
   *
   * Object containing default values for all {@link ng.$http $http} requests.
   *
   * - **`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}
   * that will provide the cache for all requests who set their `cache` property to `true`.
   * If you set the `default.cache = false` then only requests that specify their own custom
   * cache object will be cached. See {@link $http#caching $http Caching} for more information.
   *
   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
   * Defaults value is `'XSRF-TOKEN'`.
   *
   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
   *
   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
   * setting default headers.
   *     - **`defaults.headers.common`**
   *     - **`defaults.headers.post`**
   *     - **`defaults.headers.put`**
   *     - **`defaults.headers.patch`**
   *
   **/
  var defaults = this.defaults = {
    // transform incoming response data
    transformResponse: [defaultHttpResponseTransform],

    // transform outgoing request data
    transformRequest: [function(d) {
      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;
    }],

    // default headers
    headers: {
      common: {
        'Accept': 'application/json, text/plain, */*'
      },
      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
    },

    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN'
  };

  var useApplyAsync = false;
  /**
   * @ngdoc method
   * @name $httpProvider#useApplyAsync
   * @description
   *
   * Configure $http service to combine processing of multiple http responses received at around
   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
   * significant performance improvement for bigger applications that make many HTTP requests
   * concurrently (common during application bootstrap).
   *
   * Defaults to false. If no value is specifed, returns the current configured value.
   *
   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
   *    to load and share the same digest cycle.
   *
   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
   *    otherwise, returns the current configured value.
   **/
  this.useApplyAsync = function(value) {
    if (isDefined(value)) {
      useApplyAsync = !!value;
      return this;
    }
    return useApplyAsync;
  };

  /**
   * @ngdoc property
   * @name $httpProvider#interceptors
   * @description
   *
   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
   * pre-processing of request or postprocessing of responses.
   *
   * These service factories are ordered by request, i.e. they are applied in the same order as the
   * array, on request, but reverse order, on response.
   *
   * {@link ng.$http#interceptors Interceptors detailed info}
   **/
  var interceptorFactories = this.interceptors = [];

  this.$get = ['$httpBackend', '$browser', '$cacheFactory', '$rootScope', '$q', '$injector',
      function($httpBackend, $browser, $cacheFactory, $rootScope, $q, $injector) {

    var defaultCache = $cacheFactory('$http');

    /**
     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
     * The reversal is needed so that we can build up the interception chain around the
     * server request.
     */
    var reversedInterceptors = [];

    forEach(interceptorFactories, function(interceptorFactory) {
      reversedInterceptors.unshift(isString(interceptorFactory)
          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
    });

    /**
     * @ngdoc service
     * @kind function
     * @name $http
     * @requires ng.$httpBackend
     * @requires $cacheFactory
     * @requires $rootScope
     * @requires $q
     * @requires $injector
     *
     * @description
     * The `$http` service is a core Angular service that facilitates communication with the remote
     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
     *
     * For unit testing applications that use `$http` service, see
     * {@link ngMock.$httpBackend $httpBackend mock}.
     *
     * For a higher level of abstraction, please check out the {@link ngResource.$resource
     * $resource} service.
     *
     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
     * it is important to familiarize yourself with these APIs and the guarantees they provide.
     *
     *
     * ## General usage
     * The `$http` service is a function which takes a single argument — a configuration object —
     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}
     * with two $http specific methods: `success` and `error`.
     *
     * ```js
     *   // Simple GET request example :
     *   $http.get('/someUrl').
     *     success(function(data, status, headers, config) {
     *       // this callback will be called asynchronously
     *       // when the response is available
     *     }).
     *     error(function(data, status, headers, config) {
     *       // called asynchronously if an error occurs
     *       // or server returns response with an error status.
     *     });
     * ```
     *
     * ```js
     *   // Simple POST request example (passing data) :
     *   $http.post('/someUrl', {msg:'hello word!'}).
     *     success(function(data, status, headers, config) {
     *       // this callback will be called asynchronously
     *       // when the response is available
     *     }).
     *     error(function(data, status, headers, config) {
     *       // called asynchronously if an error occurs
     *       // or server returns response with an error status.
     *     });
     * ```
     *
     *
     * Since the returned value of calling the $http function is a `promise`, you can also use
     * the `then` method to register callbacks, and these callbacks will receive a single argument –
     * an object representing the response. See the API signature and type info below for more
     * details.
     *
     * A response status code between 200 and 299 is considered a success status and
     * will result in the success callback being called. Note that if the response is a redirect,
     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be
     * called for such responses.
     *
     * ## Writing Unit Tests that use $http
     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
     * request using trained responses.
     *
     * ```
     * $httpBackend.expectGET(...);
     * $http.get(...);
     * $httpBackend.flush();
     * ```
     *
     * ## Shortcut methods
     *
     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
     * request data must be passed in for POST/PUT requests.
     *
     * ```js
     *   $http.get('/someUrl').success(successCallback);
     *   $http.post('/someUrl', data).success(successCallback);
     * ```
     *
     * Complete list of shortcut methods:
     *
     * - {@link ng.$http#get $http.get}
     * - {@link ng.$http#head $http.head}
     * - {@link ng.$http#post $http.post}
     * - {@link ng.$http#put $http.put}
     * - {@link ng.$http#delete $http.delete}
     * - {@link ng.$http#jsonp $http.jsonp}
     * - {@link ng.$http#patch $http.patch}
     *
     *
     * ## Setting HTTP Headers
     *
     * The $http service will automatically add certain HTTP headers to all requests. These defaults
     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
     * object, which currently contains this default configuration:
     *
     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
     *   - `Accept: application/json, text/plain, * / *`
     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
     *   - `Content-Type: application/json`
     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
     *   - `Content-Type: application/json`
     *
     * To add or overwrite these defaults, simply add or remove a property from these configuration
     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
     * with the lowercased HTTP method name as the key, e.g.
     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.
     *
     * The defaults can also be set at runtime via the `$http.defaults` object in the same
     * fashion. For example:
     *
     * ```
     * module.run(function($http) {
     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'
     * });
     * ```
     *
     * In addition, you can supply a `headers` property in the config object passed when
     * calling `$http(config)`, which overrides the defaults without changing them globally.
     *
     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
     * Use the `headers` property, setting the desired header to `undefined`. For example:
     *
     * ```js
     * var req = {
     *  method: 'POST',
     *  url: 'http://example.com',
     *  headers: {
     *    'Content-Type': undefined
     *  },
     *  data: { test: 'test' },
     * }
     *
     * $http(req).success(function(){...}).error(function(){...});
     * ```
     *
     * ## Transforming Requests and Responses
     *
     * Both requests and responses can be transformed using transformation functions: `transformRequest`
     * and `transformResponse`. These properties can be a single function that returns
     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
     *
     * ### Default Transformations
     *
     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
     * `defaults.transformResponse` properties. If a request does not provide its own transformations
     * then these will be applied.
     *
     * You can augment or replace the default transformations by modifying these properties by adding to or
     * replacing the array.
     *
     * Angular provides the following default transformations:
     *
     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
     *
     * - If the `data` property of the request configuration object contains an object, serialize it
     *   into JSON format.
     *
     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
     *
     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
     *  - If JSON response is detected, deserialize it using a JSON parser.
     *
     *
     * ### Overriding the Default Transformations Per Request
     *
     * If you wish override the request/response transformations only for a single request then provide
     * `transformRequest` and/or `transformResponse` properties on the configuration object passed
     * into `$http`.
     *
     * Note that if you provide these properties on the config object the default transformations will be
     * overwritten. If you wish to augment the default transformations then you must include them in your
     * local transformation array.
     *
     * The following code demonstrates adding a new response transformation to be run after the default response
     * transformations have been run.
     *
     * ```js
     * function appendTransform(defaults, transform) {
     *
     *   // We can't guarantee that the default transformation is an array
     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
     *
     *   // Append the new transformation to the defaults
     *   return defaults.concat(transform);
     * }
     *
     * $http({
     *   url: '...',
     *   method: 'GET',
     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
     *     return doTransform(value);
     *   })
     * });
     * ```
     *
     *
     * ## Caching
     *
     * To enable caching, set the request configuration `cache` property to `true` (to use default
     * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).
     * When the cache is enabled, `$http` stores the response from the server in the specified
     * cache. The next time the same request is made, the response is served from the cache without
     * sending a request to the server.
     *
     * Note that even if the response is served from cache, delivery of the data is asynchronous in
     * the same way that real requests are.
     *
     * If there are multiple GET requests for the same URL that should be cached using the same
     * cache, but the cache is not populated yet, only one request to the server will be made and
     * the remaining requests will be fulfilled using the response from the first request.
     *
     * You can change the default cache to a new object (built with
     * {@link ng.$cacheFactory `$cacheFactory`}) by updating the
     * {@link ng.$http#defaults `$http.defaults.cache`} property. All requests who set
     * their `cache` property to `true` will now use this cache object.
     *
     * If you set the default cache to `false` then only requests that specify their own custom
     * cache object will be cached.
     *
     * ## Interceptors
     *
     * Before you start creating interceptors, be sure to understand the
     * {@link ng.$q $q and deferred/promise APIs}.
     *
     * For purposes of global error handling, authentication, or any kind of synchronous or
     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
     * able to intercept requests before they are handed to the server and
     * responses before they are handed over to the application code that
     * initiated these requests. The interceptors leverage the {@link ng.$q
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
     *
     * The interceptors are service factories that are registered with the `$httpProvider` by
     * adding them to the `$httpProvider.interceptors` array. The factory is called and
     * injected with dependencies (if specified) and returns the interceptor.
     *
     * There are two kinds of interceptors (and two kinds of rejection interceptors):
     *
     *   * `request`: interceptors get called with a http `config` object. The function is free to
     *     modify the `config` object or create a new one. The function needs to return the `config`
     *     object directly, or a promise containing the `config` or a new `config` object.
     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *   * `response`: interceptors get called with http `response` object. The function is free to
     *     modify the `response` object or create a new one. The function needs to return the `response`
     *     object directly, or as a promise containing the `response` or a new `response` object.
     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *
     *
     * ```js
     *   // register the interceptor as a service
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return {
     *       // optional method
     *       'request': function(config) {
     *         // do something on success
     *         return config;
     *       },
     *
     *       // optional method
     *      'requestError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       },
     *
     *
     *
     *       // optional method
     *       'response': function(response) {
     *         // do something on success
     *         return response;
     *       },
     *
     *       // optional method
     *      'responseError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       }
     *     };
     *   });
     *
     *   $httpProvider.interceptors.push('myHttpInterceptor');
     *
     *
     *   // alternatively, register the interceptor via an anonymous factory
     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
     *     return {
     *      'request': function(config) {
     *          // same as above
     *       },
     *
     *       'response': function(response) {
     *          // same as above
     *       }
     *     };
     *   });
     * ```
     *
     * ## Security Considerations
     *
     * When designing web applications, consider security threats from:
     *
     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
     *
     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
     * pre-configured with strategies that address these issues, but for this to work backend server
     * cooperation is required.
     *
     * ### JSON Vulnerability Protection
     *
     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * allows third party website to turn your JSON resource URL into
     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
     * Angular will automatically strip the prefix before processing it as JSON.
     *
     * For example if your server needs to return:
     * ```js
     * ['one','two']
     * ```
     *
     * which is vulnerable to attack, your server can return:
     * ```js
     * )]}',
     * ['one','two']
     * ```
     *
     * Angular will strip the prefix, before processing the JSON.
     *
     *
     * ### Cross Site Request Forgery (XSRF) Protection
     *
     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which
     * an unauthorized site can gain your user's private data. Angular provides a mechanism
     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie
     * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only
     * JavaScript that runs on your domain could read the cookie, your server can be assured that
     * the XHR came from JavaScript running on your domain. The header will not be set for
     * cross-domain requests.
     *
     * To take advantage of this, your server needs to set a token in a JavaScript readable session
     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
     * that only JavaScript running on your domain could have sent the request. The token must be
     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
     * making up its own tokens). We recommend that the token is a digest of your site's
     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
     * for added security.
     *
     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
     * or the per-request config object.
     *
     *
     * @param {object} config Object describing the request to be made and how it should be
     *    processed. The object has following properties:
     *
     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be turned
     *      to `?key1=value1&key2=value2` after the url. If the value is not a string, it will be
     *      JSONified.
     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
     *      HTTP headers to send to the server. If the return value of a function is null, the
     *      header will not be sent. Functions accept a config object as an argument.
     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
     *    - **transformRequest** –
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      request body and headers and returns its transformed (typically serialized) version.
     *      See {@link ng.$http#overriding-the-default-transformations-per-request
     *      Overriding the Default Transformations}
     *    - **transformResponse** –
     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      response body, headers and status and returns its transformed (typically deserialized) version.
     *      See {@link ng.$http#overriding-the-default-transformations-per-request
     *      Overriding the Default Transformations}
     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
     *      GET request, otherwise if a cache instance built with
     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
     *      caching.
     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
     *      that should abort the request when resolved.
     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
     *      for more information.
     *    - **responseType** - `{string}` - see
     *      [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).
     *
     * @returns {HttpPromise} Returns a {@link ng.$q promise} object with the
     *   standard `then` method and two http specific methods: `success` and `error`. The `then`
     *   method takes two arguments a success and an error callback which will be called with a
     *   response object. The `success` and `error` methods take a single argument - a function that
     *   will be called when the request succeeds or fails respectively. The arguments passed into
     *   these functions are destructured representation of the response object passed into the
     *   `then` method. The response object has these properties:
     *
     *   - **data** – `{string|Object}` – The response body transformed with the transform
     *     functions.
     *   - **status** – `{number}` – HTTP status code of the response.
     *   - **headers** – `{function([headerName])}` – Header getter function.
     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
     *   - **statusText** – `{string}` – HTTP status text of the response.
     *
     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
     *   requests. This is primarily meant to be used for debugging purposes.
     *
     *
     * @example
<example module="httpExample">
<file name="index.html">
  <div ng-controller="FetchController">
    <select ng-model="method">
      <option>GET</option>
      <option>JSONP</option>
    </select>
    <input type="text" ng-model="url" size="80"/>
    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
    <button id="samplejsonpbtn"
      ng-click="updateModel('JSONP',
                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
      Sample JSONP
    </button>
    <button id="invalidjsonpbtn"
      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
        Invalid JSONP
      </button>
    <pre>http status code: {{status}}</pre>
    <pre>http response data: {{data}}</pre>
  </div>
</file>
<file name="script.js">
  angular.module('httpExample', [])
    .controller('FetchController', ['$scope', '$http', '$templateCache',
      function($scope, $http, $templateCache) {
        $scope.method = 'GET';
        $scope.url = 'http-hello.html';

        $scope.fetch = function() {
          $scope.code = null;
          $scope.response = null;

          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
            success(function(data, status) {
              $scope.status = status;
              $scope.data = data;
            }).
            error(function(data, status) {
              $scope.data = data || "Request failed";
              $scope.status = status;
          });
        };

        $scope.updateModel = function(method, url) {
          $scope.method = method;
          $scope.url = url;
        };
      }]);
</file>
<file name="http-hello.html">
  Hello, $http!
</file>
<file name="protractor.js" type="protractor">
  var status = element(by.binding('status'));
  var data = element(by.binding('data'));
  var fetchBtn = element(by.id('fetchbtn'));
  var sampleGetBtn = element(by.id('samplegetbtn'));
  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

  it('should make an xhr GET request', function() {
    sampleGetBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('200');
    expect(data.getText()).toMatch(/Hello, \$http!/);
  });

// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
// it('should make a JSONP request to angularjs.org', function() {
//   sampleJsonpBtn.click();
//   fetchBtn.click();
//   expect(status.getText()).toMatch('200');
//   expect(data.getText()).toMatch(/Super Hero!/);
// });

  it('should make JSONP request to invalid URL and invoke the error handler',
      function() {
    invalidJsonpBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('0');
    expect(data.getText()).toMatch('Request failed');
  });
</file>
</example>
     */
    function $http(requestConfig) {

      if (!angular.isObject(requestConfig)) {
        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
      }

      var config = extend({
        method: 'get',
        transformRequest: defaults.transformRequest,
        transformResponse: defaults.transformResponse
      }, requestConfig);

      config.headers = mergeHeaders(requestConfig);
      config.method = uppercase(config.method);

      var serverRequest = function(config) {
        var headers = config.headers;
        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);

        // strip content-type if data is undefined
        if (isUndefined(reqData)) {
          forEach(headers, function(value, header) {
            if (lowercase(header) === 'content-type') {
                delete headers[header];
            }
          });
        }

        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
          config.withCredentials = defaults.withCredentials;
        }

        // send request
        return sendReq(config, reqData).then(transformResponse, transformResponse);
      };

      var chain = [serverRequest, undefined];
      var promise = $q.when(config);

      // apply interceptors
      forEach(reversedInterceptors, function(interceptor) {
        if (interceptor.request || interceptor.requestError) {
          chain.unshift(interceptor.request, interceptor.requestError);
        }
        if (interceptor.response || interceptor.responseError) {
          chain.push(interceptor.response, interceptor.responseError);
        }
      });

      while (chain.length) {
        var thenFn = chain.shift();
        var rejectFn = chain.shift();

        promise = promise.then(thenFn, rejectFn);
      }

      promise.success = function(fn) {
        promise.then(function(response) {
          fn(response.data, response.status, response.headers, config);
        });
        return promise;
      };

      promise.error = function(fn) {
        promise.then(null, function(response) {
          fn(response.data, response.status, response.headers, config);
        });
        return promise;
      };

      return promise;

      function transformResponse(response) {
        // make a copy since the response must be cacheable
        var resp = extend({}, response);
        if (!response.data) {
          resp.data = response.data;
        } else {
          resp.data = transformData(response.data, response.headers, response.status, config.transformResponse);
        }
        return (isSuccess(response.status))
          ? resp
          : $q.reject(resp);
      }

      function executeHeaderFns(headers, config) {
        var headerContent, processedHeaders = {};

        forEach(headers, function(headerFn, header) {
          if (isFunction(headerFn)) {
            headerContent = headerFn(config);
            if (headerContent != null) {
              processedHeaders[header] = headerContent;
            }
          } else {
            processedHeaders[header] = headerFn;
          }
        });

        return processedHeaders;
      }

      function mergeHeaders(config) {
        var defHeaders = defaults.headers,
            reqHeaders = extend({}, config.headers),
            defHeaderName, lowercaseDefHeaderName, reqHeaderName;

        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);

        // using for-in instead of forEach to avoid unecessary iteration after header has been found
        defaultHeadersIteration:
        for (defHeaderName in defHeaders) {
          lowercaseDefHeaderName = lowercase(defHeaderName);

          for (reqHeaderName in reqHeaders) {
            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
              continue defaultHeadersIteration;
            }
          }

          reqHeaders[defHeaderName] = defHeaders[defHeaderName];
        }

        // execute if header value is a function for merged headers
        return executeHeaderFns(reqHeaders, shallowCopy(config));
      }
    }

    $http.pendingRequests = [];

    /**
     * @ngdoc method
     * @name $http#get
     *
     * @description
     * Shortcut method to perform `GET` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#delete
     *
     * @description
     * Shortcut method to perform `DELETE` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#head
     *
     * @description
     * Shortcut method to perform `HEAD` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#jsonp
     *
     * @description
     * Shortcut method to perform `JSONP` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request.
     *                     The name of the callback should be the string `JSON_CALLBACK`.
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
    createShortMethods('get', 'delete', 'head', 'jsonp');

    /**
     * @ngdoc method
     * @name $http#post
     *
     * @description
     * Shortcut method to perform `POST` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#put
     *
     * @description
     * Shortcut method to perform `PUT` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

     /**
      * @ngdoc method
      * @name $http#patch
      *
      * @description
      * Shortcut method to perform `PATCH` request.
      *
      * @param {string} url Relative or absolute URL specifying the destination of the request
      * @param {*} data Request content
      * @param {Object=} config Optional configuration object
      * @returns {HttpPromise} Future object
      */
    createShortMethodsWithData('post', 'put', 'patch');

        /**
         * @ngdoc property
         * @name $http#defaults
         *
         * @description
         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
         * default headers, withCredentials as well as request and response transformations.
         *
         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
         */
    $http.defaults = defaults;


    return $http;


    function createShortMethods(names) {
      forEach(arguments, function(name) {
        $http[name] = function(url, config) {
          return $http(extend(config || {}, {
            method: name,
            url: url
          }));
        };
      });
    }


    function createShortMethodsWithData(name) {
      forEach(arguments, function(name) {
        $http[name] = function(url, data, config) {
          return $http(extend(config || {}, {
            method: name,
            url: url,
            data: data
          }));
        };
      });
    }


    /**
     * Makes the request.
     *
     * !!! ACCESSES CLOSURE VARS:
     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
     */
    function sendReq(config, reqData) {
      var deferred = $q.defer(),
          promise = deferred.promise,
          cache,
          cachedResp,
          reqHeaders = config.headers,
          url = buildUrl(config.url, config.params);

      $http.pendingRequests.push(config);
      promise.then(removePendingReq, removePendingReq);


      if ((config.cache || defaults.cache) && config.cache !== false &&
          (config.method === 'GET' || config.method === 'JSONP')) {
        cache = isObject(config.cache) ? config.cache
              : isObject(defaults.cache) ? defaults.cache
              : defaultCache;
      }

      if (cache) {
        cachedResp = cache.get(url);
        if (isDefined(cachedResp)) {
          if (isPromiseLike(cachedResp)) {
            // cached request has already been sent, but there is no response yet
            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);
          } else {
            // serving from cache
            if (isArray(cachedResp)) {
              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
            } else {
              resolvePromise(cachedResp, 200, {}, 'OK');
            }
          }
        } else {
          // put the promise for the non-transformed response into cache as a placeholder
          cache.put(url, promise);
        }
      }


      // if we won't have the response in cache, set the xsrf headers and
      // send the request to the backend
      if (isUndefined(cachedResp)) {
        var xsrfValue = urlIsSameOrigin(config.url)
            ? $browser.cookies()[config.xsrfCookieName || defaults.xsrfCookieName]
            : undefined;
        if (xsrfValue) {
          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;
        }

        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,
            config.withCredentials, config.responseType);
      }

      return promise;


      /**
       * Callback registered to $httpBackend():
       *  - caches the response if desired
       *  - resolves the raw $http promise
       *  - calls $apply
       */
      function done(status, response, headersString, statusText) {
        if (cache) {
          if (isSuccess(status)) {
            cache.put(url, [status, response, parseHeaders(headersString), statusText]);
          } else {
            // remove promise from the cache
            cache.remove(url);
          }
        }

        function resolveHttpPromise() {
          resolvePromise(response, status, headersString, statusText);
        }

        if (useApplyAsync) {
          $rootScope.$applyAsync(resolveHttpPromise);
        } else {
          resolveHttpPromise();
          if (!$rootScope.$$phase) $rootScope.$apply();
        }
      }


      /**
       * Resolves the raw $http promise.
       */
      function resolvePromise(response, status, headers, statusText) {
        // normalize internal statuses to 0
        status = Math.max(status, 0);

        (isSuccess(status) ? deferred.resolve : deferred.reject)({
          data: response,
          status: status,
          headers: headersGetter(headers),
          config: config,
          statusText: statusText
        });
      }

      function resolvePromiseWithResult(result) {
        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);
      }

      function removePendingReq() {
        var idx = $http.pendingRequests.indexOf(config);
        if (idx !== -1) $http.pendingRequests.splice(idx, 1);
      }
    }


    function buildUrl(url, params) {
      if (!params) return url;
      var parts = [];
      forEachSorted(params, function(value, key) {
        if (value === null || isUndefined(value)) return;
        if (!isArray(value)) value = [value];

        forEach(value, function(v) {
          if (isObject(v)) {
            if (isDate(v)) {
              v = v.toISOString();
            } else {
              v = toJson(v);
            }
          }
          parts.push(encodeUriQuery(key) + '=' +
                     encodeUriQuery(v));
        });
      });
      if (parts.length > 0) {
        url += ((url.indexOf('?') == -1) ? '?' : '&') + parts.join('&');
      }
      return url;
    }
  }];
}

function createXhr() {
    return new window.XMLHttpRequest();
}

/**
 * @ngdoc service
 * @name $httpBackend
 * @requires $window
 * @requires $document
 *
 * @description
 * HTTP backend used by the {@link ng.$http service} that delegates to
 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
 *
 * You should never need to use this service directly, instead use the higher-level abstractions:
 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
 *
 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
 * $httpBackend} which can be trained with responses.
 */
function $HttpBackendProvider() {
  this.$get = ['$browser', '$window', '$document', function($browser, $window, $document) {
    return createHttpBackend($browser, createXhr, $browser.defer, $window.angular.callbacks, $document[0]);
  }];
}

function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
  // TODO(vojta): fix the signature
  return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {
    $browser.$$incOutstandingRequestCount();
    url = url || $browser.url();

    if (lowercase(method) == 'jsonp') {
      var callbackId = '_' + (callbacks.counter++).toString(36);
      callbacks[callbackId] = function(data) {
        callbacks[callbackId].data = data;
        callbacks[callbackId].called = true;
      };

      var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),
          callbackId, function(status, text) {
        completeRequest(callback, status, callbacks[callbackId].data, "", text);
        callbacks[callbackId] = noop;
      });
    } else {

      var xhr = createXhr();

      xhr.open(method, url, true);
      forEach(headers, function(value, key) {
        if (isDefined(value)) {
            xhr.setRequestHeader(key, value);
        }
      });

      xhr.onload = function requestLoaded() {
        var statusText = xhr.statusText || '';

        // responseText is the old-school way of retrieving response (supported by IE8 & 9)
        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
        var response = ('response' in xhr) ? xhr.response : xhr.responseText;

        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
        var status = xhr.status === 1223 ? 204 : xhr.status;

        // fix status code when it is 0 (0 status is undocumented).
        // Occurs when accessing file resources or on Android 4.1 stock browser
        // while retrieving files from application cache.
        if (status === 0) {
          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
        }

        completeRequest(callback,
            status,
            response,
            xhr.getAllResponseHeaders(),
            statusText);
      };

      var requestError = function() {
        // The response is always empty
        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
        completeRequest(callback, -1, null, null, '');
      };

      xhr.onerror = requestError;
      xhr.onabort = requestError;

      if (withCredentials) {
        xhr.withCredentials = true;
      }

      if (responseType) {
        try {
          xhr.responseType = responseType;
        } catch (e) {
          // WebKit added support for the json responseType value on 09/03/2013
          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
          // known to throw when setting the value "json" as the response type. Other older
          // browsers implementing the responseType
          //
          // The json response type can be ignored if not supported, because JSON payloads are
          // parsed on the client-side regardless.
          if (responseType !== 'json') {
            throw e;
          }
        }
      }

      xhr.send(post || null);
    }

    if (timeout > 0) {
      var timeoutId = $browserDefer(timeoutRequest, timeout);
    } else if (isPromiseLike(timeout)) {
      timeout.then(timeoutRequest);
    }


    function timeoutRequest() {
      jsonpDone && jsonpDone();
      xhr && xhr.abort();
    }

    function completeRequest(callback, status, response, headersString, statusText) {
      // cancel timeout and subsequent timeout promise resolution
      if (timeoutId !== undefined) {
        $browserDefer.cancel(timeoutId);
      }
      jsonpDone = xhr = null;

      callback(status, response, headersString, statusText);
      $browser.$$completeOutstandingRequest(noop);
    }
  };

  function jsonpReq(url, callbackId, done) {
    // we can't use jQuery/jqLite here because jQuery does crazy shit with script elements, e.g.:
    // - fetches local scripts via XHR and evals them
    // - adds and immediately removes script elements from the document
    var script = rawDocument.createElement('script'), callback = null;
    script.type = "text/javascript";
    script.src = url;
    script.async = true;

    callback = function(event) {
      removeEventListenerFn(script, "load", callback);
      removeEventListenerFn(script, "error", callback);
      rawDocument.body.removeChild(script);
      script = null;
      var status = -1;
      var text = "unknown";

      if (event) {
        if (event.type === "load" && !callbacks[callbackId].called) {
          event = { type: "error" };
        }
        text = event.type;
        status = event.type === "error" ? 404 : 200;
      }

      if (done) {
        done(status, text);
      }
    };

    addEventListenerFn(script, "load", callback);
    addEventListenerFn(script, "error", callback);
    rawDocument.body.appendChild(script);
    return callback;
  }
}

var $interpolateMinErr = minErr('$interpolate');

/**
 * @ngdoc provider
 * @name $interpolateProvider
 *
 * @description
 *
 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
 *
 * @example
<example module="customInterpolationApp">
<file name="index.html">
<script>
  var customInterpolationApp = angular.module('customInterpolationApp', []);

  customInterpolationApp.config(function($interpolateProvider) {
    $interpolateProvider.startSymbol('//');
    $interpolateProvider.endSymbol('//');
  });


  customInterpolationApp.controller('DemoController', function() {
      this.label = "This binding is brought you by // interpolation symbols.";
  });
</script>
<div ng-app="App" ng-controller="DemoController as demo">
    //demo.label//
</div>
</file>
<file name="protractor.js" type="protractor">
  it('should interpolate binding with custom symbols', function() {
    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
  });
</file>
</example>
 */
function $InterpolateProvider() {
  var startSymbol = '{{';
  var endSymbol = '}}';

  /**
   * @ngdoc method
   * @name $interpolateProvider#startSymbol
   * @description
   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
   *
   * @param {string=} value new value to set the starting symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
  this.startSymbol = function(value) {
    if (value) {
      startSymbol = value;
      return this;
    } else {
      return startSymbol;
    }
  };

  /**
   * @ngdoc method
   * @name $interpolateProvider#endSymbol
   * @description
   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
   *
   * @param {string=} value new value to set the ending symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
  this.endSymbol = function(value) {
    if (value) {
      endSymbol = value;
      return this;
    } else {
      return endSymbol;
    }
  };


  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {
    var startSymbolLength = startSymbol.length,
        endSymbolLength = endSymbol.length,
        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),
        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');

    function escape(ch) {
      return '\\\\\\' + ch;
    }

    function unescapeText(text) {
      return text.replace(escapedStartRegexp, startSymbol).
        replace(escapedEndRegexp, endSymbol);
    }

    function stringify(value) {
      if (value == null) { // null || undefined
        return '';
      }
      switch (typeof value) {
        case 'string':
          break;
        case 'number':
          value = '' + value;
          break;
        default:
          value = toJson(value);
      }

      return value;
    }

    /**
     * @ngdoc service
     * @name $interpolate
     * @kind function
     *
     * @requires $parse
     * @requires $sce
     *
     * @description
     *
     * Compiles a string with markup into an interpolation function. This service is used by the
     * HTML {@link ng.$compile $compile} service for data binding. See
     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
     * interpolation markup.
     *
     *
     * ```js
     *   var $interpolate = ...; // injected
     *   var exp = $interpolate('Hello {{name | uppercase}}!');
     *   expect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');
     * ```
     *
     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
     * `true`, the interpolation function will return `undefined` unless all embedded expressions
     * evaluate to a value other than `undefined`.
     *
     * ```js
     *   var $interpolate = ...; // injected
     *   var context = {greeting: 'Hello', name: undefined };
     *
     *   // default "forgiving" mode
     *   var exp = $interpolate('{{greeting}} {{name}}!');
     *   expect(exp(context)).toEqual('Hello !');
     *
     *   // "allOrNothing" mode
     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
     *   expect(exp(context)).toBeUndefined();
     *   context.name = 'Angular';
     *   expect(exp(context)).toEqual('Hello Angular!');
     * ```
     *
     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
     *
     * ####Escaped Interpolation
     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
     * or binding.
     *
     * This enables web-servers to prevent script injection attacks and defacing attacks, to some
     * degree, while also enabling code examples to work without relying on the
     * {@link ng.directive:ngNonBindable ngNonBindable} directive.
     *
     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
     * interpolation start/end markers with their escaped counterparts.**
     *
     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
     * output when the $interpolate service processes the text. So, for HTML elements interpolated
     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
     * this is typically useful only when user-data is used in rendering a template from the server, or
     * when otherwise untrusted data is used by a directive.
     *
     * <example>
     *  <file name="index.html">
     *    <div ng-init="username='A user'">
     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
     *        </p>
     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
     *        application, but fails to accomplish their task, because the server has correctly
     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
     *        characters.</p>
     *      <p>Instead, the result of the attempted script injection is visible, and can be removed
     *        from the database by an administrator.</p>
     *    </div>
     *  </file>
     * </example>
     *
     * @param {string} text The text with markup to interpolate.
     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
     *    embedded expression in order to return an interpolation function. Strings with no
     *    embedded expression will return null for the interpolation function.
     * @param {string=} trustedContext when provided, the returned function passes the interpolated
     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
     *    provides Strict Contextual Escaping for details.
     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
     *    unless all embedded expressions evaluate to a value other than `undefined`.
     * @returns {function(context)} an interpolation function which is used to compute the
     *    interpolated string. The function has these parameters:
     *
     * - `context`: evaluation context for all expressions embedded in the interpolated text
     */
    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
      allOrNothing = !!allOrNothing;
      var startIndex,
          endIndex,
          index = 0,
          expressions = [],
          parseFns = [],
          textLength = text.length,
          exp,
          concat = [],
          expressionPositions = [];

      while (index < textLength) {
        if (((startIndex = text.indexOf(startSymbol, index)) != -1) &&
             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1)) {
          if (index !== startIndex) {
            concat.push(unescapeText(text.substring(index, startIndex)));
          }
          exp = text.substring(startIndex + startSymbolLength, endIndex);
          expressions.push(exp);
          parseFns.push($parse(exp, parseStringifyInterceptor));
          index = endIndex + endSymbolLength;
          expressionPositions.push(concat.length);
          concat.push('');
        } else {
          // we did not find an interpolation, so we have to add the remainder to the separators array
          if (index !== textLength) {
            concat.push(unescapeText(text.substring(index)));
          }
          break;
        }
      }

      // Concatenating expressions makes it hard to reason about whether some combination of
      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
      // single expression be used for iframe[src], object[src], etc., we ensure that the value
      // that's used is assigned or constructed by some JS code somewhere that is more testable or
      // make it obvious that you bound the value to some user controlled value.  This helps reduce
      // the load when auditing for XSS issues.
      if (trustedContext && concat.length > 1) {
          throw $interpolateMinErr('noconcat',
              "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +
              "interpolations that concatenate multiple expressions when a trusted value is " +
              "required.  See http://docs.angularjs.org/api/ng.$sce", text);
      }

      if (!mustHaveExpression || expressions.length) {
        var compute = function(values) {
          for (var i = 0, ii = expressions.length; i < ii; i++) {
            if (allOrNothing && isUndefined(values[i])) return;
            concat[expressionPositions[i]] = values[i];
          }
          return concat.join('');
        };

        var getValue = function(value) {
          return trustedContext ?
            $sce.getTrusted(trustedContext, value) :
            $sce.valueOf(value);
        };

        return extend(function interpolationFn(context) {
            var i = 0;
            var ii = expressions.length;
            var values = new Array(ii);

            try {
              for (; i < ii; i++) {
                values[i] = parseFns[i](context);
              }

              return compute(values);
            } catch (err) {
              var newErr = $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text,
                  err.toString());
              $exceptionHandler(newErr);
            }

          }, {
          // all of these properties are undocumented for now
          exp: text, //just for compatibility with regular watchers created via $watch
          expressions: expressions,
          $$watchDelegate: function(scope, listener, objectEquality) {
            var lastValue;
            return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {
              var currValue = compute(values);
              if (isFunction(listener)) {
                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
              }
              lastValue = currValue;
            }, objectEquality);
          }
        });
      }

      function parseStringifyInterceptor(value) {
        try {
          value = getValue(value);
          return allOrNothing && !isDefined(value) ? value : stringify(value);
        } catch (err) {
          var newErr = $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text,
            err.toString());
          $exceptionHandler(newErr);
        }
      }
    }


    /**
     * @ngdoc method
     * @name $interpolate#startSymbol
     * @description
     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
     *
     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
     * the symbol.
     *
     * @returns {string} start symbol.
     */
    $interpolate.startSymbol = function() {
      return startSymbol;
    };


    /**
     * @ngdoc method
     * @name $interpolate#endSymbol
     * @description
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
     *
     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
     * the symbol.
     *
     * @returns {string} end symbol.
     */
    $interpolate.endSymbol = function() {
      return endSymbol;
    };

    return $interpolate;
  }];
}

function $IntervalProvider() {
  this.$get = ['$rootScope', '$window', '$q', '$$q',
       function($rootScope,   $window,   $q,   $$q) {
    var intervals = {};


     /**
      * @ngdoc service
      * @name $interval
      *
      * @description
      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
      * milliseconds.
      *
      * The return value of registering an interval function is a promise. This promise will be
      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
      * run indefinitely if `count` is not defined. The value of the notification will be the
      * number of iterations that have run.
      * To cancel an interval, call `$interval.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
      * time.
      *
      * <div class="alert alert-warning">
      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
      * with them.  In particular they are not automatically destroyed when a controller's scope or a
      * directive's element are destroyed.
      * You should take this into consideration and make sure to always cancel the interval at the
      * appropriate moment.  See the example below for more details on how and when to do this.
      * </div>
      *
      * @param {function()} fn A function that should be called repeatedly.
      * @param {number} delay Number of milliseconds between each function call.
      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
      *   indefinitely.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @returns {promise} A promise which will be notified on each iteration.
      *
      * @example
      * <example module="intervalExample">
      * <file name="index.html">
      *   <script>
      *     angular.module('intervalExample', [])
      *       .controller('ExampleController', ['$scope', '$interval',
      *         function($scope, $interval) {
      *           $scope.format = 'M/d/yy h:mm:ss a';
      *           $scope.blood_1 = 100;
      *           $scope.blood_2 = 120;
      *
      *           var stop;
      *           $scope.fight = function() {
      *             // Don't start a new fight if we are already fighting
      *             if ( angular.isDefined(stop) ) return;
      *
      *             stop = $interval(function() {
      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
      *                 $scope.blood_1 = $scope.blood_1 - 3;
      *                 $scope.blood_2 = $scope.blood_2 - 4;
      *               } else {
      *                 $scope.stopFight();
      *               }
      *             }, 100);
      *           };
      *
      *           $scope.stopFight = function() {
      *             if (angular.isDefined(stop)) {
      *               $interval.cancel(stop);
      *               stop = undefined;
      *             }
      *           };
      *
      *           $scope.resetFight = function() {
      *             $scope.blood_1 = 100;
      *             $scope.blood_2 = 120;
      *           };
      *
      *           $scope.$on('$destroy', function() {
      *             // Make sure that the interval is destroyed too
      *             $scope.stopFight();
      *           });
      *         }])
      *       // Register the 'myCurrentTime' directive factory method.
      *       // We inject $interval and dateFilter service since the factory method is DI.
      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
      *         function($interval, dateFilter) {
      *           // return the directive link function. (compile function not needed)
      *           return function(scope, element, attrs) {
      *             var format,  // date format
      *                 stopTime; // so that we can cancel the time updates
      *
      *             // used to update the UI
      *             function updateTime() {
      *               element.text(dateFilter(new Date(), format));
      *             }
      *
      *             // watch the expression, and update the UI on change.
      *             scope.$watch(attrs.myCurrentTime, function(value) {
      *               format = value;
      *               updateTime();
      *             });
      *
      *             stopTime = $interval(updateTime, 1000);
      *
      *             // listen on DOM destroy (removal) event, and cancel the next UI update
      *             // to prevent updating time after the DOM element was removed.
      *             element.on('$destroy', function() {
      *               $interval.cancel(stopTime);
      *             });
      *           }
      *         }]);
      *   </script>
      *
      *   <div>
      *     <div ng-controller="ExampleController">
      *       Date format: <input ng-model="format"> <hr/>
      *       Current time is: <span my-current-time="format"></span>
      *       <hr/>
      *       Blood 1 : <font color='red'>{{blood_1}}</font>
      *       Blood 2 : <font color='red'>{{blood_2}}</font>
      *       <button type="button" data-ng-click="fight()">Fight</button>
      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
      *     </div>
      *   </div>
      *
      * </file>
      * </example>
      */
    function interval(fn, delay, count, invokeApply) {
      var setInterval = $window.setInterval,
          clearInterval = $window.clearInterval,
          iteration = 0,
          skipApply = (isDefined(invokeApply) && !invokeApply),
          deferred = (skipApply ? $$q : $q).defer(),
          promise = deferred.promise;

      count = isDefined(count) ? count : 0;

      promise.then(null, null, fn);

      promise.$$intervalId = setInterval(function tick() {
        deferred.notify(iteration++);

        if (count > 0 && iteration >= count) {
          deferred.resolve(iteration);
          clearInterval(promise.$$intervalId);
          delete intervals[promise.$$intervalId];
        }

        if (!skipApply) $rootScope.$apply();

      }, delay);

      intervals[promise.$$intervalId] = deferred;

      return promise;
    }


     /**
      * @ngdoc method
      * @name $interval#cancel
      *
      * @description
      * Cancels a task associated with the `promise`.
      *
      * @param {promise} promise returned by the `$interval` function.
      * @returns {boolean} Returns `true` if the task was successfully canceled.
      */
    interval.cancel = function(promise) {
      if (promise && promise.$$intervalId in intervals) {
        intervals[promise.$$intervalId].reject('canceled');
        $window.clearInterval(promise.$$intervalId);
        delete intervals[promise.$$intervalId];
        return true;
      }
      return false;
    };

    return interval;
  }];
}

/**
 * @ngdoc service
 * @name $locale
 *
 * @description
 * $locale service provides localization rules for various Angular components. As of right now the
 * only public api is:
 *
 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
 */
function $LocaleProvider() {
  this.$get = function() {
    return {
      id: 'en-us',

      NUMBER_FORMATS: {
        DECIMAL_SEP: '.',
        GROUP_SEP: ',',
        PATTERNS: [
          { // Decimal Pattern
            minInt: 1,
            minFrac: 0,
            maxFrac: 3,
            posPre: '',
            posSuf: '',
            negPre: '-',
            negSuf: '',
            gSize: 3,
            lgSize: 3
          },{ //Currency Pattern
            minInt: 1,
            minFrac: 2,
            maxFrac: 2,
            posPre: '\u00A4',
            posSuf: '',
            negPre: '(\u00A4',
            negSuf: ')',
            gSize: 3,
            lgSize: 3
          }
        ],
        CURRENCY_SYM: '$'
      },

      DATETIME_FORMATS: {
        MONTH:
            'January,February,March,April,May,June,July,August,September,October,November,December'
            .split(','),
        SHORTMONTH:  'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),
        DAY: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),
        SHORTDAY: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),
        AMPMS: ['AM','PM'],
        medium: 'MMM d, y h:mm:ss a',
        'short': 'M/d/yy h:mm a',
        fullDate: 'EEEE, MMMM d, y',
        longDate: 'MMMM d, y',
        mediumDate: 'MMM d, y',
        shortDate: 'M/d/yy',
        mediumTime: 'h:mm:ss a',
        shortTime: 'h:mm a'
      },

      pluralCat: function(num) {
        if (num === 1) {
          return 'one';
        }
        return 'other';
      }
    };
  };
}

var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,
    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};
var $locationMinErr = minErr('$location');


/**
 * Encode path using encodeUriSegment, ignoring forward slashes
 *
 * @param {string} path Path to encode
 * @returns {string}
 */
function encodePath(path) {
  var segments = path.split('/'),
      i = segments.length;

  while (i--) {
    segments[i] = encodeUriSegment(segments[i]);
  }

  return segments.join('/');
}

function parseAbsoluteUrl(absoluteUrl, locationObj) {
  var parsedUrl = urlResolve(absoluteUrl);

  locationObj.$$protocol = parsedUrl.protocol;
  locationObj.$$host = parsedUrl.hostname;
  locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
}


function parseAppUrl(relativeUrl, locationObj) {
  var prefixed = (relativeUrl.charAt(0) !== '/');
  if (prefixed) {
    relativeUrl = '/' + relativeUrl;
  }
  var match = urlResolve(relativeUrl);
  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?
      match.pathname.substring(1) : match.pathname);
  locationObj.$$search = parseKeyValue(match.search);
  locationObj.$$hash = decodeURIComponent(match.hash);

  // make sure path starts with '/';
  if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
    locationObj.$$path = '/' + locationObj.$$path;
  }
}


/**
 *
 * @param {string} begin
 * @param {string} whole
 * @returns {string} returns text from whole after begin or undefined if it does not begin with
 *                   expected string.
 */
function beginsWith(begin, whole) {
  if (whole.indexOf(begin) === 0) {
    return whole.substr(begin.length);
  }
}


function stripHash(url) {
  var index = url.indexOf('#');
  return index == -1 ? url : url.substr(0, index);
}

function trimEmptyHash(url) {
  return url.replace(/(#.+)|#$/, '$1');
}


function stripFile(url) {
  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
}

/* return the server only (scheme://host:port) */
function serverBase(url) {
  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
}


/**
 * LocationHtml5Url represents an url
 * This object is exposed as $location service when HTML5 mode is enabled and supported
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} basePrefix url path prefix
 */
function LocationHtml5Url(appBase, basePrefix) {
  this.$$html5 = true;
  basePrefix = basePrefix || '';
  var appBaseNoFile = stripFile(appBase);
  parseAbsoluteUrl(appBase, this);


  /**
   * Parse given html5 (regular) url string into properties
   * @param {string} url HTML5 url
   * @private
   */
  this.$$parse = function(url) {
    var pathUrl = beginsWith(appBaseNoFile, url);
    if (!isString(pathUrl)) {
      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,
          appBaseNoFile);
    }

    parseAppUrl(pathUrl, this);

    if (!this.$$path) {
      this.$$path = '/';
    }

    this.$$compose();
  };

  /**
   * Compose url and update `absUrl` property
   * @private
   */
  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'
  };

  this.$$parseLinkUrl = function(url, relHref) {
    if (relHref && relHref[0] === '#') {
      // special case for links to hash fragments:
      // keep the old url and only replace the hash fragment
      this.hash(relHref.slice(1));
      return true;
    }
    var appUrl, prevAppUrl;
    var rewrittenUrl;

    if ((appUrl = beginsWith(appBase, url)) !== undefined) {
      prevAppUrl = appUrl;
      if ((appUrl = beginsWith(basePrefix, appUrl)) !== undefined) {
        rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);
      } else {
        rewrittenUrl = appBase + prevAppUrl;
      }
    } else if ((appUrl = beginsWith(appBaseNoFile, url)) !== undefined) {
      rewrittenUrl = appBaseNoFile + appUrl;
    } else if (appBaseNoFile == url + '/') {
      rewrittenUrl = appBaseNoFile;
    }
    if (rewrittenUrl) {
      this.$$parse(rewrittenUrl);
    }
    return !!rewrittenUrl;
  };
}


/**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when developer doesn't opt into html5 mode.
 * It also serves as the base class for html5 mode fallback on legacy browsers.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} hashPrefix hashbang prefix
 */
function LocationHashbangUrl(appBase, hashPrefix) {
  var appBaseNoFile = stripFile(appBase);

  parseAbsoluteUrl(appBase, this);


  /**
   * Parse given hashbang url into properties
   * @param {string} url Hashbang url
   * @private
   */
  this.$$parse = function(url) {
    var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
    var withoutHashUrl;

    if (withoutBaseUrl.charAt(0) === '#') {

      // The rest of the url starts with a hash so we have
      // got either a hashbang path or a plain hash fragment
      withoutHashUrl = beginsWith(hashPrefix, withoutBaseUrl);
      if (isUndefined(withoutHashUrl)) {
        // There was no hashbang prefix so we just have a hash fragment
        withoutHashUrl = withoutBaseUrl;
      }

    } else {
      // There was no hashbang path nor hash fragment:
      // If we are in HTML5 mode we use what is left as the path;
      // Otherwise we ignore what is left
      withoutHashUrl = this.$$html5 ? withoutBaseUrl : '';
    }

    parseAppUrl(withoutHashUrl, this);

    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);

    this.$$compose();

    /*
     * In Windows, on an anchor node on documents loaded from
     * the filesystem, the browser will return a pathname
     * prefixed with the drive name ('/C:/path') when a
     * pathname without a drive is set:
     *  * a.setAttribute('href', '/foo')
     *   * a.pathname === '/C:/foo' //true
     *
     * Inside of Angular, we're always using pathnames that
     * do not include drive names for routing.
     */
    function removeWindowsDriveName(path, url, base) {
      /*
      Matches paths for file protocol on windows,
      such as /C:/foo/bar, and captures only /foo/bar.
      */
      var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;

      var firstPathSegmentMatch;

      //Get the relative path from the input URL.
      if (url.indexOf(base) === 0) {
        url = url.replace(base, '');
      }

      // The input URL intentionally contains a first path segment that ends with a colon.
      if (windowsFilePathExp.exec(url)) {
        return path;
      }

      firstPathSegmentMatch = windowsFilePathExp.exec(path);
      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
    }
  };

  /**
   * Compose hashbang url and update `absUrl` property
   * @private
   */
  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
  };

  this.$$parseLinkUrl = function(url, relHref) {
    if (stripHash(appBase) == stripHash(url)) {
      this.$$parse(url);
      return true;
    }
    return false;
  };
}


/**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when html5 history api is enabled but the browser
 * does not support it.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} hashPrefix hashbang prefix
 */
function LocationHashbangInHtml5Url(appBase, hashPrefix) {
  this.$$html5 = true;
  LocationHashbangUrl.apply(this, arguments);

  var appBaseNoFile = stripFile(appBase);

  this.$$parseLinkUrl = function(url, relHref) {
    if (relHref && relHref[0] === '#') {
      // special case for links to hash fragments:
      // keep the old url and only replace the hash fragment
      this.hash(relHref.slice(1));
      return true;
    }

    var rewrittenUrl;
    var appUrl;

    if (appBase == stripHash(url)) {
      rewrittenUrl = url;
    } else if ((appUrl = beginsWith(appBaseNoFile, url))) {
      rewrittenUrl = appBase + hashPrefix + appUrl;
    } else if (appBaseNoFile === url + '/') {
      rewrittenUrl = appBaseNoFile;
    }
    if (rewrittenUrl) {
      this.$$parse(rewrittenUrl);
    }
    return !!rewrittenUrl;
  };

  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    // include hashPrefix in $$absUrl when $$url is empty so IE8 & 9 do not reload page because of removal of '#'
    this.$$absUrl = appBase + hashPrefix + this.$$url;
  };

}


var locationPrototype = {

  /**
   * Are we in html5 mode?
   * @private
   */
  $$html5: false,

  /**
   * Has any change been replacing?
   * @private
   */
  $$replace: false,

  /**
   * @ngdoc method
   * @name $location#absUrl
   *
   * @description
   * This method is getter only.
   *
   * Return full url representation with all segments encoded according to rules specified in
   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var absUrl = $location.absUrl();
   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
   * ```
   *
   * @return {string} full url
   */
  absUrl: locationGetter('$$absUrl'),

  /**
   * @ngdoc method
   * @name $location#url
   *
   * @description
   * This method is getter / setter.
   *
   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.
   *
   * Change path, search and hash, when called with parameter and return `$location`.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var url = $location.url();
   * // => "/some/path?foo=bar&baz=xoxo"
   * ```
   *
   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)
   * @return {string} url
   */
  url: function(url) {
    if (isUndefined(url)) {
      return this.$$url;
    }

    var match = PATH_MATCH.exec(url);
    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));
    if (match[2] || match[1] || url === '') this.search(match[3] || '');
    this.hash(match[5] || '');

    return this;
  },

  /**
   * @ngdoc method
   * @name $location#protocol
   *
   * @description
   * This method is getter only.
   *
   * Return protocol of current url.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var protocol = $location.protocol();
   * // => "http"
   * ```
   *
   * @return {string} protocol of current url
   */
  protocol: locationGetter('$$protocol'),

  /**
   * @ngdoc method
   * @name $location#host
   *
   * @description
   * This method is getter only.
   *
   * Return host of current url.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var host = $location.host();
   * // => "example.com"
   * ```
   *
   * @return {string} host of current url.
   */
  host: locationGetter('$$host'),

  /**
   * @ngdoc method
   * @name $location#port
   *
   * @description
   * This method is getter only.
   *
   * Return port of current url.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var port = $location.port();
   * // => 80
   * ```
   *
   * @return {Number} port
   */
  port: locationGetter('$$port'),

  /**
   * @ngdoc method
   * @name $location#path
   *
   * @description
   * This method is getter / setter.
   *
   * Return path of current url when called without any parameter.
   *
   * Change path when called with parameter and return `$location`.
   *
   * Note: Path should always begin with forward slash (/), this method will add the forward slash
   * if it is missing.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var path = $location.path();
   * // => "/some/path"
   * ```
   *
   * @param {(string|number)=} path New path
   * @return {string} path
   */
  path: locationGetterSetter('$$path', function(path) {
    path = path !== null ? path.toString() : '';
    return path.charAt(0) == '/' ? path : '/' + path;
  }),

  /**
   * @ngdoc method
   * @name $location#search
   *
   * @description
   * This method is getter / setter.
   *
   * Return search part (as object) of current url when called without any parameter.
   *
   * Change search part when called with parameter and return `$location`.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var searchObject = $location.search();
   * // => {foo: 'bar', baz: 'xoxo'}
   *
   * // set foo to 'yipee'
   * $location.search('foo', 'yipee');
   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
   * ```
   *
   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
   * hash object.
   *
   * When called with a single argument the method acts as a setter, setting the `search` component
   * of `$location` to the specified value.
   *
   * If the argument is a hash object containing an array of values, these values will be encoded
   * as duplicate search parameters in the url.
   *
   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
   * will override only a single search property.
   *
   * If `paramValue` is an array, it will override the property of the `search` component of
   * `$location` specified via the first argument.
   *
   * If `paramValue` is `null`, the property specified via the first argument will be deleted.
   *
   * If `paramValue` is `true`, the property specified via the first argument will be added with no
   * value nor trailing equal sign.
   *
   * @return {Object} If called with no arguments returns the parsed `search` object. If called with
   * one or more arguments returns `$location` object itself.
   */
  search: function(search, paramValue) {
    switch (arguments.length) {
      case 0:
        return this.$$search;
      case 1:
        if (isString(search) || isNumber(search)) {
          search = search.toString();
          this.$$search = parseKeyValue(search);
        } else if (isObject(search)) {
          search = copy(search, {});
          // remove object undefined or null properties
          forEach(search, function(value, key) {
            if (value == null) delete search[key];
          });

          this.$$search = search;
        } else {
          throw $locationMinErr('isrcharg',
              'The first argument of the `$location#search()` call must be a string or an object.');
        }
        break;
      default:
        if (isUndefined(paramValue) || paramValue === null) {
          delete this.$$search[search];
        } else {
          this.$$search[search] = paramValue;
        }
    }

    this.$$compose();
    return this;
  },

  /**
   * @ngdoc method
   * @name $location#hash
   *
   * @description
   * This method is getter / setter.
   *
   * Return hash fragment when called without any parameter.
   *
   * Change hash fragment when called with parameter and return `$location`.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue
   * var hash = $location.hash();
   * // => "hashValue"
   * ```
   *
   * @param {(string|number)=} hash New hash fragment
   * @return {string} hash
   */
  hash: locationGetterSetter('$$hash', function(hash) {
    return hash !== null ? hash.toString() : '';
  }),

  /**
   * @ngdoc method
   * @name $location#replace
   *
   * @description
   * If called, all changes to $location during current `$digest` will be replacing current history
   * record, instead of adding new one.
   */
  replace: function() {
    this.$$replace = true;
    return this;
  }
};

forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {
  Location.prototype = Object.create(locationPrototype);

  /**
   * @ngdoc method
   * @name $location#state
   *
   * @description
   * This method is getter / setter.
   *
   * Return the history state object when called without any parameter.
   *
   * Change the history state object when called with one parameter and return `$location`.
   * The state object is later passed to `pushState` or `replaceState`.
   *
   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
   * older browsers (like IE9 or Android < 4.0), don't use this method.
   *
   * @param {object=} state State object for pushState or replaceState
   * @return {object} state
   */
  Location.prototype.state = function(state) {
    if (!arguments.length) {
      return this.$$state;
    }

    if (Location !== LocationHtml5Url || !this.$$html5) {
      throw $locationMinErr('nostate', 'History API state support is available only ' +
        'in HTML5 mode and only in browsers supporting HTML5 History API');
    }
    // The user might modify `stateObject` after invoking `$location.state(stateObject)`
    // but we're changing the $$state reference to $browser.state() during the $digest
    // so the modification window is narrow.
    this.$$state = isUndefined(state) ? null : state;

    return this;
  };
});


function locationGetter(property) {
  return function() {
    return this[property];
  };
}


function locationGetterSetter(property, preprocess) {
  return function(value) {
    if (isUndefined(value)) {
      return this[property];
    }

    this[property] = preprocess(value);
    this.$$compose();

    return this;
  };
}


/**
 * @ngdoc service
 * @name $location
 *
 * @requires $rootElement
 *
 * @description
 * The $location service parses the URL in the browser address bar (based on the
 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
 * available to your application. Changes to the URL in the address bar are reflected into
 * $location service and changes to $location are reflected into the browser address bar.
 *
 * **The $location service:**
 *
 * - Exposes the current URL in the browser address bar, so you can
 *   - Watch and observe the URL.
 *   - Change the URL.
 * - Synchronizes the URL with the browser when the user
 *   - Changes the address bar.
 *   - Clicks the back or forward button (or clicks a History link).
 *   - Clicks on a link.
 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
 *
 * For more information see {@link guide/$location Developer Guide: Using $location}
 */

/**
 * @ngdoc provider
 * @name $locationProvider
 * @description
 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
 */
function $LocationProvider() {
  var hashPrefix = '',
      html5Mode = {
        enabled: false,
        requireBase: true,
        rewriteLinks: true
      };

  /**
   * @ngdoc method
   * @name $locationProvider#hashPrefix
   * @description
   * @param {string=} prefix Prefix for hash part (containing path and search)
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
  this.hashPrefix = function(prefix) {
    if (isDefined(prefix)) {
      hashPrefix = prefix;
      return this;
    } else {
      return hashPrefix;
    }
  };

  /**
   * @ngdoc method
   * @name $locationProvider#html5Mode
   * @description
   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
   *   properties:
   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
   *     support `pushState`.
   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
   *     See the {@link guide/$location $location guide for more information}
   *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,
   *     enables/disables url rewriting for relative links.
   *
   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
   */
  this.html5Mode = function(mode) {
    if (isBoolean(mode)) {
      html5Mode.enabled = mode;
      return this;
    } else if (isObject(mode)) {

      if (isBoolean(mode.enabled)) {
        html5Mode.enabled = mode.enabled;
      }

      if (isBoolean(mode.requireBase)) {
        html5Mode.requireBase = mode.requireBase;
      }

      if (isBoolean(mode.rewriteLinks)) {
        html5Mode.rewriteLinks = mode.rewriteLinks;
      }

      return this;
    } else {
      return html5Mode;
    }
  };

  /**
   * @ngdoc event
   * @name $location#$locationChangeStart
   * @eventType broadcast on root scope
   * @description
   * Broadcasted before a URL will change.
   *
   * This change can be prevented by calling
   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
   * details about event object. Upon successful change
   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
   *
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
   * the browser supports the HTML5 History API.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   * @param {string=} newState New history state object
   * @param {string=} oldState History state object that was before it was changed.
   */

  /**
   * @ngdoc event
   * @name $location#$locationChangeSuccess
   * @eventType broadcast on root scope
   * @description
   * Broadcasted after a URL was changed.
   *
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
   * the browser supports the HTML5 History API.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   * @param {string=} newState New history state object
   * @param {string=} oldState History state object that was before it was changed.
   */

  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',
      function($rootScope, $browser, $sniffer, $rootElement, $window) {
    var $location,
        LocationMode,
        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
        initialUrl = $browser.url(),
        appBase;

    if (html5Mode.enabled) {
      if (!baseHref && html5Mode.requireBase) {
        throw $locationMinErr('nobase',
          "$location in HTML5 mode requires a <base> tag to be present!");
      }
      appBase = serverBase(initialUrl) + (baseHref || '/');
      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
    } else {
      appBase = stripHash(initialUrl);
      LocationMode = LocationHashbangUrl;
    }
    $location = new LocationMode(appBase, '#' + hashPrefix);
    $location.$$parseLinkUrl(initialUrl, initialUrl);

    $location.$$state = $browser.state();

    var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;

    function setBrowserUrlWithFallback(url, replace, state) {
      var oldUrl = $location.url();
      var oldState = $location.$$state;
      try {
        $browser.url(url, replace, state);

        // Make sure $location.state() returns referentially identical (not just deeply equal)
        // state object; this makes possible quick checking if the state changed in the digest
        // loop. Checking deep equality would be too expensive.
        $location.$$state = $browser.state();
      } catch (e) {
        // Restore old values if pushState fails
        $location.url(oldUrl);
        $location.$$state = oldState;

        throw e;
      }
    }

    $rootElement.on('click', function(event) {
      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
      // currently we open nice url link and redirect then

      if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2) return;

      var elm = jqLite(event.target);

      // traverse the DOM up to find first A tag
      while (nodeName_(elm[0]) !== 'a') {
        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
      }

      var absHref = elm.prop('href');
      // get the actual href attribute - see
      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
      var relHref = elm.attr('href') || elm.attr('xlink:href');

      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
        // an animation.
        absHref = urlResolve(absHref.animVal).href;
      }

      // Ignore when url is started with javascript: or mailto:
      if (IGNORE_URI_REGEXP.test(absHref)) return;

      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {
        if ($location.$$parseLinkUrl(absHref, relHref)) {
          // We do a preventDefault for all urls that are part of the angular application,
          // in html5mode and also without, so that we are able to abort navigation without
          // getting double entries in the location history.
          event.preventDefault();
          // update location manually
          if ($location.absUrl() != $browser.url()) {
            $rootScope.$apply();
            // hack to work around FF6 bug 684208 when scenario runner clicks on links
            $window.angular['ff-684208-preventDefault'] = true;
          }
        }
      }
    });


    // rewrite hashbang url <> html5 url
    if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {
      $browser.url($location.absUrl(), true);
    }

    var initializing = true;

    // update $location when $browser url changes
    $browser.onUrlChange(function(newUrl, newState) {
      $rootScope.$evalAsync(function() {
        var oldUrl = $location.absUrl();
        var oldState = $location.$$state;
        var defaultPrevented;

        $location.$$parse(newUrl);
        $location.$$state = newState;

        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
            newState, oldState).defaultPrevented;

        // if the location was changed by a `$locationChangeStart` handler then stop
        // processing this location change
        if ($location.absUrl() !== newUrl) return;

        if (defaultPrevented) {
          $location.$$parse(oldUrl);
          $location.$$state = oldState;
          setBrowserUrlWithFallback(oldUrl, false, oldState);
        } else {
          initializing = false;
          afterLocationChange(oldUrl, oldState);
        }
      });
      if (!$rootScope.$$phase) $rootScope.$digest();
    });

    // update browser
    $rootScope.$watch(function $locationWatch() {
      var oldUrl = trimEmptyHash($browser.url());
      var newUrl = trimEmptyHash($location.absUrl());
      var oldState = $browser.state();
      var currentReplace = $location.$$replace;
      var urlOrStateChanged = oldUrl !== newUrl ||
        ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);

      if (initializing || urlOrStateChanged) {
        initializing = false;

        $rootScope.$evalAsync(function() {
          var newUrl = $location.absUrl();
          var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
              $location.$$state, oldState).defaultPrevented;

          // if the location was changed by a `$locationChangeStart` handler then stop
          // processing this location change
          if ($location.absUrl() !== newUrl) return;

          if (defaultPrevented) {
            $location.$$parse(oldUrl);
            $location.$$state = oldState;
          } else {
            if (urlOrStateChanged) {
              setBrowserUrlWithFallback(newUrl, currentReplace,
                                        oldState === $location.$$state ? null : $location.$$state);
            }
            afterLocationChange(oldUrl, oldState);
          }
        });
      }

      $location.$$replace = false;

      // we don't need to return anything because $evalAsync will make the digest loop dirty when
      // there is a change
    });

    return $location;

    function afterLocationChange(oldUrl, oldState) {
      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,
        $location.$$state, oldState);
    }
}];
}

/**
 * @ngdoc service
 * @name $log
 * @requires $window
 *
 * @description
 * Simple service for logging. Default implementation safely writes the message
 * into the browser's console (if present).
 *
 * The main purpose of this service is to simplify debugging and troubleshooting.
 *
 * The default is to log `debug` messages. You can use
 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
 *
 * @example
   <example module="logExample">
     <file name="script.js">
       angular.module('logExample', [])
         .controller('LogController', ['$scope', '$log', function($scope, $log) {
           $scope.$log = $log;
           $scope.message = 'Hello World!';
         }]);
     </file>
     <file name="index.html">
       <div ng-controller="LogController">
         <p>Reload this page with open console, enter text and hit the log button...</p>
         Message:
         <input type="text" ng-model="message"/>
         <button ng-click="$log.log(message)">log</button>
         <button ng-click="$log.warn(message)">warn</button>
         <button ng-click="$log.info(message)">info</button>
         <button ng-click="$log.error(message)">error</button>
       </div>
     </file>
   </example>
 */

/**
 * @ngdoc provider
 * @name $logProvider
 * @description
 * Use the `$logProvider` to configure how the application logs messages
 */
function $LogProvider() {
  var debug = true,
      self = this;

  /**
   * @ngdoc method
   * @name $logProvider#debugEnabled
   * @description
   * @param {boolean=} flag enable or disable debug level messages
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
  this.debugEnabled = function(flag) {
    if (isDefined(flag)) {
      debug = flag;
    return this;
    } else {
      return debug;
    }
  };

  this.$get = ['$window', function($window) {
    return {
      /**
       * @ngdoc method
       * @name $log#log
       *
       * @description
       * Write a log message
       */
      log: consoleLog('log'),

      /**
       * @ngdoc method
       * @name $log#info
       *
       * @description
       * Write an information message
       */
      info: consoleLog('info'),

      /**
       * @ngdoc method
       * @name $log#warn
       *
       * @description
       * Write a warning message
       */
      warn: consoleLog('warn'),

      /**
       * @ngdoc method
       * @name $log#error
       *
       * @description
       * Write an error message
       */
      error: consoleLog('error'),

      /**
       * @ngdoc method
       * @name $log#debug
       *
       * @description
       * Write a debug message
       */
      debug: (function() {
        var fn = consoleLog('debug');

        return function() {
          if (debug) {
            fn.apply(self, arguments);
          }
        };
      }())
    };

    function formatError(arg) {
      if (arg instanceof Error) {
        if (arg.stack) {
          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)
              ? 'Error: ' + arg.message + '\n' + arg.stack
              : arg.stack;
        } else if (arg.sourceURL) {
          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
        }
      }
      return arg;
    }

    function consoleLog(type) {
      var console = $window.console || {},
          logFn = console[type] || console.log || noop,
          hasApply = false;

      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
      // The reason behind this is that console.log has type "object" in IE8...
      try {
        hasApply = !!logFn.apply;
      } catch (e) {}

      if (hasApply) {
        return function() {
          var args = [];
          forEach(arguments, function(arg) {
            args.push(formatError(arg));
          });
          return logFn.apply(console, args);
        };
      }

      // we are IE which either doesn't have window.console => this is noop and we do nothing,
      // or we are IE where console.log doesn't have apply so we log at least first 2 args
      return function(arg1, arg2) {
        logFn(arg1, arg2 == null ? '' : arg2);
      };
    }
  }];
}

var $parseMinErr = minErr('$parse');

// Sandboxing Angular Expressions
// ------------------------------
// Angular expressions are generally considered safe because these expressions only have direct
// access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by
// obtaining a reference to native JS functions such as the Function constructor.
//
// As an example, consider the following Angular expression:
//
//   {}.toString.constructor('alert("evil JS code")')
//
// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
// against the expression language, but not to prevent exploits that were enabled by exposing
// sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good
// practice and therefore we are not even trying to protect against interaction with an object
// explicitly exposed in this way.
//
// In general, it is not possible to access a Window object from an angular expression unless a
// window or some DOM object that has a reference to window is published onto a Scope.
// Similarly we prevent invocations of function known to be dangerous, as well as assignments to
// native objects.
//
// See https://docs.angularjs.org/guide/security


function ensureSafeMemberName(name, fullExpression) {
  if (name === "__defineGetter__" || name === "__defineSetter__"
      || name === "__lookupGetter__" || name === "__lookupSetter__"
      || name === "__proto__") {
    throw $parseMinErr('isecfld',
        'Attempting to access a disallowed field in Angular expressions! '
        + 'Expression: {0}', fullExpression);
  }
  return name;
}

function ensureSafeObject(obj, fullExpression) {
  // nifty check if obj is Function that is fast and works across iframes and other contexts
  if (obj) {
    if (obj.constructor === obj) {
      throw $parseMinErr('isecfn',
          'Referencing Function in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    } else if (// isWindow(obj)
        obj.window === obj) {
      throw $parseMinErr('isecwindow',
          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    } else if (// isElement(obj)
        obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {
      throw $parseMinErr('isecdom',
          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    } else if (// block Object so that we can't get hold of dangerous Object.* methods
        obj === Object) {
      throw $parseMinErr('isecobj',
          'Referencing Object in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    }
  }
  return obj;
}

var CALL = Function.prototype.call;
var APPLY = Function.prototype.apply;
var BIND = Function.prototype.bind;

function ensureSafeFunction(obj, fullExpression) {
  if (obj) {
    if (obj.constructor === obj) {
      throw $parseMinErr('isecfn',
        'Referencing Function in Angular expressions is disallowed! Expression: {0}',
        fullExpression);
    } else if (obj === CALL || obj === APPLY || obj === BIND) {
      throw $parseMinErr('isecff',
        'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}',
        fullExpression);
    }
  }
}

var OPERATORS = createMap();
forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function(operator) { OPERATORS[operator] = true; });
var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};


/////////////////////////////////////////


/**
 * @constructor
 */
var Lexer = function(options) {
  this.options = options;
};

Lexer.prototype = {
  constructor: Lexer,

  lex: function(text) {
    this.text = text;
    this.index = 0;
    this.tokens = [];

    while (this.index < this.text.length) {
      var ch = this.text.charAt(this.index);
      if (ch === '"' || ch === "'") {
        this.readString(ch);
      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {
        this.readNumber();
      } else if (this.isIdent(ch)) {
        this.readIdent();
      } else if (this.is(ch, '(){}[].,;:?')) {
        this.tokens.push({index: this.index, text: ch});
        this.index++;
      } else if (this.isWhitespace(ch)) {
        this.index++;
      } else {
        var ch2 = ch + this.peek();
        var ch3 = ch2 + this.peek(2);
        var op1 = OPERATORS[ch];
        var op2 = OPERATORS[ch2];
        var op3 = OPERATORS[ch3];
        if (op1 || op2 || op3) {
          var token = op3 ? ch3 : (op2 ? ch2 : ch);
          this.tokens.push({index: this.index, text: token, operator: true});
          this.index += token.length;
        } else {
          this.throwError('Unexpected next character ', this.index, this.index + 1);
        }
      }
    }
    return this.tokens;
  },

  is: function(ch, chars) {
    return chars.indexOf(ch) !== -1;
  },

  peek: function(i) {
    var num = i || 1;
    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;
  },

  isNumber: function(ch) {
    return ('0' <= ch && ch <= '9') && typeof ch === "string";
  },

  isWhitespace: function(ch) {
    // IE treats non-breaking space as \u00A0
    return (ch === ' ' || ch === '\r' || ch === '\t' ||
            ch === '\n' || ch === '\v' || ch === '\u00A0');
  },

  isIdent: function(ch) {
    return ('a' <= ch && ch <= 'z' ||
            'A' <= ch && ch <= 'Z' ||
            '_' === ch || ch === '$');
  },

  isExpOperator: function(ch) {
    return (ch === '-' || ch === '+' || this.isNumber(ch));
  },

  throwError: function(error, start, end) {
    end = end || this.index;
    var colStr = (isDefined(start)
            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'
            : ' ' + end);
    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',
        error, colStr, this.text);
  },

  readNumber: function() {
    var number = '';
    var start = this.index;
    while (this.index < this.text.length) {
      var ch = lowercase(this.text.charAt(this.index));
      if (ch == '.' || this.isNumber(ch)) {
        number += ch;
      } else {
        var peekCh = this.peek();
        if (ch == 'e' && this.isExpOperator(peekCh)) {
          number += ch;
        } else if (this.isExpOperator(ch) &&
            peekCh && this.isNumber(peekCh) &&
            number.charAt(number.length - 1) == 'e') {
          number += ch;
        } else if (this.isExpOperator(ch) &&
            (!peekCh || !this.isNumber(peekCh)) &&
            number.charAt(number.length - 1) == 'e') {
          this.throwError('Invalid exponent');
        } else {
          break;
        }
      }
      this.index++;
    }
    this.tokens.push({
      index: start,
      text: number,
      constant: true,
      value: Number(number)
    });
  },

  readIdent: function() {
    var start = this.index;
    while (this.index < this.text.length) {
      var ch = this.text.charAt(this.index);
      if (!(this.isIdent(ch) || this.isNumber(ch))) {
        break;
      }
      this.index++;
    }
    this.tokens.push({
      index: start,
      text: this.text.slice(start, this.index),
      identifier: true
    });
  },

  readString: function(quote) {
    var start = this.index;
    this.index++;
    var string = '';
    var rawString = quote;
    var escape = false;
    while (this.index < this.text.length) {
      var ch = this.text.charAt(this.index);
      rawString += ch;
      if (escape) {
        if (ch === 'u') {
          var hex = this.text.substring(this.index + 1, this.index + 5);
          if (!hex.match(/[\da-f]{4}/i)) {
            this.throwError('Invalid unicode escape [\\u' + hex + ']');
          }
          this.index += 4;
          string += String.fromCharCode(parseInt(hex, 16));
        } else {
          var rep = ESCAPE[ch];
          string = string + (rep || ch);
        }
        escape = false;
      } else if (ch === '\\') {
        escape = true;
      } else if (ch === quote) {
        this.index++;
        this.tokens.push({
          index: start,
          text: rawString,
          constant: true,
          value: string
        });
        return;
      } else {
        string += ch;
      }
      this.index++;
    }
    this.throwError('Unterminated quote', start);
  }
};

var AST = function(lexer, options) {
  this.lexer = lexer;
  this.options = options;
};

AST.Program = 'Program';
AST.ExpressionStatement = 'ExpressionStatement';
AST.AssignmentExpression = 'AssignmentExpression';
AST.ConditionalExpression = 'ConditionalExpression';
AST.LogicalExpression = 'LogicalExpression';
AST.BinaryExpression = 'BinaryExpression';
AST.UnaryExpression = 'UnaryExpression';
AST.CallExpression = 'CallExpression';
AST.MemberExpression = 'MemberExpression';
AST.Identifier = 'Identifier';
AST.Literal = 'Literal';
AST.ArrayExpression = 'ArrayExpression';
AST.Property = 'Property';
AST.ObjectExpression = 'ObjectExpression';
AST.ThisExpression = 'ThisExpression';

// Internal use only
AST.NGValueParameter = 'NGValueParameter';

AST.prototype = {
  ast: function(text) {
    this.text = text;
    this.tokens = this.lexer.lex(text);

    var value = this.program();

    if (this.tokens.length !== 0) {
      this.throwError('is an unexpected token', this.tokens[0]);
    }

    return value;
  },

  program: function() {
    var body = [];
    while (true) {
      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
        body.push(this.expressionStatement());
      if (!this.expect(';')) {
        return { type: AST.Program, body: body};
      }
    }
  },

  expressionStatement: function() {
    return { type: AST.ExpressionStatement, expression: this.filterChain() };
  },

  filterChain: function() {
    var left = this.expression();
    var token;
    while ((token = this.expect('|'))) {
      left = this.filter(left);
    }
    return left;
  },

  expression: function() {
    return this.assignment();
  },

  assignment: function() {
    var result = this.ternary();
    if (this.expect('=')) {
      result = { type: AST.AssignmentExpression, left: result, right: this.assignment(), operator: '='};
    }
    return result;
  },

  ternary: function() {
    var test = this.logicalOR();
    var alternate;
    var consequent;
    if (this.expect('?')) {
      alternate = this.expression();
      if (this.consume(':')) {
        consequent = this.expression();
        return { type: AST.ConditionalExpression, test: test, alternate: alternate, consequent: consequent};
      }
    }
    return test;
  },

  logicalOR: function() {
    var left = this.logicalAND();
    while (this.expect('||')) {
      left = { type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND() };
    }
    return left;
  },

  logicalAND: function() {
    var left = this.equality();
    while (this.expect('&&')) {
      left = { type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality()};
    }
    return left;
  },

  equality: function() {
    var left = this.relational();
    var token;
    while ((token = this.expect('==','!=','===','!=='))) {
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.relational() };
    }
    return left;
  },

  relational: function() {
    var left = this.additive();
    var token;
    while ((token = this.expect('<', '>', '<=', '>='))) {
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.additive() };
    }
    return left;
  },

  additive: function() {
    var left = this.multiplicative();
    var token;
    while ((token = this.expect('+','-'))) {
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.multiplicative() };
    }
    return left;
  },

  multiplicative: function() {
    var left = this.unary();
    var token;
    while ((token = this.expect('*','/','%'))) {
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary() };
    }
    return left;
  },

  unary: function() {
    var token;
    if ((token = this.expect('+', '-', '!'))) {
      return { type: AST.UnaryExpression, operator: token.text, prefix: true, argument: this.unary() };
    } else {
      return this.primary();
    }
  },

  primary: function() {
    var primary;
    if (this.expect('(')) {
      primary = this.filterChain();
      this.consume(')');
    } else if (this.expect('[')) {
      primary = this.arrayDeclaration();
    } else if (this.expect('{')) {
      primary = this.object();
    } else if (this.constants.hasOwnProperty(this.peek().text)) {
      primary = copy(this.constants[this.consume().text]);
    } else if (this.peek().identifier) {
      primary = this.identifier();
    } else if (this.peek().constant) {
      primary = this.constant();
    } else {
      this.throwError('not a primary expression', this.peek());
    }

    var next;
    while ((next = this.expect('(', '[', '.'))) {
      if (next.text === '(') {
        primary = {type: AST.CallExpression, callee: primary, arguments: this.parseArguments() };
        this.consume(')');
      } else if (next.text === '[') {
        primary = { type: AST.MemberExpression, object: primary, property: this.expression(), computed: true };
        this.consume(']');
      } else if (next.text === '.') {
        primary = { type: AST.MemberExpression, object: primary, property: this.identifier(), computed: false };
      } else {
        this.throwError('IMPOSSIBLE');
      }
    }
    return primary;
  },

  filter: function(baseExpression) {
    var args = [baseExpression];
    var result = {type: AST.CallExpression, callee: this.identifier(), arguments: args, filter: true};

    while (this.expect(':')) {
      args.push(this.expression());
    }

    return result;
  },

  parseArguments: function() {
    var args = [];
    if (this.peekToken().text !== ')') {
      do {
        args.push(this.expression());
      } while (this.expect(','));
    }
    return args;
  },

  identifier: function() {
    var token = this.consume();
    if (!token.identifier) {
      this.throwError('is not a valid identifier', token);
    }
    return { type: AST.Identifier, name: token.text };
  },

  constant: function() {
    // TODO check that it is a constant
    return { type: AST.Literal, value: this.consume().value };
  },

  arrayDeclaration: function() {
    var elements = [];
    if (this.peekToken().text !== ']') {
      do {
        if (this.peek(']')) {
          // Support trailing commas per ES5.1.
          break;
        }
        elements.push(this.expression());
      } while (this.expect(','));
    }
    this.consume(']');

    return { type: AST.ArrayExpression, elements: elements };
  },

  object: function() {
    var properties = [], property;
    if (this.peekToken().text !== '}') {
      do {
        if (this.peek('}')) {
          // Support trailing commas per ES5.1.
          break;
        }
        property = {type: AST.Property, kind: 'init'};
        if (this.peek().constant) {
          property.key = this.constant();
        } else if (this.peek().identifier) {
          property.key = this.identifier();
        } else {
          this.throwError("invalid key", this.peek());
        }
        this.consume(':');
        property.value = this.expression();
        properties.push(property);
      } while (this.expect(','));
    }
    this.consume('}');

    return {type: AST.ObjectExpression, properties: properties };
  },

  throwError: function(msg, token) {
    throw $parseMinErr('syntax',
        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',
          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));
  },

  consume: function(e1) {
    if (this.tokens.length === 0) {
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
    }

    var token = this.expect(e1);
    if (!token) {
      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
    }
    return token;
  },

  peekToken: function() {
    if (this.tokens.length === 0) {
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
    }
    return this.tokens[0];
  },

  peek: function(e1, e2, e3, e4) {
    return this.peekAhead(0, e1, e2, e3, e4);
  },

  peekAhead: function(i, e1, e2, e3, e4) {
    if (this.tokens.length > i) {
      var token = this.tokens[i];
      var t = token.text;
      if (t === e1 || t === e2 || t === e3 || t === e4 ||
          (!e1 && !e2 && !e3 && !e4)) {
        return token;
      }
    }
    return false;
  },

  expect: function(e1, e2, e3, e4) {
    var token = this.peek(e1, e2, e3, e4);
    if (token) {
      this.tokens.shift();
      return token;
    }
    return false;
  },


  /* `undefined` is not a constant, it is an identifier,
   * but using it as an identifier is not supported
   */
  constants: {
    'true': { type: AST.Literal, value: true },
    'false': { type: AST.Literal, value: false },
    'null': { type: AST.Literal, value: null },
    'undefined': {type: AST.Literal, value: undefined },
    'this': {type: AST.ThisExpression }
  }
};

function ifDefined(v, d) {
  return typeof v !== 'undefined' ? v : d;
}

function plusFn(l, r) {
  if (typeof l === 'undefined') return r;
  if (typeof r === 'undefined') return l;
  return l + r;
}

function isStateless($filter, filterName) {
  var fn = $filter(filterName);
  return !fn.$stateful;
}

function findConstantAndWatchExpressions(ast, $filter) {
  var allConstants;
  var argsToWatch;
  switch (ast.type) {
  case AST.Program:
    allConstants = true;
    forEach(ast.body, function(expr) {
      findConstantAndWatchExpressions(expr.expression, $filter);
      allConstants = allConstants && expr.expression.constant;
    });
    ast.constant = allConstants;
    break;
  case AST.Literal:
    ast.constant = true;
    ast.toWatch = [];
    break;
  case AST.UnaryExpression:
    findConstantAndWatchExpressions(ast.argument, $filter);
    ast.constant = ast.argument.constant;
    ast.toWatch = ast.argument.toWatch;
    break;
  case AST.BinaryExpression:
    findConstantAndWatchExpressions(ast.left, $filter);
    findConstantAndWatchExpressions(ast.right, $filter);
    ast.constant = ast.left.constant && ast.right.constant;
    ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);
    break;
  case AST.LogicalExpression:
    findConstantAndWatchExpressions(ast.left, $filter);
    findConstantAndWatchExpressions(ast.right, $filter);
    ast.constant = ast.left.constant && ast.right.constant;
    ast.toWatch = ast.constant ? [] : [ast];
    break;
  case AST.ConditionalExpression:
    findConstantAndWatchExpressions(ast.test, $filter);
    findConstantAndWatchExpressions(ast.alternate, $filter);
    findConstantAndWatchExpressions(ast.consequent, $filter);
    ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;
    ast.toWatch = ast.constant ? [] : [ast];
    break;
  case AST.Identifier:
    ast.constant = false;
    ast.toWatch = [ast];
    break;
  case AST.MemberExpression:
    findConstantAndWatchExpressions(ast.object, $filter);
    if (ast.computed) {
      findConstantAndWatchExpressions(ast.property, $filter);
    }
    ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);
    ast.toWatch = [ast];
    break;
  case AST.CallExpression:
    allConstants = ast.filter ? isStateless($filter, ast.callee.name) : false;
    argsToWatch = [];
    forEach(ast.arguments, function(expr) {
      findConstantAndWatchExpressions(expr, $filter);
      allConstants = allConstants && expr.constant;
      if (!expr.constant) {
        argsToWatch.push.apply(argsToWatch, expr.toWatch);
      }
    });
    ast.constant = allConstants;
    ast.toWatch = ast.filter && isStateless($filter, ast.callee.name) ? argsToWatch : [ast];
    break;
  case AST.AssignmentExpression:
    findConstantAndWatchExpressions(ast.left, $filter);
    findConstantAndWatchExpressions(ast.right, $filter);
    ast.constant = ast.left.constant && ast.right.constant;
    ast.toWatch = [ast];
    break;
  case AST.ArrayExpression:
    allConstants = true;
    argsToWatch = [];
    forEach(ast.elements, function(expr) {
      findConstantAndWatchExpressions(expr, $filter);
      allConstants = allConstants && expr.constant;
      if (!expr.constant) {
        argsToWatch.push.apply(argsToWatch, expr.toWatch);
      }
    });
    ast.constant = allConstants;
    ast.toWatch = argsToWatch;
    break;
  case AST.ObjectExpression:
    allConstants = true;
    argsToWatch = [];
    forEach(ast.properties, function(property) {
      findConstantAndWatchExpressions(property.value, $filter);
      allConstants = allConstants && property.value.constant;
      if (!property.value.constant) {
        argsToWatch.push.apply(argsToWatch, property.value.toWatch);
      }
    });
    ast.constant = allConstants;
    ast.toWatch = argsToWatch;
    break;
  case AST.ThisExpression:
    ast.constant = false;
    ast.toWatch = [];
    break;
  }
}

function getInputs(body) {
  if (body.length != 1) return;
  var lastExpression = body[0].expression;
  var candidate = lastExpression.toWatch;
  if (candidate.length !== 1) return candidate;
  return candidate[0] !== lastExpression ? candidate : undefined;
}

function isAssignable(ast) {
  return ast.type === AST.Identifier || ast.type === AST.MemberExpression;
}

function assignableAST(ast) {
  if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {
    return {type: AST.AssignmentExpression, left: ast.body[0].expression, right: {type: AST.NGValueParameter}, operator: '='};
  }
}

function isLiteral(ast) {
  return ast.body.length === 0 ||
      ast.body.length === 1 && (
      ast.body[0].expression.type === AST.Literal ||
      ast.body[0].expression.type === AST.ArrayExpression ||
      ast.body[0].expression.type === AST.ObjectExpression);
}

function isConstant(ast) {
  return ast.constant;
}

function ASTCompiler(astBuilder, $filter) {
  this.astBuilder = astBuilder;
  this.$filter = $filter;
}

ASTCompiler.prototype = {
  compile: function(expression, expensiveChecks) {
    var self = this;
    var ast = this.astBuilder.ast(expression);
    this.state = {
      nextId: 0,
      filters: {},
      expensiveChecks: expensiveChecks,
      fn: {vars: [], body: [], own: {}},
      assign: {vars: [], body: [], own: {}},
      inputs: []
    };
    findConstantAndWatchExpressions(ast, self.$filter);
    var extra = '';
    var assignable;
    this.stage = 'assign';
    if ((assignable = assignableAST(ast))) {
      this.state.computing = 'assign';
      var result = this.nextId();
      this.recurse(assignable, result);
      extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');
    }
    var toWatch = getInputs(ast.body);
    self.stage = 'inputs';
    forEach(toWatch, function(watch, key) {
      var fnKey = 'fn' + key;
      self.state[fnKey] = {vars: [], body: [], own: {}};
      self.state.computing = fnKey;
      var intoId = self.nextId();
      self.recurse(watch, intoId);
      self.return(intoId);
      self.state.inputs.push(fnKey);
      watch.watchId = key;
    });
    this.state.computing = 'fn';
    this.stage = 'main';
    this.recurse(ast);
    var fnString =
      // The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
      // This is a workaround for this until we do a better job at only removing the prefix only when we should.
      '"' + this.USE + ' ' + this.STRICT + '";\n' +
      this.filterPrefix() +
      'var fn=' + this.generateFunction('fn', 's,l,a,i') +
      extra +
      this.watchFns() +
      'return fn;';

    /* jshint -W054 */
    var fn = (new Function('$filter',
        'ensureSafeMemberName',
        'ensureSafeObject',
        'ensureSafeFunction',
        'ifDefined',
        'plus',
        'text',
        fnString))(
          this.$filter,
          ensureSafeMemberName,
          ensureSafeObject,
          ensureSafeFunction,
          ifDefined,
          plusFn,
          expression);
    /* jshint +W054 */
    this.state = this.stage = undefined;
    fn.literal = isLiteral(ast);
    fn.constant = isConstant(ast);
    return fn;
  },

  USE: 'use',

  STRICT: 'strict',

  watchFns: function() {
    var result = [];
    var fns = this.state.inputs;
    var self = this;
    forEach(fns, function(name) {
      result.push('var ' + name + '=' + self.generateFunction(name, 's'));
    });
    if (fns.length) {
      result.push('fn.inputs=[' + fns.join(',') + '];');
    }
    return result.join('');
  },

  generateFunction: function(name, params) {
    return 'function(' + params + '){' +
        this.varsPrefix(name) +
        this.body(name) +
        '};';
  },

  filterPrefix: function() {
    var parts = [];
    var self = this;
    forEach(this.state.filters, function(id, filter) {
      parts.push(id + '=$filter(' + self.escape(filter) + ')');
    });
    if (parts.length) return 'var ' + parts.join(',') + ';';
    return '';
  },

  varsPrefix: function(section) {
    return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';
  },

  body: function(section) {
    return this.state[section].body.join('');
  },

  recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
    var left, right, self = this, args, expression;
    recursionFn = recursionFn || noop;
    if (!skipWatchIdCheck && isDefined(ast.watchId)) {
      intoId = intoId || this.nextId();
      this.if('i',
        this.lazyAssign(intoId, this.computedMember('i', ast.watchId)),
        this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true)
      );
      return;
    }
    switch (ast.type) {
    case AST.Program:
      forEach(ast.body, function(expression, pos) {
        self.recurse(expression.expression, undefined, undefined, function(expr) { right = expr; });
        if (pos !== ast.body.length - 1) {
          self.current().body.push(right, ';');
        } else {
          self.return(right);
        }
      });
      break;
    case AST.Literal:
      expression = this.escape(ast.value);
      this.assign(intoId, expression);
      recursionFn(expression);
      break;
    case AST.UnaryExpression:
      this.recurse(ast.argument, undefined, undefined, function(expr) { right = expr; });
      expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';
      this.assign(intoId, expression);
      recursionFn(expression);
      break;
    case AST.BinaryExpression:
      this.recurse(ast.left, undefined, undefined, function(expr) { left = expr; });
      this.recurse(ast.right, undefined, undefined, function(expr) { right = expr; });
      if (ast.operator === '+') {
        expression = this.plus(left, right);
      } else if (ast.operator === '-') {
        expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);
      } else {
        expression = '(' + left + ')' + ast.operator + '(' + right + ')';
      }
      this.assign(intoId, expression);
      recursionFn(expression);
      break;
    case AST.LogicalExpression:
      intoId = intoId || this.nextId();
      self.recurse(ast.left, intoId);
      self.if(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));
      recursionFn(intoId);
      break;
    case AST.ConditionalExpression:
      intoId = intoId || this.nextId();
      self.recurse(ast.test, intoId);
      self.if(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));
      recursionFn(intoId);
      break;
    case AST.Identifier:
      intoId = intoId || this.nextId();
      if (nameId) {
        nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');
        nameId.computed = false;
        nameId.name = ast.name;
      }
      ensureSafeMemberName(ast.name);
      self.if(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)),
        function() {
          self.if(self.stage === 'inputs' || 's', function() {
            if (create && create !== 1) {
              self.if(
                self.not(self.nonComputedMember('s', ast.name)),
                self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));
            }
            self.assign(intoId, self.nonComputedMember('s', ast.name));
          });
        }, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name))
        );
      if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.name)) {
        self.addEnsureSafeObject(intoId);
      }
      recursionFn(intoId);
      break;
    case AST.MemberExpression:
      left = nameId && (nameId.context = this.nextId()) || this.nextId();
      intoId = intoId || this.nextId();
      self.recurse(ast.object, left, undefined, function() {
        self.if(self.notNull(left), function() {
          if (ast.computed) {
            right = self.nextId();
            self.recurse(ast.property, right);
            self.addEnsureSafeMemberName(right);
            if (create && create !== 1) {
              self.if(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));
            }
            expression = self.ensureSafeObject(self.computedMember(left, right));
            self.assign(intoId, expression);
            if (nameId) {
              nameId.computed = true;
              nameId.name = right;
            }
          } else {
            ensureSafeMemberName(ast.property.name);
            if (create && create !== 1) {
              self.if(self.not(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));
            }
            expression = self.nonComputedMember(left, ast.property.name);
            if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.property.name)) {
              expression = self.ensureSafeObject(expression);
            }
            self.assign(intoId, expression);
            if (nameId) {
              nameId.computed = false;
              nameId.name = ast.property.name;
            }
          }
          recursionFn(intoId);
        });
      }, !!create);
      break;
    case AST.CallExpression:
      intoId = intoId || this.nextId();
      if (ast.filter) {
        right = self.filter(ast.callee.name);
        args = [];
        forEach(ast.arguments, function(expr) {
          var argument = self.nextId();
          self.recurse(expr, argument);
          args.push(argument);
        });
        expression = right + '(' + args.join(',') + ')';
        self.assign(intoId, expression);
        recursionFn(intoId);
      } else {
        right = self.nextId();
        left = {};
        args = [];
        self.recurse(ast.callee, right, left, function() {
          self.if(self.notNull(right), function() {
            self.addEnsureSafeFunction(right);
            forEach(ast.arguments, function(expr) {
              self.recurse(expr, self.nextId(), undefined, function(argument) {
                args.push(self.ensureSafeObject(argument));
              });
            });
            if (left.name) {
              if (!self.state.expensiveChecks) {
                self.addEnsureSafeObject(left.context);
              }
              expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';
            } else {
              expression = right + '(' + args.join(',') + ')';
            }
            expression = self.ensureSafeObject(expression);
            self.assign(intoId, expression);
            recursionFn(intoId);
          });
        });
      }
      break;
    case AST.AssignmentExpression:
      right = this.nextId();
      left = {};
      if (!isAssignable(ast.left)) {
        throw $parseMinErr('lval', 'Trying to assing a value to a non l-value');
      }
      this.recurse(ast.left, undefined, left, function() {
        self.if(self.notNull(left.context), function() {
          self.recurse(ast.right, right);
          self.addEnsureSafeObject(self.member(left.context, left.name, left.computed));
          expression = self.member(left.context, left.name, left.computed) + ast.operator + right;
          self.assign(intoId, expression);
          recursionFn(intoId || expression);
        });
      }, 1);
      break;
    case AST.ArrayExpression:
      args = [];
      forEach(ast.elements, function(expr) {
        self.recurse(expr, self.nextId(), undefined, function(argument) {
          args.push(argument);
        });
      });
      expression = '[' + args.join(',') + ']';
      this.assign(intoId, expression);
      recursionFn(expression);
      break;
    case AST.ObjectExpression:
      args = [];
      forEach(ast.properties, function(property) {
        self.recurse(property.value, self.nextId(), undefined, function(expr) {
          args.push(self.escape(
              property.key.type === AST.Identifier ? property.key.name :
                ('' + property.key.value)) +
              ':' + expr);
        });
      });
      expression = '{' + args.join(',') + '}';
      this.assign(intoId, expression);
      recursionFn(expression);
      break;
    case AST.ThisExpression:
      this.assign(intoId, 's');
      recursionFn('s');
      break;
    case AST.NGValueParameter:
      this.assign(intoId, 'v');
      recursionFn('v');
      break;
    }
  },

  getHasOwnProperty: function(element, property) {
    var key = element + '.' + property;
    var own = this.current().own;
    if (!own.hasOwnProperty(key)) {
      own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');
    }
    return own[key];
  },

  assign: function(id, value) {
    if (!id) return;
    this.current().body.push(id, '=', value, ';');
    return id;
  },

  filter: function(filterName) {
    if (!this.state.filters.hasOwnProperty(filterName)) {
      this.state.filters[filterName] = this.nextId(true);
    }
    return this.state.filters[filterName];
  },

  ifDefined: function(id, defaultValue) {
    return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';
  },

  plus: function(left, right) {
    return 'plus(' + left + ',' + right + ')';
  },

  'return': function(id) {
    this.current().body.push('return ', id, ';');
  },

  'if': function(test, alternate, consequent) {
    if (test === true) {
      alternate();
    } else {
      var body = this.current().body;
      body.push('if(', test, '){');
      alternate();
      body.push('}');
      if (consequent) {
        body.push('else{');
        consequent();
        body.push('}');
      }
    }
  },

  not: function(expression) {
    return '!(' + expression + ')';
  },

  notNull: function(expression) {
    return expression + '!=null';
  },

  nonComputedMember: function(left, right) {
    return left + '.' + right;
  },

  computedMember: function(left, right) {
    return left + '[' + right + ']';
  },

  member: function(left, right, computed) {
    if (computed) return this.computedMember(left, right);
    return this.nonComputedMember(left, right);
  },

  addEnsureSafeObject: function(item) {
    this.current().body.push(this.ensureSafeObject(item), ';');
  },

  addEnsureSafeMemberName: function(item) {
    this.current().body.push(this.ensureSafeMemberName(item), ';');
  },

  addEnsureSafeFunction: function(item) {
    this.current().body.push(this.ensureSafeFunction(item), ';');
  },

  ensureSafeObject: function(item) {
    return 'ensureSafeObject(' + item + ',text)';
  },

  ensureSafeMemberName: function(item) {
    return 'ensureSafeMemberName(' + item + ',text)';
  },

  ensureSafeFunction: function(item) {
    return 'ensureSafeFunction(' + item + ',text)';
  },

  lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
    var self = this;
    return function() {
      self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);
    };
  },

  lazyAssign: function(id, value) {
    var self = this;
    return function() {
      self.assign(id, value);
    };
  },

  stringEscapeRegex: /[^ a-zA-Z0-9]/g,

  stringEscapeFn: function(c) {
    return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);
  },

  escape: function(value) {
    if (isString(value)) return "'" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";
    if (isNumber(value)) return value.toString();
    if (value === true) return 'true';
    if (value === false) return 'false';
    if (value === null) return 'null';
    if (typeof value === 'undefined') return 'undefined';

    throw $parseMinErr('esc', 'IMPOSSIBLE');
  },

  nextId: function(skip, init) {
    var id = 'v' + (this.state.nextId++);
    if (!skip) {
      this.current().vars.push(id + (init ? '=' + init : ''));
    }
    return id;
  },

  current: function() {
    return this.state[this.state.computing];
  }
};


function ASTInterpreter(astBuilder, $filter) {
  this.astBuilder = astBuilder;
  this.$filter = $filter;
}

ASTInterpreter.prototype = {
  compile: function(expression, expensiveChecks) {
    var self = this;
    var ast = this.astBuilder.ast(expression);
    this.expression = expression;
    this.expensiveChecks = expensiveChecks;
    findConstantAndWatchExpressions(ast, self.$filter);
    var assignable;
    var assign;
    if ((assignable = assignableAST(ast))) {
      assign = this.recurse(assignable);
    }
    var toWatch = getInputs(ast.body);
    var inputs;
    if (toWatch) {
      inputs = [];
      forEach(toWatch, function(watch, key) {
        var input = self.recurse(watch);
        watch.input = input;
        inputs.push(input);
        watch.watchId = key;
      });
    }
    var expressions = [];
    forEach(ast.body, function(expression) {
      expressions.push(self.recurse(expression.expression));
    });
    var fn = ast.body.length === 0 ? function() {} :
             ast.body.length === 1 ? expressions[0] :
             function(scope, locals) {
               var lastValue;
               forEach(expressions, function(exp) {
                 lastValue = exp(scope, locals);
               });
               return lastValue;
             };
    if (assign) {
      fn.assign = function(scope, value, locals) {
        return assign(scope, locals, value);
      };
    }
    if (inputs) {
      fn.inputs = inputs;
    }
    fn.literal = isLiteral(ast);
    fn.constant = isConstant(ast);
    return fn;
  },

  recurse: function(ast, context, create) {
    var left, right, self = this, args, expression;
    if (ast.input) {
      return this.inputs(ast.input, ast.watchId);
    }
    switch (ast.type) {
    case AST.Literal:
      return this.value(ast.value, context);
    case AST.UnaryExpression:
      right = this.recurse(ast.argument);
      return this['unary' + ast.operator](right, context);
    case AST.BinaryExpression:
      left = this.recurse(ast.left);
      right = this.recurse(ast.right);
      return this['binary' + ast.operator](left, right, context);
    case AST.LogicalExpression:
      left = this.recurse(ast.left);
      right = this.recurse(ast.right);
      return this['binary' + ast.operator](left, right, context);
    case AST.ConditionalExpression:
      return this['ternary?:'](
        this.recurse(ast.test),
        this.recurse(ast.alternate),
        this.recurse(ast.consequent),
        context
      );
    case AST.Identifier:
      ensureSafeMemberName(ast.name, self.expression);
      return self.identifier(ast.name,
                             self.expensiveChecks || isPossiblyDangerousMemberName(ast.name),
                             context, create, self.expression);
    case AST.MemberExpression:
      left = this.recurse(ast.object, false, !!create);
      if (!ast.computed) {
        ensureSafeMemberName(ast.property.name, self.expression);
        right = ast.property.name;
      }
      if (ast.computed) right = this.recurse(ast.property);
      return ast.computed ?
        this.computedMember(left, right, context, create, self.expression) :
        this.nonComputedMember(left, right, self.expensiveChecks, context, create, self.expression);
    case AST.CallExpression:
      args = [];
      forEach(ast.arguments, function(expr) {
        args.push(self.recurse(expr));
      });
      if (ast.filter) right = this.$filter(ast.callee.name);
      if (!ast.filter) right = this.recurse(ast.callee, true);
      return ast.filter ?
        function(scope, locals, assign, inputs) {
          var values = [];
          for (var i = 0; i < args.length; ++i) {
            values.push(args[i](scope, locals, assign, inputs));
          }
          var value = right.apply(undefined, values, inputs);
          return context ? {context: undefined, name: undefined, value: value} : value;
        } :
        function(scope, locals, assign, inputs) {
          var rhs = right(scope, locals, assign, inputs);
          var value;
          if (rhs.value != null) {
            ensureSafeObject(rhs.context, self.expression);
            ensureSafeFunction(rhs.value, self.expression);
            var values = [];
            for (var i = 0; i < args.length; ++i) {
              values.push(ensureSafeObject(args[i](scope, locals, assign, inputs), self.expression));
            }
            value = ensureSafeObject(rhs.value.apply(rhs.context, values), self.expression);
          }
          return context ? {value: value} : value;
        };
    case AST.AssignmentExpression:
      left = this.recurse(ast.left, true, 1);
      right = this.recurse(ast.right);
      return function(scope, locals, assign, inputs) {
        var lhs = left(scope, locals, assign, inputs);
        var rhs = right(scope, locals, assign, inputs);
        ensureSafeObject(lhs.value, self.expression);
        lhs.context[lhs.name] = rhs;
        return context ? {value: rhs} : rhs;
      };
    case AST.ArrayExpression:
      args = [];
      forEach(ast.elements, function(expr) {
        args.push(self.recurse(expr));
      });
      return function(scope, locals, assign, inputs) {
        var value = [];
        for (var i = 0; i < args.length; ++i) {
          value.push(args[i](scope, locals, assign, inputs));
        }
        return context ? {value: value} : value;
      };
    case AST.ObjectExpression:
      args = [];
      forEach(ast.properties, function(property) {
        args.push({key: property.key.type === AST.Identifier ?
                        property.key.name :
                        ('' + property.key.value),
                   value: self.recurse(property.value)
        });
      });
      return function(scope, locals, assign, inputs) {
        var value = {};
        for (var i = 0; i < args.length; ++i) {
          value[args[i].key] = args[i].value(scope, locals, assign, inputs);
        }
        return context ? {value: value} : value;
      };
    case AST.ThisExpression:
      return function(scope) {
        return context ? {value: scope} : scope;
      };
    case AST.NGValueParameter:
      return function(scope, locals, assign, inputs) {
        return context ? {value: assign} : assign;
      };
    }
  },

  'unary+': function(argument, context) {
    return function(scope, locals, assign, inputs) {
      var arg = argument(scope, locals, assign, inputs);
      if (isDefined(arg)) {
        arg = +arg;
      } else {
        arg = 0;
      }
      return context ? {value: arg} : arg;
    };
  },
  'unary-': function(argument, context) {
    return function(scope, locals, assign, inputs) {
      var arg = argument(scope, locals, assign, inputs);
      if (isDefined(arg)) {
        arg = -arg;
      } else {
        arg = 0;
      }
      return context ? {value: arg} : arg;
    };
  },
  'unary!': function(argument, context) {
    return function(scope, locals, assign, inputs) {
      var arg = !argument(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary+': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var lhs = left(scope, locals, assign, inputs);
      var rhs = right(scope, locals, assign, inputs);
      var arg = plusFn(lhs, rhs);
      return context ? {value: arg} : arg;
    };
  },
  'binary-': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var lhs = left(scope, locals, assign, inputs);
      var rhs = right(scope, locals, assign, inputs);
      var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);
      return context ? {value: arg} : arg;
    };
  },
  'binary*': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary/': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary%': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary===': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary!==': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary==': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary!=': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary<': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary>': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary<=': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary>=': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary&&': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary||': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'ternary?:': function(test, alternate, consequent, context) {
    return function(scope, locals, assign, inputs) {
      var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  value: function(value, context) {
    return function() { return context ? {context: undefined, name: undefined, value: value} : value; };
  },
  identifier: function(name, expensiveChecks, context, create, expression) {
    return function(scope, locals, assign, inputs) {
      var base = locals && (name in locals) ? locals : scope;
      if (create && create !== 1 && base && !(base[name])) {
        base[name] = {};
      }
      var value = base ? base[name] : undefined;
      if (expensiveChecks) {
        ensureSafeObject(value, expression);
      }
      if (context) {
        return {context: base, name: name, value: value};
      } else {
        return value;
      }
    };
  },
  computedMember: function(left, right, context, create, expression) {
    return function(scope, locals, assign, inputs) {
      var lhs = left(scope, locals, assign, inputs);
      var rhs;
      var value;
      if (lhs != null) {
        rhs = right(scope, locals, assign, inputs);
        ensureSafeMemberName(rhs, expression);
        if (create && create !== 1 && lhs && !(lhs[rhs])) {
          lhs[rhs] = {};
        }
        value = lhs[rhs];
        ensureSafeObject(value, expression);
      }
      if (context) {
        return {context: lhs, name: rhs, value: value};
      } else {
        return value;
      }
    };
  },
  nonComputedMember: function(left, right, expensiveChecks, context, create, expression) {
    return function(scope, locals, assign, inputs) {
      var lhs = left(scope, locals, assign, inputs);
      if (create && create !== 1 && lhs && !(lhs[right])) {
        lhs[right] = {};
      }
      var value = lhs != null ? lhs[right] : undefined;
      if (expensiveChecks || isPossiblyDangerousMemberName(right)) {
        ensureSafeObject(value, expression);
      }
      if (context) {
        return {context: lhs, name: right, value: value};
      } else {
        return value;
      }
    };
  },
  inputs: function(input, watchId) {
    return function(scope, value, locals, inputs) {
      if (inputs) return inputs[watchId];
      return input(scope, value, locals);
    };
  }
};

/**
 * @constructor
 */
var Parser = function(lexer, $filter, options) {
  this.lexer = lexer;
  this.$filter = $filter;
  this.options = options;
  this.ast = new AST(this.lexer);
  this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) :
                                   new ASTCompiler(this.ast, $filter);
};

Parser.prototype = {
  constructor: Parser,

  parse: function(text) {
    return this.astCompiler.compile(text, this.options.expensiveChecks);
  }
};

//////////////////////////////////////////////////
// Parser helper functions
//////////////////////////////////////////////////

function setter(obj, path, setValue, fullExp) {
  ensureSafeObject(obj, fullExp);

  var element = path.split('.'), key;
  for (var i = 0; element.length > 1; i++) {
    key = ensureSafeMemberName(element.shift(), fullExp);
    var propertyObj = ensureSafeObject(obj[key], fullExp);
    if (!propertyObj) {
      propertyObj = {};
      obj[key] = propertyObj;
    }
    obj = propertyObj;
  }
  key = ensureSafeMemberName(element.shift(), fullExp);
  ensureSafeObject(obj[key], fullExp);
  obj[key] = setValue;
  return setValue;
}

var getterFnCacheDefault = createMap();
var getterFnCacheExpensive = createMap();

function isPossiblyDangerousMemberName(name) {
  return name == 'constructor';
}

var objectValueOf = Object.prototype.valueOf;

function getValueOf(value) {
  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
}

///////////////////////////////////

/**
 * @ngdoc service
 * @name $parse
 * @kind function
 *
 * @description
 *
 * Converts Angular {@link guide/expression expression} into a function.
 *
 * ```js
 *   var getter = $parse('user.name');
 *   var setter = getter.assign;
 *   var context = {user:{name:'angular'}};
 *   var locals = {user:{name:'local'}};
 *
 *   expect(getter(context)).toEqual('angular');
 *   setter(context, 'newValue');
 *   expect(context.user.name).toEqual('newValue');
 *   expect(getter(context, locals)).toEqual('local');
 * ```
 *
 *
 * @param {string} expression String expression to compile.
 * @returns {function(context, locals)} a function which represents the compiled expression:
 *
 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
 *      are evaluated against (typically a scope object).
 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
 *      `context`.
 *
 *    The returned function also has the following properties:
 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
 *        literal.
 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
 *        constant literals.
 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
 *        set to a function to change its value on the given context.
 *
 */


/**
 * @ngdoc provider
 * @name $parseProvider
 *
 * @description
 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
 *  service.
 */
function $ParseProvider() {
  var cacheDefault = createMap();
  var cacheExpensive = createMap();

  this.$get = ['$filter', '$sniffer', function($filter, $sniffer) {
    var $parseOptions = {
          csp: $sniffer.csp,
          expensiveChecks: false
        },
        $parseOptionsExpensive = {
          csp: $sniffer.csp,
          expensiveChecks: true
        };

    return function $parse(exp, interceptorFn, expensiveChecks) {
      var parsedExpression, oneTime, cacheKey;

      switch (typeof exp) {
        case 'string':
          exp = exp.trim();
          cacheKey = exp;

          var cache = (expensiveChecks ? cacheExpensive : cacheDefault);
          parsedExpression = cache[cacheKey];

          if (!parsedExpression) {
            if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {
              oneTime = true;
              exp = exp.substring(2);
            }
            var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;
            var lexer = new Lexer(parseOptions);
            var parser = new Parser(lexer, $filter, parseOptions);
            parsedExpression = parser.parse(exp);
            if (parsedExpression.constant) {
              parsedExpression.$$watchDelegate = constantWatchDelegate;
            } else if (oneTime) {
              parsedExpression.$$watchDelegate = parsedExpression.literal ?
                  oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;
            } else if (parsedExpression.inputs) {
              parsedExpression.$$watchDelegate = inputsWatchDelegate;
            }
            cache[cacheKey] = parsedExpression;
          }
          return addInterceptor(parsedExpression, interceptorFn);

        case 'function':
          return addInterceptor(exp, interceptorFn);

        default:
          return noop;
      }
    };

    function expressionInputDirtyCheck(newValue, oldValueOfValue) {

      if (newValue == null || oldValueOfValue == null) { // null/undefined
        return newValue === oldValueOfValue;
      }

      if (typeof newValue === 'object') {

        // attempt to convert the value to a primitive type
        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
        //             be cheaply dirty-checked
        newValue = getValueOf(newValue);

        if (typeof newValue === 'object') {
          // objects/arrays are not supported - deep-watching them would be too expensive
          return false;
        }

        // fall-through to the primitive equality check
      }

      //Primitive or NaN
      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);
    }

    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
      var inputExpressions = parsedExpression.inputs;
      var lastResult;

      if (inputExpressions.length === 1) {
        var oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails
        inputExpressions = inputExpressions[0];
        return scope.$watch(function expressionInputWatch(scope) {
          var newInputValue = inputExpressions(scope);
          if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf)) {
            lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);
            oldInputValueOf = newInputValue && getValueOf(newInputValue);
          }
          return lastResult;
        }, listener, objectEquality, prettyPrintExpression);
      }

      var oldInputValueOfValues = [];
      var oldInputValues = [];
      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails
        oldInputValues[i] = null;
      }

      return scope.$watch(function expressionInputsWatch(scope) {
        var changed = false;

        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
          var newInputValue = inputExpressions[i](scope);
          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {
            oldInputValues[i] = newInputValue;
            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
          }
        }

        if (changed) {
          lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);
        }

        return lastResult;
      }, listener, objectEquality, prettyPrintExpression);
    }

    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {
      var unwatch, lastValue;
      return unwatch = scope.$watch(function oneTimeWatch(scope) {
        return parsedExpression(scope);
      }, function oneTimeListener(value, old, scope) {
        lastValue = value;
        if (isFunction(listener)) {
          listener.apply(this, arguments);
        }
        if (isDefined(value)) {
          scope.$$postDigest(function() {
            if (isDefined(lastValue)) {
              unwatch();
            }
          });
        }
      }, objectEquality);
    }

    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {
      var unwatch, lastValue;
      return unwatch = scope.$watch(function oneTimeWatch(scope) {
        return parsedExpression(scope);
      }, function oneTimeListener(value, old, scope) {
        lastValue = value;
        if (isFunction(listener)) {
          listener.call(this, value, old, scope);
        }
        if (isAllDefined(value)) {
          scope.$$postDigest(function() {
            if (isAllDefined(lastValue)) unwatch();
          });
        }
      }, objectEquality);

      function isAllDefined(value) {
        var allDefined = true;
        forEach(value, function(val) {
          if (!isDefined(val)) allDefined = false;
        });
        return allDefined;
      }
    }

    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
      var unwatch;
      return unwatch = scope.$watch(function constantWatch(scope) {
        return parsedExpression(scope);
      }, function constantListener(value, old, scope) {
        if (isFunction(listener)) {
          listener.apply(this, arguments);
        }
        unwatch();
      }, objectEquality);
    }

    function addInterceptor(parsedExpression, interceptorFn) {
      if (!interceptorFn) return parsedExpression;
      var watchDelegate = parsedExpression.$$watchDelegate;

      var regularWatch =
          watchDelegate !== oneTimeLiteralWatchDelegate &&
          watchDelegate !== oneTimeWatchDelegate;

      var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {
        var value = parsedExpression(scope, locals, assign, inputs);
        return interceptorFn(value, scope, locals);
      } : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {
        var value = parsedExpression(scope, locals, assign, inputs);
        var result = interceptorFn(value, scope, locals);
        // we only return the interceptor's result if the
        // initial value is defined (for bind-once)
        return isDefined(value) ? result : value;
      };

      // Propagate $$watchDelegates other then inputsWatchDelegate
      if (parsedExpression.$$watchDelegate &&
          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {
        fn.$$watchDelegate = parsedExpression.$$watchDelegate;
      } else if (!interceptorFn.$stateful) {
        // If there is an interceptor, but no watchDelegate then treat the interceptor like
        // we treat filters - it is assumed to be a pure function unless flagged with $stateful
        fn.$$watchDelegate = inputsWatchDelegate;
        fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];
      }

      return fn;
    }
  }];
}

/**
 * @ngdoc service
 * @name $q
 * @requires $rootScope
 *
 * @description
 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
 * when they are done processing.
 *
 * This is an implementation of promises/deferred objects inspired by
 * [Kris Kowal's Q](https://github.com/kriskowal/q).
 *
 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
 * implementations, and the other which resembles ES6 promises to some degree.
 *
 * # $q constructor
 *
 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
 * function as the first argument. This is similar to the native Promise implementation from ES6 Harmony,
 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
 *
 * While the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are
 * available yet.
 *
 * It can be used like so:
 *
 * ```js
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
 *   // are available in the current lexical scope (they could have been injected or passed in).
 *
 *   function asyncGreet(name) {
 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
 *     return $q(function(resolve, reject) {
 *       setTimeout(function() {
 *         if (okToGreet(name)) {
 *           resolve('Hello, ' + name + '!');
 *         } else {
 *           reject('Greeting ' + name + ' is not allowed.');
 *         }
 *       }, 1000);
 *     });
 *   }
 *
 *   var promise = asyncGreet('Robin Hood');
 *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   });
 * ```
 *
 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
 *
 * However, the more traditional CommonJS-style usage is still available, and documented below.
 *
 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
 * interface for interacting with an object that represents the result of an action that is
 * performed asynchronously, and may or may not be finished at any given point in time.
 *
 * From the perspective of dealing with error handling, deferred and promise APIs are to
 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
 *
 * ```js
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
 *   // are available in the current lexical scope (they could have been injected or passed in).
 *
 *   function asyncGreet(name) {
 *     var deferred = $q.defer();
 *
 *     setTimeout(function() {
 *       deferred.notify('About to greet ' + name + '.');
 *
 *       if (okToGreet(name)) {
 *         deferred.resolve('Hello, ' + name + '!');
 *       } else {
 *         deferred.reject('Greeting ' + name + ' is not allowed.');
 *       }
 *     }, 1000);
 *
 *     return deferred.promise;
 *   }
 *
 *   var promise = asyncGreet('Robin Hood');
 *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   }, function(update) {
 *     alert('Got notification: ' + update);
 *   });
 * ```
 *
 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
 * comes in the way of guarantees that promise and deferred APIs make, see
 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
 *
 * Additionally the promise api allows for composition that is very hard to do with the
 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
 * section on serial or parallel joining of promises.
 *
 * # The Deferred API
 *
 * A new instance of deferred is constructed by calling `$q.defer()`.
 *
 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
 * that can be used for signaling the successful or unsuccessful completion, as well as the status
 * of the task.
 *
 * **Methods**
 *
 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
 *   constructed via `$q.reject`, the promise will be rejected instead.
 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
 *   resolving it with a rejection constructed via `$q.reject`.
 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
 *   multiple times before the promise is either resolved or rejected.
 *
 * **Properties**
 *
 * - promise – `{Promise}` – promise object associated with this deferred.
 *
 *
 * # The Promise API
 *
 * A new promise instance is created when a deferred instance is created and can be retrieved by
 * calling `deferred.promise`.
 *
 * The purpose of the promise object is to allow for interested parties to get access to the result
 * of the deferred task when it completes.
 *
 * **Methods**
 *
 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or
 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
 *   as soon as the result is available. The callbacks are called with a single argument: the result
 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
 *   provide a progress indication, before the promise is resolved or rejected.
 *
 *   This method *returns a new promise* which is resolved or rejected via the return value of the
 *   `successCallback`, `errorCallback`. It also notifies via the return value of the
 *   `notifyCallback` method. The promise cannot be resolved or rejected from the notifyCallback
 *   method.
 *
 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
 *
 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
 *   but to do so without modifying the final value. This is useful to release resources or do some
 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
 *   more information.
 *
 * # Chaining promises
 *
 * Because calling the `then` method of a promise returns a new derived promise, it is easily
 * possible to create a chain of promises:
 *
 * ```js
 *   promiseB = promiseA.then(function(result) {
 *     return result + 1;
 *   });
 *
 *   // promiseB will be resolved immediately after promiseA is resolved and its value
 *   // will be the result of promiseA incremented by 1
 * ```
 *
 * It is possible to create chains of any length and since a promise can be resolved with another
 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
 * $http's response interceptors.
 *
 *
 * # Differences between Kris Kowal's Q and $q
 *
 *  There are two main differences:
 *
 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
 *   mechanism in angular, which means faster propagation of resolution or rejection into your
 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
 *   all the important functionality needed for common async tasks.
 *
 *  # Testing
 *
 *  ```js
 *    it('should simulate promise', inject(function($q, $rootScope) {
 *      var deferred = $q.defer();
 *      var promise = deferred.promise;
 *      var resolvedValue;
 *
 *      promise.then(function(value) { resolvedValue = value; });
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Simulate resolving of promise
 *      deferred.resolve(123);
 *      // Note that the 'then' function does not get called synchronously.
 *      // This is because we want the promise API to always be async, whether or not
 *      // it got called synchronously or asynchronously.
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Propagate promise resolution to 'then' functions using $apply().
 *      $rootScope.$apply();
 *      expect(resolvedValue).toEqual(123);
 *    }));
 *  ```
 *
 * @param {function(function, function)} resolver Function which is responsible for resolving or
 *   rejecting the newly created promise. The first parameter is a function which resolves the
 *   promise, the second parameter is a function which rejects the promise.
 *
 * @returns {Promise} The newly created promise.
 */
function $QProvider() {

  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {
    return qFactory(function(callback) {
      $rootScope.$evalAsync(callback);
    }, $exceptionHandler);
  }];
}

function $$QProvider() {
  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {
    return qFactory(function(callback) {
      $browser.defer(callback);
    }, $exceptionHandler);
  }];
}

/**
 * Constructs a promise manager.
 *
 * @param {function(function)} nextTick Function for executing functions in the next turn.
 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
 *     debugging purposes.
 * @returns {object} Promise manager.
 */
function qFactory(nextTick, exceptionHandler) {
  var $qMinErr = minErr('$q', TypeError);
  function callOnce(self, resolveFn, rejectFn) {
    var called = false;
    function wrap(fn) {
      return function(value) {
        if (called) return;
        called = true;
        fn.call(self, value);
      };
    }

    return [wrap(resolveFn), wrap(rejectFn)];
  }

  /**
   * @ngdoc method
   * @name ng.$q#defer
   * @kind function
   *
   * @description
   * Creates a `Deferred` object which represents a task which will finish in the future.
   *
   * @returns {Deferred} Returns a new instance of deferred.
   */
  var defer = function() {
    return new Deferred();
  };

  function Promise() {
    this.$$state = { status: 0 };
  }

  Promise.prototype = {
    then: function(onFulfilled, onRejected, progressBack) {
      var result = new Deferred();

      this.$$state.pending = this.$$state.pending || [];
      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);
      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);

      return result.promise;
    },

    "catch": function(callback) {
      return this.then(null, callback);
    },

    "finally": function(callback, progressBack) {
      return this.then(function(value) {
        return handleCallback(value, true, callback);
      }, function(error) {
        return handleCallback(error, false, callback);
      }, progressBack);
    }
  };

  //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native
  function simpleBind(context, fn) {
    return function(value) {
      fn.call(context, value);
    };
  }

  function processQueue(state) {
    var fn, deferred, pending;

    pending = state.pending;
    state.processScheduled = false;
    state.pending = undefined;
    for (var i = 0, ii = pending.length; i < ii; ++i) {
      deferred = pending[i][0];
      fn = pending[i][state.status];
      try {
        if (isFunction(fn)) {
          deferred.resolve(fn(state.value));
        } else if (state.status === 1) {
          deferred.resolve(state.value);
        } else {
          deferred.reject(state.value);
        }
      } catch (e) {
        deferred.reject(e);
        exceptionHandler(e);
      }
    }
  }

  function scheduleProcessQueue(state) {
    if (state.processScheduled || !state.pending) return;
    state.processScheduled = true;
    nextTick(function() { processQueue(state); });
  }

  function Deferred() {
    this.promise = new Promise();
    //Necessary to support unbound execution :/
    this.resolve = simpleBind(this, this.resolve);
    this.reject = simpleBind(this, this.reject);
    this.notify = simpleBind(this, this.notify);
  }

  Deferred.prototype = {
    resolve: function(val) {
      if (this.promise.$$state.status) return;
      if (val === this.promise) {
        this.$$reject($qMinErr(
          'qcycle',
          "Expected promise to be resolved with value other than itself '{0}'",
          val));
      } else {
        this.$$resolve(val);
      }

    },

    $$resolve: function(val) {
      var then, fns;

      fns = callOnce(this, this.$$resolve, this.$$reject);
      try {
        if ((isObject(val) || isFunction(val))) then = val && val.then;
        if (isFunction(then)) {
          this.promise.$$state.status = -1;
          then.call(val, fns[0], fns[1], this.notify);
        } else {
          this.promise.$$state.value = val;
          this.promise.$$state.status = 1;
          scheduleProcessQueue(this.promise.$$state);
        }
      } catch (e) {
        fns[1](e);
        exceptionHandler(e);
      }
    },

    reject: function(reason) {
      if (this.promise.$$state.status) return;
      this.$$reject(reason);
    },

    $$reject: function(reason) {
      this.promise.$$state.value = reason;
      this.promise.$$state.status = 2;
      scheduleProcessQueue(this.promise.$$state);
    },

    notify: function(progress) {
      var callbacks = this.promise.$$state.pending;

      if ((this.promise.$$state.status <= 0) && callbacks && callbacks.length) {
        nextTick(function() {
          var callback, result;
          for (var i = 0, ii = callbacks.length; i < ii; i++) {
            result = callbacks[i][0];
            callback = callbacks[i][3];
            try {
              result.notify(isFunction(callback) ? callback(progress) : progress);
            } catch (e) {
              exceptionHandler(e);
            }
          }
        });
      }
    }
  };

  /**
   * @ngdoc method
   * @name $q#reject
   * @kind function
   *
   * @description
   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
   * a promise chain, you don't need to worry about it.
   *
   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
   * a promise error callback and you want to forward the error to the promise derived from the
   * current promise, you have to "rethrow" the error by returning a rejection constructed via
   * `reject`.
   *
   * ```js
   *   promiseB = promiseA.then(function(result) {
   *     // success: do something and resolve promiseB
   *     //          with the old or a new result
   *     return result;
   *   }, function(reason) {
   *     // error: handle the error if possible and
   *     //        resolve promiseB with newPromiseOrValue,
   *     //        otherwise forward the rejection to promiseB
   *     if (canHandle(reason)) {
   *      // handle the error and recover
   *      return newPromiseOrValue;
   *     }
   *     return $q.reject(reason);
   *   });
   * ```
   *
   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
   */
  var reject = function(reason) {
    var result = new Deferred();
    result.reject(reason);
    return result.promise;
  };

  var makePromise = function makePromise(value, resolved) {
    var result = new Deferred();
    if (resolved) {
      result.resolve(value);
    } else {
      result.reject(value);
    }
    return result.promise;
  };

  var handleCallback = function handleCallback(value, isResolved, callback) {
    var callbackOutput = null;
    try {
      if (isFunction(callback)) callbackOutput = callback();
    } catch (e) {
      return makePromise(e, false);
    }
    if (isPromiseLike(callbackOutput)) {
      return callbackOutput.then(function() {
        return makePromise(value, isResolved);
      }, function(error) {
        return makePromise(error, false);
      });
    } else {
      return makePromise(value, isResolved);
    }
  };

  /**
   * @ngdoc method
   * @name $q#when
   * @kind function
   *
   * @description
   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
   * This is useful when you are dealing with an object that might or might not be a promise, or if
   * the promise comes from a source that can't be trusted.
   *
   * @param {*} value Value or a promise
   * @returns {Promise} Returns a promise of the passed value or promise
   */


  var when = function(value, callback, errback, progressBack) {
    var result = new Deferred();
    result.resolve(value);
    return result.promise.then(callback, errback, progressBack);
  };

  /**
   * @ngdoc method
   * @name $q#all
   * @kind function
   *
   * @description
   * Combines multiple promises into a single promise that is resolved when all of the input
   * promises are resolved.
   *
   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
   *   with the same rejection value.
   */

  function all(promises) {
    var deferred = new Deferred(),
        counter = 0,
        results = isArray(promises) ? [] : {};

    forEach(promises, function(promise, key) {
      counter++;
      when(promise).then(function(value) {
        if (results.hasOwnProperty(key)) return;
        results[key] = value;
        if (!(--counter)) deferred.resolve(results);
      }, function(reason) {
        if (results.hasOwnProperty(key)) return;
        deferred.reject(reason);
      });
    });

    if (counter === 0) {
      deferred.resolve(results);
    }

    return deferred.promise;
  }

  var $Q = function Q(resolver) {
    if (!isFunction(resolver)) {
      throw $qMinErr('norslvr', "Expected resolverFn, got '{0}'", resolver);
    }

    if (!(this instanceof Q)) {
      // More useful when $Q is the Promise itself.
      return new Q(resolver);
    }

    var deferred = new Deferred();

    function resolveFn(value) {
      deferred.resolve(value);
    }

    function rejectFn(reason) {
      deferred.reject(reason);
    }

    resolver(resolveFn, rejectFn);

    return deferred.promise;
  };

  $Q.defer = defer;
  $Q.reject = reject;
  $Q.when = when;
  $Q.all = all;

  return $Q;
}

function $$RAFProvider() { //rAF
  this.$get = ['$window', '$timeout', function($window, $timeout) {
    var requestAnimationFrame = $window.requestAnimationFrame ||
                                $window.webkitRequestAnimationFrame;

    var cancelAnimationFrame = $window.cancelAnimationFrame ||
                               $window.webkitCancelAnimationFrame ||
                               $window.webkitCancelRequestAnimationFrame;

    var rafSupported = !!requestAnimationFrame;
    var raf = rafSupported
      ? function(fn) {
          var id = requestAnimationFrame(fn);
          return function() {
            cancelAnimationFrame(id);
          };
        }
      : function(fn) {
          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666
          return function() {
            $timeout.cancel(timer);
          };
        };

    raf.supported = rafSupported;

    return raf;
  }];
}

/**
 * DESIGN NOTES
 *
 * The design decisions behind the scope are heavily favored for speed and memory consumption.
 *
 * The typical use of scope is to watch the expressions, which most of the time return the same
 * value as last time so we optimize the operation.
 *
 * Closures construction is expensive in terms of speed as well as memory:
 *   - No closures, instead use prototypical inheritance for API
 *   - Internal state needs to be stored on scope directly, which means that private state is
 *     exposed as $$____ properties
 *
 * Loop operations are optimized by using while(count--) { ... }
 *   - this means that in order to keep the same order of execution as addition we have to add
 *     items to the array at the beginning (unshift) instead of at the end (push)
 *
 * Child scopes are created and removed often
 *   - Using an array would be slow since inserts in middle are expensive so we use linked list
 *
 * There are few watches then a lot of observers. This is why you don't want the observer to be
 * implemented in the same way as watch. Watch requires return of initialization function which
 * are expensive to construct.
 */


/**
 * @ngdoc provider
 * @name $rootScopeProvider
 * @description
 *
 * Provider for the $rootScope service.
 */

/**
 * @ngdoc method
 * @name $rootScopeProvider#digestTtl
 * @description
 *
 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
 * assuming that the model is unstable.
 *
 * The current default is 10 iterations.
 *
 * In complex applications it's possible that the dependencies between `$watch`s will result in
 * several digest iterations. However if an application needs more than the default 10 digest
 * iterations for its model to stabilize then you should investigate what is causing the model to
 * continuously change during the digest.
 *
 * Increasing the TTL could have performance implications, so you should not change it without
 * proper justification.
 *
 * @param {number} limit The number of digest iterations.
 */


/**
 * @ngdoc service
 * @name $rootScope
 * @description
 *
 * Every application has a single root {@link ng.$rootScope.Scope scope}.
 * All other scopes are descendant scopes of the root scope. Scopes provide separation
 * between the model and the view, via a mechanism for watching the model for changes.
 * They also provide an event emission/broadcast and subscription facility. See the
 * {@link guide/scope developer guide on scopes}.
 */
function $RootScopeProvider() {
  var TTL = 10;
  var $rootScopeMinErr = minErr('$rootScope');
  var lastDirtyWatch = null;
  var applyAsyncId = null;

  this.digestTtl = function(value) {
    if (arguments.length) {
      TTL = value;
    }
    return TTL;
  };

  this.$get = ['$injector', '$exceptionHandler', '$parse', '$browser',
      function($injector, $exceptionHandler, $parse, $browser) {

    /**
     * @ngdoc type
     * @name $rootScope.Scope
     *
     * @description
     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
     * {@link auto.$injector $injector}. Child scopes are created using the
     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
     * compiled HTML template is executed.)
     *
     * Here is a simple scope snippet to show how you can interact with the scope.
     * ```html
     * <file src="./test/ng/rootScopeSpec.js" tag="docs1" />
     * ```
     *
     * # Inheritance
     * A scope can inherit from a parent scope, as in this example:
     * ```js
         var parent = $rootScope;
         var child = parent.$new();

         parent.salutation = "Hello";
         expect(child.salutation).toEqual('Hello');

         child.salutation = "Welcome";
         expect(child.salutation).toEqual('Welcome');
         expect(parent.salutation).toEqual('Hello');
     * ```
     *
     * When interacting with `Scope` in tests, additional helper methods are available on the
     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
     * details.
     *
     *
     * @param {Object.<string, function()>=} providers Map of service factory which need to be
     *                                       provided for the current scope. Defaults to {@link ng}.
     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
     *                              append/override services provided by `providers`. This is handy
     *                              when unit-testing and having the need to override a default
     *                              service.
     * @returns {Object} Newly created scope.
     *
     */
    function Scope() {
      this.$id = nextUid();
      this.$$phase = this.$parent = this.$$watchers =
                     this.$$nextSibling = this.$$prevSibling =
                     this.$$childHead = this.$$childTail = null;
      this.$root = this;
      this.$$destroyed = false;
      this.$$listeners = {};
      this.$$listenerCount = {};
      this.$$watchersCount = 0;
      this.$$isolateBindings = null;
    }

    /**
     * @ngdoc property
     * @name $rootScope.Scope#$id
     *
     * @description
     * Unique scope ID (monotonically increasing) useful for debugging.
     */

     /**
      * @ngdoc property
      * @name $rootScope.Scope#$parent
      *
      * @description
      * Reference to the parent scope.
      */

      /**
       * @ngdoc property
       * @name $rootScope.Scope#$root
       *
       * @description
       * Reference to the root scope.
       */

    Scope.prototype = {
      constructor: Scope,
      /**
       * @ngdoc method
       * @name $rootScope.Scope#$new
       * @kind function
       *
       * @description
       * Creates a new child {@link ng.$rootScope.Scope scope}.
       *
       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
       *
       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
       * desired for the scope and its child scopes to be permanently detached from the parent and
       * thus stop participating in model change detection and listener notification by invoking.
       *
       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
       *         parent scope. The scope is isolated, as it can not see parent scope properties.
       *         When creating widgets, it is useful for the widget to not accidentally read parent
       *         state.
       *
       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
       *                              of the newly created scope. Defaults to `this` scope if not provided.
       *                              This is used when creating a transclude scope to correctly place it
       *                              in the scope hierarchy while maintaining the correct prototypical
       *                              inheritance.
       *
       * @returns {Object} The newly created child scope.
       *
       */
      $new: function(isolate, parent) {
        var child;

        parent = parent || this;

        if (isolate) {
          child = new Scope();
          child.$root = this.$root;
        } else {
          // Only create a child scope class if somebody asks for one,
          // but cache it to allow the VM to optimize lookups.
          if (!this.$$ChildScope) {
            this.$$ChildScope = function ChildScope() {
              this.$$watchers = this.$$nextSibling =
                  this.$$childHead = this.$$childTail = null;
              this.$$listeners = {};
              this.$$listenerCount = {};
              this.$$watchersCount = 0;
              this.$id = nextUid();
              this.$$ChildScope = null;
            };
            this.$$ChildScope.prototype = this;
          }
          child = new this.$$ChildScope();
        }
        child.$parent = parent;
        child.$$prevSibling = parent.$$childTail;
        if (parent.$$childHead) {
          parent.$$childTail.$$nextSibling = child;
          parent.$$childTail = child;
        } else {
          parent.$$childHead = parent.$$childTail = child;
        }

        // When the new scope is not isolated or we inherit from `this`, and
        // the parent scope is destroyed, the property `$$destroyed` is inherited
        // prototypically. In all other cases, this property needs to be set
        // when the parent scope is destroyed.
        // The listener needs to be added after the parent is set
        if (isolate || parent != this) child.$on('$destroy', destroyChild);

        return child;

        function destroyChild() {
          child.$$destroyed = true;
        }
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$watch
       * @kind function
       *
       * @description
       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
       *
       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
       *   $digest()} and should return the value that will be watched. (Since
       *   {@link ng.$rootScope.Scope#$digest $digest()} reruns when it detects changes the
       *   `watchExpression` can execute multiple times per
       *   {@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)
       * - The `listener` is called only when the value from the current `watchExpression` and the
       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
       *   see below). Inequality is determined according to reference inequality,
       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
       *    via the `!==` Javascript operator, unless `objectEquality == true`
       *   (see next point)
       * - When `objectEquality == true`, inequality of the `watchExpression` is determined
       *   according to the {@link angular.equals} function. To save the value of the object for
       *   later comparison, the {@link angular.copy} function is used. This therefore means that
       *   watching complex objects will have adverse memory and performance implications.
       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
       *   This is achieved by rerunning the watchers until no changes are detected. The rerun
       *   iteration limit is 10 to prevent an infinite loop deadlock.
       *
       *
       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
       * you can register a `watchExpression` function with no `listener`. (Since `watchExpression`
       * can execute multiple times per {@link ng.$rootScope.Scope#$digest $digest} cycle when a
       * change is detected, be prepared for multiple calls to your listener.)
       *
       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
       * watcher. In rare cases, this is undesirable because the listener is called when the result
       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
       * listener was called due to initialization.
       *
       *
       *
       * # Example
       * ```js
           // let's assume that scope was dependency injected as the $rootScope
           var scope = $rootScope;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);



           // Using a function as a watchExpression
           var food;
           scope.foodCounter = 0;
           expect(scope.foodCounter).toEqual(0);
           scope.$watch(
             // This function returns the value being watched. It is called for each turn of the $digest loop
             function() { return food; },
             // This is the change listener, called when the value returned from the above function changes
             function(newValue, oldValue) {
               if ( newValue !== oldValue ) {
                 // Only increment the counter if the value changed
                 scope.foodCounter = scope.foodCounter + 1;
               }
             }
           );
           // No digest has been run so the counter will be zero
           expect(scope.foodCounter).toEqual(0);

           // Run the digest but since food has not changed count will still be zero
           scope.$digest();
           expect(scope.foodCounter).toEqual(0);

           // Update food and run digest.  Now the counter will increment
           food = 'cheeseburger';
           scope.$digest();
           expect(scope.foodCounter).toEqual(1);

       * ```
       *
       *
       *
       * @param {(function()|string)} watchExpression Expression that is evaluated on each
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
       *    a call to the `listener`.
       *
       *    - `string`: Evaluated as {@link guide/expression expression}
       *    - `function(scope)`: called with current `scope` as a parameter.
       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
       *    of `watchExpression` changes.
       *
       *    - `newVal` contains the current value of the `watchExpression`
       *    - `oldVal` contains the previous value of the `watchExpression`
       *    - `scope` refers to the current scope
       * @param {boolean=} objectEquality Compare for object equality using {@link angular.equals} instead of
       *     comparing for reference equality.
       * @returns {function()} Returns a deregistration function for this listener.
       */
      $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {
        var get = $parse(watchExp);

        if (get.$$watchDelegate) {
          return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);
        }
        var scope = this,
            array = scope.$$watchers,
            watcher = {
              fn: listener,
              last: initWatchVal,
              get: get,
              exp: prettyPrintExpression || watchExp,
              eq: !!objectEquality
            };

        lastDirtyWatch = null;

        if (!isFunction(listener)) {
          watcher.fn = noop;
        }

        if (!array) {
          array = scope.$$watchers = [];
        }
        // we use unshift since we use a while loop in $digest for speed.
        // the while loop reads in reverse order.
        array.unshift(watcher);
        incrementWatchersCount(this, 1);

        return function deregisterWatch() {
          if (arrayRemove(array, watcher) >= 0) {
            incrementWatchersCount(scope, -1);
          }
          lastDirtyWatch = null;
        };
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$watchGroup
       * @kind function
       *
       * @description
       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
       * If any one expression in the collection changes the `listener` is executed.
       *
       * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every
       *   call to $digest() to see if any items changes.
       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
       *
       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
       * watched using {@link ng.$rootScope.Scope#$watch $watch()}
       *
       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
       *    expression in `watchExpressions` changes
       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
       *    those of `watchExpression`
       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
       *    those of `watchExpression`
       *    The `scope` refers to the current scope.
       * @returns {function()} Returns a de-registration function for all listeners.
       */
      $watchGroup: function(watchExpressions, listener) {
        var oldValues = new Array(watchExpressions.length);
        var newValues = new Array(watchExpressions.length);
        var deregisterFns = [];
        var self = this;
        var changeReactionScheduled = false;
        var firstRun = true;

        if (!watchExpressions.length) {
          // No expressions means we call the listener ASAP
          var shouldCall = true;
          self.$evalAsync(function() {
            if (shouldCall) listener(newValues, newValues, self);
          });
          return function deregisterWatchGroup() {
            shouldCall = false;
          };
        }

        if (watchExpressions.length === 1) {
          // Special case size of one
          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {
            newValues[0] = value;
            oldValues[0] = oldValue;
            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);
          });
        }

        forEach(watchExpressions, function(expr, i) {
          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {
            newValues[i] = value;
            oldValues[i] = oldValue;
            if (!changeReactionScheduled) {
              changeReactionScheduled = true;
              self.$evalAsync(watchGroupAction);
            }
          });
          deregisterFns.push(unwatchFn);
        });

        function watchGroupAction() {
          changeReactionScheduled = false;

          if (firstRun) {
            firstRun = false;
            listener(newValues, newValues, self);
          } else {
            listener(newValues, oldValues, self);
          }
        }

        return function deregisterWatchGroup() {
          while (deregisterFns.length) {
            deregisterFns.shift()();
          }
        };
      },


      /**
       * @ngdoc method
       * @name $rootScope.Scope#$watchCollection
       * @kind function
       *
       * @description
       * Shallow watches the properties of an object and fires whenever any of the properties change
       * (for arrays, this implies watching the array items; for object maps, this implies watching
       * the properties). If a change is detected, the `listener` callback is fired.
       *
       * - The `obj` collection is observed via standard $watch operation and is examined on every
       *   call to $digest() to see if any items have been added, removed, or moved.
       * - The `listener` is called whenever anything within the `obj` has changed. Examples include
       *   adding, removing, and moving items belonging to an object or array.
       *
       *
       * # Example
       * ```js
          $scope.names = ['igor', 'matias', 'misko', 'james'];
          $scope.dataCount = 4;

          $scope.$watchCollection('names', function(newNames, oldNames) {
            $scope.dataCount = newNames.length;
          });

          expect($scope.dataCount).toEqual(4);
          $scope.$digest();

          //still at 4 ... no changes
          expect($scope.dataCount).toEqual(4);

          $scope.names.pop();
          $scope.$digest();

          //now there's been a change
          expect($scope.dataCount).toEqual(3);
       * ```
       *
       *
       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
       *    expression value should evaluate to an object or an array which is observed on each
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
       *    collection will trigger a call to the `listener`.
       *
       * @param {function(newCollection, oldCollection, scope)} listener a callback function called
       *    when a change is detected.
       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
       *    - The `oldCollection` object is a copy of the former collection data.
       *      Due to performance considerations, the`oldCollection` value is computed only if the
       *      `listener` function declares two or more arguments.
       *    - The `scope` argument refers to the current scope.
       *
       * @returns {function()} Returns a de-registration function for this listener. When the
       *    de-registration function is executed, the internal watch operation is terminated.
       */
      $watchCollection: function(obj, listener) {
        $watchCollectionInterceptor.$stateful = true;

        var self = this;
        // the current value, updated on each dirty-check run
        var newValue;
        // a shallow copy of the newValue from the last dirty-check run,
        // updated to match newValue during dirty-check run
        var oldValue;
        // a shallow copy of the newValue from when the last change happened
        var veryOldValue;
        // only track veryOldValue if the listener is asking for it
        var trackVeryOldValue = (listener.length > 1);
        var changeDetected = 0;
        var changeDetector = $parse(obj, $watchCollectionInterceptor);
        var internalArray = [];
        var internalObject = {};
        var initRun = true;
        var oldLength = 0;

        function $watchCollectionInterceptor(_value) {
          newValue = _value;
          var newLength, key, bothNaN, newItem, oldItem;

          // If the new value is undefined, then return undefined as the watch may be a one-time watch
          if (isUndefined(newValue)) return;

          if (!isObject(newValue)) { // if primitive
            if (oldValue !== newValue) {
              oldValue = newValue;
              changeDetected++;
            }
          } else if (isArrayLike(newValue)) {
            if (oldValue !== internalArray) {
              // we are transitioning from something which was not an array into array.
              oldValue = internalArray;
              oldLength = oldValue.length = 0;
              changeDetected++;
            }

            newLength = newValue.length;

            if (oldLength !== newLength) {
              // if lengths do not match we need to trigger change notification
              changeDetected++;
              oldValue.length = oldLength = newLength;
            }
            // copy the items to oldValue and look for changes.
            for (var i = 0; i < newLength; i++) {
              oldItem = oldValue[i];
              newItem = newValue[i];

              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
              if (!bothNaN && (oldItem !== newItem)) {
                changeDetected++;
                oldValue[i] = newItem;
              }
            }
          } else {
            if (oldValue !== internalObject) {
              // we are transitioning from something which was not an object into object.
              oldValue = internalObject = {};
              oldLength = 0;
              changeDetected++;
            }
            // copy the items to oldValue and look for changes.
            newLength = 0;
            for (key in newValue) {
              if (newValue.hasOwnProperty(key)) {
                newLength++;
                newItem = newValue[key];
                oldItem = oldValue[key];

                if (key in oldValue) {
                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
                  if (!bothNaN && (oldItem !== newItem)) {
                    changeDetected++;
                    oldValue[key] = newItem;
                  }
                } else {
                  oldLength++;
                  oldValue[key] = newItem;
                  changeDetected++;
                }
              }
            }
            if (oldLength > newLength) {
              // we used to have more keys, need to find them and destroy them.
              changeDetected++;
              for (key in oldValue) {
                if (!newValue.hasOwnProperty(key)) {
                  oldLength--;
                  delete oldValue[key];
                }
              }
            }
          }
          return changeDetected;
        }

        function $watchCollectionAction() {
          if (initRun) {
            initRun = false;
            listener(newValue, newValue, self);
          } else {
            listener(newValue, veryOldValue, self);
          }

          // make a copy for the next time a collection is changed
          if (trackVeryOldValue) {
            if (!isObject(newValue)) {
              //primitive
              veryOldValue = newValue;
            } else if (isArrayLike(newValue)) {
              veryOldValue = new Array(newValue.length);
              for (var i = 0; i < newValue.length; i++) {
                veryOldValue[i] = newValue[i];
              }
            } else { // if object
              veryOldValue = {};
              for (var key in newValue) {
                if (hasOwnProperty.call(newValue, key)) {
                  veryOldValue[key] = newValue[key];
                }
              }
            }
          }
        }

        return this.$watch(changeDetector, $watchCollectionAction);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$digest
       * @kind function
       *
       * @description
       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
       * until no more listeners are firing. This means that it is possible to get into an infinite
       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
       * iterations exceeds 10.
       *
       * Usually, you don't call `$digest()` directly in
       * {@link ng.directive:ngController controllers} or in
       * {@link ng.$compileProvider#directive directives}.
       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
       *
       * If you want to be notified whenever `$digest()` is called,
       * you can register a `watchExpression` function with
       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
       *
       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
       *
       * # Example
       * ```js
           var scope = ...;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);
       * ```
       *
       */
      $digest: function() {
        var watch, value, last,
            watchers,
            length,
            dirty, ttl = TTL,
            next, current, target = this,
            watchLog = [],
            logIdx, logMsg, asyncTask;

        beginPhase('$digest');
        // Check for changes to browser url that happened in sync before the call to $digest
        $browser.$$checkUrlChange();

        if (this === $rootScope && applyAsyncId !== null) {
          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.
          $browser.defer.cancel(applyAsyncId);
          flushApplyAsync();
        }

        lastDirtyWatch = null;

        do { // "while dirty" loop
          dirty = false;
          current = target;

          while (asyncQueue.length) {
            try {
              asyncTask = asyncQueue.shift();
              asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);
            } catch (e) {
              $exceptionHandler(e);
            }
            lastDirtyWatch = null;
          }

          traverseScopesLoop:
          do { // "traverse the scopes" loop
            if ((watchers = current.$$watchers)) {
              // process our watches
              length = watchers.length;
              while (length--) {
                try {
                  watch = watchers[length];
                  // Most common watches are on primitives, in which case we can short
                  // circuit it with === operator, only when === fails do we use .equals
                  if (watch) {
                    if ((value = watch.get(current)) !== (last = watch.last) &&
                        !(watch.eq
                            ? equals(value, last)
                            : (typeof value === 'number' && typeof last === 'number'
                               && isNaN(value) && isNaN(last)))) {
                      dirty = true;
                      lastDirtyWatch = watch;
                      watch.last = watch.eq ? copy(value, null) : value;
                      watch.fn(value, ((last === initWatchVal) ? value : last), current);
                      if (ttl < 5) {
                        logIdx = 4 - ttl;
                        if (!watchLog[logIdx]) watchLog[logIdx] = [];
                        watchLog[logIdx].push({
                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,
                          newVal: value,
                          oldVal: last
                        });
                      }
                    } else if (watch === lastDirtyWatch) {
                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
                      // have already been tested.
                      dirty = false;
                      break traverseScopesLoop;
                    }
                  }
                } catch (e) {
                  $exceptionHandler(e);
                }
              }
            }

            // Insanity Warning: scope depth-first traversal
            // yes, this code is a bit crazy, but it works and we have tests to prove it!
            // this piece should be kept in sync with the traversal in $broadcast
            if (!(next = ((current.$$watchersCount && current.$$childHead) ||
                (current !== target && current.$$nextSibling)))) {
              while (current !== target && !(next = current.$$nextSibling)) {
                current = current.$parent;
              }
            }
          } while ((current = next));

          // `break traverseScopesLoop;` takes us to here

          if ((dirty || asyncQueue.length) && !(ttl--)) {
            clearPhase();
            throw $rootScopeMinErr('infdig',
                '{0} $digest() iterations reached. Aborting!\n' +
                'Watchers fired in the last 5 iterations: {1}',
                TTL, watchLog);
          }

        } while (dirty || asyncQueue.length);

        clearPhase();

        while (postDigestQueue.length) {
          try {
            postDigestQueue.shift()();
          } catch (e) {
            $exceptionHandler(e);
          }
        }
      },


      /**
       * @ngdoc event
       * @name $rootScope.Scope#$destroy
       * @eventType broadcast on scope being destroyed
       *
       * @description
       * Broadcasted when a scope and its children are being destroyed.
       *
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
       * clean up DOM bindings before an element is removed from the DOM.
       */

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$destroy
       * @kind function
       *
       * @description
       * Removes the current scope (and all of its children) from the parent scope. Removal implies
       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
       * propagate to the current scope and its children. Removal also implies that the current
       * scope is eligible for garbage collection.
       *
       * The `$destroy()` is usually used by directives such as
       * {@link ng.directive:ngRepeat ngRepeat} for managing the
       * unrolling of the loop.
       *
       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
       * Application code can register a `$destroy` event handler that will give it a chance to
       * perform any necessary cleanup.
       *
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
       * clean up DOM bindings before an element is removed from the DOM.
       */
      $destroy: function() {
        // we can't destroy the root scope or a scope that has been already destroyed
        if (this.$$destroyed) return;
        var parent = this.$parent;

        this.$broadcast('$destroy');
        this.$$destroyed = true;
        if (this === $rootScope) return;

        incrementWatchersCount(this, -this.$$watchersCount);
        for (var eventName in this.$$listenerCount) {
          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
        }

        // sever all the references to parent scopes (after this cleanup, the current scope should
        // not be retained by any of our references and should be eligible for garbage collection)
        if (parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;
        if (parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;
        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;

        // Disable listeners, watchers and apply/digest methods
        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
        this.$on = this.$watch = this.$watchGroup = function() { return noop; };
        this.$$listeners = {};

        // All of the code below is bogus code that works around V8's memory leak via optimized code
        // and inline caches.
        //
        // see:
        // - https://code.google.com/p/v8/issues/detail?id=2073#c26
        // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
        // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451

        this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =
            this.$$childTail = this.$root = this.$$watchers = null;
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$eval
       * @kind function
       *
       * @description
       * Executes the `expression` on the current scope and returns the result. Any exceptions in
       * the expression are propagated (uncaught). This is useful when evaluating Angular
       * expressions.
       *
       * # Example
       * ```js
           var scope = ng.$rootScope.Scope();
           scope.a = 1;
           scope.b = 2;

           expect(scope.$eval('a+b')).toEqual(3);
           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
       * ```
       *
       * @param {(string|function())=} expression An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with the current `scope` parameter.
       *
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
       * @returns {*} The result of evaluating the expression.
       */
      $eval: function(expr, locals) {
        return $parse(expr)(this, locals);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$evalAsync
       * @kind function
       *
       * @description
       * Executes the expression on the current scope at a later point in time.
       *
       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
       * that:
       *
       *   - it will execute after the function that scheduled the evaluation (preferably before DOM
       *     rendering).
       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
       *     `expression` execution.
       *
       * Any exceptions from the execution of the expression are forwarded to the
       * {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
       * will be scheduled. However, it is encouraged to always call code that changes the model
       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
       *
       * @param {(string|function())=} expression An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with the current `scope` parameter.
       *
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
       */
      $evalAsync: function(expr, locals) {
        // if we are outside of an $digest loop and this is the first time we are scheduling async
        // task also schedule async auto-flush
        if (!$rootScope.$$phase && !asyncQueue.length) {
          $browser.defer(function() {
            if (asyncQueue.length) {
              $rootScope.$digest();
            }
          });
        }

        asyncQueue.push({scope: this, expression: expr, locals: locals});
      },

      $$postDigest: function(fn) {
        postDigestQueue.push(fn);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$apply
       * @kind function
       *
       * @description
       * `$apply()` is used to execute an expression in angular from outside of the angular
       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
       * Because we are calling into the angular framework we need to perform proper scope life
       * cycle of {@link ng.$exceptionHandler exception handling},
       * {@link ng.$rootScope.Scope#$digest executing watches}.
       *
       * ## Life cycle
       *
       * # Pseudo-Code of `$apply()`
       * ```js
           function $apply(expr) {
             try {
               return $eval(expr);
             } catch (e) {
               $exceptionHandler(e);
             } finally {
               $root.$digest();
             }
           }
       * ```
       *
       *
       * Scope's `$apply()` method transitions through the following stages:
       *
       * 1. The {@link guide/expression expression} is executed using the
       *    {@link ng.$rootScope.Scope#$eval $eval()} method.
       * 2. Any exceptions from the execution of the expression are forwarded to the
       *    {@link ng.$exceptionHandler $exceptionHandler} service.
       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
       *
       *
       * @param {(string|function())=} exp An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with current `scope` parameter.
       *
       * @returns {*} The result of evaluating the expression.
       */
      $apply: function(expr) {
        try {
          beginPhase('$apply');
          return this.$eval(expr);
        } catch (e) {
          $exceptionHandler(e);
        } finally {
          clearPhase();
          try {
            $rootScope.$digest();
          } catch (e) {
            $exceptionHandler(e);
            throw e;
          }
        }
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$applyAsync
       * @kind function
       *
       * @description
       * Schedule the invocation of $apply to occur at a later time. The actual time difference
       * varies across browsers, but is typically around ~10 milliseconds.
       *
       * This can be used to queue up multiple expressions which need to be evaluated in the same
       * digest.
       *
       * @param {(string|function())=} exp An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with current `scope` parameter.
       */
      $applyAsync: function(expr) {
        var scope = this;
        expr && applyAsyncQueue.push($applyAsyncExpression);
        scheduleApplyAsync();

        function $applyAsyncExpression() {
          scope.$eval(expr);
        }
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$on
       * @kind function
       *
       * @description
       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
       * discussion of event life cycle.
       *
       * The event listener function format is: `function(event, args...)`. The `event` object
       * passed into the listener has the following attributes:
       *
       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
       *     `$broadcast`-ed.
       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
       *     event propagates through the scope hierarchy, this property is set to null.
       *   - `name` - `{string}`: name of the event.
       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
       *     further event propagation (available only for events that were `$emit`-ed).
       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
       *     to true.
       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
       *
       * @param {string} name Event name to listen on.
       * @param {function(event, ...args)} listener Function to call when the event is emitted.
       * @returns {function()} Returns a deregistration function for this listener.
       */
      $on: function(name, listener) {
        var namedListeners = this.$$listeners[name];
        if (!namedListeners) {
          this.$$listeners[name] = namedListeners = [];
        }
        namedListeners.push(listener);

        var current = this;
        do {
          if (!current.$$listenerCount[name]) {
            current.$$listenerCount[name] = 0;
          }
          current.$$listenerCount[name]++;
        } while ((current = current.$parent));

        var self = this;
        return function() {
          var indexOfListener = namedListeners.indexOf(listener);
          if (indexOfListener !== -1) {
            namedListeners[indexOfListener] = null;
            decrementListenerCount(self, 1, name);
          }
        };
      },


      /**
       * @ngdoc method
       * @name $rootScope.Scope#$emit
       * @kind function
       *
       * @description
       * Dispatches an event `name` upwards through the scope hierarchy notifying the
       * registered {@link ng.$rootScope.Scope#$on} listeners.
       *
       * The event life cycle starts at the scope on which `$emit` was called. All
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
       * notified. Afterwards, the event traverses upwards toward the root scope and calls all
       * registered listeners along the way. The event will stop propagating if one of the listeners
       * cancels it.
       *
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * @param {string} name Event name to emit.
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
       */
      $emit: function(name, args) {
        var empty = [],
            namedListeners,
            scope = this,
            stopPropagation = false,
            event = {
              name: name,
              targetScope: scope,
              stopPropagation: function() {stopPropagation = true;},
              preventDefault: function() {
                event.defaultPrevented = true;
              },
              defaultPrevented: false
            },
            listenerArgs = concat([event], arguments, 1),
            i, length;

        do {
          namedListeners = scope.$$listeners[name] || empty;
          event.currentScope = scope;
          for (i = 0, length = namedListeners.length; i < length; i++) {

            // if listeners were deregistered, defragment the array
            if (!namedListeners[i]) {
              namedListeners.splice(i, 1);
              i--;
              length--;
              continue;
            }
            try {
              //allow all listeners attached to the current scope to run
              namedListeners[i].apply(null, listenerArgs);
            } catch (e) {
              $exceptionHandler(e);
            }
          }
          //if any listener on the current scope stops propagation, prevent bubbling
          if (stopPropagation) {
            event.currentScope = null;
            return event;
          }
          //traverse upwards
          scope = scope.$parent;
        } while (scope);

        event.currentScope = null;

        return event;
      },


      /**
       * @ngdoc method
       * @name $rootScope.Scope#$broadcast
       * @kind function
       *
       * @description
       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
       * registered {@link ng.$rootScope.Scope#$on} listeners.
       *
       * The event life cycle starts at the scope on which `$broadcast` was called. All
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
       * scope and calls all registered listeners along the way. The event cannot be canceled.
       *
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * @param {string} name Event name to broadcast.
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
       */
      $broadcast: function(name, args) {
        var target = this,
            current = target,
            next = target,
            event = {
              name: name,
              targetScope: target,
              preventDefault: function() {
                event.defaultPrevented = true;
              },
              defaultPrevented: false
            };

        if (!target.$$listenerCount[name]) return event;

        var listenerArgs = concat([event], arguments, 1),
            listeners, i, length;

        //down while you can, then up and next sibling or up and next sibling until back at root
        while ((current = next)) {
          event.currentScope = current;
          listeners = current.$$listeners[name] || [];
          for (i = 0, length = listeners.length; i < length; i++) {
            // if listeners were deregistered, defragment the array
            if (!listeners[i]) {
              listeners.splice(i, 1);
              i--;
              length--;
              continue;
            }

            try {
              listeners[i].apply(null, listenerArgs);
            } catch (e) {
              $exceptionHandler(e);
            }
          }

          // Insanity Warning: scope depth-first traversal
          // yes, this code is a bit crazy, but it works and we have tests to prove it!
          // this piece should be kept in sync with the traversal in $digest
          // (though it differs due to having the extra check for $$listenerCount)
          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||
              (current !== target && current.$$nextSibling)))) {
            while (current !== target && !(next = current.$$nextSibling)) {
              current = current.$parent;
            }
          }
        }

        event.currentScope = null;
        return event;
      }
    };

    var $rootScope = new Scope();

    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.
    var asyncQueue = $rootScope.$$asyncQueue = [];
    var postDigestQueue = $rootScope.$$postDigestQueue = [];
    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];

    return $rootScope;


    function beginPhase(phase) {
      if ($rootScope.$$phase) {
        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
      }

      $rootScope.$$phase = phase;
    }

    function clearPhase() {
      $rootScope.$$phase = null;
    }

    function incrementWatchersCount(current, count) {
      do {
        current.$$watchersCount += count;
      } while ((current = current.$parent));
    }

    function decrementListenerCount(current, count, name) {
      do {
        current.$$listenerCount[name] -= count;

        if (current.$$listenerCount[name] === 0) {
          delete current.$$listenerCount[name];
        }
      } while ((current = current.$parent));
    }

    /**
     * function used as an initial value for watchers.
     * because it's unique we can easily tell it apart from other values
     */
    function initWatchVal() {}

    function flushApplyAsync() {
      while (applyAsyncQueue.length) {
        try {
          applyAsyncQueue.shift()();
        } catch (e) {
          $exceptionHandler(e);
        }
      }
      applyAsyncId = null;
    }

    function scheduleApplyAsync() {
      if (applyAsyncId === null) {
        applyAsyncId = $browser.defer(function() {
          $rootScope.$apply(flushApplyAsync);
        });
      }
    }
  }];
}

/**
 * @description
 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
 */
function $$SanitizeUriProvider() {
  var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,
    imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;

  /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.aHrefSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      aHrefSanitizationWhitelist = regexp;
      return this;
    }
    return aHrefSanitizationWhitelist;
  };


  /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.imgSrcSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      imgSrcSanitizationWhitelist = regexp;
      return this;
    }
    return imgSrcSanitizationWhitelist;
  };

  this.$get = function() {
    return function sanitizeUri(uri, isImage) {
      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
      var normalizedVal;
      normalizedVal = urlResolve(uri).href;
      if (normalizedVal !== '' && !normalizedVal.match(regex)) {
        return 'unsafe:' + normalizedVal;
      }
      return uri;
    };
  };
}

var $sceMinErr = minErr('$sce');

var SCE_CONTEXTS = {
  HTML: 'html',
  CSS: 'css',
  URL: 'url',
  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
  // url.  (e.g. ng-include, script src, templateUrl)
  RESOURCE_URL: 'resourceUrl',
  JS: 'js'
};

// Helper functions follow.

function adjustMatcher(matcher) {
  if (matcher === 'self') {
    return matcher;
  } else if (isString(matcher)) {
    // Strings match exactly except for 2 wildcards - '*' and '**'.
    // '*' matches any character except those from the set ':/.?&'.
    // '**' matches any character (like .* in a RegExp).
    // More than 2 *'s raises an error as it's ill defined.
    if (matcher.indexOf('***') > -1) {
      throw $sceMinErr('iwcard',
          'Illegal sequence *** in string matcher.  String: {0}', matcher);
    }
    matcher = escapeForRegexp(matcher).
                  replace('\\*\\*', '.*').
                  replace('\\*', '[^:/.?&;]*');
    return new RegExp('^' + matcher + '$');
  } else if (isRegExp(matcher)) {
    // The only other type of matcher allowed is a Regexp.
    // Match entire URL / disallow partial matches.
    // Flags are reset (i.e. no global, ignoreCase or multiline)
    return new RegExp('^' + matcher.source + '$');
  } else {
    throw $sceMinErr('imatcher',
        'Matchers may only be "self", string patterns or RegExp objects');
  }
}


function adjustMatchers(matchers) {
  var adjustedMatchers = [];
  if (isDefined(matchers)) {
    forEach(matchers, function(matcher) {
      adjustedMatchers.push(adjustMatcher(matcher));
    });
  }
  return adjustedMatchers;
}


/**
 * @ngdoc service
 * @name $sceDelegate
 * @kind function
 *
 * @description
 *
 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
 * Contextual Escaping (SCE)} services to AngularJS.
 *
 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
 * work because `$sce` delegates to `$sceDelegate` for these operations.
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
 *
 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
 * can override it completely to change the behavior of `$sce`, the common case would
 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 */

/**
 * @ngdoc provider
 * @name $sceDelegateProvider
 * @description
 *
 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 *
 * For the general details about this service in Angular, read the main page for {@link ng.$sce
 * Strict Contextual Escaping (SCE)}.
 *
 * **Example**:  Consider the following case. <a name="example"></a>
 *
 * - your app is hosted at url `http://myapp.example.com/`
 * - but some of your templates are hosted on other domains you control such as
 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
 *
 * Here is what a secure configuration for this scenario might look like:
 *
 * ```
 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
 *    $sceDelegateProvider.resourceUrlWhitelist([
 *      // Allow same origin resource loads.
 *      'self',
 *      // Allow loading from our assets domain.  Notice the difference between * and **.
 *      'http://srv*.assets.example.com/**'
 *    ]);
 *
 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
 *    $sceDelegateProvider.resourceUrlBlacklist([
 *      'http://myapp.example.com/clickThru**'
 *    ]);
 *  });
 * ```
 */

function $SceDelegateProvider() {
  this.SCE_CONTEXTS = SCE_CONTEXTS;

  // Resource URLs can also be trusted by policy.
  var resourceUrlWhitelist = ['self'],
      resourceUrlBlacklist = [];

  /**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlWhitelist
   * @kind function
   *
   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
   *     provided.  This must be an array or null.  A snapshot of this array is used so further
   *     changes to the array are ignored.
   *
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *     allowed in this array.
   *
   *     Note: **an empty whitelist array will block all URLs**!
   *
   * @return {Array} the currently set whitelist array.
   *
   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
   * same origin resource requests.
   *
   * @description
   * Sets/Gets the whitelist of trusted resource URLs.
   */
  this.resourceUrlWhitelist = function(value) {
    if (arguments.length) {
      resourceUrlWhitelist = adjustMatchers(value);
    }
    return resourceUrlWhitelist;
  };

  /**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlBlacklist
   * @kind function
   *
   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
   *     provided.  This must be an array or null.  A snapshot of this array is used so further
   *     changes to the array are ignored.
   *
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *     allowed in this array.
   *
   *     The typical usage for the blacklist is to **block
   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
   *     these would otherwise be trusted but actually return content from the redirected domain.
   *
   *     Finally, **the blacklist overrides the whitelist** and has the final say.
   *
   * @return {Array} the currently set blacklist array.
   *
   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
   * is no blacklist.)
   *
   * @description
   * Sets/Gets the blacklist of trusted resource URLs.
   */

  this.resourceUrlBlacklist = function(value) {
    if (arguments.length) {
      resourceUrlBlacklist = adjustMatchers(value);
    }
    return resourceUrlBlacklist;
  };

  this.$get = ['$injector', function($injector) {

    var htmlSanitizer = function htmlSanitizer(html) {
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
    };

    if ($injector.has('$sanitize')) {
      htmlSanitizer = $injector.get('$sanitize');
    }


    function matchUrl(matcher, parsedUrl) {
      if (matcher === 'self') {
        return urlIsSameOrigin(parsedUrl);
      } else {
        // definitely a regex.  See adjustMatchers()
        return !!matcher.exec(parsedUrl.href);
      }
    }

    function isResourceUrlAllowedByPolicy(url) {
      var parsedUrl = urlResolve(url.toString());
      var i, n, allowed = false;
      // Ensure that at least one item from the whitelist allows this url.
      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
          allowed = true;
          break;
        }
      }
      if (allowed) {
        // Ensure that no item from the blacklist blocked this url.
        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
            allowed = false;
            break;
          }
        }
      }
      return allowed;
    }

    function generateHolderType(Base) {
      var holderType = function TrustedValueHolderType(trustedValue) {
        this.$$unwrapTrustedValue = function() {
          return trustedValue;
        };
      };
      if (Base) {
        holderType.prototype = new Base();
      }
      holderType.prototype.valueOf = function sceValueOf() {
        return this.$$unwrapTrustedValue();
      };
      holderType.prototype.toString = function sceToString() {
        return this.$$unwrapTrustedValue().toString();
      };
      return holderType;
    }

    var trustedValueHolderBase = generateHolderType(),
        byType = {};

    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);

    /**
     * @ngdoc method
     * @name $sceDelegate#trustAs
     *
     * @description
     * Returns an object that is trusted by angular for use in specified strict
     * contextual escaping contexts (such as ng-bind-html, ng-include, any src
     * attribute interpolation, any dom event binding attribute interpolation
     * such as for onclick,  etc.) that uses the provided value.
     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resourceUrl, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */
    function trustAs(type, trustedValue) {
      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
      if (!Constructor) {
        throw $sceMinErr('icontext',
            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',
            type, trustedValue);
      }
      if (trustedValue === null || trustedValue === undefined || trustedValue === '') {
        return trustedValue;
      }
      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
      // mutable objects, we ensure here that the value passed in is actually a string.
      if (typeof trustedValue !== 'string') {
        throw $sceMinErr('itype',
            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',
            type);
      }
      return new Constructor(trustedValue);
    }

    /**
     * @ngdoc method
     * @name $sceDelegate#valueOf
     *
     * @description
     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
     *
     * If the passed parameter is not a value that had been returned by {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
     *
     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
     *      call or anything else.
     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
     *     `value` unchanged.
     */
    function valueOf(maybeTrusted) {
      if (maybeTrusted instanceof trustedValueHolderBase) {
        return maybeTrusted.$$unwrapTrustedValue();
      } else {
        return maybeTrusted;
      }
    }

    /**
     * @ngdoc method
     * @name $sceDelegate#getTrusted
     *
     * @description
     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
     * returns the originally supplied value if the queried context type is a supertype of the
     * created type.  If this condition isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} call.
     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
     */
    function getTrusted(type, maybeTrusted) {
      if (maybeTrusted === null || maybeTrusted === undefined || maybeTrusted === '') {
        return maybeTrusted;
      }
      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
      if (constructor && maybeTrusted instanceof constructor) {
        return maybeTrusted.$$unwrapTrustedValue();
      }
      // If we get here, then we may only take one of two actions.
      // 1. sanitize the value for the requested type, or
      // 2. throw an exception.
      if (type === SCE_CONTEXTS.RESOURCE_URL) {
        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
          return maybeTrusted;
        } else {
          throw $sceMinErr('insecurl',
              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',
              maybeTrusted.toString());
        }
      } else if (type === SCE_CONTEXTS.HTML) {
        return htmlSanitizer(maybeTrusted);
      }
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
    }

    return { trustAs: trustAs,
             getTrusted: getTrusted,
             valueOf: valueOf };
  }];
}


/**
 * @ngdoc provider
 * @name $sceProvider
 * @description
 *
 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
 * -   enable/disable Strict Contextual Escaping (SCE) in a module
 * -   override the default implementation with a custom delegate
 *
 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
 */

/* jshint maxlen: false*/

/**
 * @ngdoc service
 * @name $sce
 * @kind function
 *
 * @description
 *
 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
 *
 * # Strict Contextual Escaping
 *
 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
 * contexts to result in a value that is marked as safe to use for that context.  One example of
 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
 * to these contexts as privileged or SCE contexts.
 *
 * As of version 1.2, Angular ships with SCE enabled by default.
 *
 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow
 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
 * to the top of your HTML document.
 *
 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for
 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
 *
 * Here's an example of a binding in a privileged context:
 *
 * ```
 * <input ng-model="userHtml">
 * <div ng-bind-html="userHtml"></div>
 * ```
 *
 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
 * disabled, this application allows the user to render arbitrary HTML into the DIV.
 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
 * security vulnerabilities.)
 *
 * For the case of HTML, you might use a library, either on the client side, or on the server side,
 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
 *
 * How would you ensure that every place that used these types of bindings was bound to a value that
 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
 * properties/fields and forgot to update the binding to the sanitized value?
 *
 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
 * determine that something explicitly says it's safe to use a value for binding in that
 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
 * for those values that you can easily tell are safe - because they were received from your server,
 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
 *
 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
 * obtain values that will be accepted by SCE / privileged contexts.
 *
 *
 * ## How does it work?
 *
 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
 *
 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
 * simplified):
 *
 * ```
 * var ngBindHtmlDirective = ['$sce', function($sce) {
 *   return function(scope, element, attr) {
 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
 *       element.html(value || '');
 *     });
 *   };
 * }];
 * ```
 *
 * ## Impact on loading templates
 *
 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
 * `templateUrl`'s specified by {@link guide/directive directives}.
 *
 * By default, Angular only loads templates from the same domain and protocol as the application
 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
 * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
 *
 * *Please note*:
 * The browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy apply in addition to this and may further restrict whether the template is successfully
 * loaded.  This means that without the right CORS policy, loading templates from a different domain
 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
 * browsers.
 *
 * ## This feels like too much overhead
 *
 * It's important to remember that SCE only applies to interpolation expressions.
 *
 * If your expressions are constant literals, they're automatically trusted and you don't need to
 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
 *
 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
 *
 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
 * templates in `ng-include` from your application's domain without having to even know about SCE.
 * It blocks loading templates from other domains or loading templates over http from an https
 * served document.  You can change these by setting your own custom {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
 *
 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
 * application that's secure and can be audited to verify that with much more ease than bolting
 * security onto an application later.
 *
 * <a name="contexts"></a>
 * ## What trusted context types are supported?
 *
 * | Context             | Notes          |
 * |---------------------|----------------|
 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
 *
 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
 *
 *  Each element in these arrays must be one of the following:
 *
 *  - **'self'**
 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
 *      domain** as the application document using the **same protocol**.
 *  - **String** (except the special value `'self'`)
 *    - The string is matched against the full *normalized / absolute URL* of the resource
 *      being tested (substring matches are not good enough.)
 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
 *      match themselves.
 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and ';'.  It's a useful wildcard for use
 *      in a whitelist.
 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
 *      not appropriate to use in for a scheme, domain, etc. as it would match too much.  (e.g.
 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
 *      http://foo.example.com/templates/**).
 *  - **RegExp** (*see caveat below*)
 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
 *      have good test coverage.).  For instance, the use of `.` in the regex is correct only in a
 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
 *      is highly recommended to use the string patterns and only fall back to regular expressions
 *      if they as a last resort.
 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
 *    - If you are generating your JavaScript from some other templating engine (not
 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
 *      remember to escape your regular expression (and be aware that you might need more than
 *      one level of escaping depending on your templating engine and the way you interpolated
 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
 *      enough before coding your own.  e.g. Ruby has
 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
 *      Closure library's [goog.string.regExpEscape(s)](
 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
 *
 * ## Show me an example using SCE.
 *
 * <example module="mySceApp" deps="angular-sanitize.js">
 * <file name="index.html">
 *   <div ng-controller="AppController as myCtrl">
 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
 *     <b>User comments</b><br>
 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
 *     exploit.
 *     <div class="well">
 *       <div ng-repeat="userComment in myCtrl.userComments">
 *         <b>{{userComment.name}}</b>:
 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
 *         <br>
 *       </div>
 *     </div>
 *   </div>
 * </file>
 *
 * <file name="script.js">
 *   angular.module('mySceApp', ['ngSanitize'])
 *     .controller('AppController', ['$http', '$templateCache', '$sce',
 *       function($http, $templateCache, $sce) {
 *         var self = this;
 *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
 *           self.userComments = userComments;
 *         });
 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *             'sanitization.&quot;">Hover over this text.</span>');
 *       }]);
 * </file>
 *
 * <file name="test_data.json">
 * [
 *   { "name": "Alice",
 *     "htmlComment":
 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
 *   },
 *   { "name": "Bob",
 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
 *   }
 * ]
 * </file>
 *
 * <file name="protractor.js" type="protractor">
 *   describe('SCE doc demo', function() {
 *     it('should sanitize untrusted values', function() {
 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())
 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
 *     });
 *
 *     it('should NOT sanitize explicitly trusted values', function() {
 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *           'sanitization.&quot;">Hover over this text.</span>');
 *     });
 *   });
 * </file>
 * </example>
 *
 *
 *
 * ## Can I disable SCE completely?
 *
 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
 * for little coding overhead.  It will be much harder to take an SCE disabled application and
 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
 * for cases where you have a lot of existing code that was written before SCE was introduced and
 * you're migrating them a module at a time.
 *
 * That said, here's how you can completely disable SCE:
 *
 * ```
 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
 *   // Completely disable SCE.  For demonstration purposes only!
 *   // Do not use in new projects.
 *   $sceProvider.enabled(false);
 * });
 * ```
 *
 */
/* jshint maxlen: 100 */

function $SceProvider() {
  var enabled = true;

  /**
   * @ngdoc method
   * @name $sceProvider#enabled
   * @kind function
   *
   * @param {boolean=} value If provided, then enables/disables SCE.
   * @return {boolean} true if SCE is enabled, false otherwise.
   *
   * @description
   * Enables/disables SCE and returns the current value.
   */
  this.enabled = function(value) {
    if (arguments.length) {
      enabled = !!value;
    }
    return enabled;
  };


  /* Design notes on the default implementation for SCE.
   *
   * The API contract for the SCE delegate
   * -------------------------------------
   * The SCE delegate object must provide the following 3 methods:
   *
   * - trustAs(contextEnum, value)
   *     This method is used to tell the SCE service that the provided value is OK to use in the
   *     contexts specified by contextEnum.  It must return an object that will be accepted by
   *     getTrusted() for a compatible contextEnum and return this value.
   *
   * - valueOf(value)
   *     For values that were not produced by trustAs(), return them as is.  For values that were
   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
   *     such a value.
   *
   * - getTrusted(contextEnum, value)
   *     This function should return the a value that is safe to use in the context specified by
   *     contextEnum or throw and exception otherwise.
   *
   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
   * instance, an implementation could maintain a registry of all trusted objects by context.  In
   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
   * return the same object passed in if it was found in the registry under a compatible context or
   * throw an exception otherwise.  An implementation might only wrap values some of the time based
   * on some criteria.  getTrusted() might return a value and not throw an exception for special
   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
   *
   *
   * A note on the inheritance model for SCE contexts
   * ------------------------------------------------
   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
   * is purely an implementation details.
   *
   * The contract is simply this:
   *
   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
   *     will also succeed.
   *
   * Inheritance happens to capture this in a natural way.  In some future, we
   * may not use inheritance anymore.  That is OK because no code outside of
   * sce.js and sceSpecs.js would need to be aware of this detail.
   */

  this.$get = ['$parse', '$sceDelegate', function(
                $parse,   $sceDelegate) {
    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
    // the "expression(javascript expression)" syntax which is insecure.
    if (enabled && msie < 8) {
      throw $sceMinErr('iequirks',
        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +
        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
    }

    var sce = shallowCopy(SCE_CONTEXTS);

    /**
     * @ngdoc method
     * @name $sce#isEnabled
     * @kind function
     *
     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
     *
     * @description
     * Returns a boolean indicating if SCE is enabled.
     */
    sce.isEnabled = function() {
      return enabled;
    };
    sce.trustAs = $sceDelegate.trustAs;
    sce.getTrusted = $sceDelegate.getTrusted;
    sce.valueOf = $sceDelegate.valueOf;

    if (!enabled) {
      sce.trustAs = sce.getTrusted = function(type, value) { return value; };
      sce.valueOf = identity;
    }

    /**
     * @ngdoc method
     * @name $sce#parseAs
     *
     * @description
     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
     * *result*)}
     *
     * @param {string} type The kind of SCE context in which this result will be used.
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
    sce.parseAs = function sceParseAs(type, expr) {
      var parsed = $parse(expr);
      if (parsed.literal && parsed.constant) {
        return parsed;
      } else {
        return $parse(expr, function(value) {
          return sce.getTrusted(type, value);
        });
      }
    };

    /**
     * @ngdoc method
     * @name $sce#trustAs
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
     * returns an object that is trusted by angular for use in specified strict contextual
     * escaping contexts (such as ng-bind-html, ng-include, any src attribute
     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
     * escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resourceUrl, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsHtml
     *
     * @description
     * Shorthand method.  `$sce.trustAsHtml(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the return
     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsJs
     *
     * @description
     * Shorthand method.  `$sce.trustAsJs(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#getTrusted
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
     * originally supplied value if the queried context type is a supertype of the created type.
     * If this condition isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
     *                         call.
     * @returns {*} The value the was originally provided to
     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
     *              Otherwise, throws an exception.
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedHtml
     *
     * @description
     * Shorthand method.  `$sce.getTrustedHtml(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedCss
     *
     * @description
     * Shorthand method.  `$sce.getTrustedCss(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedJs
     *
     * @description
     * Shorthand method.  `$sce.getTrustedJs(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsHtml
     *
     * @description
     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsCss
     *
     * @description
     * Shorthand method.  `$sce.parseAsCss(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsUrl(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsJs
     *
     * @description
     * Shorthand method.  `$sce.parseAsJs(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    // Shorthand delegations.
    var parse = sce.parseAs,
        getTrusted = sce.getTrusted,
        trustAs = sce.trustAs;

    forEach(SCE_CONTEXTS, function(enumValue, name) {
      var lName = lowercase(name);
      sce[camelCase("parse_as_" + lName)] = function(expr) {
        return parse(enumValue, expr);
      };
      sce[camelCase("get_trusted_" + lName)] = function(value) {
        return getTrusted(enumValue, value);
      };
      sce[camelCase("trust_as_" + lName)] = function(value) {
        return trustAs(enumValue, value);
      };
    });

    return sce;
  }];
}

/**
 * !!! This is an undocumented "private" service !!!
 *
 * @name $sniffer
 * @requires $window
 * @requires $document
 *
 * @property {boolean} history Does the browser support html5 history api ?
 * @property {boolean} transitions Does the browser support CSS transition events ?
 * @property {boolean} animations Does the browser support CSS animation events ?
 *
 * @description
 * This is very simple implementation of testing browser's features.
 */
function $SnifferProvider() {
  this.$get = ['$window', '$document', function($window, $document) {
    var eventSupport = {},
        android =
          toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),
        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
        document = $document[0] || {},
        vendorPrefix,
        vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/,
        bodyStyle = document.body && document.body.style,
        transitions = false,
        animations = false,
        match;

    if (bodyStyle) {
      for (var prop in bodyStyle) {
        if (match = vendorRegex.exec(prop)) {
          vendorPrefix = match[0];
          vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
          break;
        }
      }

      if (!vendorPrefix) {
        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';
      }

      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));
      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));

      if (android && (!transitions ||  !animations)) {
        transitions = isString(bodyStyle.webkitTransition);
        animations = isString(bodyStyle.webkitAnimation);
      }
    }


    return {
      // Android has history.pushState, but it does not update location correctly
      // so let's not use the history API at all.
      // http://code.google.com/p/android/issues/detail?id=17471
      // https://github.com/angular/angular.js/issues/904

      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
      // so let's not use the history API also
      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
      // jshint -W018
      history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),
      // jshint +W018
      hasEvent: function(event) {
        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
        // it. In particular the event is not fired when backspace or delete key are pressed or
        // when cut operation is performed.
        // IE10+ implements 'input' event but it erroneously fires under various situations,
        // e.g. when placeholder changes, or a form is focused.
        if (event === 'input' && msie <= 11) return false;

        if (isUndefined(eventSupport[event])) {
          var divElm = document.createElement('div');
          eventSupport[event] = 'on' + event in divElm;
        }

        return eventSupport[event];
      },
      csp: csp(),
      vendorPrefix: vendorPrefix,
      transitions: transitions,
      animations: animations,
      android: android
    };
  }];
}

var $compileMinErr = minErr('$compile');

/**
 * @ngdoc service
 * @name $templateRequest
 *
 * @description
 * The `$templateRequest` service downloads the provided template using `$http` and, upon success,
 * stores the contents inside of `$templateCache`. If the HTTP request fails or the response data
 * of the HTTP request is empty, a `$compile` error will be thrown (the exception can be thwarted
 * by setting the 2nd parameter of the function to true).
 *
 * @param {string} tpl The HTTP request template URL
 * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
 *
 * @return {Promise} a promise for the HTTP response data of the given URL.
 *
 * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
 */
function $TemplateRequestProvider() {
  this.$get = ['$templateCache', '$http', '$q', function($templateCache, $http, $q) {
    function handleRequestFn(tpl, ignoreRequestError) {
      handleRequestFn.totalPendingRequests++;

      var transformResponse = $http.defaults && $http.defaults.transformResponse;

      if (isArray(transformResponse)) {
        transformResponse = transformResponse.filter(function(transformer) {
          return transformer !== defaultHttpResponseTransform;
        });
      } else if (transformResponse === defaultHttpResponseTransform) {
        transformResponse = null;
      }

      var httpOptions = {
        cache: $templateCache,
        transformResponse: transformResponse
      };

      return $http.get(tpl, httpOptions)
        ['finally'](function() {
          handleRequestFn.totalPendingRequests--;
        })
        .then(function(response) {
          $templateCache.put(tpl, response.data);
          return response.data;
        }, handleError);

      function handleError(resp) {
        if (!ignoreRequestError) {
          throw $compileMinErr('tpload', 'Failed to load template: {0} (HTTP status: {1} {2})',
            tpl, resp.status, resp.statusText);
        }
        return $q.reject(resp);
      }
    }

    handleRequestFn.totalPendingRequests = 0;

    return handleRequestFn;
  }];
}

function $$TestabilityProvider() {
  this.$get = ['$rootScope', '$browser', '$location',
       function($rootScope,   $browser,   $location) {

    /**
     * @name $testability
     *
     * @description
     * The private $$testability service provides a collection of methods for use when debugging
     * or by automated test and debugging tools.
     */
    var testability = {};

    /**
     * @name $$testability#findBindings
     *
     * @description
     * Returns an array of elements that are bound (via ng-bind or {{}})
     * to expressions matching the input.
     *
     * @param {Element} element The element root to search from.
     * @param {string} expression The binding expression to match.
     * @param {boolean} opt_exactMatch If true, only returns exact matches
     *     for the expression. Filters and whitespace are ignored.
     */
    testability.findBindings = function(element, expression, opt_exactMatch) {
      var bindings = element.getElementsByClassName('ng-binding');
      var matches = [];
      forEach(bindings, function(binding) {
        var dataBinding = angular.element(binding).data('$binding');
        if (dataBinding) {
          forEach(dataBinding, function(bindingName) {
            if (opt_exactMatch) {
              var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');
              if (matcher.test(bindingName)) {
                matches.push(binding);
              }
            } else {
              if (bindingName.indexOf(expression) != -1) {
                matches.push(binding);
              }
            }
          });
        }
      });
      return matches;
    };

    /**
     * @name $$testability#findModels
     *
     * @description
     * Returns an array of elements that are two-way found via ng-model to
     * expressions matching the input.
     *
     * @param {Element} element The element root to search from.
     * @param {string} expression The model expression to match.
     * @param {boolean} opt_exactMatch If true, only returns exact matches
     *     for the expression.
     */
    testability.findModels = function(element, expression, opt_exactMatch) {
      var prefixes = ['ng-', 'data-ng-', 'ng\\:'];
      for (var p = 0; p < prefixes.length; ++p) {
        var attributeEquals = opt_exactMatch ? '=' : '*=';
        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';
        var elements = element.querySelectorAll(selector);
        if (elements.length) {
          return elements;
        }
      }
    };

    /**
     * @name $$testability#getLocation
     *
     * @description
     * Shortcut for getting the location in a browser agnostic way. Returns
     *     the path, search, and hash. (e.g. /path?a=b#hash)
     */
    testability.getLocation = function() {
      return $location.url();
    };

    /**
     * @name $$testability#setLocation
     *
     * @description
     * Shortcut for navigating to a location without doing a full page reload.
     *
     * @param {string} url The location url (path, search and hash,
     *     e.g. /path?a=b#hash) to go to.
     */
    testability.setLocation = function(url) {
      if (url !== $location.url()) {
        $location.url(url);
        $rootScope.$digest();
      }
    };

    /**
     * @name $$testability#whenStable
     *
     * @description
     * Calls the callback when $timeout and $http requests are completed.
     *
     * @param {function} callback
     */
    testability.whenStable = function(callback) {
      $browser.notifyWhenNoOutstandingRequests(callback);
    };

    return testability;
  }];
}

function $TimeoutProvider() {
  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',
       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {

    var deferreds = {};


     /**
      * @ngdoc service
      * @name $timeout
      *
      * @description
      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
      * block and delegates any exceptions to
      * {@link ng.$exceptionHandler $exceptionHandler} service.
      *
      * The return value of calling `$timeout` is a promise, which will be resolved when
      * the delay has passed and the timeout function, if provided, is executed.
      *
      * To cancel a timeout request, call `$timeout.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
      * synchronously flush the queue of deferred functions.
      *
      * If you only want a promise that will be resolved after some specified delay
      * then you can call `$timeout` without the `fn` function.
      *
      * @param {function()=} fn A function, whose execution should be delayed.
      * @param {number=} [delay=0] Delay in milliseconds.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this
      *   promise will be resolved with is the return value of the `fn` function.
      *
      */
    function timeout(fn, delay, invokeApply) {
      if (!isFunction(fn)) {
        invokeApply = delay;
        delay = fn;
        fn = noop;
      }

      var skipApply = (isDefined(invokeApply) && !invokeApply),
          deferred = (skipApply ? $$q : $q).defer(),
          promise = deferred.promise,
          timeoutId;

      timeoutId = $browser.defer(function() {
        try {
          deferred.resolve(fn());
        } catch (e) {
          deferred.reject(e);
          $exceptionHandler(e);
        }
        finally {
          delete deferreds[promise.$$timeoutId];
        }

        if (!skipApply) $rootScope.$apply();
      }, delay);

      promise.$$timeoutId = timeoutId;
      deferreds[timeoutId] = deferred;

      return promise;
    }


     /**
      * @ngdoc method
      * @name $timeout#cancel
      *
      * @description
      * Cancels a task associated with the `promise`. As a result of this, the promise will be
      * resolved with a rejection.
      *
      * @param {Promise=} promise Promise returned by the `$timeout` function.
      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
      *   canceled.
      */
    timeout.cancel = function(promise) {
      if (promise && promise.$$timeoutId in deferreds) {
        deferreds[promise.$$timeoutId].reject('canceled');
        delete deferreds[promise.$$timeoutId];
        return $browser.defer.cancel(promise.$$timeoutId);
      }
      return false;
    };

    return timeout;
  }];
}

// NOTE:  The usage of window and document instead of $window and $document here is
// deliberate.  This service depends on the specific behavior of anchor nodes created by the
// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
// doesn't know about mocked locations and resolves URLs to the real document - which is
// exactly the behavior needed here.  There is little value is mocking these out for this
// service.
var urlParsingNode = document.createElement("a");
var originUrl = urlResolve(window.location.href);


/**
 *
 * Implementation Notes for non-IE browsers
 * ----------------------------------------
 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
 * URL will be resolved into an absolute URL in the context of the application document.
 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
 * properties are all populated to reflect the normalized URL.  This approach has wide
 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *
 * Implementation Notes for IE
 * ---------------------------
 * IE >= 8 and <= 10 normalizes the URL when assigned to the anchor node similar to the other
 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
 * work around that by performing the parsing in a 2nd step by taking a previously normalized
 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
 * properties such as protocol, hostname, port, etc.
 *
 * IE7 does not normalize the URL when assigned to an anchor node.  (Apparently, it does, if one
 * uses the inner HTML approach to assign the URL as part of an HTML snippet -
 * http://stackoverflow.com/a/472729)  However, setting img[src] does normalize the URL.
 * Unfortunately, setting img[src] to something like "javascript:foo" on IE throws an exception.
 * Since the primary usage for normalizing URLs is to sanitize such URLs, we can't use that
 * method and IE < 8 is unsupported.
 *
 * References:
 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *   http://url.spec.whatwg.org/#urlutils
 *   https://github.com/angular/angular.js/pull/2902
 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
 *
 * @kind function
 * @param {string} url The URL to be parsed.
 * @description Normalizes and parses a URL.
 * @returns {object} Returns the normalized URL as a dictionary.
 *
 *   | member name   | Description    |
 *   |---------------|----------------|
 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
 *   | protocol      | The protocol including the trailing colon                              |
 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
 *   | search        | The search params, minus the question mark                             |
 *   | hash          | The hash string, minus the hash symbol
 *   | hostname      | The hostname
 *   | port          | The port, without ":"
 *   | pathname      | The pathname, beginning with "/"
 *
 */
function urlResolve(url) {
  var href = url;

  if (msie) {
    // Normalize before parse.  Refer Implementation Notes on why this is
    // done in two steps on IE.
    urlParsingNode.setAttribute("href", href);
    href = urlParsingNode.href;
  }

  urlParsingNode.setAttribute('href', href);

  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
  return {
    href: urlParsingNode.href,
    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
    host: urlParsingNode.host,
    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
    hostname: urlParsingNode.hostname,
    port: urlParsingNode.port,
    pathname: (urlParsingNode.pathname.charAt(0) === '/')
      ? urlParsingNode.pathname
      : '/' + urlParsingNode.pathname
  };
}

/**
 * Parse a request URL and determine whether this is a same-origin request as the application document.
 *
 * @param {string|object} requestUrl The url of the request as a string that will be resolved
 * or a parsed URL object.
 * @returns {boolean} Whether the request is for the same origin as the application document.
 */
function urlIsSameOrigin(requestUrl) {
  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
  return (parsed.protocol === originUrl.protocol &&
          parsed.host === originUrl.host);
}

/**
 * @ngdoc service
 * @name $window
 *
 * @description
 * A reference to the browser's `window` object. While `window`
 * is globally available in JavaScript, it causes testability problems, because
 * it is a global variable. In angular we always refer to it through the
 * `$window` service, so it may be overridden, removed or mocked for testing.
 *
 * Expressions, like the one defined for the `ngClick` directive in the example
 * below, are evaluated with respect to the current scope.  Therefore, there is
 * no risk of inadvertently coding in a dependency on a global value in such an
 * expression.
 *
 * @example
   <example module="windowExample">
     <file name="index.html">
       <script>
         angular.module('windowExample', [])
           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
             $scope.greeting = 'Hello, World!';
             $scope.doGreeting = function(greeting) {
               $window.alert(greeting);
             };
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="text" ng-model="greeting" />
         <button ng-click="doGreeting(greeting)">ALERT</button>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
      it('should display the greeting in the input box', function() {
       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
       // If we click the button it will block the test runner
       // element(':button').click();
      });
     </file>
   </example>
 */
function $WindowProvider() {
  this.$get = valueFn(window);
}

/* global currencyFilter: true,
 dateFilter: true,
 filterFilter: true,
 jsonFilter: true,
 limitToFilter: true,
 lowercaseFilter: true,
 numberFilter: true,
 orderByFilter: true,
 uppercaseFilter: true,
 */

/**
 * @ngdoc provider
 * @name $filterProvider
 * @description
 *
 * Filters are just functions which transform input to an output. However filters need to be
 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
 * annotated with dependencies and is responsible for creating a filter function.
 *
 * ```js
 *   // Filter registration
 *   function MyModule($provide, $filterProvider) {
 *     // create a service to demonstrate injection (not always needed)
 *     $provide.value('greet', function(name){
 *       return 'Hello ' + name + '!';
 *     });
 *
 *     // register a filter factory which uses the
 *     // greet service to demonstrate DI.
 *     $filterProvider.register('greet', function(greet){
 *       // return the filter function which uses the greet service
 *       // to generate salutation
 *       return function(text) {
 *         // filters need to be forgiving so check input validity
 *         return text && greet(text) || text;
 *       };
 *     });
 *   }
 * ```
 *
 * The filter function is registered with the `$injector` under the filter name suffix with
 * `Filter`.
 *
 * ```js
 *   it('should be the same instance', inject(
 *     function($filterProvider) {
 *       $filterProvider.register('reverse', function(){
 *         return ...;
 *       });
 *     },
 *     function($filter, reverseFilter) {
 *       expect($filter('reverse')).toBe(reverseFilter);
 *     });
 * ```
 *
 *
 * For more information about how angular filters work, and how to create your own filters, see
 * {@link guide/filter Filters} in the Angular Developer Guide.
 */

/**
 * @ngdoc service
 * @name $filter
 * @kind function
 * @description
 * Filters are used for formatting data displayed to the user.
 *
 * The general syntax in templates is as follows:
 *
 *         {{ expression [| filter_name[:parameter_value] ... ] }}
 *
 * @param {String} name Name of the filter function to retrieve
 * @return {Function} the filter function
 * @example
   <example name="$filter" module="filterExample">
     <file name="index.html">
       <div ng-controller="MainCtrl">
        <h3>{{ originalText }}</h3>
        <h3>{{ filteredText }}</h3>
       </div>
     </file>

     <file name="script.js">
      angular.module('filterExample', [])
      .controller('MainCtrl', function($scope, $filter) {
        $scope.originalText = 'hello';
        $scope.filteredText = $filter('uppercase')($scope.originalText);
      });
     </file>
   </example>
  */
$FilterProvider.$inject = ['$provide'];
function $FilterProvider($provide) {
  var suffix = 'Filter';

  /**
   * @ngdoc method
   * @name $filterProvider#register
   * @param {string|Object} name Name of the filter function, or an object map of filters where
   *    the keys are the filter names and the values are the filter factories.
   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
   *    of the registered filter instances.
   */
  function register(name, factory) {
    if (isObject(name)) {
      var filters = {};
      forEach(name, function(filter, key) {
        filters[key] = register(key, filter);
      });
      return filters;
    } else {
      return $provide.factory(name + suffix, factory);
    }
  }
  this.register = register;

  this.$get = ['$injector', function($injector) {
    return function(name) {
      return $injector.get(name + suffix);
    };
  }];

  ////////////////////////////////////////

  /* global
    currencyFilter: false,
    dateFilter: false,
    filterFilter: false,
    jsonFilter: false,
    limitToFilter: false,
    lowercaseFilter: false,
    numberFilter: false,
    orderByFilter: false,
    uppercaseFilter: false,
  */

  register('currency', currencyFilter);
  register('date', dateFilter);
  register('filter', filterFilter);
  register('json', jsonFilter);
  register('limitTo', limitToFilter);
  register('lowercase', lowercaseFilter);
  register('number', numberFilter);
  register('orderBy', orderByFilter);
  register('uppercase', uppercaseFilter);
}

/**
 * @ngdoc filter
 * @name filter
 * @kind function
 *
 * @description
 * Selects a subset of items from `array` and returns it as a new array.
 *
 * @param {Array} array The source array.
 * @param {string|Object|function()} expression The predicate to be used for selecting items from
 *   `array`.
 *
 *   Can be one of:
 *
 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
 *     objects with string properties in `array` that match this string will be returned. This also
 *     applies to nested object properties.
 *     The predicate can be negated by prefixing the string with `!`.
 *
 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
 *     which have property `name` containing "M" and property `phone` containing "1". A special
 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
 *     property of the object or its nested object properties. That's equivalent to the simple
 *     substring match with a `string` as described above. The predicate can be negated by prefixing
 *     the string with `!`.
 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
 *     not containing "M".
 *
 *     Note that a named property will match properties on the same level only, while the special
 *     `$` property will match properties on the same level or deeper. E.g. an array item like
 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
 *     **will** be matched by `{$: 'John'}`.
 *
 *   - `function(value, index)`: A predicate function can be used to write arbitrary filters. The
 *     function is called for each element of `array`. The final result is an array of those
 *     elements that the predicate returned true for.
 *
 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
 *     determining if the expected value (from the filter expression) and actual value (from
 *     the object in the array) should be considered a match.
 *
 *   Can be one of:
 *
 *   - `function(actual, expected)`:
 *     The function will be given the object value and the predicate value to compare and
 *     should return true if both values should be considered equal.
 *
 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
 *     This is essentially strict comparison of expected and actual.
 *
 *   - `false|undefined`: A short hand for a function which will look for a substring match in case
 *     insensitive way.
 *
 * @example
   <example>
     <file name="index.html">
       <div ng-init="friends = [{name:'John', phone:'555-1276'},
                                {name:'Mary', phone:'800-BIG-MARY'},
                                {name:'Mike', phone:'555-4321'},
                                {name:'Adam', phone:'555-5678'},
                                {name:'Julie', phone:'555-8765'},
                                {name:'Juliette', phone:'555-5678'}]"></div>

       Search: <input ng-model="searchText">
       <table id="searchTextResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friend in friends | filter:searchText">
           <td>{{friend.name}}</td>
           <td>{{friend.phone}}</td>
         </tr>
       </table>
       <hr>
       Any: <input ng-model="search.$"> <br>
       Name only <input ng-model="search.name"><br>
       Phone only <input ng-model="search.phone"><br>
       Equality <input type="checkbox" ng-model="strict"><br>
       <table id="searchObjResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friendObj in friends | filter:search:strict">
           <td>{{friendObj.name}}</td>
           <td>{{friendObj.phone}}</td>
         </tr>
       </table>
     </file>
     <file name="protractor.js" type="protractor">
       var expectFriendNames = function(expectedNames, key) {
         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
           arr.forEach(function(wd, i) {
             expect(wd.getText()).toMatch(expectedNames[i]);
           });
         });
       };

       it('should search across all fields when filtering with a string', function() {
         var searchText = element(by.model('searchText'));
         searchText.clear();
         searchText.sendKeys('m');
         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');

         searchText.clear();
         searchText.sendKeys('76');
         expectFriendNames(['John', 'Julie'], 'friend');
       });

       it('should search in specific fields when filtering with a predicate object', function() {
         var searchAny = element(by.model('search.$'));
         searchAny.clear();
         searchAny.sendKeys('i');
         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
       });
       it('should use a equal comparison when comparator is true', function() {
         var searchName = element(by.model('search.name'));
         var strict = element(by.model('strict'));
         searchName.clear();
         searchName.sendKeys('Julie');
         strict.click();
         expectFriendNames(['Julie'], 'friendObj');
       });
     </file>
   </example>
 */
function filterFilter() {
  return function(array, expression, comparator) {
    if (!isArray(array)) {
      if (array == null) {
        return array;
      } else {
        throw minErr('filter')('notarray', 'Expected array but received: {0}', array);
      }
    }

    var predicateFn;
    var matchAgainstAnyProp;

    switch (typeof expression) {
      case 'function':
        predicateFn = expression;
        break;
      case 'boolean':
      case 'number':
      case 'string':
        matchAgainstAnyProp = true;
        //jshint -W086
      case 'object':
        //jshint +W086
        predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);
        break;
      default:
        return array;
    }

    return array.filter(predicateFn);
  };
}

// Helper functions for `filterFilter`
function createPredicateFn(expression, comparator, matchAgainstAnyProp) {
  var shouldMatchPrimitives = isObject(expression) && ('$' in expression);
  var predicateFn;

  if (comparator === true) {
    comparator = equals;
  } else if (!isFunction(comparator)) {
    comparator = function(actual, expected) {
      if (isObject(actual) || isObject(expected)) {
        // Prevent an object to be considered equal to a string like `'[object'`
        return false;
      }

      actual = lowercase('' + actual);
      expected = lowercase('' + expected);
      return actual.indexOf(expected) !== -1;
    };
  }

  predicateFn = function(item) {
    if (shouldMatchPrimitives && !isObject(item)) {
      return deepCompare(item, expression.$, comparator, false);
    }
    return deepCompare(item, expression, comparator, matchAgainstAnyProp);
  };

  return predicateFn;
}

function deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {
  var actualType = typeof actual;
  var expectedType = typeof expected;

  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {
    return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);
  } else if (isArray(actual)) {
    // In case `actual` is an array, consider it a match
    // if ANY of it's items matches `expected`
    return actual.some(function(item) {
      return deepCompare(item, expected, comparator, matchAgainstAnyProp);
    });
  }

  switch (actualType) {
    case 'object':
      var key;
      if (matchAgainstAnyProp) {
        for (key in actual) {
          if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, true)) {
            return true;
          }
        }
        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, false);
      } else if (expectedType === 'object') {
        for (key in expected) {
          var expectedVal = expected[key];
          if (isFunction(expectedVal)) {
            continue;
          }

          var matchAnyProperty = key === '$';
          var actualVal = matchAnyProperty ? actual : actual[key];
          if (!deepCompare(actualVal, expectedVal, comparator, matchAnyProperty, matchAnyProperty)) {
            return false;
          }
        }
        return true;
      } else {
        return comparator(actual, expected);
      }
      break;
    case 'function':
      return false;
    default:
      return comparator(actual, expected);
  }
}

/**
 * @ngdoc filter
 * @name currency
 * @kind function
 *
 * @description
 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
 * symbol for current locale is used.
 *
 * @param {number} amount Input to filter.
 * @param {string=} symbol Currency symbol or identifier to be displayed.
 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
 * @returns {string} Formatted number.
 *
 *
 * @example
   <example module="currencyExample">
     <file name="index.html">
       <script>
         angular.module('currencyExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.amount = 1234.56;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="number" ng-model="amount"> <br>
         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>
         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should init with 1234.56', function() {
         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
       });
       it('should update', function() {
         if (browser.params.browser == 'safari') {
           // Safari does not understand the minus key. See
           // https://github.com/angular/protractor/issues/481
           return;
         }
         element(by.model('amount')).clear();
         element(by.model('amount')).sendKeys('-1234');
         expect(element(by.id('currency-default')).getText()).toBe('($1,234.00)');
         expect(element(by.id('currency-custom')).getText()).toBe('(USD$1,234.00)');
         expect(element(by.id('currency-no-fractions')).getText()).toBe('(USD$1,234)');
       });
     </file>
   </example>
 */
currencyFilter.$inject = ['$locale'];
function currencyFilter($locale) {
  var formats = $locale.NUMBER_FORMATS;
  return function(amount, currencySymbol, fractionSize) {
    if (isUndefined(currencySymbol)) {
      currencySymbol = formats.CURRENCY_SYM;
    }

    if (isUndefined(fractionSize)) {
      fractionSize = formats.PATTERNS[1].maxFrac;
    }

    // if null or undefined pass it through
    return (amount == null)
        ? amount
        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).
            replace(/\u00A4/g, currencySymbol);
  };
}

/**
 * @ngdoc filter
 * @name number
 * @kind function
 *
 * @description
 * Formats a number as text.
 *
 * If the input is not a number an empty string is returned.
 *
 * If the input is an infinite (Infinity/-Infinity) the Infinity symbol '∞' is returned.
 *
 * @param {number|string} number Number to format.
 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
 * If this is not provided then the fraction size is computed from the current locale's number
 * formatting pattern. In the case of the default locale, it will be 3.
 * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.
 *
 * @example
   <example module="numberFilterExample">
     <file name="index.html">
       <script>
         angular.module('numberFilterExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.val = 1234.56789;
           }]);
       </script>
       <div ng-controller="ExampleController">
         Enter number: <input ng-model='val'><br>
         Default formatting: <span id='number-default'>{{val | number}}</span><br>
         No fractions: <span>{{val | number:0}}</span><br>
         Negative number: <span>{{-val | number:4}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format numbers', function() {
         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
       });

       it('should update', function() {
         element(by.model('val')).clear();
         element(by.model('val')).sendKeys('3374.333');
         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
      });
     </file>
   </example>
 */


numberFilter.$inject = ['$locale'];
function numberFilter($locale) {
  var formats = $locale.NUMBER_FORMATS;
  return function(number, fractionSize) {

    // if null or undefined pass it through
    return (number == null)
        ? number
        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,
                       fractionSize);
  };
}

var DECIMAL_SEP = '.';
function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
  if (isObject(number)) return '';

  var isNegative = number < 0;
  number = Math.abs(number);

  var isInfinity = number === Infinity;
  if (!isInfinity && !isFinite(number)) return '';

  var numStr = number + '',
      formatedText = '',
      hasExponent = false,
      parts = [];

  if (isInfinity) formatedText = '\u221e';

  if (!isInfinity && numStr.indexOf('e') !== -1) {
    var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);
    if (match && match[2] == '-' && match[3] > fractionSize + 1) {
      number = 0;
    } else {
      formatedText = numStr;
      hasExponent = true;
    }
  }

  if (!isInfinity && !hasExponent) {
    var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;

    // determine fractionSize if it is not specified
    if (isUndefined(fractionSize)) {
      fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);
    }

    // safely round numbers in JS without hitting imprecisions of floating-point arithmetics
    // inspired by:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
    number = +(Math.round(+(number.toString() + 'e' + fractionSize)).toString() + 'e' + -fractionSize);

    var fraction = ('' + number).split(DECIMAL_SEP);
    var whole = fraction[0];
    fraction = fraction[1] || '';

    var i, pos = 0,
        lgroup = pattern.lgSize,
        group = pattern.gSize;

    if (whole.length >= (lgroup + group)) {
      pos = whole.length - lgroup;
      for (i = 0; i < pos; i++) {
        if ((pos - i) % group === 0 && i !== 0) {
          formatedText += groupSep;
        }
        formatedText += whole.charAt(i);
      }
    }

    for (i = pos; i < whole.length; i++) {
      if ((whole.length - i) % lgroup === 0 && i !== 0) {
        formatedText += groupSep;
      }
      formatedText += whole.charAt(i);
    }

    // format fraction part.
    while (fraction.length < fractionSize) {
      fraction += '0';
    }

    if (fractionSize && fractionSize !== "0") formatedText += decimalSep + fraction.substr(0, fractionSize);
  } else {
    if (fractionSize > 0 && number < 1) {
      formatedText = number.toFixed(fractionSize);
      number = parseFloat(formatedText);
    }
  }

  if (number === 0) {
    isNegative = false;
  }

  parts.push(isNegative ? pattern.negPre : pattern.posPre,
             formatedText,
             isNegative ? pattern.negSuf : pattern.posSuf);
  return parts.join('');
}

function padNumber(num, digits, trim) {
  var neg = '';
  if (num < 0) {
    neg =  '-';
    num = -num;
  }
  num = '' + num;
  while (num.length < digits) num = '0' + num;
  if (trim) {
    num = num.substr(num.length - digits);
  }
  return neg + num;
}


function dateGetter(name, size, offset, trim) {
  offset = offset || 0;
  return function(date) {
    var value = date['get' + name]();
    if (offset > 0 || value > -offset) {
      value += offset;
    }
    if (value === 0 && offset == -12) value = 12;
    return padNumber(value, size, trim);
  };
}

function dateStrGetter(name, shortForm) {
  return function(date, formats) {
    var value = date['get' + name]();
    var get = uppercase(shortForm ? ('SHORT' + name) : name);

    return formats[get][value];
  };
}

function timeZoneGetter(date, formats, offset) {
  var zone = -1 * offset;
  var paddedZone = (zone >= 0) ? "+" : "";

  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +
                padNumber(Math.abs(zone % 60), 2);

  return paddedZone;
}

function getFirstThursdayOfYear(year) {
    // 0 = index of January
    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();
    // 4 = index of Thursday (+1 to account for 1st = 5)
    // 11 = index of *next* Thursday (+1 account for 1st = 12)
    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);
}

function getThursdayThisWeek(datetime) {
    return new Date(datetime.getFullYear(), datetime.getMonth(),
      // 4 = index of Thursday
      datetime.getDate() + (4 - datetime.getDay()));
}

function weekGetter(size) {
   return function(date) {
      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),
         thisThurs = getThursdayThisWeek(date);

      var diff = +thisThurs - +firstThurs,
         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week

      return padNumber(result, size);
   };
}

function ampmGetter(date, formats) {
  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
}

var DATE_FORMATS = {
  yyyy: dateGetter('FullYear', 4),
    yy: dateGetter('FullYear', 2, 0, true),
     y: dateGetter('FullYear', 1),
  MMMM: dateStrGetter('Month'),
   MMM: dateStrGetter('Month', true),
    MM: dateGetter('Month', 2, 1),
     M: dateGetter('Month', 1, 1),
    dd: dateGetter('Date', 2),
     d: dateGetter('Date', 1),
    HH: dateGetter('Hours', 2),
     H: dateGetter('Hours', 1),
    hh: dateGetter('Hours', 2, -12),
     h: dateGetter('Hours', 1, -12),
    mm: dateGetter('Minutes', 2),
     m: dateGetter('Minutes', 1),
    ss: dateGetter('Seconds', 2),
     s: dateGetter('Seconds', 1),
     // while ISO 8601 requires fractions to be prefixed with `.` or `,`
     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
   sss: dateGetter('Milliseconds', 3),
  EEEE: dateStrGetter('Day'),
   EEE: dateStrGetter('Day', true),
     a: ampmGetter,
     Z: timeZoneGetter,
    ww: weekGetter(2),
     w: weekGetter(1)
};

var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZEw']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|w+))(.*)/,
    NUMBER_STRING = /^\-?\d+$/;

/**
 * @ngdoc filter
 * @name date
 * @kind function
 *
 * @description
 *   Formats `date` to a string based on the requested `format`.
 *
 *   `format` string can be composed of the following elements:
 *
 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
 *   * `'MMMM'`: Month in year (January-December)
 *   * `'MMM'`: Month in year (Jan-Dec)
 *   * `'MM'`: Month in year, padded (01-12)
 *   * `'M'`: Month in year (1-12)
 *   * `'dd'`: Day in month, padded (01-31)
 *   * `'d'`: Day in month (1-31)
 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
 *   * `'EEE'`: Day in Week, (Sun-Sat)
 *   * `'HH'`: Hour in day, padded (00-23)
 *   * `'H'`: Hour in day (0-23)
 *   * `'hh'`: Hour in AM/PM, padded (01-12)
 *   * `'h'`: Hour in AM/PM, (1-12)
 *   * `'mm'`: Minute in hour, padded (00-59)
 *   * `'m'`: Minute in hour (0-59)
 *   * `'ss'`: Second in minute, padded (00-59)
 *   * `'s'`: Second in minute (0-59)
 *   * `'sss'`: Millisecond in second, padded (000-999)
 *   * `'a'`: AM/PM marker
 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
 *
 *   `format` string can also be one of the following predefined
 *   {@link guide/i18n localizable formats}:
 *
 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
 *     (e.g. Sep 3, 2010 12:05:08 PM)
 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
 *     (e.g. Friday, September 3, 2010)
 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
 *
 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
 *   (e.g. `"h 'o''clock'"`).
 *
 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
 *    specified in the string input, the time is considered to be in the local timezone.
 * @param {string=} format Formatting rules (see Description). If not specified,
 *    `mediumDate` is used.
 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the
 *    continental US time zone abbreviations, but for general use, use a time zone offset, for
 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
 *    If not specified, the timezone of the browser will be used.
 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
 *
 * @example
   <example>
     <file name="index.html">
       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
           <span>{{1288323623006 | date:'medium'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format date', function() {
         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
       });
     </file>
   </example>
 */
dateFilter.$inject = ['$locale'];
function dateFilter($locale) {


  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
                     // 1        2       3         4          5          6          7          8  9     10      11
  function jsonStringToDate(string) {
    var match;
    if (match = string.match(R_ISO8601_STR)) {
      var date = new Date(0),
          tzHour = 0,
          tzMin  = 0,
          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
          timeSetter = match[8] ? date.setUTCHours : date.setHours;

      if (match[9]) {
        tzHour = toInt(match[9] + match[10]);
        tzMin = toInt(match[9] + match[11]);
      }
      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
      var h = toInt(match[4] || 0) - tzHour;
      var m = toInt(match[5] || 0) - tzMin;
      var s = toInt(match[6] || 0);
      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
      timeSetter.call(date, h, m, s, ms);
      return date;
    }
    return string;
  }


  return function(date, format, timezone) {
    var text = '',
        parts = [],
        fn, match;

    format = format || 'mediumDate';
    format = $locale.DATETIME_FORMATS[format] || format;
    if (isString(date)) {
      date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);
    }

    if (isNumber(date)) {
      date = new Date(date);
    }

    if (!isDate(date) || !isFinite(date.getTime())) {
      return date;
    }

    while (format) {
      match = DATE_FORMATS_SPLIT.exec(format);
      if (match) {
        parts = concat(parts, match, 1);
        format = parts.pop();
      } else {
        parts.push(format);
        format = null;
      }
    }

    var dateTimezoneOffset = date.getTimezoneOffset();
    if (timezone) {
      var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
      if (!isNaN(requestedTimezoneOffset)) {
        date = new Date(date.getTime());
        date.setMinutes(date.getMinutes() + dateTimezoneOffset - requestedTimezoneOffset);
        dateTimezoneOffset = requestedTimezoneOffset;
      }
    }
    forEach(parts, function(value) {
      fn = DATE_FORMATS[value];
      text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset)
                 : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");
    });

    return text;
  };
}


/**
 * @ngdoc filter
 * @name json
 * @kind function
 *
 * @description
 *   Allows you to convert a JavaScript object into JSON string.
 *
 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
 *   the binding is automatically converted to JSON.
 *
 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
 * @returns {string} JSON string.
 *
 *
 * @example
   <example>
     <file name="index.html">
       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
     </file>
     <file name="protractor.js" type="protractor">
       it('should jsonify filtered objects', function() {
         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);
       });
     </file>
   </example>
 *
 */
function jsonFilter() {
  return function(object, spacing) {
    if (isUndefined(spacing)) {
        spacing = 2;
    }
    return toJson(object, spacing);
  };
}


/**
 * @ngdoc filter
 * @name lowercase
 * @kind function
 * @description
 * Converts string to lowercase.
 * @see angular.lowercase
 */
var lowercaseFilter = valueFn(lowercase);


/**
 * @ngdoc filter
 * @name uppercase
 * @kind function
 * @description
 * Converts string to uppercase.
 * @see angular.uppercase
 */
var uppercaseFilter = valueFn(uppercase);

/**
 * @ngdoc filter
 * @name limitTo
 * @kind function
 *
 * @description
 * Creates a new array or string containing only a specified number of elements. The elements
 * are taken from either the beginning or the end of the source array, string or number, as specified by
 * the value and sign (positive or negative) of `limit`. If a number is used as input, it is
 * converted to a string.
 *
 * @param {Array|string|number} input Source array, string or number to be limited.
 * @param {string|number} limit The length of the returned array or string. If the `limit` number
 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
 *     If the number is negative, `limit` number  of items from the end of the source array/string
 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,
 *     the input will be returned unchanged.
 * @param {(string|number)=} begin Index at which to begin limitation. As a negative index, `begin`
 *     indicates an offset from the end of `input`. Defaults to `0`.
 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array
 *     had less than `limit` elements.
 *
 * @example
   <example module="limitToExample">
     <file name="index.html">
       <script>
         angular.module('limitToExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.numbers = [1,2,3,4,5,6,7,8,9];
             $scope.letters = "abcdefghi";
             $scope.longNumber = 2345432342;
             $scope.numLimit = 3;
             $scope.letterLimit = 3;
             $scope.longNumberLimit = 3;
           }]);
       </script>
       <div ng-controller="ExampleController">
         Limit {{numbers}} to: <input type="number" step="1" ng-model="numLimit">
         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
         Limit {{letters}} to: <input type="number" step="1" ng-model="letterLimit">
         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
         Limit {{longNumber}} to: <input type="number" step="1" ng-model="longNumberLimit">
         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       var numLimitInput = element(by.model('numLimit'));
       var letterLimitInput = element(by.model('letterLimit'));
       var longNumberLimitInput = element(by.model('longNumberLimit'));
       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));

       it('should limit the number array to first three items', function() {
         expect(numLimitInput.getAttribute('value')).toBe('3');
         expect(letterLimitInput.getAttribute('value')).toBe('3');
         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
         expect(limitedLetters.getText()).toEqual('Output letters: abc');
         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
       });

       // There is a bug in safari and protractor that doesn't like the minus key
       // it('should update the output when -3 is entered', function() {
       //   numLimitInput.clear();
       //   numLimitInput.sendKeys('-3');
       //   letterLimitInput.clear();
       //   letterLimitInput.sendKeys('-3');
       //   longNumberLimitInput.clear();
       //   longNumberLimitInput.sendKeys('-3');
       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
       // });

       it('should not exceed the maximum size of input array', function() {
         numLimitInput.clear();
         numLimitInput.sendKeys('100');
         letterLimitInput.clear();
         letterLimitInput.sendKeys('100');
         longNumberLimitInput.clear();
         longNumberLimitInput.sendKeys('100');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
       });
     </file>
   </example>
*/
function limitToFilter() {
  return function(input, limit, begin) {
    if (Math.abs(Number(limit)) === Infinity) {
      limit = Number(limit);
    } else {
      limit = toInt(limit);
    }
    if (isNaN(limit)) return input;

    if (isNumber(input)) input = input.toString();
    if (!isArray(input) && !isString(input)) return input;

    begin = (!begin || isNaN(begin)) ? 0 : toInt(begin);
    begin = (begin < 0 && begin >= -input.length) ? input.length + begin : begin;

    if (limit >= 0) {
      return input.slice(begin, begin + limit);
    } else {
      if (begin === 0) {
        return input.slice(limit, input.length);
      } else {
        return input.slice(Math.max(0, begin + limit), begin);
      }
    }
  };
}

/**
 * @ngdoc filter
 * @name orderBy
 * @kind function
 *
 * @description
 * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically
 * for strings and numerically for numbers. Note: if you notice numbers are not being sorted
 * correctly, make sure they are actually being saved as numbers and not strings.
 *
 * @param {Array} array The array to sort.
 * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be
 *    used by the comparator to determine the order of elements.
 *
 *    Can be one of:
 *
 *    - `function`: Getter function. The result of this function will be sorted using the
 *      `<`, `=`, `>` operator.
 *    - `string`: An Angular expression. The result of this expression is used to compare elements
 *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by
 *      3 first characters of a property called `name`). The result of a constant expression
 *      is interpreted as a property name to be used in comparisons (for example `"special name"`
 *      to sort object by the value of their `special name` property). An expression can be
 *      optionally prefixed with `+` or `-` to control ascending or descending sort order
 *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array
 *      element itself is used to compare where sorting.
 *    - `Array`: An array of function or string predicates. The first predicate in the array
 *      is used for sorting, but when two items are equivalent, the next predicate is used.
 *
 *    If the predicate is missing or empty then it defaults to `'+'`.
 *
 * @param {boolean=} reverse Reverse the order of the array.
 * @returns {Array} Sorted copy of the source array.
 *
 * @example
   <example module="orderByExample">
     <file name="index.html">
       <script>
         angular.module('orderByExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.friends =
                 [{name:'John', phone:'555-1212', age:10},
                  {name:'Mary', phone:'555-9876', age:19},
                  {name:'Mike', phone:'555-4321', age:21},
                  {name:'Adam', phone:'555-5678', age:35},
                  {name:'Julie', phone:'555-8765', age:29}];
             $scope.predicate = '-age';
           }]);
       </script>
       <div ng-controller="ExampleController">
         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
         <hr/>
         [ <a href="" ng-click="predicate=''">unsorted</a> ]
         <table class="friend">
           <tr>
             <th><a href="" ng-click="predicate = 'name'; reverse=false">Name</a>
                 (<a href="" ng-click="predicate = '-name'; reverse=false">^</a>)</th>
             <th><a href="" ng-click="predicate = 'phone'; reverse=!reverse">Phone Number</a></th>
             <th><a href="" ng-click="predicate = 'age'; reverse=!reverse">Age</a></th>
           </tr>
           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
   </example>
 *
 * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the
 * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the
 * desired parameters.
 *
 * Example:
 *
 * @example
  <example module="orderByExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <table class="friend">
          <tr>
            <th><a href="" ng-click="reverse=false;order('name', false)">Name</a>
              (<a href="" ng-click="order('-name',false)">^</a>)</th>
            <th><a href="" ng-click="reverse=!reverse;order('phone', reverse)">Phone Number</a></th>
            <th><a href="" ng-click="reverse=!reverse;order('age',reverse)">Age</a></th>
          </tr>
          <tr ng-repeat="friend in friends">
            <td>{{friend.name}}</td>
            <td>{{friend.phone}}</td>
            <td>{{friend.age}}</td>
          </tr>
        </table>
      </div>
    </file>

    <file name="script.js">
      angular.module('orderByExample', [])
        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {
          var orderBy = $filter('orderBy');
          $scope.friends = [
            { name: 'John',    phone: '555-1212',    age: 10 },
            { name: 'Mary',    phone: '555-9876',    age: 19 },
            { name: 'Mike',    phone: '555-4321',    age: 21 },
            { name: 'Adam',    phone: '555-5678',    age: 35 },
            { name: 'Julie',   phone: '555-8765',    age: 29 }
          ];
          $scope.order = function(predicate, reverse) {
            $scope.friends = orderBy($scope.friends, predicate, reverse);
          };
          $scope.order('-age',false);
        }]);
    </file>
</example>
 */
orderByFilter.$inject = ['$parse'];
function orderByFilter($parse) {
  return function(array, sortPredicate, reverseOrder) {
    if (!(isArrayLike(array))) return array;
    sortPredicate = isArray(sortPredicate) ? sortPredicate : [sortPredicate];
    if (sortPredicate.length === 0) { sortPredicate = ['+']; }
    sortPredicate = sortPredicate.map(function(predicate) {
      var descending = false, get = predicate || identity;
      if (isString(predicate)) {
        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {
          descending = predicate.charAt(0) == '-';
          predicate = predicate.substring(1);
        }
        if (predicate === '') {
          // Effectively no predicate was passed so we compare identity
          return reverseComparator(compare, descending);
        }
        get = $parse(predicate);
        if (get.constant) {
          var key = get();
          return reverseComparator(function(a, b) {
            return compare(a[key], b[key]);
          }, descending);
        }
      }
      return reverseComparator(function(a, b) {
        return compare(get(a),get(b));
      }, descending);
    });
    return slice.call(array).sort(reverseComparator(comparator, reverseOrder));

    function comparator(o1, o2) {
      for (var i = 0; i < sortPredicate.length; i++) {
        var comp = sortPredicate[i](o1, o2);
        if (comp !== 0) return comp;
      }
      return 0;
    }
    function reverseComparator(comp, descending) {
      return descending
          ? function(a, b) {return comp(b,a);}
          : comp;
    }

    function isPrimitive(value) {
      switch (typeof value) {
        case 'number': /* falls through */
        case 'boolean': /* falls through */
        case 'string':
          return true;
        default:
          return false;
      }
    }

    function objectToString(value) {
      if (value === null) return 'null';
      if (typeof value.valueOf === 'function') {
        value = value.valueOf();
        if (isPrimitive(value)) return value;
      }
      if (typeof value.toString === 'function') {
        value = value.toString();
        if (isPrimitive(value)) return value;
      }
      return '';
    }

    function compare(v1, v2) {
      var t1 = typeof v1;
      var t2 = typeof v2;
      if (t1 === t2 && t1 === "object") {
        v1 = objectToString(v1);
        v2 = objectToString(v2);
      }
      if (t1 === t2) {
        if (t1 === "string") {
           v1 = v1.toLowerCase();
           v2 = v2.toLowerCase();
        }
        if (v1 === v2) return 0;
        return v1 < v2 ? -1 : 1;
      } else {
        return t1 < t2 ? -1 : 1;
      }
    }
  };
}

function ngDirective(directive) {
  if (isFunction(directive)) {
    directive = {
      link: directive
    };
  }
  directive.restrict = directive.restrict || 'AC';
  return valueFn(directive);
}

/**
 * @ngdoc directive
 * @name a
 * @restrict E
 *
 * @description
 * Modifies the default behavior of the html A tag so that the default action is prevented when
 * the href attribute is empty.
 *
 * This change permits the easy creation of action links with the `ngClick` directive
 * without changing the location or causing page reloads, e.g.:
 * `<a href="" ng-click="list.addItem()">Add Item</a>`
 */
var htmlAnchorDirective = valueFn({
  restrict: 'E',
  compile: function(element, attr) {
    if (!attr.href && !attr.xlinkHref) {
      return function(scope, element) {
        // If the linked element is not an anchor tag anymore, do nothing
        if (element[0].nodeName.toLowerCase() !== 'a') return;

        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
                   'xlink:href' : 'href';
        element.on('click', function(event) {
          // if we have no href url, then don't navigate anywhere.
          if (!element.attr(href)) {
            event.preventDefault();
          }
        });
      };
    }
  }
});

/**
 * @ngdoc directive
 * @name ngHref
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in an href attribute will
 * make the link go to the wrong URL if the user clicks it before
 * Angular has a chance to replace the `{{hash}}` markup with its
 * value. Until Angular replaces the markup the link will be broken
 * and will most likely return a 404 error. The `ngHref` directive
 * solves this problem.
 *
 * The wrong way to write it:
 * ```html
 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
 * ```
 *
 * @element A
 * @param {template} ngHref any string which can contain `{{}}` markup.
 *
 * @example
 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
 * in links and their different behaviors:
    <example>
      <file name="index.html">
        <input ng-model="value" /><br />
        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
      </file>
      <file name="protractor.js" type="protractor">
        it('should execute ng-click but not reload when href without value', function() {
          element(by.id('link-1')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when href empty string', function() {
          element(by.id('link-2')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click and change url when ng-href specified', function() {
          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);

          element(by.id('link-3')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.

          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/123$/);
            });
          }, 5000, 'page should navigate to /123');
        });

        it('should execute ng-click but not reload when href empty string and name specified', function() {
          element(by.id('link-4')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when no href but name specified', function() {
          element(by.id('link-5')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
        });

        it('should only change url when only ng-href', function() {
          element(by.model('value')).clear();
          element(by.model('value')).sendKeys('6');
          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);

          element(by.id('link-6')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.
          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/6$/);
            });
          }, 5000, 'page should navigate to /6');
        });
      </file>
    </example>
 */

/**
 * @ngdoc directive
 * @name ngSrc
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrc` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img src="http://www.gravatar.com/avatar/{{hash}}"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}"/>
 * ```
 *
 * @element IMG
 * @param {template} ngSrc any string which can contain `{{}}` markup.
 */

/**
 * @ngdoc directive
 * @name ngSrcset
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrcset` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
 * ```
 *
 * @element IMG
 * @param {template} ngSrcset any string which can contain `{{}}` markup.
 */

/**
 * @ngdoc directive
 * @name ngDisabled
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * We shouldn't do this, because it will make the button enabled on Chrome/Firefox but not on IE8 and older IEs:
 * ```html
 * <div ng-init="scope = { isDisabled: false }">
 *  <button disabled="{{scope.isDisabled}}">Disabled</button>
 * </div>
 * ```
 *
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as disabled. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngDisabled` directive solves this problem for the `disabled` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 *
 * @example
    <example>
      <file name="index.html">
        Click me to toggle: <input type="checkbox" ng-model="checked"><br/>
        <button ng-model="button" ng-disabled="checked">Button</button>
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle button', function() {
          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
 *     then special attribute "disabled" will be set on the element
 */


/**
 * @ngdoc directive
 * @name ngChecked
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as checked. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngChecked` directive solves this problem for the `checked` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
    <example>
      <file name="index.html">
        Check me to check both: <input type="checkbox" ng-model="master"><br/>
        <input id="checkSlave" type="checkbox" ng-checked="master">
      </file>
      <file name="protractor.js" type="protractor">
        it('should check both checkBoxes', function() {
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
          element(by.model('master')).click();
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
 *     then special attribute "checked" will be set on the element
 */


/**
 * @ngdoc directive
 * @name ngReadonly
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as readonly. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngReadonly` directive solves this problem for the `readonly` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
    <example>
      <file name="index.html">
        Check me to make text readonly: <input type="checkbox" ng-model="checked"><br/>
        <input type="text" ng-readonly="checked" value="I'm Angular"/>
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle readonly attr', function() {
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
 *     then special attribute "readonly" will be set on the element
 */


/**
 * @ngdoc directive
 * @name ngSelected
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as selected. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngSelected` directive solves this problem for the `selected` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 *
 * @example
    <example>
      <file name="index.html">
        Check me to select: <input type="checkbox" ng-model="selected"><br/>
        <select>
          <option>Hello!</option>
          <option id="greet" ng-selected="selected">Greetings!</option>
        </select>
      </file>
      <file name="protractor.js" type="protractor">
        it('should select Greetings!', function() {
          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
          element(by.model('selected')).click();
          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element OPTION
 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
 *     then special attribute "selected" will be set on the element
 */

/**
 * @ngdoc directive
 * @name ngOpen
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as open. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngOpen` directive solves this problem for the `open` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
     <example>
       <file name="index.html">
         Check me check multiple: <input type="checkbox" ng-model="open"><br/>
         <details id="details" ng-open="open">
            <summary>Show/Hide me</summary>
         </details>
       </file>
       <file name="protractor.js" type="protractor">
         it('should toggle open', function() {
           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
           element(by.model('open')).click();
           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
         });
       </file>
     </example>
 *
 * @element DETAILS
 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
 *     then special attribute "open" will be set on the element
 */

var ngAttributeAliasDirectives = {};

// boolean attrs are evaluated
forEach(BOOLEAN_ATTR, function(propName, attrName) {
  // binding to multiple is not supported
  if (propName == "multiple") return;

  function defaultLinkFn(scope, element, attr) {
    scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
      attr.$set(attrName, !!value);
    });
  }

  var normalized = directiveNormalize('ng-' + attrName);
  var linkFn = defaultLinkFn;

  if (propName === 'checked') {
    linkFn = function(scope, element, attr) {
      // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input
      if (attr.ngModel !== attr[normalized]) {
        defaultLinkFn(scope, element, attr);
      }
    };
  }

  ngAttributeAliasDirectives[normalized] = function() {
    return {
      restrict: 'A',
      priority: 100,
      link: linkFn
    };
  };
});

// aliased input attrs are evaluated
forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {
  ngAttributeAliasDirectives[ngAttr] = function() {
    return {
      priority: 100,
      link: function(scope, element, attr) {
        //special case ngPattern when a literal regular expression value
        //is used as the expression (this way we don't have to watch anything).
        if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) == "/") {
          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
          if (match) {
            attr.$set("ngPattern", new RegExp(match[1], match[2]));
            return;
          }
        }

        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
          attr.$set(ngAttr, value);
        });
      }
    };
  };
});

// ng-src, ng-srcset, ng-href are interpolated
forEach(['src', 'srcset', 'href'], function(attrName) {
  var normalized = directiveNormalize('ng-' + attrName);
  ngAttributeAliasDirectives[normalized] = function() {
    return {
      priority: 99, // it needs to run after the attributes are interpolated
      link: function(scope, element, attr) {
        var propName = attrName,
            name = attrName;

        if (attrName === 'href' &&
            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
          name = 'xlinkHref';
          attr.$attr[name] = 'xlink:href';
          propName = null;
        }

        attr.$observe(normalized, function(value) {
          if (!value) {
            if (attrName === 'href') {
              attr.$set(name, null);
            }
            return;
          }

          attr.$set(name, value);

          // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
          // to set the property as well to achieve the desired effect.
          // we use attr[attrName] value since $set can sanitize the url.
          if (msie && propName) element.prop(propName, attr[name]);
        });
      }
    };
  };
});

/* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true
 */
var nullFormCtrl = {
  $addControl: noop,
  $$renameControl: nullFormRenameControl,
  $removeControl: noop,
  $setValidity: noop,
  $setDirty: noop,
  $setPristine: noop,
  $setSubmitted: noop
},
SUBMITTED_CLASS = 'ng-submitted';

function nullFormRenameControl(control, name) {
  control.$name = name;
}

/**
 * @ngdoc type
 * @name form.FormController
 *
 * @property {boolean} $pristine True if user has not interacted with the form yet.
 * @property {boolean} $dirty True if user has already interacted with the form.
 * @property {boolean} $valid True if all of the containing forms and controls are valid.
 * @property {boolean} $invalid True if at least one containing control or form is invalid.
 * @property {boolean} $submitted True if user has submitted the form even if its invalid.
 *
 * @property {Object} $error Is an object hash, containing references to controls or
 *  forms with failing validators, where:
 *
 *  - keys are validation tokens (error names),
 *  - values are arrays of controls or forms that have a failing validator for given error name.
 *
 *  Built-in validation tokens:
 *
 *  - `email`
 *  - `max`
 *  - `maxlength`
 *  - `min`
 *  - `minlength`
 *  - `number`
 *  - `pattern`
 *  - `required`
 *  - `url`
 *  - `date`
 *  - `datetimelocal`
 *  - `time`
 *  - `week`
 *  - `month`
 *
 * @description
 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
 * such as being valid/invalid or dirty/pristine.
 *
 * Each {@link ng.directive:form form} directive creates an instance
 * of `FormController`.
 *
 */
//asks for $scope to fool the BC controller module
FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];
function FormController(element, attrs, $scope, $animate, $interpolate) {
  var form = this,
      controls = [];

  var parentForm = form.$$parentForm = element.parent().controller('form') || nullFormCtrl;

  // init state
  form.$error = {};
  form.$$success = {};
  form.$pending = undefined;
  form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);
  form.$dirty = false;
  form.$pristine = true;
  form.$valid = true;
  form.$invalid = false;
  form.$submitted = false;

  parentForm.$addControl(form);

  /**
   * @ngdoc method
   * @name form.FormController#$rollbackViewValue
   *
   * @description
   * Rollback all form controls pending updates to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. This method is typically needed by the reset button of
   * a form that uses `ng-model-options` to pend updates.
   */
  form.$rollbackViewValue = function() {
    forEach(controls, function(control) {
      control.$rollbackViewValue();
    });
  };

  /**
   * @ngdoc method
   * @name form.FormController#$commitViewValue
   *
   * @description
   * Commit all form controls pending updates to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
   * usually handles calling this in response to input events.
   */
  form.$commitViewValue = function() {
    forEach(controls, function(control) {
      control.$commitViewValue();
    });
  };

  /**
   * @ngdoc method
   * @name form.FormController#$addControl
   *
   * @description
   * Register a control with the form.
   *
   * Input elements using ngModelController do this automatically when they are linked.
   */
  form.$addControl = function(control) {
    // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
    // and not added to the scope.  Now we throw an error.
    assertNotHasOwnProperty(control.$name, 'input');
    controls.push(control);

    if (control.$name) {
      form[control.$name] = control;
    }
  };

  // Private API: rename a form control
  form.$$renameControl = function(control, newName) {
    var oldName = control.$name;

    if (form[oldName] === control) {
      delete form[oldName];
    }
    form[newName] = control;
    control.$name = newName;
  };

  /**
   * @ngdoc method
   * @name form.FormController#$removeControl
   *
   * @description
   * Deregister a control from the form.
   *
   * Input elements using ngModelController do this automatically when they are destroyed.
   */
  form.$removeControl = function(control) {
    if (control.$name && form[control.$name] === control) {
      delete form[control.$name];
    }
    forEach(form.$pending, function(value, name) {
      form.$setValidity(name, null, control);
    });
    forEach(form.$error, function(value, name) {
      form.$setValidity(name, null, control);
    });
    forEach(form.$$success, function(value, name) {
      form.$setValidity(name, null, control);
    });

    arrayRemove(controls, control);
  };


  /**
   * @ngdoc method
   * @name form.FormController#$setValidity
   *
   * @description
   * Sets the validity of a form control.
   *
   * This method will also propagate to parent forms.
   */
  addSetValidityMethod({
    ctrl: this,
    $element: element,
    set: function(object, property, controller) {
      var list = object[property];
      if (!list) {
        object[property] = [controller];
      } else {
        var index = list.indexOf(controller);
        if (index === -1) {
          list.push(controller);
        }
      }
    },
    unset: function(object, property, controller) {
      var list = object[property];
      if (!list) {
        return;
      }
      arrayRemove(list, controller);
      if (list.length === 0) {
        delete object[property];
      }
    },
    parentForm: parentForm,
    $animate: $animate
  });

  /**
   * @ngdoc method
   * @name form.FormController#$setDirty
   *
   * @description
   * Sets the form to a dirty state.
   *
   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
   * state (ng-dirty class). This method will also propagate to parent forms.
   */
  form.$setDirty = function() {
    $animate.removeClass(element, PRISTINE_CLASS);
    $animate.addClass(element, DIRTY_CLASS);
    form.$dirty = true;
    form.$pristine = false;
    parentForm.$setDirty();
  };

  /**
   * @ngdoc method
   * @name form.FormController#$setPristine
   *
   * @description
   * Sets the form to its pristine state.
   *
   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
   * state (ng-pristine class). This method will also propagate to all the controls contained
   * in this form.
   *
   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
   * saving or resetting it.
   */
  form.$setPristine = function() {
    $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);
    form.$dirty = false;
    form.$pristine = true;
    form.$submitted = false;
    forEach(controls, function(control) {
      control.$setPristine();
    });
  };

  /**
   * @ngdoc method
   * @name form.FormController#$setUntouched
   *
   * @description
   * Sets the form to its untouched state.
   *
   * This method can be called to remove the 'ng-touched' class and set the form controls to their
   * untouched state (ng-untouched class).
   *
   * Setting a form controls back to their untouched state is often useful when setting the form
   * back to its pristine state.
   */
  form.$setUntouched = function() {
    forEach(controls, function(control) {
      control.$setUntouched();
    });
  };

  /**
   * @ngdoc method
   * @name form.FormController#$setSubmitted
   *
   * @description
   * Sets the form to its submitted state.
   */
  form.$setSubmitted = function() {
    $animate.addClass(element, SUBMITTED_CLASS);
    form.$submitted = true;
    parentForm.$setSubmitted();
  };
}

/**
 * @ngdoc directive
 * @name ngForm
 * @restrict EAC
 *
 * @description
 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
 * sub-group of controls needs to be determined.
 *
 * Note: the purpose of `ngForm` is to group controls,
 * but not to be a replacement for the `<form>` tag with all of its capabilities
 * (e.g. posting to the server, ...).
 *
 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 *
 */

 /**
 * @ngdoc directive
 * @name form
 * @restrict E
 *
 * @description
 * Directive that instantiates
 * {@link form.FormController FormController}.
 *
 * If the `name` attribute is specified, the form controller is published onto the current scope under
 * this name.
 *
 * # Alias: {@link ng.directive:ngForm `ngForm`}
 *
 * In Angular forms can be nested. This means that the outer form is valid when all of the child
 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to
 * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when
 * using Angular validation directives in forms that are dynamically generated using the
 * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`
 * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an
 * `ngForm` directive and nest these in an outer `form` element.
 *
 *
 * # CSS classes
 *  - `ng-valid` is set if the form is valid.
 *  - `ng-invalid` is set if the form is invalid.
 *  - `ng-pristine` is set if the form is pristine.
 *  - `ng-dirty` is set if the form is dirty.
 *  - `ng-submitted` is set if the form was submitted.
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 *
 * # Submitting a form and preventing the default action
 *
 * Since the role of forms in client-side Angular applications is different than in classical
 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
 * page reload that sends the data to the server. Instead some javascript logic should be triggered
 * to handle the form submission in an application-specific way.
 *
 * For this reason, Angular prevents the default action (form submission to the server) unless the
 * `<form>` element has an `action` attribute specified.
 *
 * You can use one of the following two ways to specify what javascript method should be called when
 * a form is submitted:
 *
 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
 * - {@link ng.directive:ngClick ngClick} directive on the first
  *  button or input field of type submit (input[type=submit])
 *
 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
 * or {@link ng.directive:ngClick ngClick} directives.
 * This is because of the following form submission rules in the HTML specification:
 *
 * - If a form has only one input field then hitting enter in this field triggers form submit
 * (`ngSubmit`)
 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
 * doesn't trigger submit
 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
 *
 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
 * to have access to the updated model.
 *
 * ## Animation Hooks
 *
 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
 * other validations that are performed within the form. Animations in ngForm are similar to how
 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
 * as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style a form element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-form {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-form.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
      <file name="index.html">
       <script>
         angular.module('formExample', [])
           .controller('FormController', ['$scope', function($scope) {
             $scope.userType = 'guest';
           }]);
       </script>
       <style>
        .my-form {
          -webkit-transition:all linear 0.5s;
          transition:all linear 0.5s;
          background: transparent;
        }
        .my-form.ng-invalid {
          background: red;
        }
       </style>
       <form name="myForm" ng-controller="FormController" class="my-form">
         userType: <input name="input" ng-model="userType" required>
         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
         <tt>userType = {{userType}}</tt><br>
         <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br>
         <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        it('should initialize to model', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));

          expect(userType.getText()).toContain('guest');
          expect(valid.getText()).toContain('true');
        });

        it('should be invalid if empty', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));
          var userInput = element(by.model('userType'));

          userInput.clear();
          userInput.sendKeys('');

          expect(userType.getText()).toEqual('userType =');
          expect(valid.getText()).toContain('false');
        });
      </file>
    </example>
 *
 * @param {string=} name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 */
var formDirectiveFactory = function(isNgForm) {
  return ['$timeout', function($timeout) {
    var formDirective = {
      name: 'form',
      restrict: isNgForm ? 'EAC' : 'E',
      controller: FormController,
      compile: function ngFormCompile(formElement) {
        // Setup initial state of the control
        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);

        return {
          pre: function ngFormPreLink(scope, formElement, attr, controller) {
            // if `action` attr is not present on the form, prevent the default action (submission)
            if (!('action' in attr)) {
              // we can't use jq events because if a form is destroyed during submission the default
              // action is not prevented. see #1238
              //
              // IE 9 is not affected because it doesn't fire a submit event and try to do a full
              // page reload if the form was destroyed by submission of the form via a click handler
              // on a button in the form. Looks like an IE9 specific bug.
              var handleFormSubmission = function(event) {
                scope.$apply(function() {
                  controller.$commitViewValue();
                  controller.$setSubmitted();
                });

                event.preventDefault();
              };

              addEventListenerFn(formElement[0], 'submit', handleFormSubmission);

              // unregister the preventDefault listener so that we don't not leak memory but in a
              // way that will achieve the prevention of the default action.
              formElement.on('$destroy', function() {
                $timeout(function() {
                  removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);
                }, 0, false);
              });
            }

            var parentFormCtrl = controller.$$parentForm,
                alias = controller.$name;

            if (alias) {
              setter(scope, alias, controller, alias);
              attr.$observe(attr.name ? 'name' : 'ngForm', function(newValue) {
                if (alias === newValue) return;
                setter(scope, alias, undefined, alias);
                alias = newValue;
                setter(scope, alias, controller, alias);
                parentFormCtrl.$$renameControl(controller, alias);
              });
            }
            formElement.on('$destroy', function() {
              parentFormCtrl.$removeControl(controller);
              if (alias) {
                setter(scope, alias, undefined, alias);
              }
              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
            });
          }
        };
      }
    };

    return formDirective;
  }];
};

var formDirective = formDirectiveFactory();
var ngFormDirective = formDirectiveFactory(true);

/* global VALID_CLASS: false,
  INVALID_CLASS: false,
  PRISTINE_CLASS: false,
  DIRTY_CLASS: false,
  UNTOUCHED_CLASS: false,
  TOUCHED_CLASS: false,
  $ngModelMinErr: false,
*/

// Regex code is obtained from SO: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
var ISO_DATE_REGEXP = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/;
var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;
var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;
var DATE_REGEXP = /^(\d{4})-(\d{2})-(\d{2})$/;
var DATETIMELOCAL_REGEXP = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
var WEEK_REGEXP = /^(\d{4})-W(\d\d)$/;
var MONTH_REGEXP = /^(\d{4})-(\d\d)$/;
var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;

var inputType = {

  /**
   * @ngdoc input
   * @name input[text]
   *
   * @description
   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
   *
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Adds `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
   *    a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object then this is used directly.
   *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`
   *    characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
   *    This parameter is ignored for input[type=password] controls, which will never trim the
   *    input.
   *
   * @example
      <example name="text-input-directive" module="textInputExample">
        <file name="index.html">
         <script>
           angular.module('textInputExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.example = {
                 text: 'guest',
                 word: /^\s*\w*\s*$/
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           Single word: <input type="text" name="input" ng-model="example.text"
                               ng-pattern="example.word" required ng-trim="false">
           <span class="error" ng-show="myForm.input.$error.required">
             Required!</span>
           <span class="error" ng-show="myForm.input.$error.pattern">
             Single word only!</span>

           <tt>text = {{example.text}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('example.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('example.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('guest');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if multi word', function() {
            input.clear();
            input.sendKeys('hello world');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'text': textInputType,

    /**
     * @ngdoc input
     * @name input[date]
     *
     * @description
     * Input with date validation and transformation. In browsers that do not yet support
     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
     * modern browsers do not yet support this input type, it is important to provide cues to users on the
     * expected input format via a placeholder or label.
     *
     * The model must always be a Date object, otherwise Angular will throw an error.
     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
     *
     * The timezone to be used to read/write the `Date` instance in the model can be defined using
     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
     * valid ISO date string (yyyy-MM-dd).
     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
     * a valid ISO date string (yyyy-MM-dd).
     * @param {string=} required Sets `required` validation error key if the value is not entered.
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
     *    `required` when you want to data-bind to the `required` attribute.
     * @param {string=} ngChange Angular expression to be executed when input changes due to user
     *    interaction with the input element.
     *
     * @example
     <example name="date-input-directive" module="dateInputExample">
     <file name="index.html">
       <script>
          angular.module('dateInputExample', [])
            .controller('DateController', ['$scope', function($scope) {
              $scope.example = {
                value: new Date(2013, 9, 22)
              };
            }]);
       </script>
       <form name="myForm" ng-controller="DateController as dateCtrl">
          Pick a date in 2013:
          <input type="date" id="exampleInput" name="input" ng-model="example.value"
              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
          <span class="error" ng-show="myForm.input.$error.required">
              Required!</span>
          <span class="error" ng-show="myForm.input.$error.date">
              Not a valid date!</span>
           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
       </form>
     </file>
     <file name="protractor.js" type="protractor">
        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));
        var valid = element(by.binding('myForm.input.$valid'));
        var input = element(by.model('example.value'));

        // currently protractor/webdriver does not support
        // sending keys to all known HTML5 input controls
        // for various browsers (see https://github.com/angular/protractor/issues/562).
        function setInput(val) {
          // set the value of the element and force validation.
          var scr = "var ipt = document.getElementById('exampleInput'); " +
          "ipt.value = '" + val + "';" +
          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
          browser.executeScript(scr);
        }

        it('should initialize to model', function() {
          expect(value.getText()).toContain('2013-10-22');
          expect(valid.getText()).toContain('myForm.input.$valid = true');
        });

        it('should be invalid if empty', function() {
          setInput('');
          expect(value.getText()).toEqual('value =');
          expect(valid.getText()).toContain('myForm.input.$valid = false');
        });

        it('should be invalid if over max', function() {
          setInput('2015-01-01');
          expect(value.getText()).toContain('');
          expect(valid.getText()).toContain('myForm.input.$valid = false');
        });
     </file>
     </example>
     */
  'date': createDateInputType('date', DATE_REGEXP,
         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),
         'yyyy-MM-dd'),

   /**
    * @ngdoc input
    * @name input[datetime-local]
    *
    * @description
    * Input with datetime validation and transformation. In browsers that do not yet support
    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
    *
    * The model must always be a Date object, otherwise Angular will throw an error.
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
    *
    * The timezone to be used to read/write the `Date` instance in the model can be defined using
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
    *
    * @param {string} ngModel Assignable angular expression to data-bind to.
    * @param {string=} name Property name of the form under which the control is published.
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
    * valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
    * a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).
    * @param {string=} required Sets `required` validation error key if the value is not entered.
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
    *    `required` when you want to data-bind to the `required` attribute.
    * @param {string=} ngChange Angular expression to be executed when input changes due to user
    *    interaction with the input element.
    *
    * @example
    <example name="datetimelocal-input-directive" module="dateExample">
    <file name="index.html">
      <script>
        angular.module('dateExample', [])
          .controller('DateController', ['$scope', function($scope) {
            $scope.example = {
              value: new Date(2010, 11, 28, 14, 57)
            };
          }]);
      </script>
      <form name="myForm" ng-controller="DateController as dateCtrl">
        Pick a date between in 2013:
        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"
            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
        <span class="error" ng-show="myForm.input.$error.required">
            Required!</span>
        <span class="error" ng-show="myForm.input.$error.datetimelocal">
            Not a valid date!</span>
        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));
      var valid = element(by.binding('myForm.input.$valid'));
      var input = element(by.model('example.value'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2010-12-28T14:57:00');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-01-01T23:59:00');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
    </file>
    </example>
    */
  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,
      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),
      'yyyy-MM-ddTHH:mm:ss.sss'),

  /**
   * @ngdoc input
   * @name input[time]
   *
   * @description
   * Input with time validation and transformation. In browsers that do not yet support
   * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
   *
   * The model must always be a Date object, otherwise Angular will throw an error.
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
   *
   * The timezone to be used to read/write the `Date` instance in the model can be defined using
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
   * valid ISO time format (HH:mm:ss).
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be a
   * valid ISO time format (HH:mm:ss).
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
   <example name="time-input-directive" module="timeExample">
   <file name="index.html">
     <script>
      angular.module('timeExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(1970, 0, 1, 14, 57, 0)
          };
        }]);
     </script>
     <form name="myForm" ng-controller="DateController as dateCtrl">
        Pick a between 8am and 5pm:
        <input type="time" id="exampleInput" name="input" ng-model="example.value"
            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
        <span class="error" ng-show="myForm.input.$error.required">
            Required!</span>
        <span class="error" ng-show="myForm.input.$error.time">
            Not a valid date!</span>
        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     </form>
   </file>
   <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "HH:mm:ss"'));
      var valid = element(by.binding('myForm.input.$valid'));
      var input = element(by.model('example.value'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('14:57:00');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('23:59:00');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
   </file>
   </example>
   */
  'time': createDateInputType('time', TIME_REGEXP,
      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),
     'HH:mm:ss.sss'),

   /**
    * @ngdoc input
    * @name input[week]
    *
    * @description
    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
    * week format (yyyy-W##), for example: `2013-W02`.
    *
    * The model must always be a Date object, otherwise Angular will throw an error.
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
    *
    * The timezone to be used to read/write the `Date` instance in the model can be defined using
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
    *
    * @param {string} ngModel Assignable angular expression to data-bind to.
    * @param {string=} name Property name of the form under which the control is published.
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
    * valid ISO week format (yyyy-W##).
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
    * a valid ISO week format (yyyy-W##).
    * @param {string=} required Sets `required` validation error key if the value is not entered.
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
    *    `required` when you want to data-bind to the `required` attribute.
    * @param {string=} ngChange Angular expression to be executed when input changes due to user
    *    interaction with the input element.
    *
    * @example
    <example name="week-input-directive" module="weekExample">
    <file name="index.html">
      <script>
      angular.module('weekExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(2013, 0, 3)
          };
        }]);
      </script>
      <form name="myForm" ng-controller="DateController as dateCtrl">
        Pick a date between in 2013:
        <input id="exampleInput" type="week" name="input" ng-model="example.value"
            placeholder="YYYY-W##" min="2012-W32" max="2013-W52" required />
        <span class="error" ng-show="myForm.input.$error.required">
            Required!</span>
        <span class="error" ng-show="myForm.input.$error.week">
            Not a valid date!</span>
        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-Www"'));
      var valid = element(by.binding('myForm.input.$valid'));
      var input = element(by.model('example.value'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2013-W01');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-W01');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
    </file>
    </example>
    */
  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),

  /**
   * @ngdoc input
   * @name input[month]
   *
   * @description
   * Input with month validation and transformation. In browsers that do not yet support
   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
   * month format (yyyy-MM), for example: `2009-01`.
   *
   * The model must always be a Date object, otherwise Angular will throw an error.
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
   * If the model is not set to the first of the month, the next view to model update will set it
   * to the first of the month.
   *
   * The timezone to be used to read/write the `Date` instance in the model can be defined using
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be
   * a valid ISO month format (yyyy-MM).
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must
   * be a valid ISO month format (yyyy-MM).
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
   <example name="month-input-directive" module="monthExample">
   <file name="index.html">
     <script>
      angular.module('monthExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(2013, 9, 1)
          };
        }]);
     </script>
     <form name="myForm" ng-controller="DateController as dateCtrl">
       Pick a month in 2013:
       <input id="exampleInput" type="month" name="input" ng-model="example.value"
          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
       <span class="error" ng-show="myForm.input.$error.required">
          Required!</span>
       <span class="error" ng-show="myForm.input.$error.month">
          Not a valid month!</span>
       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>
       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     </form>
   </file>
   <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-MM"'));
      var valid = element(by.binding('myForm.input.$valid'));
      var input = element(by.model('example.value'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2013-10');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-01');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
   </file>
   </example>
   */
  'month': createDateInputType('month', MONTH_REGEXP,
     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),
     'yyyy-MM'),

  /**
   * @ngdoc input
   * @name input[number]
   *
   * @description
   * Text input with number validation and transformation. Sets the `number` validation
   * error if not a valid number.
   *
   * The model must always be a number, otherwise Angular will throw an error.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
   *    a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object then this is used directly.
   *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`
   *    characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="number-input-directive" module="numberExample">
        <file name="index.html">
         <script>
           angular.module('numberExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.example = {
                 value: 12
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           Number: <input type="number" name="input" ng-model="example.value"
                          min="0" max="99" required>
           <span class="error" ng-show="myForm.input.$error.required">
             Required!</span>
           <span class="error" ng-show="myForm.input.$error.number">
             Not valid number!</span>
           <tt>value = {{example.value}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var value = element(by.binding('example.value'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('example.value'));

          it('should initialize to model', function() {
            expect(value.getText()).toContain('12');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if over max', function() {
            input.clear();
            input.sendKeys('123');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'number': numberInputType,


  /**
   * @ngdoc input
   * @name input[url]
   *
   * @description
   * Text input with URL validation. Sets the `url` validation error key if the content is not a
   * valid URL.
   *
   * <div class="alert alert-warning">
   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
   * the built-in validators (see the {@link guide/forms Forms guide})
   * </div>
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
   *    a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object then this is used directly.
   *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`
   *    characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="url-input-directive" module="urlExample">
        <file name="index.html">
         <script>
           angular.module('urlExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.url = {
                 text: 'http://google.com'
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           URL: <input type="url" name="input" ng-model="url.text" required>
           <span class="error" ng-show="myForm.input.$error.required">
             Required!</span>
           <span class="error" ng-show="myForm.input.$error.url">
             Not valid url!</span>
           <tt>text = {{url.text}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('url.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('url.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('http://google.com');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if not url', function() {
            input.clear();
            input.sendKeys('box');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'url': urlInputType,


  /**
   * @ngdoc input
   * @name input[email]
   *
   * @description
   * Text input with email validation. Sets the `email` validation error key if not a valid email
   * address.
   *
   * <div class="alert alert-warning">
   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can
   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})
   * </div>
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
   *    a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object then this is used directly.
   *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`
   *    characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="email-input-directive" module="emailExample">
        <file name="index.html">
         <script>
           angular.module('emailExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.email = {
                 text: 'me@example.com'
               };
             }]);
         </script>
           <form name="myForm" ng-controller="ExampleController">
             Email: <input type="email" name="input" ng-model="email.text" required>
             <span class="error" ng-show="myForm.input.$error.required">
               Required!</span>
             <span class="error" ng-show="myForm.input.$error.email">
               Not valid email!</span>
             <tt>text = {{email.text}}</tt><br/>
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
           </form>
         </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('email.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('email.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('me@example.com');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if not email', function() {
            input.clear();
            input.sendKeys('xxx');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'email': emailInputType,


  /**
   * @ngdoc input
   * @name input[radio]
   *
   * @description
   * HTML radio button.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string} value The value to which the expression should be set when selected.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   * @param {string} ngValue Angular expression which sets the value to which the expression should
   *    be set when selected.
   *
   * @example
      <example name="radio-input-directive" module="radioExample">
        <file name="index.html">
         <script>
           angular.module('radioExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.color = {
                 name: 'blue'
               };
               $scope.specialValue = {
                 "id": "12345",
                 "value": "green"
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <input type="radio" ng-model="color.name" value="red">  Red <br/>
           <input type="radio" ng-model="color.name" ng-value="specialValue"> Green <br/>
           <input type="radio" ng-model="color.name" value="blue"> Blue <br/>
           <tt>color = {{color.name | json}}</tt><br/>
          </form>
          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
        </file>
        <file name="protractor.js" type="protractor">
          it('should change state', function() {
            var color = element(by.binding('color.name'));

            expect(color.getText()).toContain('blue');

            element.all(by.model('color.name')).get(0).click();

            expect(color.getText()).toContain('red');
          });
        </file>
      </example>
   */
  'radio': radioInputType,


  /**
   * @ngdoc input
   * @name input[checkbox]
   *
   * @description
   * HTML checkbox.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="checkbox-input-directive" module="checkboxExample">
        <file name="index.html">
         <script>
           angular.module('checkboxExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.checkboxModel = {
                value1 : true,
                value2 : 'YES'
              };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           Value1: <input type="checkbox" ng-model="checkboxModel.value1"> <br/>
           Value2: <input type="checkbox" ng-model="checkboxModel.value2"
                          ng-true-value="'YES'" ng-false-value="'NO'"> <br/>
           <tt>value1 = {{checkboxModel.value1}}</tt><br/>
           <tt>value2 = {{checkboxModel.value2}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          it('should change state', function() {
            var value1 = element(by.binding('checkboxModel.value1'));
            var value2 = element(by.binding('checkboxModel.value2'));

            expect(value1.getText()).toContain('true');
            expect(value2.getText()).toContain('YES');

            element(by.model('checkboxModel.value1')).click();
            element(by.model('checkboxModel.value2')).click();

            expect(value1.getText()).toContain('false');
            expect(value2.getText()).toContain('NO');
          });
        </file>
      </example>
   */
  'checkbox': checkboxInputType,

  'hidden': noop,
  'button': noop,
  'submit': noop,
  'reset': noop,
  'file': noop
};

function stringBasedInputType(ctrl) {
  ctrl.$formatters.push(function(value) {
    return ctrl.$isEmpty(value) ? value : value.toString();
  });
}

function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
  stringBasedInputType(ctrl);
}

function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  var type = lowercase(element[0].type);

  // In composition mode, users are still inputing intermediate text buffer,
  // hold the listener until composition is done.
  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
  if (!$sniffer.android) {
    var composing = false;

    element.on('compositionstart', function(data) {
      composing = true;
    });

    element.on('compositionend', function() {
      composing = false;
      listener();
    });
  }

  var listener = function(ev) {
    if (timeout) {
      $browser.defer.cancel(timeout);
      timeout = null;
    }
    if (composing) return;
    var value = element.val(),
        event = ev && ev.type;

    // By default we will trim the value
    // If the attribute ng-trim exists we will avoid trimming
    // If input type is 'password', the value is never trimmed
    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {
      value = trim(value);
    }

    // If a control is suffering from bad input (due to native validators), browsers discard its
    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
    // control's value is the same empty value twice in a row.
    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {
      ctrl.$setViewValue(value, event);
    }
  };

  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
  // input event on backspace, delete or cut
  if ($sniffer.hasEvent('input')) {
    element.on('input', listener);
  } else {
    var timeout;

    var deferListener = function(ev, input, origValue) {
      if (!timeout) {
        timeout = $browser.defer(function() {
          timeout = null;
          if (!input || input.value !== origValue) {
            listener(ev);
          }
        });
      }
    };

    element.on('keydown', function(event) {
      var key = event.keyCode;

      // ignore
      //    command            modifiers                   arrows
      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;

      deferListener(event, this, this.value);
    });

    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
    if ($sniffer.hasEvent('paste')) {
      element.on('paste cut', deferListener);
    }
  }

  // if user paste into input using mouse on older browser
  // or form autocomplete on newer browser, we need "change" event to catch it
  element.on('change', listener);

  ctrl.$render = function() {
    element.val(ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue);
  };
}

function weekParser(isoWeek, existingDate) {
  if (isDate(isoWeek)) {
    return isoWeek;
  }

  if (isString(isoWeek)) {
    WEEK_REGEXP.lastIndex = 0;
    var parts = WEEK_REGEXP.exec(isoWeek);
    if (parts) {
      var year = +parts[1],
          week = +parts[2],
          hours = 0,
          minutes = 0,
          seconds = 0,
          milliseconds = 0,
          firstThurs = getFirstThursdayOfYear(year),
          addDays = (week - 1) * 7;

      if (existingDate) {
        hours = existingDate.getHours();
        minutes = existingDate.getMinutes();
        seconds = existingDate.getSeconds();
        milliseconds = existingDate.getMilliseconds();
      }

      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
    }
  }

  return NaN;
}

function createDateParser(regexp, mapping) {
  return function(iso, date) {
    var parts, map;

    if (isDate(iso)) {
      return iso;
    }

    if (isString(iso)) {
      // When a date is JSON'ified to wraps itself inside of an extra
      // set of double quotes. This makes the date parsing code unable
      // to match the date string and parse it as a date.
      if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {
        iso = iso.substring(1, iso.length - 1);
      }
      if (ISO_DATE_REGEXP.test(iso)) {
        return new Date(iso);
      }
      regexp.lastIndex = 0;
      parts = regexp.exec(iso);

      if (parts) {
        parts.shift();
        if (date) {
          map = {
            yyyy: date.getFullYear(),
            MM: date.getMonth() + 1,
            dd: date.getDate(),
            HH: date.getHours(),
            mm: date.getMinutes(),
            ss: date.getSeconds(),
            sss: date.getMilliseconds() / 1000
          };
        } else {
          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };
        }

        forEach(parts, function(part, index) {
          if (index < mapping.length) {
            map[mapping[index]] = +part;
          }
        });
        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);
      }
    }

    return NaN;
  };
}

function createDateInputType(type, regexp, parseDate, format) {
  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
    badInputChecker(scope, element, attr, ctrl);
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
    var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;
    var previousDate;

    ctrl.$$parserName = type;
    ctrl.$parsers.push(function(value) {
      if (ctrl.$isEmpty(value)) return null;
      if (regexp.test(value)) {
        // Note: We cannot read ctrl.$modelValue, as there might be a different
        // parser/formatter in the processing chain so that the model
        // contains some different data format!
        var parsedDate = parseDate(value, previousDate);
        if (timezone === 'UTC') {
          parsedDate.setMinutes(parsedDate.getMinutes() - parsedDate.getTimezoneOffset());
        }
        return parsedDate;
      }
      return undefined;
    });

    ctrl.$formatters.push(function(value) {
      if (value && !isDate(value)) {
        throw $ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);
      }
      if (isValidDate(value)) {
        previousDate = value;
        if (previousDate && timezone === 'UTC') {
          var timezoneOffset = 60000 * previousDate.getTimezoneOffset();
          previousDate = new Date(previousDate.getTime() + timezoneOffset);
        }
        return $filter('date')(value, format, timezone);
      } else {
        previousDate = null;
        return '';
      }
    });

    if (isDefined(attr.min) || attr.ngMin) {
      var minVal;
      ctrl.$validators.min = function(value) {
        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
      };
      attr.$observe('min', function(val) {
        minVal = parseObservedDateValue(val);
        ctrl.$validate();
      });
    }

    if (isDefined(attr.max) || attr.ngMax) {
      var maxVal;
      ctrl.$validators.max = function(value) {
        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
      };
      attr.$observe('max', function(val) {
        maxVal = parseObservedDateValue(val);
        ctrl.$validate();
      });
    }

    function isValidDate(value) {
      // Invalid Date: getTime() returns NaN
      return value && !(value.getTime && value.getTime() !== value.getTime());
    }

    function parseObservedDateValue(val) {
      return isDefined(val) ? (isDate(val) ? val : parseDate(val)) : undefined;
    }
  };
}

function badInputChecker(scope, element, attr, ctrl) {
  var node = element[0];
  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);
  if (nativeValidation) {
    ctrl.$parsers.push(function(value) {
      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
      // Detect bug in FF35 for input[email] (https://bugzilla.mozilla.org/show_bug.cgi?id=1064430):
      // - also sets validity.badInput (should only be validity.typeMismatch).
      // - see http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#e-mail-state-(type=email)
      // - can ignore this case as we can still read out the erroneous email...
      return validity.badInput && !validity.typeMismatch ? undefined : value;
    });
  }
}

function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  badInputChecker(scope, element, attr, ctrl);
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);

  ctrl.$$parserName = 'number';
  ctrl.$parsers.push(function(value) {
    if (ctrl.$isEmpty(value))      return null;
    if (NUMBER_REGEXP.test(value)) return parseFloat(value);
    return undefined;
  });

  ctrl.$formatters.push(function(value) {
    if (!ctrl.$isEmpty(value)) {
      if (!isNumber(value)) {
        throw $ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);
      }
      value = value.toString();
    }
    return value;
  });

  if (isDefined(attr.min) || attr.ngMin) {
    var minVal;
    ctrl.$validators.min = function(value) {
      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;
    };

    attr.$observe('min', function(val) {
      if (isDefined(val) && !isNumber(val)) {
        val = parseFloat(val, 10);
      }
      minVal = isNumber(val) && !isNaN(val) ? val : undefined;
      // TODO(matsko): implement validateLater to reduce number of validations
      ctrl.$validate();
    });
  }

  if (isDefined(attr.max) || attr.ngMax) {
    var maxVal;
    ctrl.$validators.max = function(value) {
      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
    };

    attr.$observe('max', function(val) {
      if (isDefined(val) && !isNumber(val)) {
        val = parseFloat(val, 10);
      }
      maxVal = isNumber(val) && !isNaN(val) ? val : undefined;
      // TODO(matsko): implement validateLater to reduce number of validations
      ctrl.$validate();
    });
  }
}

function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  // Note: no badInputChecker here by purpose as `url` is only a validation
  // in browsers, i.e. we can always read out input.value even if it is not valid!
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
  stringBasedInputType(ctrl);

  ctrl.$$parserName = 'url';
  ctrl.$validators.url = function(modelValue, viewValue) {
    var value = modelValue || viewValue;
    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
  };
}

function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  // Note: no badInputChecker here by purpose as `url` is only a validation
  // in browsers, i.e. we can always read out input.value even if it is not valid!
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
  stringBasedInputType(ctrl);

  ctrl.$$parserName = 'email';
  ctrl.$validators.email = function(modelValue, viewValue) {
    var value = modelValue || viewValue;
    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
  };
}

function radioInputType(scope, element, attr, ctrl) {
  // make the name unique, if not defined
  if (isUndefined(attr.name)) {
    element.attr('name', nextUid());
  }

  var listener = function(ev) {
    if (element[0].checked) {
      ctrl.$setViewValue(attr.value, ev && ev.type);
    }
  };

  element.on('click', listener);

  ctrl.$render = function() {
    var value = attr.value;
    element[0].checked = (value == ctrl.$viewValue);
  };

  attr.$observe('value', ctrl.$render);
}

function parseConstantExpr($parse, context, name, expression, fallback) {
  var parseFn;
  if (isDefined(expression)) {
    parseFn = $parse(expression);
    if (!parseFn.constant) {
      throw minErr('ngModel')('constexpr', 'Expected constant expression for `{0}`, but saw ' +
                                   '`{1}`.', name, expression);
    }
    return parseFn(context);
  }
  return fallback;
}

function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);
  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);

  var listener = function(ev) {
    ctrl.$setViewValue(element[0].checked, ev && ev.type);
  };

  element.on('click', listener);

  ctrl.$render = function() {
    element[0].checked = ctrl.$viewValue;
  };

  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
  // it to a boolean.
  ctrl.$isEmpty = function(value) {
    return value === false;
  };

  ctrl.$formatters.push(function(value) {
    return equals(value, trueValue);
  });

  ctrl.$parsers.push(function(value) {
    return value ? trueValue : falseValue;
  });
}


/**
 * @ngdoc directive
 * @name textarea
 * @restrict E
 *
 * @description
 * HTML textarea element control with angular data-binding. The data-binding and validation
 * properties of this element are exactly the same as those of the
 * {@link ng.directive:input input element}.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
 *    length.
 * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
 *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
 *    patterns defined as scope expressions.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 */


/**
 * @ngdoc directive
 * @name input
 * @restrict E
 *
 * @description
 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
 * input state control, and validation.
 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
 *
 * <div class="alert alert-warning">
 * **Note:** Not every feature offered is available for all input types.
 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
 * </div>
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {boolean=} ngRequired Sets `required` attribute if set to true
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
 *    length.
 * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
 *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
 *    patterns defined as scope expressions.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 *    This parameter is ignored for input[type=password] controls, which will never trim the
 *    input.
 *
 * @example
    <example name="input-directive" module="inputExample">
      <file name="index.html">
       <script>
          angular.module('inputExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.user = {name: 'guest', last: 'visitor'};
            }]);
       </script>
       <div ng-controller="ExampleController">
         <form name="myForm">
           User name: <input type="text" name="userName" ng-model="user.name" required>
           <span class="error" ng-show="myForm.userName.$error.required">
             Required!</span><br>
           Last name: <input type="text" name="lastName" ng-model="user.last"
             ng-minlength="3" ng-maxlength="10">
           <span class="error" ng-show="myForm.lastName.$error.minlength">
             Too short!</span>
           <span class="error" ng-show="myForm.lastName.$error.maxlength">
             Too long!</span><br>
         </form>
         <hr>
         <tt>user = {{user}}</tt><br/>
         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br>
         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br>
         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br>
         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br>
         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br>
       </div>
      </file>
      <file name="protractor.js" type="protractor">
        var user = element(by.exactBinding('user'));
        var userNameValid = element(by.binding('myForm.userName.$valid'));
        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
        var lastNameError = element(by.binding('myForm.lastName.$error'));
        var formValid = element(by.binding('myForm.$valid'));
        var userNameInput = element(by.model('user.name'));
        var userLastInput = element(by.model('user.last'));

        it('should initialize to model', function() {
          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
          expect(userNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if empty when required', function() {
          userNameInput.clear();
          userNameInput.sendKeys('');

          expect(user.getText()).toContain('{"last":"visitor"}');
          expect(userNameValid.getText()).toContain('false');
          expect(formValid.getText()).toContain('false');
        });

        it('should be valid if empty when min length is set', function() {
          userLastInput.clear();
          userLastInput.sendKeys('');

          expect(user.getText()).toContain('{"name":"guest","last":""}');
          expect(lastNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if less than required min length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('xx');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('minlength');
          expect(formValid.getText()).toContain('false');
        });

        it('should be invalid if longer than max length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('some ridiculously long name');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('maxlength');
          expect(formValid.getText()).toContain('false');
        });
      </file>
    </example>
 */
var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',
    function($browser, $sniffer, $filter, $parse) {
  return {
    restrict: 'E',
    require: ['?ngModel'],
    link: {
      pre: function(scope, element, attr, ctrls) {
        if (ctrls[0]) {
          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,
                                                              $browser, $filter, $parse);
        }
      }
    }
  };
}];



var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
/**
 * @ngdoc directive
 * @name ngValue
 *
 * @description
 * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},
 * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to
 * the bound value.
 *
 * `ngValue` is useful when dynamically generating lists of radio buttons using
 * {@link ngRepeat `ngRepeat`}, as shown below.
 *
 * Likewise, `ngValue` can be used to generate `<option>` elements for
 * the {@link select `select`} element. In that case however, only strings are supported
 * for the `value `attribute, so the resulting `ngModel` will always be a string.
 * Support for `select` models with non-string values is available via `ngOptions`.
 *
 * @element input
 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
 *   of the `input` element
 *
 * @example
    <example name="ngValue-directive" module="valueExample">
      <file name="index.html">
       <script>
          angular.module('valueExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.names = ['pizza', 'unicorns', 'robots'];
              $scope.my = { favorite: 'unicorns' };
            }]);
       </script>
        <form ng-controller="ExampleController">
          <h2>Which is your favorite?</h2>
            <label ng-repeat="name in names" for="{{name}}">
              {{name}}
              <input type="radio"
                     ng-model="my.favorite"
                     ng-value="name"
                     id="{{name}}"
                     name="favorite">
            </label>
          <div>You chose {{my.favorite}}</div>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        var favorite = element(by.binding('my.favorite'));

        it('should initialize to model', function() {
          expect(favorite.getText()).toContain('unicorns');
        });
        it('should bind the values to the inputs', function() {
          element.all(by.model('my.favorite')).get(0).click();
          expect(favorite.getText()).toContain('pizza');
        });
      </file>
    </example>
 */
var ngValueDirective = function() {
  return {
    restrict: 'A',
    priority: 100,
    compile: function(tpl, tplAttr) {
      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
        return function ngValueConstantLink(scope, elm, attr) {
          attr.$set('value', scope.$eval(attr.ngValue));
        };
      } else {
        return function ngValueLink(scope, elm, attr) {
          scope.$watch(attr.ngValue, function valueWatchAction(value) {
            attr.$set('value', value);
          });
        };
      }
    }
  };
};

/**
 * @ngdoc directive
 * @name ngBind
 * @restrict AC
 *
 * @description
 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
 * with the value of a given expression, and to update the text content when the value of that
 * expression changes.
 *
 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
 * `{{ expression }}` which is similar but less verbose.
 *
 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
 * element attribute, it makes the bindings invisible to the user while the page is loading.
 *
 * An alternative solution to this problem would be using the
 * {@link ng.directive:ngCloak ngCloak} directive.
 *
 *
 * @element ANY
 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
 *
 * @example
 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
   <example module="bindExample">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.name = 'Whirled';
           }]);
       </script>
       <div ng-controller="ExampleController">
         Enter name: <input type="text" ng-model="name"><br>
         Hello <span ng-bind="name"></span>!
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var nameInput = element(by.model('name'));

         expect(element(by.binding('name')).getText()).toBe('Whirled');
         nameInput.clear();
         nameInput.sendKeys('world');
         expect(element(by.binding('name')).getText()).toBe('world');
       });
     </file>
   </example>
 */
var ngBindDirective = ['$compile', function($compile) {
  return {
    restrict: 'AC',
    compile: function ngBindCompile(templateElement) {
      $compile.$$addBindingClass(templateElement);
      return function ngBindLink(scope, element, attr) {
        $compile.$$addBindingInfo(element, attr.ngBind);
        element = element[0];
        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
          element.textContent = value === undefined ? '' : value;
        });
      };
    }
  };
}];


/**
 * @ngdoc directive
 * @name ngBindTemplate
 *
 * @description
 * The `ngBindTemplate` directive specifies that the element
 * text content should be replaced with the interpolation of the template
 * in the `ngBindTemplate` attribute.
 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
 * expressions. This directive is needed since some HTML elements
 * (such as TITLE and OPTION) cannot contain SPAN elements.
 *
 * @element ANY
 * @param {string} ngBindTemplate template of form
 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
 *
 * @example
 * Try it here: enter text in text box and watch the greeting change.
   <example module="bindExample">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.salutation = 'Hello';
             $scope.name = 'World';
           }]);
       </script>
       <div ng-controller="ExampleController">
        Salutation: <input type="text" ng-model="salutation"><br>
        Name: <input type="text" ng-model="name"><br>
        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var salutationElem = element(by.binding('salutation'));
         var salutationInput = element(by.model('salutation'));
         var nameInput = element(by.model('name'));

         expect(salutationElem.getText()).toBe('Hello World!');

         salutationInput.clear();
         salutationInput.sendKeys('Greetings');
         nameInput.clear();
         nameInput.sendKeys('user');

         expect(salutationElem.getText()).toBe('Greetings user!');
       });
     </file>
   </example>
 */
var ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {
  return {
    compile: function ngBindTemplateCompile(templateElement) {
      $compile.$$addBindingClass(templateElement);
      return function ngBindTemplateLink(scope, element, attr) {
        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
        $compile.$$addBindingInfo(element, interpolateFn.expressions);
        element = element[0];
        attr.$observe('ngBindTemplate', function(value) {
          element.textContent = value === undefined ? '' : value;
        });
      };
    }
  };
}];


/**
 * @ngdoc directive
 * @name ngBindHtml
 *
 * @description
 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
 *
 * You may also bypass sanitization for values you know are safe. To do so, bind to
 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
 *
 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
 * will have an exception (instead of an exploit.)
 *
 * @element ANY
 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
 *
 * @example

   <example module="bindHtmlExample" deps="angular-sanitize.js">
     <file name="index.html">
       <div ng-controller="ExampleController">
        <p ng-bind-html="myHTML"></p>
       </div>
     </file>

     <file name="script.js">
       angular.module('bindHtmlExample', ['ngSanitize'])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.myHTML =
              'I am an <code>HTML</code>string with ' +
              '<a href="#">links!</a> and other <em>stuff</em>';
         }]);
     </file>

     <file name="protractor.js" type="protractor">
       it('should check ng-bind-html', function() {
         expect(element(by.binding('myHTML')).getText()).toBe(
             'I am an HTMLstring with links! and other stuff');
       });
     </file>
   </example>
 */
var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {
  return {
    restrict: 'A',
    compile: function ngBindHtmlCompile(tElement, tAttrs) {
      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);
      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function getStringValue(value) {
        return (value || '').toString();
      });
      $compile.$$addBindingClass(tElement);

      return function ngBindHtmlLink(scope, element, attr) {
        $compile.$$addBindingInfo(element, attr.ngBindHtml);

        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
          // we re-evaluate the expr because we want a TrustedValueHolderType
          // for $sce, not a string
          element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || '');
        });
      };
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngChange
 *
 * @description
 * Evaluate the given expression when the user changes the input.
 * The expression is evaluated immediately, unlike the JavaScript onchange event
 * which only triggers at the end of a change (usually, when the user leaves the
 * form element or presses the return key).
 *
 * The `ngChange` expression is only evaluated when a change in the input value causes
 * a new value to be committed to the model.
 *
 * It will not be evaluated:
 * * if the value returned from the `$parsers` transformation pipeline has not changed
 * * if the input has continued to be invalid since the model will stay `null`
 * * if the model is changed programmatically and not by a change to the input value
 *
 *
 * Note, this directive requires `ngModel` to be present.
 *
 * @element input
 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
 * in input value.
 *
 * @example
 * <example name="ngChange-directive" module="changeExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('changeExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.counter = 0;
 *           $scope.change = function() {
 *             $scope.counter++;
 *           };
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
 *       <label for="ng-change-example2">Confirmed</label><br />
 *       <tt>debug = {{confirmed}}</tt><br/>
 *       <tt>counter = {{counter}}</tt><br/>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var counter = element(by.binding('counter'));
 *     var debug = element(by.binding('confirmed'));
 *
 *     it('should evaluate the expression if changing from view', function() {
 *       expect(counter.getText()).toContain('0');
 *
 *       element(by.id('ng-change-example1')).click();
 *
 *       expect(counter.getText()).toContain('1');
 *       expect(debug.getText()).toContain('true');
 *     });
 *
 *     it('should not evaluate the expression if changing from model', function() {
 *       element(by.id('ng-change-example2')).click();

 *       expect(counter.getText()).toContain('0');
 *       expect(debug.getText()).toContain('true');
 *     });
 *   </file>
 * </example>
 */
var ngChangeDirective = valueFn({
  restrict: 'A',
  require: 'ngModel',
  link: function(scope, element, attr, ctrl) {
    ctrl.$viewChangeListeners.push(function() {
      scope.$eval(attr.ngChange);
    });
  }
});

function classDirective(name, selector) {
  name = 'ngClass' + name;
  return ['$animate', function($animate) {
    return {
      restrict: 'AC',
      link: function(scope, element, attr) {
        var oldVal;

        scope.$watch(attr[name], ngClassWatchAction, true);

        attr.$observe('class', function(value) {
          ngClassWatchAction(scope.$eval(attr[name]));
        });


        if (name !== 'ngClass') {
          scope.$watch('$index', function($index, old$index) {
            // jshint bitwise: false
            var mod = $index & 1;
            if (mod !== (old$index & 1)) {
              var classes = arrayClasses(scope.$eval(attr[name]));
              mod === selector ?
                addClasses(classes) :
                removeClasses(classes);
            }
          });
        }

        function addClasses(classes) {
          var newClasses = digestClassCounts(classes, 1);
          attr.$addClass(newClasses);
        }

        function removeClasses(classes) {
          var newClasses = digestClassCounts(classes, -1);
          attr.$removeClass(newClasses);
        }

        function digestClassCounts(classes, count) {
          var classCounts = element.data('$classCounts') || {};
          var classesToUpdate = [];
          forEach(classes, function(className) {
            if (count > 0 || classCounts[className]) {
              classCounts[className] = (classCounts[className] || 0) + count;
              if (classCounts[className] === +(count > 0)) {
                classesToUpdate.push(className);
              }
            }
          });
          element.data('$classCounts', classCounts);
          return classesToUpdate.join(' ');
        }

        function updateClasses(oldClasses, newClasses) {
          var toAdd = arrayDifference(newClasses, oldClasses);
          var toRemove = arrayDifference(oldClasses, newClasses);
          toAdd = digestClassCounts(toAdd, 1);
          toRemove = digestClassCounts(toRemove, -1);
          if (toAdd && toAdd.length) {
            $animate.addClass(element, toAdd);
          }
          if (toRemove && toRemove.length) {
            $animate.removeClass(element, toRemove);
          }
        }

        function ngClassWatchAction(newVal) {
          if (selector === true || scope.$index % 2 === selector) {
            var newClasses = arrayClasses(newVal || []);
            if (!oldVal) {
              addClasses(newClasses);
            } else if (!equals(newVal,oldVal)) {
              var oldClasses = arrayClasses(oldVal);
              updateClasses(oldClasses, newClasses);
            }
          }
          oldVal = shallowCopy(newVal);
        }
      }
    };

    function arrayDifference(tokens1, tokens2) {
      var values = [];

      outer:
      for (var i = 0; i < tokens1.length; i++) {
        var token = tokens1[i];
        for (var j = 0; j < tokens2.length; j++) {
          if (token == tokens2[j]) continue outer;
        }
        values.push(token);
      }
      return values;
    }

    function arrayClasses(classVal) {
      if (isArray(classVal)) {
        return classVal.join(' ').split(' ');
      } else if (isString(classVal)) {
        return classVal.split(' ');
      } else if (isObject(classVal)) {
        var classes = [];
        forEach(classVal, function(v, k) {
          if (v) {
            classes = classes.concat(k.split(' '));
          }
        });
        return classes;
      }
      return classVal;
    }
  }];
}

/**
 * @ngdoc directive
 * @name ngClass
 * @restrict AC
 *
 * @description
 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
 * an expression that represents all classes to be added.
 *
 * The directive operates in three different ways, depending on which of three types the expression
 * evaluates to:
 *
 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
 * names.
 *
 * 2. If the expression evaluates to an array, each element of the array should be a string that is
 * one or more space-delimited class names.
 *
 * 3. If the expression evaluates to an object, then for each key-value pair of the
 * object with a truthy value the corresponding key is used as a class name.
 *
 * The directive won't add duplicate classes if a particular class was already set.
 *
 * When the expression changes, the previously added classes are removed and only then the
 * new classes are added.
 *
 * @animations
 * **add** - happens just before the class is applied to the elements
 *
 * **remove** - happens just before the class is removed from the element
 *
 * @element ANY
 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class
 *   names, an array, or a map of class names to boolean values. In the case of a map, the
 *   names of the properties whose values are truthy will be added as css classes to the
 *   element.
 *
 * @example Example that demonstrates basic bindings via ngClass directive.
   <example>
     <file name="index.html">
       <p ng-class="{strike: deleted, bold: important, red: error}">Map Syntax Example</p>
       <input type="checkbox" ng-model="deleted"> deleted (apply "strike" class)<br>
       <input type="checkbox" ng-model="important"> important (apply "bold" class)<br>
       <input type="checkbox" ng-model="error"> error (apply "red" class)
       <hr>
       <p ng-class="style">Using String Syntax</p>
       <input type="text" ng-model="style" placeholder="Type: bold strike red">
       <hr>
       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
       <input ng-model="style1" placeholder="Type: bold, strike or red"><br>
       <input ng-model="style2" placeholder="Type: bold, strike or red"><br>
       <input ng-model="style3" placeholder="Type: bold, strike or red"><br>
     </file>
     <file name="style.css">
       .strike {
         text-decoration: line-through;
       }
       .bold {
           font-weight: bold;
       }
       .red {
           color: red;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var ps = element.all(by.css('p'));

       it('should let you toggle the class', function() {

         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
         expect(ps.first().getAttribute('class')).not.toMatch(/red/);

         element(by.model('important')).click();
         expect(ps.first().getAttribute('class')).toMatch(/bold/);

         element(by.model('error')).click();
         expect(ps.first().getAttribute('class')).toMatch(/red/);
       });

       it('should let you toggle string example', function() {
         expect(ps.get(1).getAttribute('class')).toBe('');
         element(by.model('style')).clear();
         element(by.model('style')).sendKeys('red');
         expect(ps.get(1).getAttribute('class')).toBe('red');
       });

       it('array example should have 3 classes', function() {
         expect(ps.last().getAttribute('class')).toBe('');
         element(by.model('style1')).sendKeys('bold');
         element(by.model('style2')).sendKeys('strike');
         element(by.model('style3')).sendKeys('red');
         expect(ps.last().getAttribute('class')).toBe('bold strike red');
       });
     </file>
   </example>

   ## Animations

   The example below demonstrates how to perform animations using ngClass.

   <example module="ngAnimate" deps="angular-animate.js" animations="true">
     <file name="index.html">
      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
      <br>
      <span class="base-class" ng-class="myVar">Sample Text</span>
     </file>
     <file name="style.css">
       .base-class {
         -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
       }

       .base-class.my-class {
         color: red;
         font-size:3em;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class', function() {
         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);

         element(by.id('setbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).
           toMatch(/my-class/);

         element(by.id('clearbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);
       });
     </file>
   </example>


   ## ngClass and pre-existing CSS3 Transitions/Animations
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
   to view the step by step details of {@link ng.$animate#addClass $animate.addClass} and
   {@link ng.$animate#removeClass $animate.removeClass}.
 */
var ngClassDirective = classDirective('', true);

/**
 * @ngdoc directive
 * @name ngClassOdd
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}}
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
var ngClassOddDirective = classDirective('Odd', 0);

/**
 * @ngdoc directive
 * @name ngClassEven
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
 *   result of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}} &nbsp; &nbsp; &nbsp;
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
var ngClassEvenDirective = classDirective('Even', 1);

/**
 * @ngdoc directive
 * @name ngCloak
 * @restrict AC
 *
 * @description
 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
 * directive to avoid the undesirable flicker effect caused by the html template display.
 *
 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
 * of the browser view.
 *
 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
 * `angular.min.js`.
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```css
 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
 *   display: none !important;
 * }
 * ```
 *
 * When this css rule is loaded by the browser, all html elements (including their children) that
 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
 * during the compilation of the template it deletes the `ngCloak` element attribute, making
 * the compiled element visible.
 *
 * For the best result, the `angular.js` script must be loaded in the head section of the html
 * document; alternatively, the css rule above must be included in the external stylesheet of the
 * application.
 *
 * Legacy browsers, like IE7, do not provide attribute selector support (added in CSS 2.1) so they
 * cannot match the `[ng\:cloak]` selector. To work around this limitation, you must add the css
 * class `ng-cloak` in addition to the `ngCloak` directive as shown in the example below.
 *
 * @element ANY
 *
 * @example
   <example>
     <file name="index.html">
        <div id="template1" ng-cloak>{{ 'hello' }}</div>
        <div id="template2" ng-cloak class="ng-cloak">{{ 'hello IE7' }}</div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should remove the template directive and css class', function() {
         expect($('#template1').getAttribute('ng-cloak')).
           toBeNull();
         expect($('#template2').getAttribute('ng-cloak')).
           toBeNull();
       });
     </file>
   </example>
 *
 */
var ngCloakDirective = ngDirective({
  compile: function(element, attr) {
    attr.$set('ngCloak', undefined);
    element.removeClass('ng-cloak');
  }
});

/**
 * @ngdoc directive
 * @name ngController
 *
 * @description
 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
 * supports the principles behind the Model-View-Controller design pattern.
 *
 * MVC components in angular:
 *
 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
 *   are accessed through bindings.
 * * View — The template (HTML with data bindings) that is rendered into the View.
 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
 *   logic behind the application to decorate the scope with functions and values
 *
 * Note that you can also attach controllers to the DOM by declaring it in a route definition
 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
 * and executed twice.
 *
 * @element ANY
 * @scope
 * @priority 500
 * @param {expression} ngController Name of a constructor function registered with the current
 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
 * that on the current scope evaluates to a constructor function.
 *
 * The controller instance can be published into a scope property by specifying
 * `ng-controller="as propertyName"`.
 *
 * If the current `$controllerProvider` is configured to use globals (via
 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
 * also be the name of a globally accessible constructor function (not recommended).
 *
 * @example
 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
 * greeting are methods declared on the controller (see source tab). These methods can
 * easily be called from the angular markup. Any changes to the data are automatically reflected
 * in the View without the need for a manual update.
 *
 * Two different declaration styles are included below:
 *
 * * one binds methods and properties directly onto the controller using `this`:
 * `ng-controller="SettingsController1 as settings"`
 * * one injects `$scope` into the controller:
 * `ng-controller="SettingsController2"`
 *
 * The second option is more common in the Angular community, and is generally used in boilerplates
 * and in this guide. However, there are advantages to binding properties directly to the controller
 * and avoiding scope.
 *
 * * Using `controller as` makes it obvious which controller you are accessing in the template when
 * multiple controllers apply to an element.
 * * If you are writing your controllers as classes you have easier access to the properties and
 * methods, which will appear on the scope, from inside the controller code.
 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
 * inheritance masking primitives.
 *
 * This example demonstrates the `controller as` syntax.
 *
 * <example name="ngControllerAs" module="controllerAsExample">
 *   <file name="index.html">
 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
 *      Name: <input type="text" ng-model="settings.name"/>
 *      [ <a href="" ng-click="settings.greet()">greet</a> ]<br/>
 *      Contact:
 *      <ul>
 *        <li ng-repeat="contact in settings.contacts">
 *          <select ng-model="contact.type">
 *             <option>phone</option>
 *             <option>email</option>
 *          </select>
 *          <input type="text" ng-model="contact.value"/>
 *          [ <a href="" ng-click="settings.clearContact(contact)">clear</a>
 *          | <a href="" ng-click="settings.removeContact(contact)">X</a> ]
 *        </li>
 *        <li>[ <a href="" ng-click="settings.addContact()">add</a> ]</li>
 *     </ul>
 *    </div>
 *   </file>
 *   <file name="app.js">
 *    angular.module('controllerAsExample', [])
 *      .controller('SettingsController1', SettingsController1);
 *
 *    function SettingsController1() {
 *      this.name = "John Smith";
 *      this.contacts = [
 *        {type: 'phone', value: '408 555 1212'},
 *        {type: 'email', value: 'john.smith@example.org'} ];
 *    }
 *
 *    SettingsController1.prototype.greet = function() {
 *      alert(this.name);
 *    };
 *
 *    SettingsController1.prototype.addContact = function() {
 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
 *    };
 *
 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
 *     var index = this.contacts.indexOf(contactToRemove);
 *      this.contacts.splice(index, 1);
 *    };
 *
 *    SettingsController1.prototype.clearContact = function(contact) {
 *      contact.type = 'phone';
 *      contact.value = '';
 *    };
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it('should check controller as', function() {
 *       var container = element(by.id('ctrl-as-exmpl'));
 *         expect(container.element(by.model('settings.name'))
 *           .getAttribute('value')).toBe('John Smith');
 *
 *       var firstRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(0));
 *       var secondRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(1));
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('408 555 1212');
 *
 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('john.smith@example.org');
 *
 *       firstRepeat.element(by.linkText('clear')).click();
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('');
 *
 *       container.element(by.linkText('add')).click();
 *
 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
 *           .element(by.model('contact.value'))
 *           .getAttribute('value'))
 *           .toBe('yourname@example.org');
 *     });
 *   </file>
 * </example>
 *
 * This example demonstrates the "attach to `$scope`" style of controller.
 *
 * <example name="ngController" module="controllerExample">
 *  <file name="index.html">
 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
 *     Name: <input type="text" ng-model="name"/>
 *     [ <a href="" ng-click="greet()">greet</a> ]<br/>
 *     Contact:
 *     <ul>
 *       <li ng-repeat="contact in contacts">
 *         <select ng-model="contact.type">
 *            <option>phone</option>
 *            <option>email</option>
 *         </select>
 *         <input type="text" ng-model="contact.value"/>
 *         [ <a href="" ng-click="clearContact(contact)">clear</a>
 *         | <a href="" ng-click="removeContact(contact)">X</a> ]
 *       </li>
 *       <li>[ <a href="" ng-click="addContact()">add</a> ]</li>
 *    </ul>
 *   </div>
 *  </file>
 *  <file name="app.js">
 *   angular.module('controllerExample', [])
 *     .controller('SettingsController2', ['$scope', SettingsController2]);
 *
 *   function SettingsController2($scope) {
 *     $scope.name = "John Smith";
 *     $scope.contacts = [
 *       {type:'phone', value:'408 555 1212'},
 *       {type:'email', value:'john.smith@example.org'} ];
 *
 *     $scope.greet = function() {
 *       alert($scope.name);
 *     };
 *
 *     $scope.addContact = function() {
 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
 *     };
 *
 *     $scope.removeContact = function(contactToRemove) {
 *       var index = $scope.contacts.indexOf(contactToRemove);
 *       $scope.contacts.splice(index, 1);
 *     };
 *
 *     $scope.clearContact = function(contact) {
 *       contact.type = 'phone';
 *       contact.value = '';
 *     };
 *   }
 *  </file>
 *  <file name="protractor.js" type="protractor">
 *    it('should check controller', function() {
 *      var container = element(by.id('ctrl-exmpl'));
 *
 *      expect(container.element(by.model('name'))
 *          .getAttribute('value')).toBe('John Smith');
 *
 *      var firstRepeat =
 *          container.element(by.repeater('contact in contacts').row(0));
 *      var secondRepeat =
 *          container.element(by.repeater('contact in contacts').row(1));
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('408 555 1212');
 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('john.smith@example.org');
 *
 *      firstRepeat.element(by.linkText('clear')).click();
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('');
 *
 *      container.element(by.linkText('add')).click();
 *
 *      expect(container.element(by.repeater('contact in contacts').row(2))
 *          .element(by.model('contact.value'))
 *          .getAttribute('value'))
 *          .toBe('yourname@example.org');
 *    });
 *  </file>
 *</example>

 */
var ngControllerDirective = [function() {
  return {
    restrict: 'A',
    scope: true,
    controller: '@',
    priority: 500
  };
}];

/**
 * @ngdoc directive
 * @name ngCsp
 *
 * @element html
 * @description
 * Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.
 *
 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
 *
 * CSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).
 * For Angular to be CSP compatible there are only two things that we need to do differently:
 *
 * - don't use `Function` constructor to generate optimized value getters
 * - don't inject custom stylesheet into the document
 *
 * AngularJS uses `Function(string)` generated functions as a speed optimization. Applying the `ngCsp`
 * directive will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will
 * evaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will
 * be raised.
 *
 * CSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically
 * includes some CSS rules (e.g. {@link ng.directive:ngCloak ngCloak}).
 * To make those directives work in CSP mode, include the `angular-csp.css` manually.
 *
 * Angular tries to autodetect if CSP is active and automatically turn on the CSP-safe mode. This
 * autodetection however triggers a CSP error to be logged in the console:
 *
 * ```
 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
 * script in the following Content Security Policy directive: "default-src 'self'". Note that
 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
 * ```
 *
 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
 * directive on the root element of the application or on the `angular.js` script tag, whichever
 * appears first in the html document.
 *
 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
 *
 * @example
 * This example shows how to apply the `ngCsp` directive to the `html` tag.
   ```html
     <!doctype html>
     <html ng-app ng-csp>
     ...
     ...
     </html>
   ```
  * @example
      // Note: the suffix `.csp` in the example name triggers
      // csp mode in our http server!
      <example name="example.csp" module="cspExample" ng-csp="true">
        <file name="index.html">
          <div ng-controller="MainController as ctrl">
            <div>
              <button ng-click="ctrl.inc()" id="inc">Increment</button>
              <span id="counter">
                {{ctrl.counter}}
              </span>
            </div>

            <div>
              <button ng-click="ctrl.evil()" id="evil">Evil</button>
              <span id="evilError">
                {{ctrl.evilError}}
              </span>
            </div>
          </div>
        </file>
        <file name="script.js">
           angular.module('cspExample', [])
             .controller('MainController', function() {
                this.counter = 0;
                this.inc = function() {
                  this.counter++;
                };
                this.evil = function() {
                  // jshint evil:true
                  try {
                    eval('1+2');
                  } catch (e) {
                    this.evilError = e.message;
                  }
                };
              });
        </file>
        <file name="protractor.js" type="protractor">
          var util, webdriver;

          var incBtn = element(by.id('inc'));
          var counter = element(by.id('counter'));
          var evilBtn = element(by.id('evil'));
          var evilError = element(by.id('evilError'));

          function getAndClearSevereErrors() {
            return browser.manage().logs().get('browser').then(function(browserLog) {
              return browserLog.filter(function(logEntry) {
                return logEntry.level.value > webdriver.logging.Level.WARNING.value;
              });
            });
          }

          function clearErrors() {
            getAndClearSevereErrors();
          }

          function expectNoErrors() {
            getAndClearSevereErrors().then(function(filteredLog) {
              expect(filteredLog.length).toEqual(0);
              if (filteredLog.length) {
                console.log('browser console errors: ' + util.inspect(filteredLog));
              }
            });
          }

          function expectError(regex) {
            getAndClearSevereErrors().then(function(filteredLog) {
              var found = false;
              filteredLog.forEach(function(log) {
                if (log.message.match(regex)) {
                  found = true;
                }
              });
              if (!found) {
                throw new Error('expected an error that matches ' + regex);
              }
            });
          }

          beforeEach(function() {
            util = require('util');
            webdriver = require('protractor/node_modules/selenium-webdriver');
          });

          // For now, we only test on Chrome,
          // as Safari does not load the page with Protractor's injected scripts,
          // and Firefox webdriver always disables content security policy (#6358)
          if (browser.params.browser !== 'chrome') {
            return;
          }

          it('should not report errors when the page is loaded', function() {
            // clear errors so we are not dependent on previous tests
            clearErrors();
            // Need to reload the page as the page is already loaded when
            // we come here
            browser.driver.getCurrentUrl().then(function(url) {
              browser.get(url);
            });
            expectNoErrors();
          });

          it('should evaluate expressions', function() {
            expect(counter.getText()).toEqual('0');
            incBtn.click();
            expect(counter.getText()).toEqual('1');
            expectNoErrors();
          });

          it('should throw and report an error when using "eval"', function() {
            evilBtn.click();
            expect(evilError.getText()).toMatch(/Content Security Policy/);
            expectError(/Content Security Policy/);
          });
        </file>
      </example>
  */

// ngCsp is not implemented as a proper directive any more, because we need it be processed while we
// bootstrap the system (before $parse is instantiated), for this reason we just have
// the csp.isActive() fn that looks for ng-csp attribute anywhere in the current doc

/**
 * @ngdoc directive
 * @name ngClick
 *
 * @description
 * The ngClick directive allows you to specify custom behavior when
 * an element is clicked.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
 * click. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-click="count = count + 1" ng-init="count=0">
        Increment
      </button>
      <span>
        count: {{count}}
      </span>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-click', function() {
         expect(element(by.binding('count')).getText()).toMatch('0');
         element(by.css('button')).click();
         expect(element(by.binding('count')).getText()).toMatch('1');
       });
     </file>
   </example>
 */
/*
 * A collection of directives that allows creation of custom event handlers that are defined as
 * angular expressions and are compiled and executed within the current scope.
 */
var ngEventDirectives = {};

// For events that might fire synchronously during DOM manipulation
// we need to execute their event handlers asynchronously using $evalAsync,
// so that they are not executed in an inconsistent state.
var forceAsyncEvents = {
  'blur': true,
  'focus': true
};
forEach(
  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
  function(eventName) {
    var directiveName = directiveNormalize('ng-' + eventName);
    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {
      return {
        restrict: 'A',
        compile: function($element, attr) {
          // We expose the powerful $event object on the scope that provides access to the Window,
          // etc. that isn't protected by the fast paths in $parse.  We explicitly request better
          // checks at the cost of speed since event handler expressions are not executed as
          // frequently as regular change detection.
          var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);
          return function ngEventHandler(scope, element) {
            element.on(eventName, function(event) {
              var callback = function() {
                fn(scope, {$event:event});
              };
              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
                scope.$evalAsync(callback);
              } else {
                scope.$apply(callback);
              }
            });
          };
        }
      };
    }];
  }
);

/**
 * @ngdoc directive
 * @name ngDblclick
 *
 * @description
 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
 * a dblclick. (The Event object is available as `$event`)
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-dblclick="count = count + 1" ng-init="count=0">
        Increment (on double click)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMousedown
 *
 * @description
 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mousedown="count = count + 1" ng-init="count=0">
        Increment (on mouse down)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMouseup
 *
 * @description
 * Specify custom behavior on mouseup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseup="count = count + 1" ng-init="count=0">
        Increment (on mouse up)
      </button>
      count: {{count}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngMouseover
 *
 * @description
 * Specify custom behavior on mouseover event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseover="count = count + 1" ng-init="count=0">
        Increment (when mouse is over)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMouseenter
 *
 * @description
 * Specify custom behavior on mouseenter event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseenter="count = count + 1" ng-init="count=0">
        Increment (when mouse enters)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMouseleave
 *
 * @description
 * Specify custom behavior on mouseleave event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseleave="count = count + 1" ng-init="count=0">
        Increment (when mouse leaves)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMousemove
 *
 * @description
 * Specify custom behavior on mousemove event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mousemove="count = count + 1" ng-init="count=0">
        Increment (when mouse moves)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngKeydown
 *
 * @description
 * Specify custom behavior on keydown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-keydown="count = count + 1" ng-init="count=0">
      key down count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngKeyup
 *
 * @description
 * Specify custom behavior on keyup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
       <p>Typing in the input box below updates the key count</p>
       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

       <p>Typing in the input box below updates the keycode</p>
       <input ng-keyup="event=$event">
       <p>event keyCode: {{ event.keyCode }}</p>
       <p>event altKey: {{ event.altKey }}</p>
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngKeypress
 *
 * @description
 * Specify custom behavior on keypress event.
 *
 * @element ANY
 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
 * and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-keypress="count = count + 1" ng-init="count=0">
      key press count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngSubmit
 *
 * @description
 * Enables binding angular expressions to onsubmit events.
 *
 * Additionally it prevents the default action (which for form means sending the request to the
 * server and reloading the current page), but only if the form does not contain `action`,
 * `data-action`, or `x-action` attributes.
 *
 * <div class="alert alert-warning">
 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
 * `ngSubmit` handlers together. See the
 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
 * for a detailed discussion of when `ngSubmit` may be triggered.
 * </div>
 *
 * @element form
 * @priority 0
 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
 * ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example module="submitExample">
     <file name="index.html">
      <script>
        angular.module('submitExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.list = [];
            $scope.text = 'hello';
            $scope.submit = function() {
              if ($scope.text) {
                $scope.list.push(this.text);
                $scope.text = '';
              }
            };
          }]);
      </script>
      <form ng-submit="submit()" ng-controller="ExampleController">
        Enter text and hit enter:
        <input type="text" ng-model="text" name="text" />
        <input type="submit" id="submit" value="Submit" />
        <pre>list={{list}}</pre>
      </form>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-submit', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
         expect(element(by.model('text')).getAttribute('value')).toBe('');
       });
       it('should ignore empty strings', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
        });
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngFocus
 *
 * @description
 * Specify custom behavior on focus event.
 *
 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
 * during an `$apply` to ensure a consistent state.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */

/**
 * @ngdoc directive
 * @name ngBlur
 *
 * @description
 * Specify custom behavior on blur event.
 *
 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
 * an element has lost focus.
 *
 * Note: As the `blur` event is executed synchronously also during DOM manipulations
 * (e.g. removing a focussed input),
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
 * during an `$apply` to ensure a consistent state.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */

/**
 * @ngdoc directive
 * @name ngCopy
 *
 * @description
 * Specify custom behavior on copy event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
      copied: {{copied}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngCut
 *
 * @description
 * Specify custom behavior on cut event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
      cut: {{cut}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngPaste
 *
 * @description
 * Specify custom behavior on paste event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
      pasted: {{paste}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngIf
 * @restrict A
 *
 * @description
 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
 * {expression}. If the expression assigned to `ngIf` evaluates to a false
 * value then the element is removed from the DOM, otherwise a clone of the
 * element is reinserted into the DOM.
 *
 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
 * element in the DOM rather than changing its visibility via the `display` css property.  A common
 * case when this difference is significant is when using css selectors that rely on an element's
 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
 *
 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
 * is created when the element is restored.  The scope created within `ngIf` inherits from
 * its parent scope using
 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
 * a javascript primitive defined in the parent scope. In this case any modifications made to the
 * variable within the child scope will override (hide) the value in the parent scope.
 *
 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
 * is if an element's class attribute is directly modified after it's compiled, using something like
 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
 * the added class will be lost because the original compiled state is used to regenerate the element.
 *
 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
 * and `leave` effects.
 *
 * @animations
 * enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container
 * leave - happens just before the `ngIf` contents are removed from the DOM
 *
 * @element ANY
 * @scope
 * @priority 600
 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
 *     element is added to the DOM tree.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /><br/>
      Show when checked:
      <span ng-if="checked" class="animate-if">
        This is removed when the checkbox is unchecked.
      </span>
    </file>
    <file name="animations.css">
      .animate-if {
        background:white;
        border:1px solid black;
        padding:10px;
      }

      .animate-if.ng-enter, .animate-if.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
      }

      .animate-if.ng-enter,
      .animate-if.ng-leave.ng-leave-active {
        opacity:0;
      }

      .animate-if.ng-leave,
      .animate-if.ng-enter.ng-enter-active {
        opacity:1;
      }
    </file>
  </example>
 */
var ngIfDirective = ['$animate', function($animate) {
  return {
    multiElement: true,
    transclude: 'element',
    priority: 600,
    terminal: true,
    restrict: 'A',
    $$tlb: true,
    link: function($scope, $element, $attr, ctrl, $transclude) {
        var block, childScope, previousElements;
        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {

          if (value) {
            if (!childScope) {
              $transclude(function(clone, newScope) {
                childScope = newScope;
                clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');
                // Note: We only need the first/last node of the cloned nodes.
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                // by a directive with templateUrl when its template arrives.
                block = {
                  clone: clone
                };
                $animate.enter(clone, $element.parent(), $element);
              });
            }
          } else {
            if (previousElements) {
              previousElements.remove();
              previousElements = null;
            }
            if (childScope) {
              childScope.$destroy();
              childScope = null;
            }
            if (block) {
              previousElements = getBlockNodes(block.clone);
              $animate.leave(previousElements).then(function() {
                previousElements = null;
              });
              block = null;
            }
          }
        });
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngInclude
 * @restrict ECA
 *
 * @description
 * Fetches, compiles and includes an external HTML fragment.
 *
 * By default, the template URL is restricted to the same domain and protocol as the
 * application document. This is done by calling {@link $sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
 * ng.$sce Strict Contextual Escaping}.
 *
 * In addition, the browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy may further restrict whether the template is successfully loaded.
 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
 * access on some browsers.
 *
 * @animations
 * enter - animation is used to bring new content into the browser.
 * leave - animation is used to animate existing content away.
 *
 * The enter and leave animation occur concurrently.
 *
 * @scope
 * @priority 400
 *
 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
 * @param {string=} onload Expression to evaluate when a new partial is loaded.
 *
 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the content is loaded.
 *
 *                  - If the attribute is not set, disable scrolling.
 *                  - If the attribute is set without value, enable scrolling.
 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
 *
 * @example
  <example module="includeExample" deps="angular-animate.js" animations="true">
    <file name="index.html">
     <div ng-controller="ExampleController">
       <select ng-model="template" ng-options="t.name for t in templates">
        <option value="">(blank)</option>
       </select>
       url of the template: <code>{{template.url}}</code>
       <hr/>
       <div class="slide-animate-container">
         <div class="slide-animate" ng-include="template.url"></div>
       </div>
     </div>
    </file>
    <file name="script.js">
      angular.module('includeExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.templates =
            [ { name: 'template1.html', url: 'template1.html'},
              { name: 'template2.html', url: 'template2.html'} ];
          $scope.template = $scope.templates[0];
        }]);
     </file>
    <file name="template1.html">
      Content of template1.html
    </file>
    <file name="template2.html">
      Content of template2.html
    </file>
    <file name="animations.css">
      .slide-animate-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .slide-animate {
        padding:10px;
      }

      .slide-animate.ng-enter, .slide-animate.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
        display:block;
        padding:10px;
      }

      .slide-animate.ng-enter {
        top:-50px;
      }
      .slide-animate.ng-enter.ng-enter-active {
        top:0;
      }

      .slide-animate.ng-leave {
        top:0;
      }
      .slide-animate.ng-leave.ng-leave-active {
        top:50px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var templateSelect = element(by.model('template'));
      var includeElem = element(by.css('[ng-include]'));

      it('should load template1.html', function() {
        expect(includeElem.getText()).toMatch(/Content of template1.html/);
      });

      it('should load template2.html', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          // See https://github.com/angular/protractor/issues/480
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(2).click();
        expect(includeElem.getText()).toMatch(/Content of template2.html/);
      });

      it('should change to blank', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(0).click();
        expect(includeElem.isPresent()).toBe(false);
      });
    </file>
  </example>
 */


/**
 * @ngdoc event
 * @name ngInclude#$includeContentRequested
 * @eventType emit on the scope ngInclude was declared in
 * @description
 * Emitted every time the ngInclude content is requested.
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */


/**
 * @ngdoc event
 * @name ngInclude#$includeContentLoaded
 * @eventType emit on the current ngInclude scope
 * @description
 * Emitted every time the ngInclude content is reloaded.
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */


/**
 * @ngdoc event
 * @name ngInclude#$includeContentError
 * @eventType emit on the scope ngInclude was declared in
 * @description
 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */
var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate', '$sce',
                  function($templateRequest,   $anchorScroll,   $animate,   $sce) {
  return {
    restrict: 'ECA',
    priority: 400,
    terminal: true,
    transclude: 'element',
    controller: angular.noop,
    compile: function(element, attr) {
      var srcExp = attr.ngInclude || attr.src,
          onloadExp = attr.onload || '',
          autoScrollExp = attr.autoscroll;

      return function(scope, $element, $attr, ctrl, $transclude) {
        var changeCounter = 0,
            currentScope,
            previousElement,
            currentElement;

        var cleanupLastIncludeContent = function() {
          if (previousElement) {
            previousElement.remove();
            previousElement = null;
          }
          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }
          if (currentElement) {
            $animate.leave(currentElement).then(function() {
              previousElement = null;
            });
            previousElement = currentElement;
            currentElement = null;
          }
        };

        scope.$watch($sce.parseAsResourceUrl(srcExp), function ngIncludeWatchAction(src) {
          var afterAnimation = function() {
            if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
              $anchorScroll();
            }
          };
          var thisChangeId = ++changeCounter;

          if (src) {
            //set the 2nd param to true to ignore the template request error so that the inner
            //contents and scope can be cleaned up.
            $templateRequest(src, true).then(function(response) {
              if (thisChangeId !== changeCounter) return;
              var newScope = scope.$new();
              ctrl.template = response;

              // Note: This will also link all children of ng-include that were contained in the original
              // html. If that content contains controllers, ... they could pollute/change the scope.
              // However, using ng-include on an element with additional content does not make sense...
              // Note: We can't remove them in the cloneAttchFn of $transclude as that
              // function is called before linking the content, which would apply child
              // directives to non existing elements.
              var clone = $transclude(newScope, function(clone) {
                cleanupLastIncludeContent();
                $animate.enter(clone, null, $element).then(afterAnimation);
              });

              currentScope = newScope;
              currentElement = clone;

              currentScope.$emit('$includeContentLoaded', src);
              scope.$eval(onloadExp);
            }, function() {
              if (thisChangeId === changeCounter) {
                cleanupLastIncludeContent();
                scope.$emit('$includeContentError', src);
              }
            });
            scope.$emit('$includeContentRequested', src);
          } else {
            cleanupLastIncludeContent();
            ctrl.template = null;
          }
        });
      };
    }
  };
}];

// This directive is called during the $transclude call of the first `ngInclude` directive.
// It will replace and compile the content of the element with the loaded template.
// We need this directive so that the element content is already filled when
// the link function of another directive on the same element as ngInclude
// is called.
var ngIncludeFillContentDirective = ['$compile',
  function($compile) {
    return {
      restrict: 'ECA',
      priority: -400,
      require: 'ngInclude',
      link: function(scope, $element, $attr, ctrl) {
        if (/SVG/.test($element[0].toString())) {
          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
          // support innerHTML, so detect this here and try to generate the contents
          // specially.
          $element.empty();
          $compile(jqLiteBuildFragment(ctrl.template, document).childNodes)(scope,
              function namespaceAdaptedClone(clone) {
            $element.append(clone);
          }, {futureParentElement: $element});
          return;
        }

        $element.html(ctrl.template);
        $compile($element.contents())(scope);
      }
    };
  }];

/**
 * @ngdoc directive
 * @name ngInit
 * @restrict AC
 *
 * @description
 * The `ngInit` directive allows you to evaluate an expression in the
 * current scope.
 *
 * <div class="alert alert-error">
 * The only appropriate use of `ngInit` is for aliasing special properties of
 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you
 * should use {@link guide/controller controllers} rather than `ngInit`
 * to initialize values on a scope.
 * </div>
 * <div class="alert alert-warning">
 * **Note**: If you have assignment in `ngInit` along with {@link ng.$filter `$filter`}, make
 * sure you have parenthesis for correct precedence:
 * <pre class="prettyprint">
 * `<div ng-init="test1 = (data | orderBy:'name')"></div>`
 * </pre>
 * </div>
 *
 * @priority 450
 *
 * @element ANY
 * @param {expression} ngInit {@link guide/expression Expression} to eval.
 *
 * @example
   <example module="initExample">
     <file name="index.html">
   <script>
     angular.module('initExample', [])
       .controller('ExampleController', ['$scope', function($scope) {
         $scope.list = [['a', 'b'], ['c', 'd']];
       }]);
   </script>
   <div ng-controller="ExampleController">
     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
       </div>
     </div>
   </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should alias index positions', function() {
         var elements = element.all(by.css('.example-init'));
         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
       });
     </file>
   </example>
 */
var ngInitDirective = ngDirective({
  priority: 450,
  compile: function() {
    return {
      pre: function(scope, element, attrs) {
        scope.$eval(attrs.ngInit);
      }
    };
  }
});

/**
 * @ngdoc directive
 * @name ngList
 *
 * @description
 * Text input that converts between a delimited string and an array of strings. The default
 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
 *
 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
 *   list item is respected. This implies that the user of the directive is responsible for
 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
 *   tab or newline character.
 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
 *   when joining the list items back together) and whitespace around each list item is stripped
 *   before it is added to the model.
 *
 * ### Example with Validation
 *
 * <example name="ngList-directive" module="listExample">
 *   <file name="app.js">
 *      angular.module('listExample', [])
 *        .controller('ExampleController', ['$scope', function($scope) {
 *          $scope.names = ['morpheus', 'neo', 'trinity'];
 *        }]);
 *   </file>
 *   <file name="index.html">
 *    <form name="myForm" ng-controller="ExampleController">
 *      List: <input name="namesInput" ng-model="names" ng-list required>
 *      <span class="error" ng-show="myForm.namesInput.$error.required">
 *        Required!</span>
 *      <br>
 *      <tt>names = {{names}}</tt><br/>
 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
 *     </form>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var listInput = element(by.model('names'));
 *     var names = element(by.exactBinding('names'));
 *     var valid = element(by.binding('myForm.namesInput.$valid'));
 *     var error = element(by.css('span.error'));
 *
 *     it('should initialize to model', function() {
 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
 *       expect(valid.getText()).toContain('true');
 *       expect(error.getCssValue('display')).toBe('none');
 *     });
 *
 *     it('should be invalid if empty', function() {
 *       listInput.clear();
 *       listInput.sendKeys('');
 *
 *       expect(names.getText()).toContain('');
 *       expect(valid.getText()).toContain('false');
 *       expect(error.getCssValue('display')).not.toBe('none');
 *     });
 *   </file>
 * </example>
 *
 * ### Example - splitting on whitespace
 * <example name="ngList-directive-newlines">
 *   <file name="index.html">
 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
 *    <pre>{{ list | json }}</pre>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it("should split the text by newlines", function() {
 *       var listInput = element(by.model('list'));
 *       var output = element(by.binding('list | json'));
 *       listInput.sendKeys('abc\ndef\nghi');
 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
 *     });
 *   </file>
 * </example>
 *
 * @element input
 * @param {string=} ngList optional delimiter that should be used to split the value.
 */
var ngListDirective = function() {
  return {
    restrict: 'A',
    priority: 100,
    require: 'ngModel',
    link: function(scope, element, attr, ctrl) {
      // We want to control whitespace trimming so we use this convoluted approach
      // to access the ngList attribute, which doesn't pre-trim the attribute
      var ngList = element.attr(attr.$attr.ngList) || ', ';
      var trimValues = attr.ngTrim !== 'false';
      var separator = trimValues ? trim(ngList) : ngList;

      var parse = function(viewValue) {
        // If the viewValue is invalid (say required but empty) it will be `undefined`
        if (isUndefined(viewValue)) return;

        var list = [];

        if (viewValue) {
          forEach(viewValue.split(separator), function(value) {
            if (value) list.push(trimValues ? trim(value) : value);
          });
        }

        return list;
      };

      ctrl.$parsers.push(parse);
      ctrl.$formatters.push(function(value) {
        if (isArray(value)) {
          return value.join(ngList);
        }

        return undefined;
      });

      // Override the standard $isEmpty because an empty array means the input is empty.
      ctrl.$isEmpty = function(value) {
        return !value || !value.length;
      };
    }
  };
};

/* global VALID_CLASS: true,
  INVALID_CLASS: true,
  PRISTINE_CLASS: true,
  DIRTY_CLASS: true,
  UNTOUCHED_CLASS: true,
  TOUCHED_CLASS: true,
*/

var VALID_CLASS = 'ng-valid',
    INVALID_CLASS = 'ng-invalid',
    PRISTINE_CLASS = 'ng-pristine',
    DIRTY_CLASS = 'ng-dirty',
    UNTOUCHED_CLASS = 'ng-untouched',
    TOUCHED_CLASS = 'ng-touched',
    PENDING_CLASS = 'ng-pending';


var $ngModelMinErr = new minErr('ngModel');

/**
 * @ngdoc type
 * @name ngModel.NgModelController
 *
 * @property {string} $viewValue Actual string value in the view.
 * @property {*} $modelValue The value in the model that the control is bound to.
 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
       the control reads value from the DOM. The functions are called in array order, each passing
       its return value through to the next. The last return value is forwarded to the
       {@link ngModel.NgModelController#$validators `$validators`} collection.

Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
`$viewValue`}.

Returning `undefined` from a parser means a parse error occurred. In that case,
no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
is set to `true`. The parse error is stored in `ngModel.$error.parse`.

 *
 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
       the model value changes. The functions are called in reverse array order, each passing the value through to the
       next. The last return value is used as the actual DOM value.
       Used to format / convert values for display in the control.
 * ```js
 * function formatter(value) {
 *   if (value) {
 *     return value.toUpperCase();
 *   }
 * }
 * ngModel.$formatters.push(formatter);
 * ```
 *
 * @property {Object.<string, function>} $validators A collection of validators that are applied
 *      whenever the model value changes. The key value within the object refers to the name of the
 *      validator while the function refers to the validation operation. The validation operation is
 *      provided with the model value as an argument and must return a true or false value depending
 *      on the response of that validation.
 *
 * ```js
 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
 *   var value = modelValue || viewValue;
 *   return /[0-9]+/.test(value) &&
 *          /[a-z]+/.test(value) &&
 *          /[A-Z]+/.test(value) &&
 *          /\W+/.test(value);
 * };
 * ```
 *
 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
 *      is expected to return a promise when it is run during the model validation process. Once the promise
 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
 *      will only run once all synchronous validators have passed.
 *
 * Please note that if $http is used then it is important that the server returns a success HTTP response code
 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
 *
 * ```js
 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
 *   var value = modelValue || viewValue;
 *
 *   // Lookup user by username
 *   return $http.get('/api/users/' + value).
 *      then(function resolved() {
 *        //username exists, this means validation fails
 *        return $q.reject('exists');
 *      }, function rejected() {
 *        //username does not exist, therefore this validation passes
 *        return true;
 *      });
 * };
 * ```
 *
 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
 *     view value has changed. It is called with no arguments, and its return value is ignored.
 *     This can be used in place of additional $watches against the model value.
 *
 * @property {Object} $error An object hash with all failing validator ids as keys.
 * @property {Object} $pending An object hash with all pending validator ids as keys.
 *
 * @property {boolean} $untouched True if control has not lost focus yet.
 * @property {boolean} $touched True if control has lost focus.
 * @property {boolean} $pristine True if user has not interacted with the control yet.
 * @property {boolean} $dirty True if user has already interacted with the control.
 * @property {boolean} $valid True if there is no error.
 * @property {boolean} $invalid True if at least one error on the control.
 * @property {string} $name The name attribute of the control.
 *
 * @description
 *
 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
 * The controller contains services for data-binding, validation, CSS updates, and value formatting
 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
 * listening to DOM events.
 * Such DOM related logic should be provided by other directives which make use of
 * `NgModelController` for data-binding to control elements.
 * Angular provides this DOM logic for most {@link input `input`} elements.
 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
 *
 * @example
 * ### Custom Control Example
 * This example shows how to use `NgModelController` with a custom control to achieve
 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
 * collaborate together to achieve the desired result.
 *
 * Note that `contenteditable` is an HTML5 attribute, which tells the browser to let the element
 * contents be edited in place by the user.  This will not work on older browsers.
 *
 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
 * that content using the `$sce` service.
 *
 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
    <file name="style.css">
      [contenteditable] {
        border: 1px solid black;
        background-color: white;
        min-height: 20px;
      }

      .ng-invalid {
        border: 1px solid red;
      }

    </file>
    <file name="script.js">
      angular.module('customControl', ['ngSanitize']).
        directive('contenteditable', ['$sce', function($sce) {
          return {
            restrict: 'A', // only activate on element attribute
            require: '?ngModel', // get a hold of NgModelController
            link: function(scope, element, attrs, ngModel) {
              if (!ngModel) return; // do nothing if no ng-model

              // Specify how UI should be updated
              ngModel.$render = function() {
                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
              };

              // Listen for change events to enable binding
              element.on('blur keyup change', function() {
                scope.$evalAsync(read);
              });
              read(); // initialize

              // Write data to the model
              function read() {
                var html = element.html();
                // When we clear the content editable the browser leaves a <br> behind
                // If strip-br attribute is provided then we strip this out
                if ( attrs.stripBr && html == '<br>' ) {
                  html = '';
                }
                ngModel.$setViewValue(html);
              }
            }
          };
        }]);
    </file>
    <file name="index.html">
      <form name="myForm">
       <div contenteditable
            name="myWidget" ng-model="userContent"
            strip-br="true"
            required>Change me!</div>
        <span ng-show="myForm.myWidget.$error.required">Required!</span>
       <hr>
       <textarea ng-model="userContent"></textarea>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
    it('should data-bind and become invalid', function() {
      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {
        // SafariDriver can't handle contenteditable
        // and Firefox driver can't clear contenteditables very well
        return;
      }
      var contentEditable = element(by.css('[contenteditable]'));
      var content = 'Change me!';

      expect(contentEditable.getText()).toEqual(content);

      contentEditable.clear();
      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
      expect(contentEditable.getText()).toEqual('');
      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
    });
    </file>
 * </example>
 *
 *
 */
var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate',
    function($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {
  this.$viewValue = Number.NaN;
  this.$modelValue = Number.NaN;
  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.
  this.$validators = {};
  this.$asyncValidators = {};
  this.$parsers = [];
  this.$formatters = [];
  this.$viewChangeListeners = [];
  this.$untouched = true;
  this.$touched = false;
  this.$pristine = true;
  this.$dirty = false;
  this.$valid = true;
  this.$invalid = false;
  this.$error = {}; // keep invalid keys here
  this.$$success = {}; // keep valid keys here
  this.$pending = undefined; // keep pending keys here
  this.$name = $interpolate($attr.name || '', false)($scope);


  var parsedNgModel = $parse($attr.ngModel),
      parsedNgModelAssign = parsedNgModel.assign,
      ngModelGet = parsedNgModel,
      ngModelSet = parsedNgModelAssign,
      pendingDebounce = null,
      parserValid,
      ctrl = this;

  this.$$setOptions = function(options) {
    ctrl.$options = options;
    if (options && options.getterSetter) {
      var invokeModelGetter = $parse($attr.ngModel + '()'),
          invokeModelSetter = $parse($attr.ngModel + '($$$p)');

      ngModelGet = function($scope) {
        var modelValue = parsedNgModel($scope);
        if (isFunction(modelValue)) {
          modelValue = invokeModelGetter($scope);
        }
        return modelValue;
      };
      ngModelSet = function($scope, newValue) {
        if (isFunction(parsedNgModel($scope))) {
          invokeModelSetter($scope, {$$$p: ctrl.$modelValue});
        } else {
          parsedNgModelAssign($scope, ctrl.$modelValue);
        }
      };
    } else if (!parsedNgModel.assign) {
      throw $ngModelMinErr('nonassign', "Expression '{0}' is non-assignable. Element: {1}",
          $attr.ngModel, startingTag($element));
    }
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$render
   *
   * @description
   * Called when the view needs to be updated. It is expected that the user of the ng-model
   * directive will implement this method.
   *
   * The `$render()` method is invoked in the following situations:
   *
   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
   *   committed value then `$render()` is called to update the input control.
   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
   *   the `$viewValue` are different from last time.
   *
   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
   * `$modelValue` and `$viewValue` are actually different from their previous value. If `$modelValue`
   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
   * invoked if you only change a property on the objects.
   */
  this.$render = noop;

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$isEmpty
   *
   * @description
   * This is called when we need to determine if the value of an input is empty.
   *
   * For instance, the required directive does this to work out if the input has data or not.
   *
   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
   *
   * You can override this for input directives whose concept of being empty is different from the
   * default. The `checkboxInputType` directive does this because in its case a value of `false`
   * implies empty.
   *
   * @param {*} value The value of the input to check for emptiness.
   * @returns {boolean} True if `value` is "empty".
   */
  this.$isEmpty = function(value) {
    return isUndefined(value) || value === '' || value === null || value !== value;
  };

  var parentForm = $element.inheritedData('$formController') || nullFormCtrl,
      currentValidationRunId = 0;

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setValidity
   *
   * @description
   * Change the validity state, and notify the form.
   *
   * This method can be called within $parsers/$formatters or a custom validation implementation.
   * However, in most cases it should be sufficient to use the `ngModel.$validators` and
   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
   *
   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
   *                          Skipped is used by Angular when validators do not run because of parse errors and
   *                          when `$asyncValidators` do not run because any of the `$validators` failed.
   */
  addSetValidityMethod({
    ctrl: this,
    $element: $element,
    set: function(object, property) {
      object[property] = true;
    },
    unset: function(object, property) {
      delete object[property];
    },
    parentForm: parentForm,
    $animate: $animate
  });

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setPristine
   *
   * @description
   * Sets the control to its pristine state.
   *
   * This method can be called to remove the `ng-dirty` class and set the control to its pristine
   * state (`ng-pristine` class). A model is considered to be pristine when the control
   * has not been changed from when first compiled.
   */
  this.$setPristine = function() {
    ctrl.$dirty = false;
    ctrl.$pristine = true;
    $animate.removeClass($element, DIRTY_CLASS);
    $animate.addClass($element, PRISTINE_CLASS);
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setDirty
   *
   * @description
   * Sets the control to its dirty state.
   *
   * This method can be called to remove the `ng-pristine` class and set the control to its dirty
   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
   * from when first compiled.
   */
  this.$setDirty = function() {
    ctrl.$dirty = true;
    ctrl.$pristine = false;
    $animate.removeClass($element, PRISTINE_CLASS);
    $animate.addClass($element, DIRTY_CLASS);
    parentForm.$setDirty();
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setUntouched
   *
   * @description
   * Sets the control to its untouched state.
   *
   * This method can be called to remove the `ng-touched` class and set the control to its
   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
   * by default, however this function can be used to restore that state if the model has
   * already been touched by the user.
   */
  this.$setUntouched = function() {
    ctrl.$touched = false;
    ctrl.$untouched = true;
    $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setTouched
   *
   * @description
   * Sets the control to its touched state.
   *
   * This method can be called to remove the `ng-untouched` class and set the control to its
   * touched state (`ng-touched` class). A model is considered to be touched when the user has
   * first focused the control element and then shifted focus away from the control (blur event).
   */
  this.$setTouched = function() {
    ctrl.$touched = true;
    ctrl.$untouched = false;
    $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$rollbackViewValue
   *
   * @description
   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
   * which may be caused by a pending debounced event or because the input is waiting for a some
   * future event.
   *
   * If you have an input that uses `ng-model-options` to set up debounced events or events such
   * as blur you can have a situation where there is a period when the `$viewValue`
   * is out of synch with the ngModel's `$modelValue`.
   *
   * In this case, you can run into difficulties if you try to update the ngModel's `$modelValue`
   * programmatically before these debounced/future events have resolved/occurred, because Angular's
   * dirty checking mechanism is not able to tell whether the model has actually changed or not.
   *
   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
   * input which may have such events pending. This is important in order to make sure that the
   * input field will be updated with the new model value and any pending operations are cancelled.
   *
   * <example name="ng-model-cancel-update" module="cancel-update-example">
   *   <file name="app.js">
   *     angular.module('cancel-update-example', [])
   *
   *     .controller('CancelUpdateController', ['$scope', function($scope) {
   *       $scope.resetWithCancel = function(e) {
   *         if (e.keyCode == 27) {
   *           $scope.myForm.myInput1.$rollbackViewValue();
   *           $scope.myValue = '';
   *         }
   *       };
   *       $scope.resetWithoutCancel = function(e) {
   *         if (e.keyCode == 27) {
   *           $scope.myValue = '';
   *         }
   *       };
   *     }]);
   *   </file>
   *   <file name="index.html">
   *     <div ng-controller="CancelUpdateController">
   *       <p>Try typing something in each input.  See that the model only updates when you
   *          blur off the input.
   *        </p>
   *        <p>Now see what happens if you start typing then press the Escape key</p>
   *
   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
   *         <p>With $rollbackViewValue()</p>
   *         <input name="myInput1" ng-model="myValue" ng-keydown="resetWithCancel($event)"><br/>
   *         myValue: "{{ myValue }}"
   *
   *         <p>Without $rollbackViewValue()</p>
   *         <input name="myInput2" ng-model="myValue" ng-keydown="resetWithoutCancel($event)"><br/>
   *         myValue: "{{ myValue }}"
   *       </form>
   *     </div>
   *   </file>
   * </example>
   */
  this.$rollbackViewValue = function() {
    $timeout.cancel(pendingDebounce);
    ctrl.$viewValue = ctrl.$$lastCommittedViewValue;
    ctrl.$render();
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$validate
   *
   * @description
   * Runs each of the registered validators (first synchronous validators and then
   * asynchronous validators).
   * If the validity changes to invalid, the model will be set to `undefined`,
   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
   * If the validity changes to valid, it will set the model to the last available valid
   * modelValue, i.e. either the last parsed value or the last value set from the scope.
   */
  this.$validate = function() {
    // ignore $validate before model is initialized
    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
      return;
    }

    var viewValue = ctrl.$$lastCommittedViewValue;
    // Note: we use the $$rawModelValue as $modelValue might have been
    // set to undefined during a view -> model update that found validation
    // errors. We can't parse the view here, since that could change
    // the model although neither viewValue nor the model on the scope changed
    var modelValue = ctrl.$$rawModelValue;

    var prevValid = ctrl.$valid;
    var prevModelValue = ctrl.$modelValue;

    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;

    ctrl.$$runValidators(modelValue, viewValue, function(allValid) {
      // If there was no change in validity, don't update the model
      // This prevents changing an invalid modelValue to undefined
      if (!allowInvalid && prevValid !== allValid) {
        // Note: Don't check ctrl.$valid here, as we could have
        // external validators (e.g. calculated on the server),
        // that just call $setValidity and need the model value
        // to calculate their validity.
        ctrl.$modelValue = allValid ? modelValue : undefined;

        if (ctrl.$modelValue !== prevModelValue) {
          ctrl.$$writeModelToScope();
        }
      }
    });

  };

  this.$$runValidators = function(modelValue, viewValue, doneCallback) {
    currentValidationRunId++;
    var localValidationRunId = currentValidationRunId;

    // check parser error
    if (!processParseErrors()) {
      validationDone(false);
      return;
    }
    if (!processSyncValidators()) {
      validationDone(false);
      return;
    }
    processAsyncValidators();

    function processParseErrors() {
      var errorKey = ctrl.$$parserName || 'parse';
      if (parserValid === undefined) {
        setValidity(errorKey, null);
      } else {
        if (!parserValid) {
          forEach(ctrl.$validators, function(v, name) {
            setValidity(name, null);
          });
          forEach(ctrl.$asyncValidators, function(v, name) {
            setValidity(name, null);
          });
        }
        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName
        setValidity(errorKey, parserValid);
        return parserValid;
      }
      return true;
    }

    function processSyncValidators() {
      var syncValidatorsValid = true;
      forEach(ctrl.$validators, function(validator, name) {
        var result = validator(modelValue, viewValue);
        syncValidatorsValid = syncValidatorsValid && result;
        setValidity(name, result);
      });
      if (!syncValidatorsValid) {
        forEach(ctrl.$asyncValidators, function(v, name) {
          setValidity(name, null);
        });
        return false;
      }
      return true;
    }

    function processAsyncValidators() {
      var validatorPromises = [];
      var allValid = true;
      forEach(ctrl.$asyncValidators, function(validator, name) {
        var promise = validator(modelValue, viewValue);
        if (!isPromiseLike(promise)) {
          throw $ngModelMinErr("$asyncValidators",
            "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);
        }
        setValidity(name, undefined);
        validatorPromises.push(promise.then(function() {
          setValidity(name, true);
        }, function(error) {
          allValid = false;
          setValidity(name, false);
        }));
      });
      if (!validatorPromises.length) {
        validationDone(true);
      } else {
        $q.all(validatorPromises).then(function() {
          validationDone(allValid);
        }, noop);
      }
    }

    function setValidity(name, isValid) {
      if (localValidationRunId === currentValidationRunId) {
        ctrl.$setValidity(name, isValid);
      }
    }

    function validationDone(allValid) {
      if (localValidationRunId === currentValidationRunId) {

        doneCallback(allValid);
      }
    }
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$commitViewValue
   *
   * @description
   * Commit a pending update to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
   * usually handles calling this in response to input events.
   */
  this.$commitViewValue = function() {
    var viewValue = ctrl.$viewValue;

    $timeout.cancel(pendingDebounce);

    // If the view value has not changed then we should just exit, except in the case where there is
    // a native validator on the element. In this case the validation state may have changed even though
    // the viewValue has stayed empty.
    if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {
      return;
    }
    ctrl.$$lastCommittedViewValue = viewValue;

    // change to dirty
    if (ctrl.$pristine) {
      this.$setDirty();
    }
    this.$$parseAndValidate();
  };

  this.$$parseAndValidate = function() {
    var viewValue = ctrl.$$lastCommittedViewValue;
    var modelValue = viewValue;
    parserValid = isUndefined(modelValue) ? undefined : true;

    if (parserValid) {
      for (var i = 0; i < ctrl.$parsers.length; i++) {
        modelValue = ctrl.$parsers[i](modelValue);
        if (isUndefined(modelValue)) {
          parserValid = false;
          break;
        }
      }
    }
    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
      // ctrl.$modelValue has not been touched yet...
      ctrl.$modelValue = ngModelGet($scope);
    }
    var prevModelValue = ctrl.$modelValue;
    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
    ctrl.$$rawModelValue = modelValue;

    if (allowInvalid) {
      ctrl.$modelValue = modelValue;
      writeToModelIfNeeded();
    }

    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
    // This can happen if e.g. $setViewValue is called from inside a parser
    ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {
      if (!allowInvalid) {
        // Note: Don't check ctrl.$valid here, as we could have
        // external validators (e.g. calculated on the server),
        // that just call $setValidity and need the model value
        // to calculate their validity.
        ctrl.$modelValue = allValid ? modelValue : undefined;
        writeToModelIfNeeded();
      }
    });

    function writeToModelIfNeeded() {
      if (ctrl.$modelValue !== prevModelValue) {
        ctrl.$$writeModelToScope();
      }
    }
  };

  this.$$writeModelToScope = function() {
    ngModelSet($scope, ctrl.$modelValue);
    forEach(ctrl.$viewChangeListeners, function(listener) {
      try {
        listener();
      } catch (e) {
        $exceptionHandler(e);
      }
    });
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setViewValue
   *
   * @description
   * Update the view value.
   *
   * This method should be called when an input directive want to change the view value; typically,
   * this is done from within a DOM event handler.
   *
   * For example {@link ng.directive:input input} calls it when the value of the input changes and
   * {@link ng.directive:select select} calls it when an option is selected.
   *
   * If the new `value` is an object (rather than a string or a number), we should make a copy of the
   * object before passing it to `$setViewValue`.  This is because `ngModel` does not perform a deep
   * watch of objects, it only looks for a change of identity. If you only change the property of
   * the object then ngModel will not realise that the object has changed and will not invoke the
   * `$parsers` and `$validators` pipelines.
   *
   * For this reason, you should not change properties of the copy once it has been passed to
   * `$setViewValue`. Otherwise you may cause the model value on the scope to change incorrectly.
   *
   * When this method is called, the new `value` will be staged for committing through the `$parsers`
   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
   * value sent directly for processing, finally to be applied to `$modelValue` and then the
   * **expression** specified in the `ng-model` attribute.
   *
   * Lastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.
   *
   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
   * and the `default` trigger is not listed, all those actions will remain pending until one of the
   * `updateOn` events is triggered on the DOM element.
   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
   * directive is used with a custom debounce for this particular event.
   *
   * Note that calling this function does not trigger a `$digest`.
   *
   * @param {string} value Value from the view.
   * @param {string} trigger Event that triggered the update.
   */
  this.$setViewValue = function(value, trigger) {
    ctrl.$viewValue = value;
    if (!ctrl.$options || ctrl.$options.updateOnDefault) {
      ctrl.$$debounceViewValueCommit(trigger);
    }
  };

  this.$$debounceViewValueCommit = function(trigger) {
    var debounceDelay = 0,
        options = ctrl.$options,
        debounce;

    if (options && isDefined(options.debounce)) {
      debounce = options.debounce;
      if (isNumber(debounce)) {
        debounceDelay = debounce;
      } else if (isNumber(debounce[trigger])) {
        debounceDelay = debounce[trigger];
      } else if (isNumber(debounce['default'])) {
        debounceDelay = debounce['default'];
      }
    }

    $timeout.cancel(pendingDebounce);
    if (debounceDelay) {
      pendingDebounce = $timeout(function() {
        ctrl.$commitViewValue();
      }, debounceDelay);
    } else if ($rootScope.$$phase) {
      ctrl.$commitViewValue();
    } else {
      $scope.$apply(function() {
        ctrl.$commitViewValue();
      });
    }
  };

  // model -> value
  // Note: we cannot use a normal scope.$watch as we want to detect the following:
  // 1. scope value is 'a'
  // 2. user enters 'b'
  // 3. ng-change kicks in and reverts scope value to 'a'
  //    -> scope value did not change since the last digest as
  //       ng-change executes in apply phase
  // 4. view should be changed back to 'a'
  $scope.$watch(function ngModelWatch() {
    var modelValue = ngModelGet($scope);

    // if scope model value and ngModel value are out of sync
    // TODO(perf): why not move this to the action fn?
    if (modelValue !== ctrl.$modelValue) {
      ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;
      parserValid = undefined;

      var formatters = ctrl.$formatters,
          idx = formatters.length;

      var viewValue = modelValue;
      while (idx--) {
        viewValue = formatters[idx](viewValue);
      }
      if (ctrl.$viewValue !== viewValue) {
        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;
        ctrl.$render();

        ctrl.$$runValidators(modelValue, viewValue, noop);
      }
    }

    return modelValue;
  });
}];


/**
 * @ngdoc directive
 * @name ngModel
 *
 * @element input
 * @priority 1
 *
 * @description
 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
 * property on the scope using {@link ngModel.NgModelController NgModelController},
 * which is created and exposed by this directive.
 *
 * `ngModel` is responsible for:
 *
 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
 *   require.
 * - Providing validation behavior (i.e. required, number, email, url).
 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`, `ng-untouched`) including animations.
 * - Registering the control with its parent {@link ng.directive:form form}.
 *
 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
 * current scope. If the property doesn't already exist on this scope, it will be created
 * implicitly and added to the scope.
 *
 * For best practices on using `ngModel`, see:
 *
 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
 *
 * For basic examples, how to use `ngModel`, see:
 *
 *  - {@link ng.directive:input input}
 *    - {@link input[text] text}
 *    - {@link input[checkbox] checkbox}
 *    - {@link input[radio] radio}
 *    - {@link input[number] number}
 *    - {@link input[email] email}
 *    - {@link input[url] url}
 *    - {@link input[date] date}
 *    - {@link input[datetime-local] datetime-local}
 *    - {@link input[time] time}
 *    - {@link input[month] month}
 *    - {@link input[week] week}
 *  - {@link ng.directive:select select}
 *  - {@link ng.directive:textarea textarea}
 *
 * # CSS classes
 * The following CSS classes are added and removed on the associated input/select/textarea element
 * depending on the validity of the model.
 *
 *  - `ng-valid`: the model is valid
 *  - `ng-invalid`: the model is invalid
 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
 *  - `ng-pristine`: the control hasn't been interacted with yet
 *  - `ng-dirty`: the control has been interacted with
 *  - `ng-touched`: the control has been blurred
 *  - `ng-untouched`: the control hasn't been blurred
 *  - `ng-pending`: any `$asyncValidators` are unfulfilled
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 * ## Animation Hooks
 *
 * Animations within models are triggered when any of the associated CSS classes are added and removed
 * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,
 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
 * The animations that are triggered within ngModel are similar to how they work in ngClass and
 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style an input element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-input {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-input.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">
     <file name="index.html">
       <script>
        angular.module('inputExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.val = '1';
          }]);
       </script>
       <style>
         .my-input {
           -webkit-transition:all linear 0.5s;
           transition:all linear 0.5s;
           background: transparent;
         }
         .my-input.ng-invalid {
           color:white;
           background: red;
         }
       </style>
       Update input to see transitions when valid/invalid.
       Integer is a valid value.
       <form name="testForm" ng-controller="ExampleController">
         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input" />
       </form>
     </file>
 * </example>
 *
 * ## Binding to a getter/setter
 *
 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
 * function that returns a representation of the model when called with zero arguments, and sets
 * the internal state of a model when called with an argument. It's sometimes useful to use this
 * for models that have an internal representation that's different from what the model exposes
 * to the view.
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
 * frequently than other parts of your code.
 * </div>
 *
 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
 * a `<form>`, which will enable this behavior for all `<input>`s within it. See
 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
 *
 * The following example shows how to use `ngModel` with a getter/setter:
 *
 * @example
 * <example name="ngModel-getter-setter" module="getterSetterExample">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <form name="userForm">
           Name:
           <input type="text" name="userName"
                  ng-model="user.name"
                  ng-model-options="{ getterSetter: true }" />
         </form>
         <pre>user.name = <span ng-bind="user.name()"></span></pre>
       </div>
     </file>
     <file name="app.js">
       angular.module('getterSetterExample', [])
         .controller('ExampleController', ['$scope', function($scope) {
           var _name = 'Brian';
           $scope.user = {
             name: function(newName) {
               if (angular.isDefined(newName)) {
                 _name = newName;
               }
               return _name;
             }
           };
         }]);
     </file>
 * </example>
 */
var ngModelDirective = ['$rootScope', function($rootScope) {
  return {
    restrict: 'A',
    require: ['ngModel', '^?form', '^?ngModelOptions'],
    controller: NgModelController,
    // Prelink needs to run before any input directive
    // so that we can set the NgModelOptions in NgModelController
    // before anyone else uses it.
    priority: 1,
    compile: function ngModelCompile(element) {
      // Setup initial state of the control
      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);

      return {
        pre: function ngModelPreLink(scope, element, attr, ctrls) {
          var modelCtrl = ctrls[0],
              formCtrl = ctrls[1] || nullFormCtrl;

          modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);

          // notify others, especially parent forms
          formCtrl.$addControl(modelCtrl);

          attr.$observe('name', function(newValue) {
            if (modelCtrl.$name !== newValue) {
              formCtrl.$$renameControl(modelCtrl, newValue);
            }
          });

          scope.$on('$destroy', function() {
            formCtrl.$removeControl(modelCtrl);
          });
        },
        post: function ngModelPostLink(scope, element, attr, ctrls) {
          var modelCtrl = ctrls[0];
          if (modelCtrl.$options && modelCtrl.$options.updateOn) {
            element.on(modelCtrl.$options.updateOn, function(ev) {
              modelCtrl.$$debounceViewValueCommit(ev && ev.type);
            });
          }

          element.on('blur', function(ev) {
            if (modelCtrl.$touched) return;

            if ($rootScope.$$phase) {
              scope.$evalAsync(modelCtrl.$setTouched);
            } else {
              scope.$apply(modelCtrl.$setTouched);
            }
          });
        }
      };
    }
  };
}];

var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;

/**
 * @ngdoc directive
 * @name ngModelOptions
 *
 * @description
 * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of
 * events that will trigger a model update and/or a debouncing delay so that the actual update only
 * takes place when a timer expires; this timer will be reset after another change takes place.
 *
 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
 * be different from the value in the actual model. This means that if you update the model you
 * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in
 * order to make sure it is synchronized with the model and that any debounced action is canceled.
 *
 * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}
 * method is by making sure the input is placed inside a form that has a `name` attribute. This is
 * important because `form` controllers are published to the related scope under the name in their
 * `name` attribute.
 *
 * Any pending changes will take place immediately when an enclosing form is submitted via the
 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
 * to have access to the updated model.
 *
 * `ngModelOptions` has an effect on the element it's declared on and its descendants.
 *
 * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:
 *   - `updateOn`: string specifying which event should the input be bound to. You can set several
 *     events using an space delimited list. There is a special event called `default` that
 *     matches the default events belonging of the control.
 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
 *     custom value for each event. For example:
 *     `ng-model-options="{ updateOn: 'default blur', debounce: {'default': 500, 'blur': 0} }"`
 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
 *     not validate correctly instead of the default behavior of setting the model to undefined.
 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
       `ngModel` as getters/setters.
 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
 *     `<input type="date">`, `<input type="time">`, ... . Right now, the only supported value is `'UTC'`,
 *     otherwise the default timezone of the browser will be used.
 *
 * @example

  The following example shows how to override immediate updates. Changes on the inputs within the
  form will update the model only when the control loses focus (blur event). If `escape` key is
  pressed while the input field is focused, the value is reset to the value in the current model.

  <example name="ngModelOptions-directive-blur" module="optionsExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <form name="userForm">
          Name:
          <input type="text" name="userName"
                 ng-model="user.name"
                 ng-model-options="{ updateOn: 'blur' }"
                 ng-keyup="cancel($event)" /><br />

          Other data:
          <input type="text" ng-model="user.data" /><br />
        </form>
        <pre>user.name = <span ng-bind="user.name"></span></pre>
      </div>
    </file>
    <file name="app.js">
      angular.module('optionsExample', [])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.user = { name: 'say', data: '' };

          $scope.cancel = function(e) {
            if (e.keyCode == 27) {
              $scope.userForm.userName.$rollbackViewValue();
            }
          };
        }]);
    </file>
    <file name="protractor.js" type="protractor">
      var model = element(by.binding('user.name'));
      var input = element(by.model('user.name'));
      var other = element(by.model('user.data'));

      it('should allow custom events', function() {
        input.sendKeys(' hello');
        input.click();
        expect(model.getText()).toEqual('say');
        other.click();
        expect(model.getText()).toEqual('say hello');
      });

      it('should $rollbackViewValue when model changes', function() {
        input.sendKeys(' hello');
        expect(input.getAttribute('value')).toEqual('say hello');
        input.sendKeys(protractor.Key.ESCAPE);
        expect(input.getAttribute('value')).toEqual('say');
        other.click();
        expect(model.getText()).toEqual('say');
      });
    </file>
  </example>

  This one shows how to debounce model changes. Model will be updated only 1 sec after last change.
  If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.

  <example name="ngModelOptions-directive-debounce" module="optionsExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <form name="userForm">
          Name:
          <input type="text" name="userName"
                 ng-model="user.name"
                 ng-model-options="{ debounce: 1000 }" />
          <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button><br />
        </form>
        <pre>user.name = <span ng-bind="user.name"></span></pre>
      </div>
    </file>
    <file name="app.js">
      angular.module('optionsExample', [])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.user = { name: 'say' };
        }]);
    </file>
  </example>

  This one shows how to bind to getter/setters:

  <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <form name="userForm">
          Name:
          <input type="text" name="userName"
                 ng-model="user.name"
                 ng-model-options="{ getterSetter: true }" />
        </form>
        <pre>user.name = <span ng-bind="user.name()"></span></pre>
      </div>
    </file>
    <file name="app.js">
      angular.module('getterSetterExample', [])
        .controller('ExampleController', ['$scope', function($scope) {
          var _name = 'Brian';
          $scope.user = {
            name: function(newName) {
              return angular.isDefined(newName) ? (_name = newName) : _name;
            }
          };
        }]);
    </file>
  </example>
 */
var ngModelOptionsDirective = function() {
  return {
    restrict: 'A',
    controller: ['$scope', '$attrs', function($scope, $attrs) {
      var that = this;
      this.$options = copy($scope.$eval($attrs.ngModelOptions));
      // Allow adding/overriding bound events
      if (this.$options.updateOn !== undefined) {
        this.$options.updateOnDefault = false;
        // extract "default" pseudo-event from list of events that can trigger a model update
        this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function() {
          that.$options.updateOnDefault = true;
          return ' ';
        }));
      } else {
        this.$options.updateOnDefault = true;
      }
    }]
  };
};



// helper methods
function addSetValidityMethod(context) {
  var ctrl = context.ctrl,
      $element = context.$element,
      classCache = {},
      set = context.set,
      unset = context.unset,
      parentForm = context.parentForm,
      $animate = context.$animate;

  classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));

  ctrl.$setValidity = setValidity;

  function setValidity(validationErrorKey, state, controller) {
    if (state === undefined) {
      createAndSet('$pending', validationErrorKey, controller);
    } else {
      unsetAndCleanup('$pending', validationErrorKey, controller);
    }
    if (!isBoolean(state)) {
      unset(ctrl.$error, validationErrorKey, controller);
      unset(ctrl.$$success, validationErrorKey, controller);
    } else {
      if (state) {
        unset(ctrl.$error, validationErrorKey, controller);
        set(ctrl.$$success, validationErrorKey, controller);
      } else {
        set(ctrl.$error, validationErrorKey, controller);
        unset(ctrl.$$success, validationErrorKey, controller);
      }
    }
    if (ctrl.$pending) {
      cachedToggleClass(PENDING_CLASS, true);
      ctrl.$valid = ctrl.$invalid = undefined;
      toggleValidationCss('', null);
    } else {
      cachedToggleClass(PENDING_CLASS, false);
      ctrl.$valid = isObjectEmpty(ctrl.$error);
      ctrl.$invalid = !ctrl.$valid;
      toggleValidationCss('', ctrl.$valid);
    }

    // re-read the state as the set/unset methods could have
    // combined state in ctrl.$error[validationError] (used for forms),
    // where setting/unsetting only increments/decrements the value,
    // and does not replace it.
    var combinedState;
    if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {
      combinedState = undefined;
    } else if (ctrl.$error[validationErrorKey]) {
      combinedState = false;
    } else if (ctrl.$$success[validationErrorKey]) {
      combinedState = true;
    } else {
      combinedState = null;
    }

    toggleValidationCss(validationErrorKey, combinedState);
    parentForm.$setValidity(validationErrorKey, combinedState, ctrl);
  }

  function createAndSet(name, value, controller) {
    if (!ctrl[name]) {
      ctrl[name] = {};
    }
    set(ctrl[name], value, controller);
  }

  function unsetAndCleanup(name, value, controller) {
    if (ctrl[name]) {
      unset(ctrl[name], value, controller);
    }
    if (isObjectEmpty(ctrl[name])) {
      ctrl[name] = undefined;
    }
  }

  function cachedToggleClass(className, switchValue) {
    if (switchValue && !classCache[className]) {
      $animate.addClass($element, className);
      classCache[className] = true;
    } else if (!switchValue && classCache[className]) {
      $animate.removeClass($element, className);
      classCache[className] = false;
    }
  }

  function toggleValidationCss(validationErrorKey, isValid) {
    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';

    cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);
    cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);
  }
}

function isObjectEmpty(obj) {
  if (obj) {
    for (var prop in obj) {
      return false;
    }
  }
  return true;
}

/**
 * @ngdoc directive
 * @name ngNonBindable
 * @restrict AC
 * @priority 1000
 *
 * @description
 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
 * DOM element. This is useful if the element contains what appears to be Angular directives and
 * bindings but which should be ignored by Angular. This could be the case if you have a site that
 * displays snippets of code, for instance.
 *
 * @element ANY
 *
 * @example
 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
 * but the one wrapped in `ngNonBindable` is left alone.
 *
 * @example
    <example>
      <file name="index.html">
        <div>Normal: {{1 + 2}}</div>
        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
      </file>
      <file name="protractor.js" type="protractor">
       it('should check ng-non-bindable', function() {
         expect(element(by.binding('1 + 2')).getText()).toContain('3');
         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
       });
      </file>
    </example>
 */
var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });

/* global jqLiteRemove */

var ngOptionsMinErr = minErr('ngOptions');

/**
 * @ngdoc directive
 * @name ngOptions
 * @restrict A
 *
 * @description
 *
 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
 * elements for the `<select>` element using the array or object obtained by evaluating the
 * `ngOptions` comprehension expression.
 *
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a
 * similar result. However, `ngOptions` provides some benefits such as reducing memory and
 * increasing speed by not creating a new scope for each repeated instance, as well as providing
 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
 * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound
 *  to a non-string value. This is because an option element can only be bound to string values at
 * present.
 *
 * When an item in the `<select>` menu is selected, the array element or object property
 * represented by the selected option will be bound to the model identified by the `ngModel`
 * directive.
 *
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
 * option. See example below for demonstration.
 *
 * <div class="alert alert-warning">
 * **Note:** `ngModel` compares by reference, not value. This is important when binding to an
 * array of objects. See an example [in this jsfiddle](http://jsfiddle.net/qWzTb/).
 * </div>
 *
 * ## `select` **`as`**
 *
 * Using `select` **`as`** will bind the result of the `select` expression to the model, but
 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
 * is used, the result of that expression will be set as the value of the `option` and `select` elements.
 *
 *
 * ### `select` **`as`** and **`track by`**
 *
 * <div class="alert alert-warning">
 * Do not use `select` **`as`** and **`track by`** in the same expression. They are not designed to work together.
 * </div>
 *
 * Consider the following example:
 *
 * ```html
 * <select ng-options="item.subItem as item.label for item in values track by item.id" ng-model="selected">
 * ```
 *
 * ```js
 * $scope.values = [{
 *   id: 1,
 *   label: 'aLabel',
 *   subItem: { name: 'aSubItem' }
 * }, {
 *   id: 2,
 *   label: 'bLabel',
 *   subItem: { name: 'bSubItem' }
 * }];
 *
 * $scope.selected = { name: 'aSubItem' };
 * ```
 *
 * With the purpose of preserving the selection, the **`track by`** expression is always applied to the element
 * of the data source (to `item` in this example). To calculate whether an element is selected, we do the
 * following:
 *
 * 1. Apply **`track by`** to the elements in the array. In the example: `[1, 2]`
 * 2. Apply **`track by`** to the already selected value in `ngModel`.
 *    In the example: this is not possible as **`track by`** refers to `item.id`, but the selected
 *    value from `ngModel` is `{name: 'aSubItem'}`, so the **`track by`** expression is applied to
 *    a wrong object, the selected element can't be found, `<select>` is always reset to the "not
 *    selected" option.
 *
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required The control is considered valid only if value is entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {comprehension_expression=} ngOptions in one of the following forms:
 *
 *   * for array data sources:
 *     * `label` **`for`** `value` **`in`** `array`
 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
 *        (for including a filter with `track by`)
 *   * for object data sources:
 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`group by`** `group`
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`disable when`** `disable`
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
 *
 * Where:
 *
 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
 *   * `value`: local variable which will refer to each item in the `array` or each property value
 *      of `object` during iteration.
 *   * `key`: local variable which will refer to a property name in `object` during iteration.
 *   * `label`: The result of this expression will be the label for `<option>` element. The
 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
 *      element. If not specified, `select` expression will default to `value`.
 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
 *      DOM element.
 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`
 *      element. Return `true` to disable.
 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
 *      even when the options are recreated (e.g. reloaded from the server).
 *
 * @example
    <example module="selectExample">
      <file name="index.html">
        <script>
        angular.module('selectExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.colors = [
              {name:'black', shade:'dark'},
              {name:'white', shade:'light', notAnOption: true},
              {name:'red', shade:'dark'},
              {name:'blue', shade:'dark', notAnOption: true},
              {name:'yellow', shade:'light', notAnOption: false}
            ];
            $scope.myColor = $scope.colors[2]; // red
          }]);
        </script>
        <div ng-controller="ExampleController">
          <ul>
            <li ng-repeat="color in colors">
              Name: <input ng-model="color.name">
              <input type="checkbox" ng-model="color.notAnOption"> Disabled?
              [<a href ng-click="colors.splice($index, 1)">X</a>]
            </li>
            <li>
              [<a href ng-click="colors.push({})">add</a>]
            </li>
          </ul>
          <hr/>
          Color (null not allowed):
          <select ng-model="myColor" ng-options="color.name for color in colors"></select><br>

          Color (null allowed):
          <span  class="nullable">
            <select ng-model="myColor" ng-options="color.name for color in colors">
              <option value="">-- choose color --</option>
            </select>
          </span><br/>

          Color grouped by shade:
          <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
          </select><br/>

          Color grouped by shade, with some disabled:
          <select ng-model="myColor"
                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">
          </select><br/>



          Select <a href ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</a>.<br>
          <hr/>
          Currently selected: {{ {selected_color:myColor} }}
          <div style="border:solid 1px black; height:20px"
               ng-style="{'background-color':myColor.name}">
          </div>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
         it('should check ng-options', function() {
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
           element.all(by.model('myColor')).first().click();
           element.all(by.css('select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
           element(by.css('.nullable select[ng-model="myColor"]')).click();
           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
         });
      </file>
    </example>
 */

// jshint maxlen: false
//                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555550000000006666666666666660000000777777777777777000000000000000888888888800000000000000000009999999999
var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
                        // 1: value expression (valueFn)
                        // 2: label expression (displayFn)
                        // 3: group by expression (groupByFn)
                        // 4: disable when expression (disableWhenFn)
                        // 5: array item variable name
                        // 6: object item key variable name
                        // 7: object item value variable name
                        // 8: collection expression
                        // 9: track by expression
// jshint maxlen: 100


var ngOptionsDirective = ['$compile', '$parse', function($compile, $parse) {

  function parseOptionsExpression(optionsExp, selectElement, scope) {

    var match = optionsExp.match(NG_OPTIONS_REGEXP);
    if (!(match)) {
      throw ngOptionsMinErr('iexp',
        "Expected expression in form of " +
        "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +
        " but got '{0}'. Element: {1}",
        optionsExp, startingTag(selectElement));
    }

    // Extract the parts from the ngOptions expression

    // The variable name for the value of the item in the collection
    var valueName = match[5] || match[7];
    // The variable name for the key of the item in the collection
    var keyName = match[6];

    // An expression that generates the viewValue for an option if there is a label expression
    var selectAs = / as /.test(match[0]) && match[1];
    // An expression that is used to track the id of each object in the options collection
    var trackBy = match[9];
    // An expression that generates the viewValue for an option if there is no label expression
    var valueFn = $parse(match[2] ? match[1] : valueName);
    var selectAsFn = selectAs && $parse(selectAs);
    var viewValueFn = selectAsFn || valueFn;
    var trackByFn = trackBy && $parse(trackBy);

    // Get the value by which we are going to track the option
    // if we have a trackFn then use that (passing scope and locals)
    // otherwise just hash the given viewValue
    var getTrackByValue = trackBy ?
                              function(viewValue, locals) { return trackByFn(scope, locals); } :
                              function getHashOfValue(viewValue) { return hashKey(viewValue); };
    var displayFn = $parse(match[2] || match[1]);
    var groupByFn = $parse(match[3] || '');
    var disableWhenFn = $parse(match[4] || '');
    var valuesFn = $parse(match[8]);

    var locals = {};
    var getLocals = keyName ? function(value, key) {
      locals[keyName] = key;
      locals[valueName] = value;
      return locals;
    } : function(value) {
      locals[valueName] = value;
      return locals;
    };


    function Option(selectValue, viewValue, label, group, disabled) {
      this.selectValue = selectValue;
      this.viewValue = viewValue;
      this.label = label;
      this.group = group;
      this.disabled = disabled;
    }

    return {
      getWatchables: $parse(valuesFn, function(values) {
        // Create a collection of things that we would like to watch (watchedArray)
        // so that they can all be watched using a single $watchCollection
        // that only runs the handler once if anything changes
        var watchedArray = [];
        values = values || [];

        Object.keys(values).forEach(function getWatchable(key) {
          var locals = getLocals(values[key], key);
          var selectValue = getTrackByValue(values[key], locals);
          watchedArray.push(selectValue);

          // Only need to watch the displayFn if there is a specific label expression
          if (match[2]) {
            var label = displayFn(scope, locals);
            watchedArray.push(label);
          }

          // Only need to watch the disableWhenFn if there is a specific disable expression
          if (match[4]) {
            var disableWhen = disableWhenFn(scope, locals);
            watchedArray.push(disableWhen);
          }
        });
        return watchedArray;
      }),

      getOptions: function() {

        var optionItems = [];
        var selectValueMap = {};

        // The option values were already computed in the `getWatchables` fn,
        // which must have been called to trigger `getOptions`
        var optionValues = valuesFn(scope) || [];

        var keys = Object.keys(optionValues);
        keys.forEach(function getOption(key) {

          // Ignore "angular" properties that start with $ or $$
          if (key.charAt(0) === '$') return;

          var value = optionValues[key];
          var locals = getLocals(value, key);
          var viewValue = viewValueFn(scope, locals);
          var selectValue = getTrackByValue(viewValue, locals);
          var label = displayFn(scope, locals);
          var group = groupByFn(scope, locals);
          var disabled = disableWhenFn(scope, locals);
          var optionItem = new Option(selectValue, viewValue, label, group, disabled);

          optionItems.push(optionItem);
          selectValueMap[selectValue] = optionItem;
        });

        return {
          items: optionItems,
          selectValueMap: selectValueMap,
          getOptionFromViewValue: function(value) {
            return selectValueMap[getTrackByValue(value, getLocals(value))];
          }
        };
      }
    };
  }


  // we can't just jqLite('<option>') since jqLite is not smart enough
  // to create it in <select> and IE barfs otherwise.
  var optionTemplate = document.createElement('option'),
      optGroupTemplate = document.createElement('optgroup');

  return {
    restrict: 'A',
    terminal: true,
    require: ['select', '?ngModel'],
    link: function(scope, selectElement, attr, ctrls) {

      // if ngModel is not defined, we don't need to do anything
      var ngModelCtrl = ctrls[1];
      if (!ngModelCtrl) return;

      var selectCtrl = ctrls[0];
      var multiple = attr.multiple;

      var emptyOption = selectCtrl.emptyOption;
      var providedEmptyOption = !!emptyOption;

      var unknownOption = jqLite(optionTemplate.cloneNode(false));
      unknownOption.val('?');

      var options;
      var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);


      var renderEmptyOption = function() {
        if (!providedEmptyOption) {
          selectElement.prepend(emptyOption);
        }
        selectElement.val('');
        emptyOption.prop('selected', true); // needed for IE
        emptyOption.attr('selected', true);
      };

      var removeEmptyOption = function() {
        if (!providedEmptyOption) {
          emptyOption.remove();
        }
      };


      var renderUnknownOption = function() {
        selectElement.prepend(unknownOption);
        selectElement.val('?');
        unknownOption.prop('selected', true); // needed for IE
        unknownOption.attr('selected', true);
      };

      var removeUnknownOption = function() {
        unknownOption.remove();
      };


      selectCtrl.writeValue = function writeNgOptionsValue(value) {
        var option = options.getOptionFromViewValue(value);

        if (option && !option.disabled) {
          if (selectElement[0].value !== option.selectValue) {
            removeUnknownOption();
            removeEmptyOption();

            selectElement[0].value = option.selectValue;
            option.element.selected = true;
            option.element.setAttribute('selected', 'selected');
          }
        } else {
          if (value === null || providedEmptyOption) {
            removeUnknownOption();
            renderEmptyOption();
          } else {
            removeEmptyOption();
            renderUnknownOption();
          }
        }
      };

      selectCtrl.readValue = function readNgOptionsValue() {

        var selectedOption = options.selectValueMap[selectElement.val()];

        if (selectedOption && !selectedOption.disabled) {
          removeEmptyOption();
          removeUnknownOption();
          return selectedOption.viewValue;
        }
        return null;
      };


      // Update the controller methods for multiple selectable options
      if (multiple) {

        ngModelCtrl.$isEmpty = function(value) {
          return !value || value.length === 0;
        };


        selectCtrl.writeValue = function writeNgOptionsMultiple(value) {
          options.items.forEach(function(option) {
            option.element.selected = false;
          });

          if (value) {
            value.forEach(function(item) {
              var option = options.getOptionFromViewValue(item);
              if (option && !option.disabled) option.element.selected = true;
            });
          }
        };


        selectCtrl.readValue = function readNgOptionsMultiple() {
          var selectedValues = selectElement.val() || [],
              selections = [];

          forEach(selectedValues, function(value) {
            var option = options.selectValueMap[value];
            if (!option.disabled) selections.push(option.viewValue);
          });

          return selections;
        };
      }


      if (providedEmptyOption) {

        // we need to remove it before calling selectElement.empty() because otherwise IE will
        // remove the label from the element. wtf?
        emptyOption.remove();

        // compile the element since there might be bindings in it
        $compile(emptyOption)(scope);

        // remove the class, which is added automatically because we recompile the element and it
        // becomes the compilation root
        emptyOption.removeClass('ng-scope');
      } else {
        emptyOption = jqLite(optionTemplate.cloneNode(false));
      }

      // We need to do this here to ensure that the options object is defined
      // when we first hit it in writeNgOptionsValue
      updateOptions();

      // We will re-render the option elements if the option values or labels change
      scope.$watchCollection(ngOptions.getWatchables, updateOptions);

      // ------------------------------------------------------------------ //


      function updateOptionElement(option, element) {
        option.element = element;
        element.disabled = option.disabled;
        if (option.value !== element.value) element.value = option.selectValue;
        if (option.label !== element.label) {
          element.label = option.label;
          element.textContent = option.label;
        }
      }

      function addOrReuseElement(parent, current, type, templateElement) {
        var element;
        // Check whether we can reuse the next element
        if (current && lowercase(current.nodeName) === type) {
          // The next element is the right type so reuse it
          element = current;
        } else {
          // The next element is not the right type so create a new one
          element = templateElement.cloneNode(false);
          if (!current) {
            // There are no more elements so just append it to the select
            parent.appendChild(element);
          } else {
            // The next element is not a group so insert the new one
            parent.insertBefore(element, current);
          }
        }
        return element;
      }


      function removeExcessElements(current) {
        var next;
        while (current) {
          next = current.nextSibling;
          jqLiteRemove(current);
          current = next;
        }
      }


      function skipEmptyAndUnknownOptions(current) {
        var emptyOption_ = emptyOption && emptyOption[0];
        var unknownOption_ = unknownOption && unknownOption[0];

        if (emptyOption_ || unknownOption_) {
          while (current &&
                (current === emptyOption_ ||
                current === unknownOption_)) {
            current = current.nextSibling;
          }
        }
        return current;
      }


      function updateOptions() {

        var previousValue = options && selectCtrl.readValue();

        options = ngOptions.getOptions();

        var groupMap = {};
        var currentElement = selectElement[0].firstChild;

        // Ensure that the empty option is always there if it was explicitly provided
        if (providedEmptyOption) {
          selectElement.prepend(emptyOption);
        }

        currentElement = skipEmptyAndUnknownOptions(currentElement);

        options.items.forEach(function updateOption(option) {
          var group;
          var groupElement;
          var optionElement;

          if (option.group) {

            // This option is to live in a group
            // See if we have already created this group
            group = groupMap[option.group];

            if (!group) {

              // We have not already created this group
              groupElement = addOrReuseElement(selectElement[0],
                                               currentElement,
                                               'optgroup',
                                               optGroupTemplate);
              // Move to the next element
              currentElement = groupElement.nextSibling;

              // Update the label on the group element
              groupElement.label = option.group;

              // Store it for use later
              group = groupMap[option.group] = {
                groupElement: groupElement,
                currentOptionElement: groupElement.firstChild
              };

            }

            // So now we have a group for this option we add the option to the group
            optionElement = addOrReuseElement(group.groupElement,
                                              group.currentOptionElement,
                                              'option',
                                              optionTemplate);
            updateOptionElement(option, optionElement);
            // Move to the next element
            group.currentOptionElement = optionElement.nextSibling;

          } else {

            // This option is not in a group
            optionElement = addOrReuseElement(selectElement[0],
                                              currentElement,
                                              'option',
                                              optionTemplate);
            updateOptionElement(option, optionElement);
            // Move to the next element
            currentElement = optionElement.nextSibling;
          }
        });


        // Now remove all excess options and group
        Object.keys(groupMap).forEach(function(key) {
          removeExcessElements(groupMap[key].currentOptionElement);
        });
        removeExcessElements(currentElement);

        ngModelCtrl.$render();

        // Check to see if the value has changed due to the update to the options
        if (!ngModelCtrl.$isEmpty(previousValue)) {
          var nextValue = selectCtrl.readValue();
          if (!equals(previousValue, nextValue)) {
            ngModelCtrl.$setViewValue(nextValue);
          }
        }
      }

    }
  };
}];

/**
 * @ngdoc directive
 * @name ngPluralize
 * @restrict EA
 *
 * @description
 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
 * These rules are bundled with angular.js, but can be overridden
 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
 * by specifying the mappings between
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * and the strings to be displayed.
 *
 * # Plural categories and explicit number rules
 * There are two
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * in Angular's default en-US locale: "one" and "other".
 *
 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
 * any number that is not 1), an explicit number rule can only match one number. For example, the
 * explicit number rule for "3" matches the number 3. There are examples of plural categories
 * and explicit number rules throughout the rest of this documentation.
 *
 * # Configuring ngPluralize
 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
 * You can also provide an optional attribute, `offset`.
 *
 * The value of the `count` attribute can be either a string or an {@link guide/expression
 * Angular expression}; these are evaluated on the current scope for its bound value.
 *
 * The `when` attribute specifies the mappings between plural categories and the actual
 * string to be displayed. The value of the attribute should be a JSON object.
 *
 * The following example shows how to configure ngPluralize:
 *
 * ```html
 * <ng-pluralize count="personCount"
                 when="{'0': 'Nobody is viewing.',
 *                      'one': '1 person is viewing.',
 *                      'other': '{} people are viewing.'}">
 * </ng-pluralize>
 *```
 *
 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
 * show "a dozen people are viewing".
 *
 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
 * into pluralized strings. In the previous example, Angular will replace `{}` with
 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
 * for <span ng-non-bindable>{{numberExpression}}</span>.
 *
 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.
 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.
 *
 * # Configuring ngPluralize with offset
 * The `offset` attribute allows further customization of pluralized text, which can result in
 * a better user experience. For example, instead of the message "4 people are viewing this document",
 * you might display "John, Kate and 2 others are viewing this document".
 * The offset attribute allows you to offset a number by any desired value.
 * Let's take a look at an example:
 *
 * ```html
 * <ng-pluralize count="personCount" offset=2
 *               when="{'0': 'Nobody is viewing.',
 *                      '1': '{{person1}} is viewing.',
 *                      '2': '{{person1}} and {{person2}} are viewing.',
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
 * </ng-pluralize>
 * ```
 *
 * Notice that we are still using two plural categories(one, other), but we added
 * three explicit number rules 0, 1 and 2.
 * When one person, perhaps John, views the document, "John is viewing" will be shown.
 * When three people view the document, no explicit number rule is found, so
 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
 * is shown.
 *
 * Note that when you specify offsets, you must provide explicit number rules for
 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
 * plural categories "one" and "other".
 *
 * @param {string|expression} count The variable to be bound to.
 * @param {string} when The mapping between plural category to its corresponding strings.
 * @param {number=} offset Offset to deduct from the total number.
 *
 * @example
    <example module="pluralizeExample">
      <file name="index.html">
        <script>
          angular.module('pluralizeExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.person1 = 'Igor';
              $scope.person2 = 'Misko';
              $scope.personCount = 1;
            }]);
        </script>
        <div ng-controller="ExampleController">
          Person 1:<input type="text" ng-model="person1" value="Igor" /><br/>
          Person 2:<input type="text" ng-model="person2" value="Misko" /><br/>
          Number of People:<input type="text" ng-model="personCount" value="1" /><br/>

          <!--- Example with simple pluralization rules for en locale --->
          Without Offset:
          <ng-pluralize count="personCount"
                        when="{'0': 'Nobody is viewing.',
                               'one': '1 person is viewing.',
                               'other': '{} people are viewing.'}">
          </ng-pluralize><br>

          <!--- Example with offset --->
          With Offset(2):
          <ng-pluralize count="personCount" offset=2
                        when="{'0': 'Nobody is viewing.',
                               '1': '{{person1}} is viewing.',
                               '2': '{{person1}} and {{person2}} are viewing.',
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
          </ng-pluralize>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
        it('should show correct pluralized string', function() {
          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var countInput = element(by.model('personCount'));

          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
          expect(withOffset.getText()).toEqual('Igor is viewing.');

          countInput.clear();
          countInput.sendKeys('0');

          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
          expect(withOffset.getText()).toEqual('Nobody is viewing.');

          countInput.clear();
          countInput.sendKeys('2');

          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');

          countInput.clear();
          countInput.sendKeys('3');

          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');

          countInput.clear();
          countInput.sendKeys('4');

          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
        });
        it('should show data-bound names', function() {
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var personCount = element(by.model('personCount'));
          var person1 = element(by.model('person1'));
          var person2 = element(by.model('person2'));
          personCount.clear();
          personCount.sendKeys('4');
          person1.clear();
          person1.sendKeys('Di');
          person2.clear();
          person2.sendKeys('Vojta');
          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
        });
      </file>
    </example>
 */
var ngPluralizeDirective = ['$locale', '$interpolate', '$log', function($locale, $interpolate, $log) {
  var BRACE = /{}/g,
      IS_WHEN = /^when(Minus)?(.+)$/;

  return {
    restrict: 'EA',
    link: function(scope, element, attr) {
      var numberExp = attr.count,
          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
          offset = attr.offset || 0,
          whens = scope.$eval(whenExp) || {},
          whensExpFns = {},
          startSymbol = $interpolate.startSymbol(),
          endSymbol = $interpolate.endSymbol(),
          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,
          watchRemover = angular.noop,
          lastCount;

      forEach(attr, function(expression, attributeName) {
        var tmpMatch = IS_WHEN.exec(attributeName);
        if (tmpMatch) {
          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);
          whens[whenKey] = element.attr(attr.$attr[attributeName]);
        }
      });
      forEach(whens, function(expression, key) {
        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));

      });

      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
        var count = parseFloat(newVal);
        var countIsNaN = isNaN(count);

        if (!countIsNaN && !(count in whens)) {
          // If an explicit number rule such as 1, 2, 3... is defined, just use it.
          // Otherwise, check it against pluralization rules in $locale service.
          count = $locale.pluralCat(count - offset);
        }

        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
        // In JS `NaN !== NaN`, so we have to exlicitly check.
        if ((count !== lastCount) && !(countIsNaN && isNumber(lastCount) && isNaN(lastCount))) {
          watchRemover();
          var whenExpFn = whensExpFns[count];
          if (isUndefined(whenExpFn)) {
            if (newVal != null) {
              $log.debug("ngPluralize: no rule defined for '" + count + "' in " + whenExp);
            }
            watchRemover = noop;
            updateElementText();
          } else {
            watchRemover = scope.$watch(whenExpFn, updateElementText);
          }
          lastCount = count;
        }
      });

      function updateElementText(newText) {
        element.text(newText || '');
      }
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngRepeat
 *
 * @description
 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
 * instance gets its own scope, where the given loop variable is set to the current collection item,
 * and `$index` is set to the item index or key.
 *
 * Special properties are exposed on the local scope of each template instance, including:
 *
 * | Variable  | Type            | Details                                                                     |
 * |-----------|-----------------|-----------------------------------------------------------------------------|
 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
 *
 * Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
 * This may be useful when, for instance, nesting ngRepeats.
 *
 *
 * # Iterating over object properties
 *
 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
 * syntax:
 *
 * ```js
 * <div ng-repeat="(key, value) in myObj"> ... </div>
 * ```
 *
 * You need to be aware that the JavaScript specification does not define what order
 * it will return the keys for an object. (To mitigate this in Angular 1.3 the `ngRepeat` directive
 * used to sort the keys alphabetically.)
 *
 * Version 1.4 removed the alphabetic sorting. We now rely on the order returned by the browser
 * when running `for key in myObj`. It seems that browsers generally follow the strategy of providing
 * keys in the order in which they were defined, although there are exceptions when keys are deleted
 * and reinstated. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_issues
 *
 * If this is not desired, the recommended workaround is to convert your object into an array
 * that is sorted into the order that you prefer before providing it to `ngRepeat`.  You could
 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
 * or implement a `$watch` on the object yourself.
 *
 *
 * # Special repeat start and end points
 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
 *
 * The example below makes use of this feature:
 * ```html
 *   <header ng-repeat-start="item in items">
 *     Header {{ item }}
 *   </header>
 *   <div class="body">
 *     Body {{ item }}
 *   </div>
 *   <footer ng-repeat-end>
 *     Footer {{ item }}
 *   </footer>
 * ```
 *
 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
 * ```html
 *   <header>
 *     Header A
 *   </header>
 *   <div class="body">
 *     Body A
 *   </div>
 *   <footer>
 *     Footer A
 *   </footer>
 *   <header>
 *     Header B
 *   </header>
 *   <div class="body">
 *     Body B
 *   </div>
 *   <footer>
 *     Footer B
 *   </footer>
 * ```
 *
 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
 *
 * @animations
 * **.enter** - when a new item is added to the list or when an item is revealed after a filter
 *
 * **.leave** - when an item is removed from the list or when an item is filtered out
 *
 * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered
 *
 * @element ANY
 * @scope
 * @priority 1000
 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
 *   formats are currently supported:
 *
 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
 *     is a scope expression giving the collection to enumerate.
 *
 *     For example: `album in artist.albums`.
 *
 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
 *     and `expression` is the scope expression giving the collection to enumerate.
 *
 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
 *
 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking function
 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking function
 *     is specified the ng-repeat associates elements by identity in the collection. It is an error to have
 *     more than one tracking function to resolve to the same key. (This would mean that two distinct objects are
 *     mapped to the same DOM element, which is not possible.)  Filters should be applied to the expression,
 *     before specifying a tracking expression.
 *
 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
 *     will be associated by item identity in the array.
 *
 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
 *     element in the same way in the DOM.
 *
 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
 *     property is same.
 *
 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
 *     to items in conjunction with a tracking expression.
 *
 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
 *     when a filter is active on the repeater, but the filtered result set is empty.
 *
 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
 *     the items have been processed through the filter.
 *
 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
 *     (and not as operator, inside an expression).
 *
 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .
 *
 * @example
 * This example initializes the scope to a list of names and
 * then uses `ngRepeat` to display every person:
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      <div ng-init="friends = [
        {name:'John', age:25, gender:'boy'},
        {name:'Jessie', age:30, gender:'girl'},
        {name:'Johanna', age:28, gender:'girl'},
        {name:'Joy', age:15, gender:'girl'},
        {name:'Mary', age:28, gender:'girl'},
        {name:'Peter', age:95, gender:'boy'},
        {name:'Sebastian', age:50, gender:'boy'},
        {name:'Erika', age:27, gender:'girl'},
        {name:'Patrick', age:40, gender:'boy'},
        {name:'Samantha', age:60, gender:'girl'}
      ]">
        I have {{friends.length}} friends. They are:
        <input type="search" ng-model="q" placeholder="filter friends..." />
        <ul class="example-animate-container">
          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
          </li>
          <li class="animate-repeat" ng-if="results.length == 0">
            <strong>No results found...</strong>
          </li>
        </ul>
      </div>
    </file>
    <file name="animations.css">
      .example-animate-container {
        background:white;
        border:1px solid black;
        list-style:none;
        margin:0;
        padding:0 10px;
      }

      .animate-repeat {
        line-height:40px;
        list-style:none;
        box-sizing:border-box;
      }

      .animate-repeat.ng-move,
      .animate-repeat.ng-enter,
      .animate-repeat.ng-leave {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
      }

      .animate-repeat.ng-leave.ng-leave-active,
      .animate-repeat.ng-move,
      .animate-repeat.ng-enter {
        opacity:0;
        max-height:0;
      }

      .animate-repeat.ng-leave,
      .animate-repeat.ng-move.ng-move-active,
      .animate-repeat.ng-enter.ng-enter-active {
        opacity:1;
        max-height:40px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var friends = element.all(by.repeater('friend in friends'));

      it('should render initial data set', function() {
        expect(friends.count()).toBe(10);
        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
        expect(element(by.binding('friends.length')).getText())
            .toMatch("I have 10 friends. They are:");
      });

       it('should update repeater when filter predicate changes', function() {
         expect(friends.count()).toBe(10);

         element(by.model('q')).sendKeys('ma');

         expect(friends.count()).toBe(2);
         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
       });
      </file>
    </example>
 */
var ngRepeatDirective = ['$parse', '$animate', function($parse, $animate) {
  var NG_REMOVED = '$$NG_REMOVED';
  var ngRepeatMinErr = minErr('ngRepeat');

  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%
    scope[valueIdentifier] = value;
    if (keyIdentifier) scope[keyIdentifier] = key;
    scope.$index = index;
    scope.$first = (index === 0);
    scope.$last = (index === (arrayLength - 1));
    scope.$middle = !(scope.$first || scope.$last);
    // jshint bitwise: false
    scope.$odd = !(scope.$even = (index&1) === 0);
    // jshint bitwise: true
  };

  var getBlockStart = function(block) {
    return block.clone[0];
  };

  var getBlockEnd = function(block) {
    return block.clone[block.clone.length - 1];
  };


  return {
    restrict: 'A',
    multiElement: true,
    transclude: 'element',
    priority: 1000,
    terminal: true,
    $$tlb: true,
    compile: function ngRepeatCompile($element, $attr) {
      var expression = $attr.ngRepeat;
      var ngRepeatEndComment = document.createComment(' end ngRepeat: ' + expression + ' ');

      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);

      if (!match) {
        throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
            expression);
      }

      var lhs = match[1];
      var rhs = match[2];
      var aliasAs = match[3];
      var trackByExp = match[4];

      match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);

      if (!match) {
        throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
            lhs);
      }
      var valueIdentifier = match[3] || match[1];
      var keyIdentifier = match[2];

      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||
          /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
        throw ngRepeatMinErr('badident', "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",
          aliasAs);
      }

      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;
      var hashFnLocals = {$id: hashKey};

      if (trackByExp) {
        trackByExpGetter = $parse(trackByExp);
      } else {
        trackByIdArrayFn = function(key, value) {
          return hashKey(value);
        };
        trackByIdObjFn = function(key) {
          return key;
        };
      }

      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {

        if (trackByExpGetter) {
          trackByIdExpFn = function(key, value, index) {
            // assign key, value, and $index to the locals so that they can be used in hash functions
            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
            hashFnLocals[valueIdentifier] = value;
            hashFnLocals.$index = index;
            return trackByExpGetter($scope, hashFnLocals);
          };
        }

        // Store a list of elements from previous run. This is a hash where key is the item from the
        // iterator, and the value is objects with following properties.
        //   - scope: bound scope
        //   - element: previous element.
        //   - index: position
        //
        // We are using no-proto object so that we don't need to guard against inherited props via
        // hasOwnProperty.
        var lastBlockMap = createMap();

        //watch props
        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
          var index, length,
              previousNode = $element[0],     // node that cloned nodes should be inserted after
                                              // initialized to the comment node anchor
              nextNode,
              // Same as lastBlockMap but it has the current state. It will become the
              // lastBlockMap on the next iteration.
              nextBlockMap = createMap(),
              collectionLength,
              key, value, // key/value of iteration
              trackById,
              trackByIdFn,
              collectionKeys,
              block,       // last object information {scope, element, id}
              nextBlockOrder,
              elementsToRemove;

          if (aliasAs) {
            $scope[aliasAs] = collection;
          }

          if (isArrayLike(collection)) {
            collectionKeys = collection;
            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
          } else {
            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
            // if object, extract keys, in enumeration order, unsorted
            collectionKeys = [];
            for (var itemKey in collection) {
              if (collection.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {
                collectionKeys.push(itemKey);
              }
            }
          }

          collectionLength = collectionKeys.length;
          nextBlockOrder = new Array(collectionLength);

          // locate existing items
          for (index = 0; index < collectionLength; index++) {
            key = (collection === collectionKeys) ? index : collectionKeys[index];
            value = collection[key];
            trackById = trackByIdFn(key, value, index);
            if (lastBlockMap[trackById]) {
              // found previously seen block
              block = lastBlockMap[trackById];
              delete lastBlockMap[trackById];
              nextBlockMap[trackById] = block;
              nextBlockOrder[index] = block;
            } else if (nextBlockMap[trackById]) {
              // if collision detected. restore lastBlockMap and throw an error
              forEach(nextBlockOrder, function(block) {
                if (block && block.scope) lastBlockMap[block.id] = block;
              });
              throw ngRepeatMinErr('dupes',
                  "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",
                  expression, trackById, value);
            } else {
              // new never before seen block
              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};
              nextBlockMap[trackById] = true;
            }
          }

          // remove leftover items
          for (var blockKey in lastBlockMap) {
            block = lastBlockMap[blockKey];
            elementsToRemove = getBlockNodes(block.clone);
            $animate.leave(elementsToRemove);
            if (elementsToRemove[0].parentNode) {
              // if the element was not removed yet because of pending animation, mark it as deleted
              // so that we can ignore it later
              for (index = 0, length = elementsToRemove.length; index < length; index++) {
                elementsToRemove[index][NG_REMOVED] = true;
              }
            }
            block.scope.$destroy();
          }

          // we are not using forEach for perf reasons (trying to avoid #call)
          for (index = 0; index < collectionLength; index++) {
            key = (collection === collectionKeys) ? index : collectionKeys[index];
            value = collection[key];
            block = nextBlockOrder[index];

            if (block.scope) {
              // if we have already seen this object, then we need to reuse the
              // associated scope/element

              nextNode = previousNode;

              // skip nodes that are already pending removal via leave animation
              do {
                nextNode = nextNode.nextSibling;
              } while (nextNode && nextNode[NG_REMOVED]);

              if (getBlockStart(block) != nextNode) {
                // existing item which got moved
                $animate.move(getBlockNodes(block.clone), null, jqLite(previousNode));
              }
              previousNode = getBlockEnd(block);
              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
            } else {
              // new item which we don't know about
              $transclude(function ngRepeatTransclude(clone, scope) {
                block.scope = scope;
                // http://jsperf.com/clone-vs-createcomment
                var endNode = ngRepeatEndComment.cloneNode(false);
                clone[clone.length++] = endNode;

                // TODO(perf): support naked previousNode in `enter` to avoid creation of jqLite wrapper?
                $animate.enter(clone, null, jqLite(previousNode));
                previousNode = endNode;
                // Note: We only need the first/last node of the cloned nodes.
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                // by a directive with templateUrl when its template arrives.
                block.clone = clone;
                nextBlockMap[block.id] = block;
                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
              });
            }
          }
          lastBlockMap = nextBlockMap;
        });
      };
    }
  };
}];

var NG_HIDE_CLASS = 'ng-hide';
var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';
/**
 * @ngdoc directive
 * @name ngShow
 *
 * @description
 * The `ngShow` directive shows or hides the given HTML element based on the expression
 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding
 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
 * in AngularJS and sets the display style to none (using an !important flag).
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is visible) -->
 * <div ng-show="myValue"></div>
 *
 * <!-- when $scope.myValue is falsy (element is hidden) -->
 * <div ng-show="myValue" class="ng-hide"></div>
 * ```
 *
 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class
 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope
 * with extra animation classes that can be added.
 *
 * ```css
 * .ng-hide:not(.ng-hide-animate) {
 *   /&#42; this is just another form of hiding an element &#42;/
 *   display: block!important;
 *   position: absolute;
 *   top: -9999px;
 *   left: -9999px;
 * }
 * ```
 *
 * By default you don't need to override in CSS anything and the animations will work around the display style.
 *
 * ## A note about animations with `ngShow`
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works like the animation system present with ngClass except that
 * you must also include the !important flag to override the display property
 * so that you can perform an animation when the element is hidden during the time of the animation.
 *
 * ```css
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   /&#42; this is required as of 1.3x to properly
 *      apply all styling in a show/hide animation &#42;/
 *   transition: 0s linear all;
 * }
 *
 * .my-element.ng-hide-add-active,
 * .my-element.ng-hide-remove-active {
 *   /&#42; the transition is defined in the active class &#42;/
 *   transition: 1s linear all;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
 *
 * @animations
 * addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible
 * removeClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden
 *
 * @element ANY
 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
 *     then the element is shown or hidden respectively.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked"><br/>
      <div>
        Show:
        <div class="check-element animate-show" ng-show="checked">
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-show" ng-hide="checked">
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="glyphicons.css">
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
    </file>
    <file name="animations.css">
      .animate-show {
        line-height: 20px;
        opacity: 1;
        padding: 10px;
        border: 1px solid black;
        background: white;
      }

      .animate-show.ng-hide-add.ng-hide-add-active,
      .animate-show.ng-hide-remove.ng-hide-remove-active {
        -webkit-transition: all linear 0.5s;
        transition: all linear 0.5s;
      }

      .animate-show.ng-hide {
        line-height: 0;
        opacity: 0;
        padding: 0 10px;
      }

      .check-element {
        padding: 10px;
        border: 1px solid black;
        background: white;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

      it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
    </file>
  </example>
 */
var ngShowDirective = ['$animate', function($animate) {
  return {
    restrict: 'A',
    multiElement: true,
    link: function(scope, element, attr) {
      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
        // we're adding a temporary, animation-specific class for ng-hide since this way
        // we can control when the element is actually displayed on screen without having
        // to have a global/greedy CSS selector that breaks when other animations are run.
        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
        });
      });
    }
  };
}];


/**
 * @ngdoc directive
 * @name ngHide
 *
 * @description
 * The `ngHide` directive shows or hides the given HTML element based on the expression
 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding
 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
 * in AngularJS and sets the display style to none (using an !important flag).
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is hidden) -->
 * <div ng-hide="myValue" class="ng-hide"></div>
 *
 * <!-- when $scope.myValue is falsy (element is visible) -->
 * <div ng-hide="myValue"></div>
 * ```
 *
 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class
 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
 * class in CSS:
 *
 * ```css
 * .ng-hide {
 *   /&#42; this is just another form of hiding an element &#42;/
 *   display: block!important;
 *   position: absolute;
 *   top: -9999px;
 *   left: -9999px;
 * }
 * ```
 *
 * By default you don't need to override in CSS anything and the animations will work around the display style.
 *
 * ## A note about animations with `ngHide`
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
 * CSS class is added and removed for you instead of your own CSS class.
 *
 * ```css
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition: 0.5s linear all;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
 *
 * @animations
 * removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden
 * addClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible
 *
 * @element ANY
 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
 *     the element is shown or hidden respectively.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked"><br/>
      <div>
        Show:
        <div class="check-element animate-hide" ng-show="checked">
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-hide" ng-hide="checked">
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="glyphicons.css">
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
    </file>
    <file name="animations.css">
      .animate-hide {
        -webkit-transition: all linear 0.5s;
        transition: all linear 0.5s;
        line-height: 20px;
        opacity: 1;
        padding: 10px;
        border: 1px solid black;
        background: white;
      }

      .animate-hide.ng-hide {
        line-height: 0;
        opacity: 0;
        padding: 0 10px;
      }

      .check-element {
        padding: 10px;
        border: 1px solid black;
        background: white;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

      it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
    </file>
  </example>
 */
var ngHideDirective = ['$animate', function($animate) {
  return {
    restrict: 'A',
    multiElement: true,
    link: function(scope, element, attr) {
      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
        // The comment inside of the ngShowDirective explains why we add and
        // remove a temporary class for the show/hide animation
        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
        });
      });
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngStyle
 * @restrict AC
 *
 * @description
 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
 *
 * @element ANY
 * @param {expression} ngStyle
 *
 * {@link guide/expression Expression} which evals to an
 * object whose keys are CSS style names and values are corresponding values for those CSS
 * keys.
 *
 * Since some CSS style names are not valid keys for an object, they must be quoted.
 * See the 'background-color' style in the example below.
 *
 * @example
   <example>
     <file name="index.html">
        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
        <input type="button" value="clear" ng-click="myStyle={}">
        <br/>
        <span ng-style="myStyle">Sample Text</span>
        <pre>myStyle={{myStyle}}</pre>
     </file>
     <file name="style.css">
       span {
         color: black;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var colorSpan = element(by.css('span'));

       it('should check ng-style', function() {
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
         element(by.css('input[value=\'set color\']')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
         element(by.css('input[value=clear]')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
       });
     </file>
   </example>
 */
var ngStyleDirective = ngDirective(function(scope, element, attr) {
  scope.$watchCollection(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
    if (oldStyles && (newStyles !== oldStyles)) {
      forEach(oldStyles, function(val, style) { element.css(style, '');});
    }
    if (newStyles) element.css(newStyles);
  });
});

/**
 * @ngdoc directive
 * @name ngSwitch
 * @restrict EA
 *
 * @description
 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
 * as specified in the template.
 *
 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
 * matches the value obtained from the evaluated expression. In other words, you define a container element
 * (where you place the directive), place an expression on the **`on="..."` attribute**
 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
 * attribute is displayed.
 *
 * <div class="alert alert-info">
 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
 * as literal string values to match against.
 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
 * value of the expression `$scope.someVal`.
 * </div>

 * @animations
 * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container
 * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
 *
 * @usage
 *
 * ```
 * <ANY ng-switch="expression">
 *   <ANY ng-switch-when="matchValue1">...</ANY>
 *   <ANY ng-switch-when="matchValue2">...</ANY>
 *   <ANY ng-switch-default>...</ANY>
 * </ANY>
 * ```
 *
 *
 * @scope
 * @priority 1200
 * @param {*} ngSwitch|on expression to match against <tt>ng-switch-when</tt>.
 * On child elements add:
 *
 * * `ngSwitchWhen`: the case statement to match against. If match then this
 *   case will be displayed. If the same match appears multiple times, all the
 *   elements will be displayed.
 * * `ngSwitchDefault`: the default case when no other case match. If there
 *   are multiple default cases, all of them will be displayed when no other
 *   case match.
 *
 *
 * @example
  <example module="switchExample" deps="angular-animate.js" animations="true">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <select ng-model="selection" ng-options="item for item in items">
        </select>
        <tt>selection={{selection}}</tt>
        <hr/>
        <div class="animate-switch-container"
          ng-switch on="selection">
            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
            <div class="animate-switch" ng-switch-when="home">Home Span</div>
            <div class="animate-switch" ng-switch-default>default</div>
        </div>
      </div>
    </file>
    <file name="script.js">
      angular.module('switchExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.items = ['settings', 'home', 'other'];
          $scope.selection = $scope.items[0];
        }]);
    </file>
    <file name="animations.css">
      .animate-switch-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .animate-switch {
        padding:10px;
      }

      .animate-switch.ng-animate {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
      }

      .animate-switch.ng-leave.ng-leave-active,
      .animate-switch.ng-enter {
        top:-50px;
      }
      .animate-switch.ng-leave,
      .animate-switch.ng-enter.ng-enter-active {
        top:0;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var switchElem = element(by.css('[ng-switch]'));
      var select = element(by.model('selection'));

      it('should start in settings', function() {
        expect(switchElem.getText()).toMatch(/Settings Div/);
      });
      it('should change to home', function() {
        select.all(by.css('option')).get(1).click();
        expect(switchElem.getText()).toMatch(/Home Span/);
      });
      it('should select default', function() {
        select.all(by.css('option')).get(2).click();
        expect(switchElem.getText()).toMatch(/default/);
      });
    </file>
  </example>
 */
var ngSwitchDirective = ['$animate', function($animate) {
  return {
    require: 'ngSwitch',

    // asks for $scope to fool the BC controller module
    controller: ['$scope', function ngSwitchController() {
     this.cases = {};
    }],
    link: function(scope, element, attr, ngSwitchController) {
      var watchExpr = attr.ngSwitch || attr.on,
          selectedTranscludes = [],
          selectedElements = [],
          previousLeaveAnimations = [],
          selectedScopes = [];

      var spliceFactory = function(array, index) {
          return function() { array.splice(index, 1); };
      };

      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
        var i, ii;
        for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {
          $animate.cancel(previousLeaveAnimations[i]);
        }
        previousLeaveAnimations.length = 0;

        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
          var selected = getBlockNodes(selectedElements[i].clone);
          selectedScopes[i].$destroy();
          var promise = previousLeaveAnimations[i] = $animate.leave(selected);
          promise.then(spliceFactory(previousLeaveAnimations, i));
        }

        selectedElements.length = 0;
        selectedScopes.length = 0;

        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {
          forEach(selectedTranscludes, function(selectedTransclude) {
            selectedTransclude.transclude(function(caseElement, selectedScope) {
              selectedScopes.push(selectedScope);
              var anchor = selectedTransclude.element;
              caseElement[caseElement.length++] = document.createComment(' end ngSwitchWhen: ');
              var block = { clone: caseElement };

              selectedElements.push(block);
              $animate.enter(caseElement, anchor.parent(), anchor);
            });
          });
        }
      });
    }
  };
}];

var ngSwitchWhenDirective = ngDirective({
  transclude: 'element',
  priority: 1200,
  require: '^ngSwitch',
  multiElement: true,
  link: function(scope, element, attrs, ctrl, $transclude) {
    ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);
    ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });
  }
});

var ngSwitchDefaultDirective = ngDirective({
  transclude: 'element',
  priority: 1200,
  require: '^ngSwitch',
  multiElement: true,
  link: function(scope, element, attr, ctrl, $transclude) {
    ctrl.cases['?'] = (ctrl.cases['?'] || []);
    ctrl.cases['?'].push({ transclude: $transclude, element: element });
   }
});

/**
 * @ngdoc directive
 * @name ngTransclude
 * @restrict EAC
 *
 * @description
 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
 *
 * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
 *
 * @element ANY
 *
 * @example
   <example module="transcludeExample">
     <file name="index.html">
       <script>
         angular.module('transcludeExample', [])
          .directive('pane', function(){
             return {
               restrict: 'E',
               transclude: true,
               scope: { title:'@' },
               template: '<div style="border: 1px solid black;">' +
                           '<div style="background-color: gray">{{title}}</div>' +
                           '<ng-transclude></ng-transclude>' +
                         '</div>'
             };
         })
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.title = 'Lorem Ipsum';
           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
         }]);
       </script>
       <div ng-controller="ExampleController">
         <input ng-model="title"> <br/>
         <textarea ng-model="text"></textarea> <br/>
         <pane title="{{title}}">{{text}}</pane>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
        it('should have transcluded', function() {
          var titleElement = element(by.model('title'));
          titleElement.clear();
          titleElement.sendKeys('TITLE');
          var textElement = element(by.model('text'));
          textElement.clear();
          textElement.sendKeys('TEXT');
          expect(element(by.binding('title')).getText()).toEqual('TITLE');
          expect(element(by.binding('text')).getText()).toEqual('TEXT');
        });
     </file>
   </example>
 *
 */
var ngTranscludeDirective = ngDirective({
  restrict: 'EAC',
  link: function($scope, $element, $attrs, controller, $transclude) {
    if (!$transclude) {
      throw minErr('ngTransclude')('orphan',
       'Illegal use of ngTransclude directive in the template! ' +
       'No parent directive that requires a transclusion found. ' +
       'Element: {0}',
       startingTag($element));
    }

    $transclude(function(clone) {
      $element.empty();
      $element.append(clone);
    });
  }
});

/**
 * @ngdoc directive
 * @name script
 * @restrict E
 *
 * @description
 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
 *
 * @param {string} type Must be set to `'text/ng-template'`.
 * @param {string} id Cache name of the template.
 *
 * @example
  <example>
    <file name="index.html">
      <script type="text/ng-template" id="/tpl.html">
        Content of the template.
      </script>

      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
      <div id="tpl-content" ng-include src="currentTpl"></div>
    </file>
    <file name="protractor.js" type="protractor">
      it('should load template defined inside script tag', function() {
        element(by.css('#tpl-link')).click();
        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
      });
    </file>
  </example>
 */
var scriptDirective = ['$templateCache', function($templateCache) {
  return {
    restrict: 'E',
    terminal: true,
    compile: function(element, attr) {
      if (attr.type == 'text/ng-template') {
        var templateUrl = attr.id,
            text = element[0].text;

        $templateCache.put(templateUrl, text);
      }
    }
  };
}];

var noopNgModelController = { $setViewValue: noop, $render: noop };

/**
 * @ngdoc type
 * @name  select.SelectController
 * @description
 * The controller for the `<select>` directive. This provides support for reading
 * and writing the selected value(s) of the control and also coordinates dynamically
 * added `<option>` elements, perhaps by an `ngRepeat` directive.
 */
var SelectController =
        ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {

  var self = this,
      optionsMap = new HashMap();

  // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors
  self.ngModelCtrl = noopNgModelController;

  // The "unknown" option is one that is prepended to the list if the viewValue
  // does not match any of the options. When it is rendered the value of the unknown
  // option is '? XXX ?' where XXX is the hashKey of the value that is not known.
  //
  // We can't just jqLite('<option>') since jqLite is not smart enough
  // to create it in <select> and IE barfs otherwise.
  self.unknownOption = jqLite(document.createElement('option'));
  self.renderUnknownOption = function(val) {
    var unknownVal = '? ' + hashKey(val) + ' ?';
    self.unknownOption.val(unknownVal);
    $element.prepend(self.unknownOption);
    $element.val(unknownVal);
  };

  $scope.$on('$destroy', function() {
    // disable unknown option so that we don't do work when the whole select is being destroyed
    self.renderUnknownOption = noop;
  });

  self.removeUnknownOption = function() {
    if (self.unknownOption.parent()) self.unknownOption.remove();
  };

  // Here we find the option that represents the "empty" value, i.e. the option with a value
  // of `""`.  This option needs to be accessed (to select it directly) when setting the value
  // of the select to `""` because IE9 will not automatically select the option.
  //
  // Additionally, the `ngOptions` directive uses this option to allow the application developer
  // to provide their own custom "empty" option when the viewValue does not match any of the
  // option values.
  for (var i = 0, children = $element.children(), ii = children.length; i < ii; i++) {
    if (children[i].value === '') {
      self.emptyOption = children.eq(i);
      break;
    }
  }

  // Read the value of the select control, the implementation of this changes depending
  // upon whether the select can have multiple values and whether ngOptions is at work.
  self.readValue = function readSingleValue() {
    self.removeUnknownOption();
    return $element.val();
  };


  // Write the value to the select control, the implementation of this changes depending
  // upon whether the select can have multiple values and whether ngOptions is at work.
  self.writeValue = function writeSingleValue(value) {
    if (self.hasOption(value)) {
      self.removeUnknownOption();
      $element.val(value);
      if (value === '') self.emptyOption.prop('selected', true); // to make IE9 happy
    } else {
      if (isUndefined(value) && self.emptyOption) {
        self.removeUnknownOption();
        $element.val('');
      } else {
        self.renderUnknownOption(value);
      }
    }
  };


  // Tell the select control that an option, with the given value, has been added
  self.addOption = function(value) {
    assertNotHasOwnProperty(value, '"option value"');
    var count = optionsMap.get(value) || 0;
    optionsMap.put(value, count + 1);
  };

  // Tell the select control that an option, with the given value, has been removed
  self.removeOption = function(value) {
    var count = optionsMap.get(value);
    if (count) {
      if (count === 1) {
        optionsMap.remove(value);
      } else {
        optionsMap.put(value, count - 1);
      }
    }
  };

  // Check whether the select control has an option matching the given value
  self.hasOption = function(value) {
    return !!optionsMap.get(value);
  };
}];

/**
 * @ngdoc directive
 * @name select
 * @restrict E
 *
 * @description
 * HTML `SELECT` element with angular data-binding.
 *
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions
 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits such as reducing
 * memory and increasing speed by not creating a new scope for each repeated instance, as well as providing
 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
 * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound
 * to a non-string value. This is because an option element can only be bound to string values at
 * present.
 *
 * When an item in the `<select>` menu is selected, the array element or object property
 * represented by the selected option will be bound to the model identified by the `ngModel`
 * directive.
 *
 * If the viewValue contains a value that doesn't match any of the options then the control
 * will automatically add an "unknown" option, which it then removes when this is resolved.
 *
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
 * option. See example below for demonstration.
 *
 * <div class="alert alert-warning">
 * **Note:** `ngModel` compares by reference, not value. This is important when binding to an
 * array of objects. See an example [in this jsfiddle](http://jsfiddle.net/qWzTb/).
 * </div>
 *
 */
var selectDirective = function() {
  var lastView;

  return {
    restrict: 'E',
    require: ['select', '?ngModel'],
    controller: SelectController,
    link: function(scope, element, attr, ctrls) {

      // if ngModel is not defined, we don't need to do anything
      var ngModelCtrl = ctrls[1];
      if (!ngModelCtrl) return;

      var selectCtrl = ctrls[0];

      selectCtrl.ngModelCtrl = ngModelCtrl;

      // We delegate rendering to the `writeValue` method, which can be changed
      // if the select can have multiple selected values or if the options are being
      // generated by `ngOptions`
      ngModelCtrl.$render = function() {
        selectCtrl.writeValue(ngModelCtrl.$viewValue);
      };

      // When the selected item(s) changes we delegate getting the value of the select control
      // to the `readValue` method, which can be changed if the select can have multiple
      // selected values or if the options are being generated by `ngOptions`
      element.on('change', function() {
        scope.$apply(function() {
          ngModelCtrl.$setViewValue(selectCtrl.readValue());
        });
      });

      // If the select allows multiple values then we need to modify how we read and write
      // values from and to the control; also what it means for the value to be empty and
      // we have to add an extra watch since ngModel doesn't work well with arrays - it
      // doesn't trigger rendering if only an item in the array changes.
      if (attr.multiple) {

        // Read value now needs to check each option to see if it is selected
        selectCtrl.readValue = function readMultipleValue() {
          var array = [];
          forEach(element.find('option'), function(option) {
            if (option.selected) {
              array.push(option.value);
            }
          });
          return array;
        };

        // Write value now needs to set the selected property of each matching option
        selectCtrl.writeValue = function writeMultipleValue(value) {
          var items = new HashMap(value);
          forEach(element.find('option'), function(option) {
            option.selected = isDefined(items.get(option.value));
          });
        };

        // we have to do it on each watch since ngModel watches reference, but
        // we need to work of an array, so we need to see if anything was inserted/removed
        scope.$watch(function selectMultipleWatch() {
          if (!equals(lastView, ngModelCtrl.$viewValue)) {
            lastView = shallowCopy(ngModelCtrl.$viewValue);
            ngModelCtrl.$render();
          }
        });

        // If we are a multiple select then value is now a collection
        // so the meaning of $isEmpty changes
        ngModelCtrl.$isEmpty = function(value) {
          return !value || value.length === 0;
        };

      }
    }
  };
};


// The option directive is purely designed to communicate the existence (or lack of)
// of dynamically created (and destroyed) option elements to their containing select
// directive via its controller.
var optionDirective = ['$interpolate', function($interpolate) {

  function chromeHack(optionElement) {
    // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459
    // Adding an <option selected="selected"> element to a <select required="required"> should
    // automatically select the new element
    if (optionElement[0].hasAttribute('selected')) {
      optionElement[0].selected = true;
    }
  }

  return {
    restrict: 'E',
    priority: 100,
    compile: function(element, attr) {

      // If the value attribute is not defined then we fall back to the
      // text content of the option element, which may be interpolated
      if (isUndefined(attr.value)) {
        var interpolateFn = $interpolate(element.text(), true);
        if (!interpolateFn) {
          attr.$set('value', element.text());
        }
      }

      return function(scope, element, attr) {

        // This is an optimization over using ^^ since we don't want to have to search
        // all the way to the root of the DOM for every single option element
        var selectCtrlName = '$selectController',
            parent = element.parent(),
            selectCtrl = parent.data(selectCtrlName) ||
              parent.parent().data(selectCtrlName); // in case we are in optgroup

        // Only update trigger option updates if this is an option within a `select`
        // that also has `ngModel` attached
        if (selectCtrl && selectCtrl.ngModelCtrl) {

          if (interpolateFn) {
            scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {
              attr.$set('value', newVal);
              if (oldVal !== newVal) {
                selectCtrl.removeOption(oldVal);
              }
              selectCtrl.addOption(newVal, element);
              selectCtrl.ngModelCtrl.$render();
              chromeHack(element);
            });
          } else {
            selectCtrl.addOption(attr.value, element);
            selectCtrl.ngModelCtrl.$render();
            chromeHack(element);
          }

          element.on('$destroy', function() {
            selectCtrl.removeOption(attr.value);
            selectCtrl.ngModelCtrl.$render();
          });
        }
      };
    }
  };
}];

var styleDirective = valueFn({
  restrict: 'E',
  terminal: false
});

var requiredDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;
      attr.required = true; // force truthy in case we are on non input element

      ctrl.$validators.required = function(modelValue, viewValue) {
        return !attr.required || !ctrl.$isEmpty(viewValue);
      };

      attr.$observe('required', function() {
        ctrl.$validate();
      });
    }
  };
};


var patternDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;

      var regexp, patternExp = attr.ngPattern || attr.pattern;
      attr.$observe('pattern', function(regex) {
        if (isString(regex) && regex.length > 0) {
          regex = new RegExp('^' + regex + '$');
        }

        if (regex && !regex.test) {
          throw minErr('ngPattern')('noregexp',
            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,
            regex, startingTag(elm));
        }

        regexp = regex || undefined;
        ctrl.$validate();
      });

      ctrl.$validators.pattern = function(value) {
        return ctrl.$isEmpty(value) || isUndefined(regexp) || regexp.test(value);
      };
    }
  };
};


var maxlengthDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;

      var maxlength = -1;
      attr.$observe('maxlength', function(value) {
        var intVal = toInt(value);
        maxlength = isNaN(intVal) ? -1 : intVal;
        ctrl.$validate();
      });
      ctrl.$validators.maxlength = function(modelValue, viewValue) {
        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);
      };
    }
  };
};

var minlengthDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;

      var minlength = 0;
      attr.$observe('minlength', function(value) {
        minlength = toInt(value) || 0;
        ctrl.$validate();
      });
      ctrl.$validators.minlength = function(modelValue, viewValue) {
        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
      };
    }
  };
};

  if (window.angular.bootstrap) {
    //AngularJS is already loaded, so we can return here...
    console.log('WARNING: Tried to load angular more than once.');
    return;
  }

  //try to bind to jquery now so that one can write jqLite(document).ready()
  //but we will rebind on bootstrap again.
  bindJQuery();

  publishExternalAPI(angular);

  jqLite(document).ready(function() {
    angularInit(document, bootstrap);
  });

})(window, document);

!window.angular.$$csp() && window.angular.element(document).find('head').prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}</style>');
define("angular", (function (global) {
    return function () {
        var ret, fn;
        return ret || global.angular;
    };
}(this)));

(function(global) {
  
  if (global.$traceurRuntime) {
    return ;
  }
  var $Object = Object;
  var $TypeError = TypeError;
  var $create = $Object.create;
  var $defineProperties = $Object.defineProperties;
  var $defineProperty = $Object.defineProperty;
  var $freeze = $Object.freeze;
  var $getOwnPropertyDescriptor = $Object.getOwnPropertyDescriptor;
  var $getOwnPropertyNames = $Object.getOwnPropertyNames;
  var $keys = $Object.keys;
  var $hasOwnProperty = $Object.prototype.hasOwnProperty;
  var $toString = $Object.prototype.toString;
  var $preventExtensions = Object.preventExtensions;
  var $seal = Object.seal;
  var $isExtensible = Object.isExtensible;
  var $apply = Function.prototype.call.bind(Function.prototype.apply);
  function $bind(operand, thisArg, args) {
    var argArray = [thisArg];
    for (var i = 0; i < args.length; i++) {
      argArray[i + 1] = args[i];
    }
    var func = $apply(Function.prototype.bind, operand, argArray);
    return func;
  }
  function $construct(func, argArray) {
    var object = new ($bind(func, null, argArray));
    return object;
  }
  var counter = 0;
  function newUniqueString() {
    return '__$' + Math.floor(Math.random() * 1e9) + '$' + ++counter + '$__';
  }
  var privateNames = $create(null);
  function isPrivateName(s) {
    return privateNames[s];
  }
  function createPrivateName() {
    var s = newUniqueString();
    privateNames[s] = true;
    return s;
  }
  var CONTINUATION_TYPE = Object.create(null);
  function createContinuation(operand, thisArg, argsArray) {
    return [CONTINUATION_TYPE, operand, thisArg, argsArray];
  }
  function isContinuation(object) {
    return object && object[0] === CONTINUATION_TYPE;
  }
  var isTailRecursiveName = null;
  function setupProperTailCalls() {
    isTailRecursiveName = createPrivateName();
    Function.prototype.call = initTailRecursiveFunction(function call(thisArg) {
      var result = tailCall(function(thisArg) {
        var argArray = [];
        for (var i = 1; i < arguments.length; ++i) {
          argArray[i - 1] = arguments[i];
        }
        var continuation = createContinuation(this, thisArg, argArray);
        return continuation;
      }, this, arguments);
      return result;
    });
    Function.prototype.apply = initTailRecursiveFunction(function apply(thisArg, argArray) {
      var result = tailCall(function(thisArg, argArray) {
        var continuation = createContinuation(this, thisArg, argArray);
        return continuation;
      }, this, arguments);
      return result;
    });
  }
  function initTailRecursiveFunction(func) {
    if (isTailRecursiveName === null) {
      setupProperTailCalls();
    }
    func[isTailRecursiveName] = true;
    return func;
  }
  function isTailRecursive(func) {
    return !!func[isTailRecursiveName];
  }
  function tailCall(func, thisArg, argArray) {
    var continuation = argArray[0];
    if (isContinuation(continuation)) {
      continuation = $apply(func, thisArg, continuation[3]);
      return continuation;
    }
    continuation = createContinuation(func, thisArg, argArray);
    while (true) {
      if (isTailRecursive(func)) {
        continuation = $apply(func, continuation[2], [continuation]);
      } else {
        continuation = $apply(func, continuation[2], continuation[3]);
      }
      if (!isContinuation(continuation)) {
        return continuation;
      }
      func = continuation[1];
    }
  }
  function construct() {
    var object;
    if (isTailRecursive(this)) {
      object = $construct(this, [createContinuation(null, null, arguments)]);
    } else {
      object = $construct(this, arguments);
    }
    return object;
  }
  var $traceurRuntime = {
    initTailRecursiveFunction: initTailRecursiveFunction,
    call: tailCall,
    continuation: createContinuation,
    construct: construct
  };
  (function() {
    function nonEnum(value) {
      return {
        configurable: true,
        enumerable: false,
        value: value,
        writable: true
      };
    }
    var method = nonEnum;
    var symbolInternalProperty = newUniqueString();
    var symbolDescriptionProperty = newUniqueString();
    var symbolDataProperty = newUniqueString();
    var symbolValues = $create(null);
    function isShimSymbol(symbol) {
      return typeof symbol === 'object' && symbol instanceof SymbolValue;
    }
    function typeOf(v) {
      if (isShimSymbol(v))
        return 'symbol';
      return typeof v;
    }
    function Symbol(description) {
      var value = new SymbolValue(description);
      if (!(this instanceof Symbol))
        return value;
      throw new TypeError('Symbol cannot be new\'ed');
    }
    $defineProperty(Symbol.prototype, 'constructor', nonEnum(Symbol));
    $defineProperty(Symbol.prototype, 'toString', method(function() {
      var symbolValue = this[symbolDataProperty];
      return symbolValue[symbolInternalProperty];
    }));
    $defineProperty(Symbol.prototype, 'valueOf', method(function() {
      var symbolValue = this[symbolDataProperty];
      if (!symbolValue)
        throw TypeError('Conversion from symbol to string');
      if (!getOption('symbols'))
        return symbolValue[symbolInternalProperty];
      return symbolValue;
    }));
    function SymbolValue(description) {
      var key = newUniqueString();
      $defineProperty(this, symbolDataProperty, {value: this});
      $defineProperty(this, symbolInternalProperty, {value: key});
      $defineProperty(this, symbolDescriptionProperty, {value: description});
      freeze(this);
      symbolValues[key] = this;
    }
    $defineProperty(SymbolValue.prototype, 'constructor', nonEnum(Symbol));
    $defineProperty(SymbolValue.prototype, 'toString', {
      value: Symbol.prototype.toString,
      enumerable: false
    });
    $defineProperty(SymbolValue.prototype, 'valueOf', {
      value: Symbol.prototype.valueOf,
      enumerable: false
    });
    var hashProperty = createPrivateName();
    var hashPropertyDescriptor = {value: undefined};
    var hashObjectProperties = {
      hash: {value: undefined},
      self: {value: undefined}
    };
    var hashCounter = 0;
    function getOwnHashObject(object) {
      var hashObject = object[hashProperty];
      if (hashObject && hashObject.self === object)
        return hashObject;
      if ($isExtensible(object)) {
        hashObjectProperties.hash.value = hashCounter++;
        hashObjectProperties.self.value = object;
        hashPropertyDescriptor.value = $create(null, hashObjectProperties);
        $defineProperty(object, hashProperty, hashPropertyDescriptor);
        return hashPropertyDescriptor.value;
      }
      return undefined;
    }
    function freeze(object) {
      getOwnHashObject(object);
      return $freeze.apply(this, arguments);
    }
    function preventExtensions(object) {
      getOwnHashObject(object);
      return $preventExtensions.apply(this, arguments);
    }
    function seal(object) {
      getOwnHashObject(object);
      return $seal.apply(this, arguments);
    }
    freeze(SymbolValue.prototype);
    function isSymbolString(s) {
      return symbolValues[s] || privateNames[s];
    }
    function toProperty(name) {
      if (isShimSymbol(name))
        return name[symbolInternalProperty];
      return name;
    }
    function removeSymbolKeys(array) {
      var rv = [];
      for (var i = 0; i < array.length; i++) {
        if (!isSymbolString(array[i])) {
          rv.push(array[i]);
        }
      }
      return rv;
    }
    function getOwnPropertyNames(object) {
      return removeSymbolKeys($getOwnPropertyNames(object));
    }
    function keys(object) {
      return removeSymbolKeys($keys(object));
    }
    function getOwnPropertySymbols(object) {
      var rv = [];
      var names = $getOwnPropertyNames(object);
      for (var i = 0; i < names.length; i++) {
        var symbol = symbolValues[names[i]];
        if (symbol) {
          rv.push(symbol);
        }
      }
      return rv;
    }
    function getOwnPropertyDescriptor(object, name) {
      return $getOwnPropertyDescriptor(object, toProperty(name));
    }
    function hasOwnProperty(name) {
      return $hasOwnProperty.call(this, toProperty(name));
    }
    function getOption(name) {
      return global.$traceurRuntime.options[name];
    }
    function defineProperty(object, name, descriptor) {
      if (isShimSymbol(name)) {
        name = name[symbolInternalProperty];
      }
      $defineProperty(object, name, descriptor);
      return object;
    }
    function polyfillObject(Object) {
      $defineProperty(Object, 'defineProperty', {value: defineProperty});
      $defineProperty(Object, 'getOwnPropertyNames', {value: getOwnPropertyNames});
      $defineProperty(Object, 'getOwnPropertyDescriptor', {value: getOwnPropertyDescriptor});
      $defineProperty(Object.prototype, 'hasOwnProperty', {value: hasOwnProperty});
      $defineProperty(Object, 'freeze', {value: freeze});
      $defineProperty(Object, 'preventExtensions', {value: preventExtensions});
      $defineProperty(Object, 'seal', {value: seal});
      $defineProperty(Object, 'keys', {value: keys});
    }
    function exportStar(object) {
      for (var i = 1; i < arguments.length; i++) {
        var names = $getOwnPropertyNames(arguments[i]);
        for (var j = 0; j < names.length; j++) {
          var name = names[j];
          if (isSymbolString(name))
            continue;
          (function(mod, name) {
            $defineProperty(object, name, {
              get: function() {
                return mod[name];
              },
              enumerable: true
            });
          })(arguments[i], names[j]);
        }
      }
      return object;
    }
    function isObject(x) {
      return x != null && (typeof x === 'object' || typeof x === 'function');
    }
    function toObject(x) {
      if (x == null)
        throw $TypeError();
      return $Object(x);
    }
    function checkObjectCoercible(argument) {
      if (argument == null) {
        throw new TypeError('Value cannot be converted to an Object');
      }
      return argument;
    }
    function polyfillSymbol(global, Symbol) {
      if (!global.Symbol) {
        global.Symbol = Symbol;
        Object.getOwnPropertySymbols = getOwnPropertySymbols;
      }
      if (!global.Symbol.iterator) {
        global.Symbol.iterator = Symbol('Symbol.iterator');
      }
      if (!global.Symbol.observer) {
        global.Symbol.observer = Symbol('Symbol.observer');
      }
    }
    function setupGlobals(global) {
      polyfillSymbol(global, Symbol);
      global.Reflect = global.Reflect || {};
      global.Reflect.global = global.Reflect.global || global;
      polyfillObject(global.Object);
    }
    setupGlobals(global);
    global.$traceurRuntime = {
      call: tailCall,
      checkObjectCoercible: checkObjectCoercible,
      construct: construct,
      continuation: createContinuation,
      createPrivateName: createPrivateName,
      defineProperties: $defineProperties,
      defineProperty: $defineProperty,
      exportStar: exportStar,
      getOwnHashObject: getOwnHashObject,
      getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
      getOwnPropertyNames: $getOwnPropertyNames,
      initTailRecursiveFunction: initTailRecursiveFunction,
      isObject: isObject,
      isPrivateName: isPrivateName,
      isSymbolString: isSymbolString,
      keys: $keys,
      options: {},
      setupGlobals: setupGlobals,
      toObject: toObject,
      toProperty: toProperty,
      typeof: typeOf
    };
  })();
})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function() {
  function buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
    var out = [];
    if (opt_scheme) {
      out.push(opt_scheme, ':');
    }
    if (opt_domain) {
      out.push('//');
      if (opt_userInfo) {
        out.push(opt_userInfo, '@');
      }
      out.push(opt_domain);
      if (opt_port) {
        out.push(':', opt_port);
      }
    }
    if (opt_path) {
      out.push(opt_path);
    }
    if (opt_queryData) {
      out.push('?', opt_queryData);
    }
    if (opt_fragment) {
      out.push('#', opt_fragment);
    }
    return out.join('');
  }
  ;
  var splitRe = new RegExp('^' + '(?:' + '([^:/?#.]+)' + ':)?' + '(?://' + '(?:([^/?#]*)@)?' + '([\\w\\d\\-\\u0100-\\uffff.%]*)' + '(?::([0-9]+))?' + ')?' + '([^?#]+)?' + '(?:\\?([^#]*))?' + '(?:#(.*))?' + '$');
  var ComponentIndex = {
    SCHEME: 1,
    USER_INFO: 2,
    DOMAIN: 3,
    PORT: 4,
    PATH: 5,
    QUERY_DATA: 6,
    FRAGMENT: 7
  };
  function split(uri) {
    return (uri.match(splitRe));
  }
  function removeDotSegments(path) {
    if (path === '/')
      return '/';
    var leadingSlash = path[0] === '/' ? '/' : '';
    var trailingSlash = path.slice(-1) === '/' ? '/' : '';
    var segments = path.split('/');
    var out = [];
    var up = 0;
    for (var pos = 0; pos < segments.length; pos++) {
      var segment = segments[pos];
      switch (segment) {
        case '':
        case '.':
          break;
        case '..':
          if (out.length)
            out.pop();
          else
            up++;
          break;
        default:
          out.push(segment);
      }
    }
    if (!leadingSlash) {
      while (up-- > 0) {
        out.unshift('..');
      }
      if (out.length === 0)
        out.push('.');
    }
    return leadingSlash + out.join('/') + trailingSlash;
  }
  function joinAndCanonicalizePath(parts) {
    var path = parts[ComponentIndex.PATH] || '';
    path = removeDotSegments(path);
    parts[ComponentIndex.PATH] = path;
    return buildFromEncodedParts(parts[ComponentIndex.SCHEME], parts[ComponentIndex.USER_INFO], parts[ComponentIndex.DOMAIN], parts[ComponentIndex.PORT], parts[ComponentIndex.PATH], parts[ComponentIndex.QUERY_DATA], parts[ComponentIndex.FRAGMENT]);
  }
  function canonicalizeUrl(url) {
    var parts = split(url);
    return joinAndCanonicalizePath(parts);
  }
  function resolveUrl(base, url) {
    var parts = split(url);
    var baseParts = split(base);
    if (parts[ComponentIndex.SCHEME]) {
      return joinAndCanonicalizePath(parts);
    } else {
      parts[ComponentIndex.SCHEME] = baseParts[ComponentIndex.SCHEME];
    }
    for (var i = ComponentIndex.SCHEME; i <= ComponentIndex.PORT; i++) {
      if (!parts[i]) {
        parts[i] = baseParts[i];
      }
    }
    if (parts[ComponentIndex.PATH][0] == '/') {
      return joinAndCanonicalizePath(parts);
    }
    var path = baseParts[ComponentIndex.PATH];
    var index = path.lastIndexOf('/');
    path = path.slice(0, index + 1) + parts[ComponentIndex.PATH];
    parts[ComponentIndex.PATH] = path;
    return joinAndCanonicalizePath(parts);
  }
  function isAbsolute(name) {
    if (!name)
      return false;
    if (name[0] === '/')
      return true;
    var parts = split(name);
    if (parts[ComponentIndex.SCHEME])
      return true;
    return false;
  }
  $traceurRuntime.canonicalizeUrl = canonicalizeUrl;
  $traceurRuntime.isAbsolute = isAbsolute;
  $traceurRuntime.removeDotSegments = removeDotSegments;
  $traceurRuntime.resolveUrl = resolveUrl;
})();
(function(global) {
  
  var $__1 = $traceurRuntime,
      canonicalizeUrl = $__1.canonicalizeUrl,
      resolveUrl = $__1.resolveUrl,
      isAbsolute = $__1.isAbsolute;
  var moduleInstantiators = Object.create(null);
  var baseURL;
  if (global.location && global.location.href)
    baseURL = resolveUrl(global.location.href, './');
  else
    baseURL = '';
  function UncoatedModuleEntry(url, uncoatedModule) {
    this.url = url;
    this.value_ = uncoatedModule;
  }
  function ModuleEvaluationError(erroneousModuleName, cause) {
    this.message = this.constructor.name + ': ' + this.stripCause(cause) + ' in ' + erroneousModuleName;
    if (!(cause instanceof ModuleEvaluationError) && cause.stack)
      this.stack = this.stripStack(cause.stack);
    else
      this.stack = '';
  }
  ModuleEvaluationError.prototype = Object.create(Error.prototype);
  ModuleEvaluationError.prototype.constructor = ModuleEvaluationError;
  ModuleEvaluationError.prototype.stripError = function(message) {
    return message.replace(/.*Error:/, this.constructor.name + ':');
  };
  ModuleEvaluationError.prototype.stripCause = function(cause) {
    if (!cause)
      return '';
    if (!cause.message)
      return cause + '';
    return this.stripError(cause.message);
  };
  ModuleEvaluationError.prototype.loadedBy = function(moduleName) {
    this.stack += '\n loaded by ' + moduleName;
  };
  ModuleEvaluationError.prototype.stripStack = function(causeStack) {
    var stack = [];
    causeStack.split('\n').some((function(frame) {
      if (/UncoatedModuleInstantiator/.test(frame))
        return true;
      stack.push(frame);
    }));
    stack[0] = this.stripError(stack[0]);
    return stack.join('\n');
  };
  function beforeLines(lines, number) {
    var result = [];
    var first = number - 3;
    if (first < 0)
      first = 0;
    for (var i = first; i < number; i++) {
      result.push(lines[i]);
    }
    return result;
  }
  function afterLines(lines, number) {
    var last = number + 1;
    if (last > lines.length - 1)
      last = lines.length - 1;
    var result = [];
    for (var i = number; i <= last; i++) {
      result.push(lines[i]);
    }
    return result;
  }
  function columnSpacing(columns) {
    var result = '';
    for (var i = 0; i < columns - 1; i++) {
      result += '-';
    }
    return result;
  }
  function UncoatedModuleInstantiator(url, func) {
    UncoatedModuleEntry.call(this, url, null);
    this.func = func;
  }
  UncoatedModuleInstantiator.prototype = Object.create(UncoatedModuleEntry.prototype);
  UncoatedModuleInstantiator.prototype.getUncoatedModule = function() {
    if (this.value_)
      return this.value_;
    try {
      var relativeRequire;
      if (typeof $traceurRuntime !== undefined && $traceurRuntime.require) {
        relativeRequire = $traceurRuntime.require.bind(null, this.url);
      }
      return this.value_ = this.func.call(global, relativeRequire);
    } catch (ex) {
      if (ex instanceof ModuleEvaluationError) {
        ex.loadedBy(this.url);
        throw ex;
      }
      if (ex.stack) {
        var lines = this.func.toString().split('\n');
        var evaled = [];
        ex.stack.split('\n').some(function(frame) {
          if (frame.indexOf('UncoatedModuleInstantiator.getUncoatedModule') > 0)
            return true;
          var m = /(at\s[^\s]*\s).*>:(\d*):(\d*)\)/.exec(frame);
          if (m) {
            var line = parseInt(m[2], 10);
            evaled = evaled.concat(beforeLines(lines, line));
            evaled.push(columnSpacing(m[3]) + '^');
            evaled = evaled.concat(afterLines(lines, line));
            evaled.push('= = = = = = = = =');
          } else {
            evaled.push(frame);
          }
        });
        ex.stack = evaled.join('\n');
      }
      throw new ModuleEvaluationError(this.url, ex);
    }
  };
  function getUncoatedModuleInstantiator(name) {
    if (!name)
      return ;
    var url = ModuleStore.normalize(name);
    return moduleInstantiators[url];
  }
  ;
  var moduleInstances = Object.create(null);
  var liveModuleSentinel = {};
  function Module(uncoatedModule) {
    var isLive = arguments[1];
    var coatedModule = Object.create(null);
    Object.getOwnPropertyNames(uncoatedModule).forEach((function(name) {
      var getter,
          value;
      if (isLive === liveModuleSentinel) {
        var descr = Object.getOwnPropertyDescriptor(uncoatedModule, name);
        if (descr.get)
          getter = descr.get;
      }
      if (!getter) {
        value = uncoatedModule[name];
        getter = function() {
          return value;
        };
      }
      Object.defineProperty(coatedModule, name, {
        get: getter,
        enumerable: true
      });
    }));
    Object.preventExtensions(coatedModule);
    return coatedModule;
  }
  var ModuleStore = {
    normalize: function(name, refererName, refererAddress) {
      if (typeof name !== 'string')
        throw new TypeError('module name must be a string, not ' + typeof name);
      if (isAbsolute(name))
        return canonicalizeUrl(name);
      if (/[^\.]\/\.\.\//.test(name)) {
        throw new Error('module name embeds /../: ' + name);
      }
      if (name[0] === '.' && refererName)
        return resolveUrl(refererName, name);
      return canonicalizeUrl(name);
    },
    get: function(normalizedName) {
      var m = getUncoatedModuleInstantiator(normalizedName);
      if (!m)
        return undefined;
      var moduleInstance = moduleInstances[m.url];
      if (moduleInstance)
        return moduleInstance;
      moduleInstance = Module(m.getUncoatedModule(), liveModuleSentinel);
      return moduleInstances[m.url] = moduleInstance;
    },
    set: function(normalizedName, module) {
      normalizedName = String(normalizedName);
      moduleInstantiators[normalizedName] = new UncoatedModuleInstantiator(normalizedName, (function() {
        return module;
      }));
      moduleInstances[normalizedName] = module;
    },
    get baseURL() {
      return baseURL;
    },
    set baseURL(v) {
      baseURL = String(v);
    },
    registerModule: function(name, deps, func) {
      var normalizedName = ModuleStore.normalize(name);
      if (moduleInstantiators[normalizedName])
        throw new Error('duplicate module named ' + normalizedName);
      moduleInstantiators[normalizedName] = new UncoatedModuleInstantiator(normalizedName, func);
    },
    bundleStore: Object.create(null),
    register: function(name, deps, func) {
      if (!deps || !deps.length && !func.length) {
        this.registerModule(name, deps, func);
      } else {
        this.bundleStore[name] = {
          deps: deps,
          execute: function() {
            var $__0 = arguments;
            var depMap = {};
            deps.forEach((function(dep, index) {
              return depMap[dep] = $__0[index];
            }));
            var registryEntry = func.call(this, depMap);
            registryEntry.execute.call(this);
            return registryEntry.exports;
          }
        };
      }
    },
    getAnonymousModule: function(func) {
      return new Module(func.call(global), liveModuleSentinel);
    },
    getForTesting: function(name) {
      var $__0 = this;
      if (!this.testingPrefix_) {
        Object.keys(moduleInstances).some((function(key) {
          var m = /(traceur@[^\/]*\/)/.exec(key);
          if (m) {
            $__0.testingPrefix_ = m[1];
            return true;
          }
        }));
      }
      return this.get(this.testingPrefix_ + name);
    }
  };
  var moduleStoreModule = new Module({ModuleStore: ModuleStore});
  ModuleStore.set('@traceur/src/runtime/ModuleStore', moduleStoreModule);
  ModuleStore.set('@traceur/src/runtime/ModuleStore.js', moduleStoreModule);
  var setupGlobals = $traceurRuntime.setupGlobals;
  $traceurRuntime.setupGlobals = function(global) {
    setupGlobals(global);
  };
  $traceurRuntime.ModuleStore = ModuleStore;
  global.System = {
    register: ModuleStore.register.bind(ModuleStore),
    registerModule: ModuleStore.registerModule.bind(ModuleStore),
    get: ModuleStore.get,
    set: ModuleStore.set,
    normalize: ModuleStore.normalize
  };
  $traceurRuntime.getModuleImpl = function(name) {
    var instantiator = getUncoatedModuleInstantiator(name);
    return instantiator && instantiator.getUncoatedModule();
  };
})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
System.registerModule("traceur-runtime@0.0.85/src/runtime/async.js", [], function() {
  
  var __moduleName = "traceur-runtime@0.0.85/src/runtime/async.js";
  if (typeof $traceurRuntime !== 'object') {
    throw new Error('traceur runtime not found.');
  }
  var $createPrivateName = $traceurRuntime.createPrivateName;
  var $defineProperty = $traceurRuntime.defineProperty;
  var $defineProperties = $traceurRuntime.defineProperties;
  var $create = Object.create;
  var thisName = $createPrivateName();
  var argsName = $createPrivateName();
  var observeName = $createPrivateName();
  function AsyncGeneratorFunction() {}
  function AsyncGeneratorFunctionPrototype() {}
  AsyncGeneratorFunction.prototype = AsyncGeneratorFunctionPrototype;
  AsyncGeneratorFunctionPrototype.constructor = AsyncGeneratorFunction;
  $defineProperty(AsyncGeneratorFunctionPrototype, 'constructor', {enumerable: false});
  var AsyncGeneratorContext = function AsyncGeneratorContext(observer) {
    var $__0 = this;
    this.decoratedObserver = $traceurRuntime.createDecoratedGenerator(observer, (function() {
      $__0.done = true;
    }));
    this.done = false;
    this.inReturn = false;
  };
  ($traceurRuntime.createClass)(AsyncGeneratorContext, {
    throw: function(error) {
      if (!this.inReturn) {
        throw error;
      }
    },
    yield: function(value) {
      if (this.done) {
        this.inReturn = true;
        throw undefined;
      }
      var result;
      try {
        result = this.decoratedObserver.next(value);
      } catch (e) {
        this.done = true;
        throw e;
      }
      if (result === undefined) {
        return ;
      }
      if (result.done) {
        this.done = true;
        this.inReturn = true;
        throw undefined;
      }
      return result.value;
    },
    yieldFor: function(observable) {
      var ctx = this;
      return $traceurRuntime.observeForEach(observable[$traceurRuntime.toProperty(Symbol.observer)].bind(observable), function(value) {
        if (ctx.done) {
          this.return();
          return ;
        }
        var result;
        try {
          result = ctx.decoratedObserver.next(value);
        } catch (e) {
          ctx.done = true;
          throw e;
        }
        if (result === undefined) {
          return ;
        }
        if (result.done) {
          ctx.done = true;
        }
        return result;
      });
    }
  }, {});
  AsyncGeneratorFunctionPrototype.prototype[Symbol.observer] = function(observer) {
    var observe = this[observeName];
    var ctx = new AsyncGeneratorContext(observer);
    $traceurRuntime.schedule((function() {
      return observe(ctx);
    })).then((function(value) {
      if (!ctx.done) {
        ctx.decoratedObserver.return(value);
      }
    })).catch((function(error) {
      if (!ctx.done) {
        ctx.decoratedObserver.throw(error);
      }
    }));
    return ctx.decoratedObserver;
  };
  $defineProperty(AsyncGeneratorFunctionPrototype.prototype, Symbol.observer, {enumerable: false});
  function initAsyncGeneratorFunction(functionObject) {
    functionObject.prototype = $create(AsyncGeneratorFunctionPrototype.prototype);
    functionObject.__proto__ = AsyncGeneratorFunctionPrototype;
    return functionObject;
  }
  function createAsyncGeneratorInstance(observe, functionObject) {
    for (var args = [],
        $__2 = 2; $__2 < arguments.length; $__2++)
      args[$__2 - 2] = arguments[$__2];
    var object = $create(functionObject.prototype);
    object[thisName] = this;
    object[argsName] = args;
    object[observeName] = observe;
    return object;
  }
  function observeForEach(observe, next) {
    return new Promise((function(resolve, reject) {
      var generator = observe({
        next: function(value) {
          return next.call(generator, value);
        },
        throw: function(error) {
          reject(error);
        },
        return: function(value) {
          resolve(value);
        }
      });
    }));
  }
  function schedule(asyncF) {
    return Promise.resolve().then(asyncF);
  }
  var generator = Symbol();
  var onDone = Symbol();
  var DecoratedGenerator = function DecoratedGenerator(_generator, _onDone) {
    this[generator] = _generator;
    this[onDone] = _onDone;
  };
  ($traceurRuntime.createClass)(DecoratedGenerator, {
    next: function(value) {
      var result = this[generator].next(value);
      if (result !== undefined && result.done) {
        this[onDone].call(this);
      }
      return result;
    },
    throw: function(error) {
      this[onDone].call(this);
      return this[generator].throw(error);
    },
    return: function(value) {
      this[onDone].call(this);
      return this[generator].return(value);
    }
  }, {});
  function createDecoratedGenerator(generator, onDone) {
    return new DecoratedGenerator(generator, onDone);
  }
  $traceurRuntime.initAsyncGeneratorFunction = initAsyncGeneratorFunction;
  $traceurRuntime.createAsyncGeneratorInstance = createAsyncGeneratorInstance;
  $traceurRuntime.observeForEach = observeForEach;
  $traceurRuntime.schedule = schedule;
  $traceurRuntime.createDecoratedGenerator = createDecoratedGenerator;
  return {};
});
System.registerModule("traceur-runtime@0.0.85/src/runtime/classes.js", [], function() {
  
  var __moduleName = "traceur-runtime@0.0.85/src/runtime/classes.js";
  var $Object = Object;
  var $TypeError = TypeError;
  var $create = $Object.create;
  var $defineProperties = $traceurRuntime.defineProperties;
  var $defineProperty = $traceurRuntime.defineProperty;
  var $getOwnPropertyDescriptor = $traceurRuntime.getOwnPropertyDescriptor;
  var $getOwnPropertyNames = $traceurRuntime.getOwnPropertyNames;
  var $getPrototypeOf = Object.getPrototypeOf;
  var $__0 = Object,
      getOwnPropertyNames = $__0.getOwnPropertyNames,
      getOwnPropertySymbols = $__0.getOwnPropertySymbols;
  function superDescriptor(homeObject, name) {
    var proto = $getPrototypeOf(homeObject);
    do {
      var result = $getOwnPropertyDescriptor(proto, name);
      if (result)
        return result;
      proto = $getPrototypeOf(proto);
    } while (proto);
    return undefined;
  }
  function superConstructor(ctor) {
    return ctor.__proto__;
  }
  function superGet(self, homeObject, name) {
    var descriptor = superDescriptor(homeObject, name);
    if (descriptor) {
      if (!descriptor.get)
        return descriptor.value;
      return descriptor.get.call(self);
    }
    return undefined;
  }
  function superSet(self, homeObject, name, value) {
    var descriptor = superDescriptor(homeObject, name);
    if (descriptor && descriptor.set) {
      descriptor.set.call(self, value);
      return value;
    }
    throw $TypeError(("super has no setter '" + name + "'."));
  }
  function getDescriptors(object) {
    var descriptors = {};
    var names = getOwnPropertyNames(object);
    for (var i = 0; i < names.length; i++) {
      var name = names[i];
      descriptors[name] = $getOwnPropertyDescriptor(object, name);
    }
    var symbols = getOwnPropertySymbols(object);
    for (var i = 0; i < symbols.length; i++) {
      var symbol = symbols[i];
      descriptors[$traceurRuntime.toProperty(symbol)] = $getOwnPropertyDescriptor(object, $traceurRuntime.toProperty(symbol));
    }
    return descriptors;
  }
  function createClass(ctor, object, staticObject, superClass) {
    $defineProperty(object, 'constructor', {
      value: ctor,
      configurable: true,
      enumerable: false,
      writable: true
    });
    if (arguments.length > 3) {
      if (typeof superClass === 'function')
        ctor.__proto__ = superClass;
      ctor.prototype = $create(getProtoParent(superClass), getDescriptors(object));
    } else {
      ctor.prototype = object;
    }
    $defineProperty(ctor, 'prototype', {
      configurable: false,
      writable: false
    });
    return $defineProperties(ctor, getDescriptors(staticObject));
  }
  function getProtoParent(superClass) {
    if (typeof superClass === 'function') {
      var prototype = superClass.prototype;
      if ($Object(prototype) === prototype || prototype === null)
        return superClass.prototype;
      throw new $TypeError('super prototype must be an Object or null');
    }
    if (superClass === null)
      return null;
    throw new $TypeError(("Super expression must either be null or a function, not " + typeof superClass + "."));
  }
  $traceurRuntime.createClass = createClass;
  $traceurRuntime.superConstructor = superConstructor;
  $traceurRuntime.superGet = superGet;
  $traceurRuntime.superSet = superSet;
  return {};
});
System.registerModule("traceur-runtime@0.0.85/src/runtime/destructuring.js", [], function() {
  
  var __moduleName = "traceur-runtime@0.0.85/src/runtime/destructuring.js";
  function iteratorToArray(iter) {
    var rv = [];
    var i = 0;
    var tmp;
    while (!(tmp = iter.next()).done) {
      rv[i++] = tmp.value;
    }
    return rv;
  }
  $traceurRuntime.iteratorToArray = iteratorToArray;
  return {};
});
System.registerModule("traceur-runtime@0.0.85/src/runtime/generators.js", [], function() {
  
  var __moduleName = "traceur-runtime@0.0.85/src/runtime/generators.js";
  if (typeof $traceurRuntime !== 'object') {
    throw new Error('traceur runtime not found.');
  }
  var createPrivateName = $traceurRuntime.createPrivateName;
  var $defineProperties = $traceurRuntime.defineProperties;
  var $defineProperty = $traceurRuntime.defineProperty;
  var $create = Object.create;
  var $TypeError = TypeError;
  function nonEnum(value) {
    return {
      configurable: true,
      enumerable: false,
      value: value,
      writable: true
    };
  }
  var ST_NEWBORN = 0;
  var ST_EXECUTING = 1;
  var ST_SUSPENDED = 2;
  var ST_CLOSED = 3;
  var END_STATE = -2;
  var RETHROW_STATE = -3;
  function getInternalError(state) {
    return new Error('Traceur compiler bug: invalid state in state machine: ' + state);
  }
  var RETURN_SENTINEL = {};
  function GeneratorContext() {
    this.state = 0;
    this.GState = ST_NEWBORN;
    this.storedException = undefined;
    this.finallyFallThrough = undefined;
    this.sent_ = undefined;
    this.returnValue = undefined;
    this.oldReturnValue = undefined;
    this.tryStack_ = [];
  }
  GeneratorContext.prototype = {
    pushTry: function(catchState, finallyState) {
      if (finallyState !== null) {
        var finallyFallThrough = null;
        for (var i = this.tryStack_.length - 1; i >= 0; i--) {
          if (this.tryStack_[i].catch !== undefined) {
            finallyFallThrough = this.tryStack_[i].catch;
            break;
          }
        }
        if (finallyFallThrough === null)
          finallyFallThrough = RETHROW_STATE;
        this.tryStack_.push({
          finally: finallyState,
          finallyFallThrough: finallyFallThrough
        });
      }
      if (catchState !== null) {
        this.tryStack_.push({catch: catchState});
      }
    },
    popTry: function() {
      this.tryStack_.pop();
    },
    maybeUncatchable: function() {
      if (this.storedException === RETURN_SENTINEL) {
        throw RETURN_SENTINEL;
      }
    },
    get sent() {
      this.maybeThrow();
      return this.sent_;
    },
    set sent(v) {
      this.sent_ = v;
    },
    get sentIgnoreThrow() {
      return this.sent_;
    },
    maybeThrow: function() {
      if (this.action === 'throw') {
        this.action = 'next';
        throw this.sent_;
      }
    },
    end: function() {
      switch (this.state) {
        case END_STATE:
          return this;
        case RETHROW_STATE:
          throw this.storedException;
        default:
          throw getInternalError(this.state);
      }
    },
    handleException: function(ex) {
      this.GState = ST_CLOSED;
      this.state = END_STATE;
      throw ex;
    },
    wrapYieldStar: function(iterator) {
      var ctx = this;
      return {
        next: function(v) {
          return iterator.next(v);
        },
        throw: function(e) {
          var result;
          if (e === RETURN_SENTINEL) {
            if (iterator.return) {
              result = iterator.return(ctx.returnValue);
              if (!result.done) {
                ctx.returnValue = ctx.oldReturnValue;
                return result;
              }
              ctx.returnValue = result.value;
            }
            throw e;
          }
          if (iterator.throw) {
            return iterator.throw(e);
          }
          iterator.return && iterator.return();
          throw $TypeError('Inner iterator does not have a throw method');
        }
      };
    }
  };
  function nextOrThrow(ctx, moveNext, action, x) {
    switch (ctx.GState) {
      case ST_EXECUTING:
        throw new Error(("\"" + action + "\" on executing generator"));
      case ST_CLOSED:
        if (action == 'next') {
          return {
            value: undefined,
            done: true
          };
        }
        if (x === RETURN_SENTINEL) {
          return {
            value: ctx.returnValue,
            done: true
          };
        }
        throw x;
      case ST_NEWBORN:
        if (action === 'throw') {
          ctx.GState = ST_CLOSED;
          if (x === RETURN_SENTINEL) {
            return {
              value: ctx.returnValue,
              done: true
            };
          }
          throw x;
        }
        if (x !== undefined)
          throw $TypeError('Sent value to newborn generator');
      case ST_SUSPENDED:
        ctx.GState = ST_EXECUTING;
        ctx.action = action;
        ctx.sent = x;
        var value;
        try {
          value = moveNext(ctx);
        } catch (ex) {
          if (ex === RETURN_SENTINEL) {
            value = ctx;
          } else {
            throw ex;
          }
        }
        var done = value === ctx;
        if (done)
          value = ctx.returnValue;
        ctx.GState = done ? ST_CLOSED : ST_SUSPENDED;
        return {
          value: value,
          done: done
        };
    }
  }
  var ctxName = createPrivateName();
  var moveNextName = createPrivateName();
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  $defineProperty(GeneratorFunctionPrototype, 'constructor', nonEnum(GeneratorFunction));
  GeneratorFunctionPrototype.prototype = {
    constructor: GeneratorFunctionPrototype,
    next: function(v) {
      return nextOrThrow(this[ctxName], this[moveNextName], 'next', v);
    },
    throw: function(v) {
      return nextOrThrow(this[ctxName], this[moveNextName], 'throw', v);
    },
    return: function(v) {
      this[ctxName].oldReturnValue = this[ctxName].returnValue;
      this[ctxName].returnValue = v;
      return nextOrThrow(this[ctxName], this[moveNextName], 'throw', RETURN_SENTINEL);
    }
  };
  $defineProperties(GeneratorFunctionPrototype.prototype, {
    constructor: {enumerable: false},
    next: {enumerable: false},
    throw: {enumerable: false},
    return: {enumerable: false}
  });
  Object.defineProperty(GeneratorFunctionPrototype.prototype, Symbol.iterator, nonEnum(function() {
    return this;
  }));
  function createGeneratorInstance(innerFunction, functionObject, self) {
    var moveNext = getMoveNext(innerFunction, self);
    var ctx = new GeneratorContext();
    var object = $create(functionObject.prototype);
    object[ctxName] = ctx;
    object[moveNextName] = moveNext;
    return object;
  }
  function initGeneratorFunction(functionObject) {
    functionObject.prototype = $create(GeneratorFunctionPrototype.prototype);
    functionObject.__proto__ = GeneratorFunctionPrototype;
    return functionObject;
  }
  function AsyncFunctionContext() {
    GeneratorContext.call(this);
    this.err = undefined;
    var ctx = this;
    ctx.result = new Promise(function(resolve, reject) {
      ctx.resolve = resolve;
      ctx.reject = reject;
    });
  }
  AsyncFunctionContext.prototype = $create(GeneratorContext.prototype);
  AsyncFunctionContext.prototype.end = function() {
    switch (this.state) {
      case END_STATE:
        this.resolve(this.returnValue);
        break;
      case RETHROW_STATE:
        this.reject(this.storedException);
        break;
      default:
        this.reject(getInternalError(this.state));
    }
  };
  AsyncFunctionContext.prototype.handleException = function() {
    this.state = RETHROW_STATE;
  };
  function asyncWrap(innerFunction, self) {
    var moveNext = getMoveNext(innerFunction, self);
    var ctx = new AsyncFunctionContext();
    ctx.createCallback = function(newState) {
      return function(value) {
        ctx.state = newState;
        ctx.value = value;
        moveNext(ctx);
      };
    };
    ctx.errback = function(err) {
      handleCatch(ctx, err);
      moveNext(ctx);
    };
    moveNext(ctx);
    return ctx.result;
  }
  function getMoveNext(innerFunction, self) {
    return function(ctx) {
      while (true) {
        try {
          return innerFunction.call(self, ctx);
        } catch (ex) {
          handleCatch(ctx, ex);
        }
      }
    };
  }
  function handleCatch(ctx, ex) {
    ctx.storedException = ex;
    var last = ctx.tryStack_[ctx.tryStack_.length - 1];
    if (!last) {
      ctx.handleException(ex);
      return ;
    }
    ctx.state = last.catch !== undefined ? last.catch : last.finally;
    if (last.finallyFallThrough !== undefined)
      ctx.finallyFallThrough = last.finallyFallThrough;
  }
  $traceurRuntime.asyncWrap = asyncWrap;
  $traceurRuntime.initGeneratorFunction = initGeneratorFunction;
  $traceurRuntime.createGeneratorInstance = createGeneratorInstance;
  return {};
});
System.registerModule("traceur-runtime@0.0.85/src/runtime/relativeRequire.js", [], function() {
  
  var __moduleName = "traceur-runtime@0.0.85/src/runtime/relativeRequire.js";
  var path;
  function relativeRequire(callerPath, requiredPath) {
    path = path || typeof require !== 'undefined' && require('path');
    function isDirectory(path) {
      return path.slice(-1) === '/';
    }
    function isAbsolute(path) {
      return path[0] === '/';
    }
    function isRelative(path) {
      return path[0] === '.';
    }
    if (isDirectory(requiredPath) || isAbsolute(requiredPath))
      return ;
    return isRelative(requiredPath) ? require(path.resolve(path.dirname(callerPath), requiredPath)) : require(requiredPath);
  }
  $traceurRuntime.require = relativeRequire;
  return {};
});
System.registerModule("traceur-runtime@0.0.85/src/runtime/spread.js", [], function() {
  
  var __moduleName = "traceur-runtime@0.0.85/src/runtime/spread.js";
  function spread() {
    var rv = [],
        j = 0,
        iterResult;
    for (var i = 0; i < arguments.length; i++) {
      var valueToSpread = $traceurRuntime.checkObjectCoercible(arguments[i]);
      if (typeof valueToSpread[$traceurRuntime.toProperty(Symbol.iterator)] !== 'function') {
        throw new TypeError('Cannot spread non-iterable object.');
      }
      var iter = valueToSpread[$traceurRuntime.toProperty(Symbol.iterator)]();
      while (!(iterResult = iter.next()).done) {
        rv[j++] = iterResult.value;
      }
    }
    return rv;
  }
  $traceurRuntime.spread = spread;
  return {};
});
System.registerModule("traceur-runtime@0.0.85/src/runtime/type-assertions.js", [], function() {
  
  var __moduleName = "traceur-runtime@0.0.85/src/runtime/type-assertions.js";
  var types = {
    any: {name: 'any'},
    boolean: {name: 'boolean'},
    number: {name: 'number'},
    string: {name: 'string'},
    symbol: {name: 'symbol'},
    void: {name: 'void'}
  };
  var GenericType = function GenericType(type, argumentTypes) {
    this.type = type;
    this.argumentTypes = argumentTypes;
  };
  ($traceurRuntime.createClass)(GenericType, {}, {});
  var typeRegister = Object.create(null);
  function genericType(type) {
    for (var argumentTypes = [],
        $__1 = 1; $__1 < arguments.length; $__1++)
      argumentTypes[$__1 - 1] = arguments[$__1];
    var typeMap = typeRegister;
    var key = $traceurRuntime.getOwnHashObject(type).hash;
    if (!typeMap[key]) {
      typeMap[key] = Object.create(null);
    }
    typeMap = typeMap[key];
    for (var i = 0; i < argumentTypes.length - 1; i++) {
      key = $traceurRuntime.getOwnHashObject(argumentTypes[i]).hash;
      if (!typeMap[key]) {
        typeMap[key] = Object.create(null);
      }
      typeMap = typeMap[key];
    }
    var tail = argumentTypes[argumentTypes.length - 1];
    key = $traceurRuntime.getOwnHashObject(tail).hash;
    if (!typeMap[key]) {
      typeMap[key] = new GenericType(type, argumentTypes);
    }
    return typeMap[key];
  }
  $traceurRuntime.GenericType = GenericType;
  $traceurRuntime.genericType = genericType;
  $traceurRuntime.type = types;
  return {};
});
System.registerModule("traceur-runtime@0.0.85/src/runtime/runtime-modules.js", [], function() {
  
  var __moduleName = "traceur-runtime@0.0.85/src/runtime/runtime-modules.js";
  System.get("traceur-runtime@0.0.85/src/runtime/relativeRequire.js");
  System.get("traceur-runtime@0.0.85/src/runtime/spread.js");
  System.get("traceur-runtime@0.0.85/src/runtime/destructuring.js");
  System.get("traceur-runtime@0.0.85/src/runtime/classes.js");
  System.get("traceur-runtime@0.0.85/src/runtime/async.js");
  System.get("traceur-runtime@0.0.85/src/runtime/generators.js");
  System.get("traceur-runtime@0.0.85/src/runtime/type-assertions.js");
  return {};
});
System.get("traceur-runtime@0.0.85/src/runtime/runtime-modules.js" + '');
System.registerModule("traceur-runtime@0.0.85/src/runtime/polyfills/utils.js", [], function() {
  
  var __moduleName = "traceur-runtime@0.0.85/src/runtime/polyfills/utils.js";
  var $ceil = Math.ceil;
  var $floor = Math.floor;
  var $isFinite = isFinite;
  var $isNaN = isNaN;
  var $pow = Math.pow;
  var $min = Math.min;
  var toObject = $traceurRuntime.toObject;
  function toUint32(x) {
    return x >>> 0;
  }
  function isObject(x) {
    return x && (typeof x === 'object' || typeof x === 'function');
  }
  function isCallable(x) {
    return typeof x === 'function';
  }
  function isNumber(x) {
    return typeof x === 'number';
  }
  function toInteger(x) {
    x = +x;
    if ($isNaN(x))
      return 0;
    if (x === 0 || !$isFinite(x))
      return x;
    return x > 0 ? $floor(x) : $ceil(x);
  }
  var MAX_SAFE_LENGTH = $pow(2, 53) - 1;
  function toLength(x) {
    var len = toInteger(x);
    return len < 0 ? 0 : $min(len, MAX_SAFE_LENGTH);
  }
  function checkIterable(x) {
    return !isObject(x) ? undefined : x[Symbol.iterator];
  }
  function isConstructor(x) {
    return isCallable(x);
  }
  function createIteratorResultObject(value, done) {
    return {
      value: value,
      done: done
    };
  }
  function maybeDefine(object, name, descr) {
    if (!(name in object)) {
      Object.defineProperty(object, name, descr);
    }
  }
  function maybeDefineMethod(object, name, value) {
    maybeDefine(object, name, {
      value: value,
      configurable: true,
      enumerable: false,
      writable: true
    });
  }
  function maybeDefineConst(object, name, value) {
    maybeDefine(object, name, {
      value: value,
      configurable: false,
      enumerable: false,
      writable: false
    });
  }
  function maybeAddFunctions(object, functions) {
    for (var i = 0; i < functions.length; i += 2) {
      var name = functions[i];
      var value = functions[i + 1];
      maybeDefineMethod(object, name, value);
    }
  }
  function maybeAddConsts(object, consts) {
    for (var i = 0; i < consts.length; i += 2) {
      var name = consts[i];
      var value = consts[i + 1];
      maybeDefineConst(object, name, value);
    }
  }
  function maybeAddIterator(object, func, Symbol) {
    if (!Symbol || !Symbol.iterator || object[Symbol.iterator])
      return ;
    if (object['@@iterator'])
      func = object['@@iterator'];
    Object.defineProperty(object, Symbol.iterator, {
      value: func,
      configurable: true,
      enumerable: false,
      writable: true
    });
  }
  var polyfills = [];
  function registerPolyfill(func) {
    polyfills.push(func);
  }
  function polyfillAll(global) {
    polyfills.forEach((function(f) {
      return f(global);
    }));
  }
  return {
    get toObject() {
      return toObject;
    },
    get toUint32() {
      return toUint32;
    },
    get isObject() {
      return isObject;
    },
    get isCallable() {
      return isCallable;
    },
    get isNumber() {
      return isNumber;
    },
    get toInteger() {
      return toInteger;
    },
    get toLength() {
      return toLength;
    },
    get checkIterable() {
      return checkIterable;
    },
    get isConstructor() {
      return isConstructor;
    },
    get createIteratorResultObject() {
      return createIteratorResultObject;
    },
    get maybeDefine() {
      return maybeDefine;
    },
    get maybeDefineMethod() {
      return maybeDefineMethod;
    },
    get maybeDefineConst() {
      return maybeDefineConst;
    },
    get maybeAddFunctions() {
      return maybeAddFunctions;
    },
    get maybeAddConsts() {
      return maybeAddConsts;
    },
    get maybeAddIterator() {
      return maybeAddIterator;
    },
    get registerPolyfill() {
      return registerPolyfill;
    },
    get polyfillAll() {
      return polyfillAll;
    }
  };
});
System.registerModule("traceur-runtime@0.0.85/src/runtime/polyfills/Map.js", [], function() {
  
  var __moduleName = "traceur-runtime@0.0.85/src/runtime/polyfills/Map.js";
  var $__0 = System.get("traceur-runtime@0.0.85/src/runtime/polyfills/utils.js"),
      isObject = $__0.isObject,
      maybeAddIterator = $__0.maybeAddIterator,
      registerPolyfill = $__0.registerPolyfill;
  var getOwnHashObject = $traceurRuntime.getOwnHashObject;
  var $hasOwnProperty = Object.prototype.hasOwnProperty;
  var deletedSentinel = {};
  function lookupIndex(map, key) {
    if (isObject(key)) {
      var hashObject = getOwnHashObject(key);
      return hashObject && map.objectIndex_[hashObject.hash];
    }
    if (typeof key === 'string')
      return map.stringIndex_[key];
    return map.primitiveIndex_[key];
  }
  function initMap(map) {
    map.entries_ = [];
    map.objectIndex_ = Object.create(null);
    map.stringIndex_ = Object.create(null);
    map.primitiveIndex_ = Object.create(null);
    map.deletedCount_ = 0;
  }
  var Map = function Map() {
    var $__10,
        $__11;
    var iterable = arguments[0];
    if (!isObject(this))
      throw new TypeError('Map called on incompatible type');
    if ($hasOwnProperty.call(this, 'entries_')) {
      throw new TypeError('Map can not be reentrantly initialised');
    }
    initMap(this);
    if (iterable !== null && iterable !== undefined) {
      var $__5 = true;
      var $__6 = false;
      var $__7 = undefined;
      try {
        for (var $__3 = void 0,
            $__2 = (iterable)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {
          var $__9 = $__3.value,
              key = ($__10 = $__9[$traceurRuntime.toProperty(Symbol.iterator)](), ($__11 = $__10.next()).done ? void 0 : $__11.value),
              value = ($__11 = $__10.next()).done ? void 0 : $__11.value;
          {
            this.set(key, value);
          }
        }
      } catch ($__8) {
        $__6 = true;
        $__7 = $__8;
      } finally {
        try {
          if (!$__5 && $__2.return != null) {
            $__2.return();
          }
        } finally {
          if ($__6) {
            throw $__7;
          }
        }
      }
    }
  };
  ($traceurRuntime.createClass)(Map, {
    get size() {
      return this.entries_.length / 2 - this.deletedCount_;
    },
    get: function(key) {
      var index = lookupIndex(this, key);
      if (index !== undefined)
        return this.entries_[index + 1];
    },
    set: function(key, value) {
      var objectMode = isObject(key);
      var stringMode = typeof key === 'string';
      var index = lookupIndex(this, key);
      if (index !== undefined) {
        this.entries_[index + 1] = value;
      } else {
        index = this.entries_.length;
        this.entries_[index] = key;
        this.entries_[index + 1] = value;
        if (objectMode) {
          var hashObject = getOwnHashObject(key);
          var hash = hashObject.hash;
          this.objectIndex_[hash] = index;
        } else if (stringMode) {
          this.stringIndex_[key] = index;
        } else {
          this.primitiveIndex_[key] = index;
        }
      }
      return this;
    },
    has: function(key) {
      return lookupIndex(this, key) !== undefined;
    },
    delete: function(key) {
      var objectMode = isObject(key);
      var stringMode = typeof key === 'string';
      var index;
      var hash;
      if (objectMode) {
        var hashObject = getOwnHashObject(key);
        if (hashObject) {
          index = this.objectIndex_[hash = hashObject.hash];
          delete this.objectIndex_[hash];
        }
      } else if (stringMode) {
        index = this.stringIndex_[key];
        delete this.stringIndex_[key];
      } else {
        index = this.primitiveIndex_[key];
        delete this.primitiveIndex_[key];
      }
      if (index !== undefined) {
        this.entries_[index] = deletedSentinel;
        this.entries_[index + 1] = undefined;
        this.deletedCount_++;
        return true;
      }
      return false;
    },
    clear: function() {
      initMap(this);
    },
    forEach: function(callbackFn) {
      var thisArg = arguments[1];
      for (var i = 0; i < this.entries_.length; i += 2) {
        var key = this.entries_[i];
        var value = this.entries_[i + 1];
        if (key === deletedSentinel)
          continue;
        callbackFn.call(thisArg, value, key, this);
      }
    },
    entries: $traceurRuntime.initGeneratorFunction(function $__12() {
      var i,
          key,
          value;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              i = 0;
              $ctx.state = 12;
              break;
            case 12:
              $ctx.state = (i < this.entries_.length) ? 8 : -2;
              break;
            case 4:
              i += 2;
              $ctx.state = 12;
              break;
            case 8:
              key = this.entries_[i];
              value = this.entries_[i + 1];
              $ctx.state = 9;
              break;
            case 9:
              $ctx.state = (key === deletedSentinel) ? 4 : 6;
              break;
            case 6:
              $ctx.state = 2;
              return [key, value];
            case 2:
              $ctx.maybeThrow();
              $ctx.state = 4;
              break;
            default:
              return $ctx.end();
          }
      }, $__12, this);
    }),
    keys: $traceurRuntime.initGeneratorFunction(function $__13() {
      var i,
          key,
          value;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              i = 0;
              $ctx.state = 12;
              break;
            case 12:
              $ctx.state = (i < this.entries_.length) ? 8 : -2;
              break;
            case 4:
              i += 2;
              $ctx.state = 12;
              break;
            case 8:
              key = this.entries_[i];
              value = this.entries_[i + 1];
              $ctx.state = 9;
              break;
            case 9:
              $ctx.state = (key === deletedSentinel) ? 4 : 6;
              break;
            case 6:
              $ctx.state = 2;
              return key;
            case 2:
              $ctx.maybeThrow();
              $ctx.state = 4;
              break;
            default:
              return $ctx.end();
          }
      }, $__13, this);
    }),
    values: $traceurRuntime.initGeneratorFunction(function $__14() {
      var i,
          key,
          value;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              i = 0;
              $ctx.state = 12;
              break;
            case 12:
              $ctx.state = (i < this.entries_.length) ? 8 : -2;
              break;
            case 4:
              i += 2;
              $ctx.state = 12;
              break;
            case 8:
              key = this.entries_[i];
              value = this.entries_[i + 1];
              $ctx.state = 9;
              break;
            case 9:
              $ctx.state = (key === deletedSentinel) ? 4 : 6;
              break;
            case 6:
              $ctx.state = 2;
              return value;
            case 2:
              $ctx.maybeThrow();
              $ctx.state = 4;
              break;
            default:
              return $ctx.end();
          }
      }, $__14, this);
    })
  }, {});
  Object.defineProperty(Map.prototype, Symbol.iterator, {
    configurable: true,
    writable: true,
    value: Map.prototype.entries
  });
  function polyfillMap(global) {
    var $__9 = global,
        Object = $__9.Object,
        Symbol = $__9.Symbol;
    if (!global.Map)
      global.Map = Map;
    var mapPrototype = global.Map.prototype;
    if (mapPrototype.entries === undefined)
      global.Map = Map;
    if (mapPrototype.entries) {
      maybeAddIterator(mapPrototype, mapPrototype.entries, Symbol);
      maybeAddIterator(Object.getPrototypeOf(new global.Map().entries()), function() {
        return this;
      }, Symbol);
    }
  }
  registerPolyfill(polyfillMap);
  return {
    get Map() {
      return Map;
    },
    get polyfillMap() {
      return polyfillMap;
    }
  };
});
System.get("traceur-runtime@0.0.85/src/runtime/polyfills/Map.js" + '');
System.registerModule("traceur-runtime@0.0.85/src/runtime/polyfills/Set.js", [], function() {
  
  var __moduleName = "traceur-runtime@0.0.85/src/runtime/polyfills/Set.js";
  var $__0 = System.get("traceur-runtime@0.0.85/src/runtime/polyfills/utils.js"),
      isObject = $__0.isObject,
      maybeAddIterator = $__0.maybeAddIterator,
      registerPolyfill = $__0.registerPolyfill;
  var Map = System.get("traceur-runtime@0.0.85/src/runtime/polyfills/Map.js").Map;
  var getOwnHashObject = $traceurRuntime.getOwnHashObject;
  var $hasOwnProperty = Object.prototype.hasOwnProperty;
  function initSet(set) {
    set.map_ = new Map();
  }
  var Set = function Set() {
    var iterable = arguments[0];
    if (!isObject(this))
      throw new TypeError('Set called on incompatible type');
    if ($hasOwnProperty.call(this, 'map_')) {
      throw new TypeError('Set can not be reentrantly initialised');
    }
    initSet(this);
    if (iterable !== null && iterable !== undefined) {
      var $__7 = true;
      var $__8 = false;
      var $__9 = undefined;
      try {
        for (var $__5 = void 0,
            $__4 = (iterable)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__7 = ($__5 = $__4.next()).done); $__7 = true) {
          var item = $__5.value;
          {
            this.add(item);
          }
        }
      } catch ($__10) {
        $__8 = true;
        $__9 = $__10;
      } finally {
        try {
          if (!$__7 && $__4.return != null) {
            $__4.return();
          }
        } finally {
          if ($__8) {
            throw $__9;
          }
        }
      }
    }
  };
  ($traceurRuntime.createClass)(Set, {
    get size() {
      return this.map_.size;
    },
    has: function(key) {
      return this.map_.has(key);
    },
    add: function(key) {
      this.map_.set(key, key);
      return this;
    },
    delete: function(key) {
      return this.map_.delete(key);
    },
    clear: function() {
      return this.map_.clear();
    },
    forEach: function(callbackFn) {
      var thisArg = arguments[1];
      var $__2 = this;
      return this.map_.forEach((function(value, key) {
        callbackFn.call(thisArg, key, key, $__2);
      }));
    },
    values: $traceurRuntime.initGeneratorFunction(function $__12() {
      var $__13,
          $__14;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $__13 = $ctx.wrapYieldStar(this.map_.keys()[Symbol.iterator]());
              $ctx.sent = void 0;
              $ctx.action = 'next';
              $ctx.state = 12;
              break;
            case 12:
              $__14 = $__13[$ctx.action]($ctx.sentIgnoreThrow);
              $ctx.state = 9;
              break;
            case 9:
              $ctx.state = ($__14.done) ? 3 : 2;
              break;
            case 3:
              $ctx.sent = $__14.value;
              $ctx.state = -2;
              break;
            case 2:
              $ctx.state = 12;
              return $__14.value;
            default:
              return $ctx.end();
          }
      }, $__12, this);
    }),
    entries: $traceurRuntime.initGeneratorFunction(function $__15() {
      var $__16,
          $__17;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $__16 = $ctx.wrapYieldStar(this.map_.entries()[Symbol.iterator]());
              $ctx.sent = void 0;
              $ctx.action = 'next';
              $ctx.state = 12;
              break;
            case 12:
              $__17 = $__16[$ctx.action]($ctx.sentIgnoreThrow);
              $ctx.state = 9;
              break;
            case 9:
              $ctx.state = ($__17.done) ? 3 : 2;
              break;
            case 3:
              $ctx.sent = $__17.value;
              $ctx.state = -2;
              break;
            case 2:
              $ctx.state = 12;
              return $__17.value;
            default:
              return $ctx.end();
          }
      }, $__15, this);
    })
  }, {});
  Object.defineProperty(Set.prototype, Symbol.iterator, {
    configurable: true,
    writable: true,
    value: Set.prototype.values
  });
  Object.defineProperty(Set.prototype, 'keys', {
    configurable: true,
    writable: true,
    value: Set.prototype.values
  });
  function polyfillSet(global) {
    var $__11 = global,
        Object = $__11.Object,
        Symbol = $__11.Symbol;
    if (!global.Set)
      global.Set = Set;
    var setPrototype = global.Set.prototype;
    if (setPrototype.values) {
      maybeAddIterator(setPrototype, setPrototype.values, Symbol);
      maybeAddIterator(Object.getPrototypeOf(new global.Set().values()), function() {
        return this;
      }, Symbol);
    }
  }
  registerPolyfill(polyfillSet);
  return {
    get Set() {
      return Set;
    },
    get polyfillSet() {
      return polyfillSet;
    }
  };
});
System.get("traceur-runtime@0.0.85/src/runtime/polyfills/Set.js" + '');
System.registerModule("traceur-runtime@0.0.85/node_modules/rsvp/lib/rsvp/asap.js", [], function() {
  
  var __moduleName = "traceur-runtime@0.0.85/node_modules/rsvp/lib/rsvp/asap.js";
  var len = 0;
  function asap(callback, arg) {
    queue[len] = callback;
    queue[len + 1] = arg;
    len += 2;
    if (len === 2) {
      scheduleFlush();
    }
  }
  var $__default = asap;
  var browserGlobal = (typeof window !== 'undefined') ? window : {};
  var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
  var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';
  function useNextTick() {
    return function() {
      process.nextTick(flush);
    };
  }
  function useMutationObserver() {
    var iterations = 0;
    var observer = new BrowserMutationObserver(flush);
    var node = document.createTextNode('');
    observer.observe(node, {characterData: true});
    return function() {
      node.data = (iterations = ++iterations % 2);
    };
  }
  function useMessageChannel() {
    var channel = new MessageChannel();
    channel.port1.onmessage = flush;
    return function() {
      channel.port2.postMessage(0);
    };
  }
  function useSetTimeout() {
    return function() {
      setTimeout(flush, 1);
    };
  }
  var queue = new Array(1000);
  function flush() {
    for (var i = 0; i < len; i += 2) {
      var callback = queue[i];
      var arg = queue[i + 1];
      callback(arg);
      queue[i] = undefined;
      queue[i + 1] = undefined;
    }
    len = 0;
  }
  var scheduleFlush;
  if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
    scheduleFlush = useNextTick();
  } else if (BrowserMutationObserver) {
    scheduleFlush = useMutationObserver();
  } else if (isWorker) {
    scheduleFlush = useMessageChannel();
  } else {
    scheduleFlush = useSetTimeout();
  }
  return {get default() {
      return $__default;
    }};
});
System.registerModule("traceur-runtime@0.0.85/src/runtime/polyfills/Promise.js", [], function() {
  
  var __moduleName = "traceur-runtime@0.0.85/src/runtime/polyfills/Promise.js";
  var async = System.get("traceur-runtime@0.0.85/node_modules/rsvp/lib/rsvp/asap.js").default;
  var registerPolyfill = System.get("traceur-runtime@0.0.85/src/runtime/polyfills/utils.js").registerPolyfill;
  var promiseRaw = {};
  function isPromise(x) {
    return x && typeof x === 'object' && x.status_ !== undefined;
  }
  function idResolveHandler(x) {
    return x;
  }
  function idRejectHandler(x) {
    throw x;
  }
  function chain(promise) {
    var onResolve = arguments[1] !== (void 0) ? arguments[1] : idResolveHandler;
    var onReject = arguments[2] !== (void 0) ? arguments[2] : idRejectHandler;
    var deferred = getDeferred(promise.constructor);
    switch (promise.status_) {
      case undefined:
        throw TypeError;
      case 0:
        promise.onResolve_.push(onResolve, deferred);
        promise.onReject_.push(onReject, deferred);
        break;
      case +1:
        promiseEnqueue(promise.value_, [onResolve, deferred]);
        break;
      case -1:
        promiseEnqueue(promise.value_, [onReject, deferred]);
        break;
    }
    return deferred.promise;
  }
  function getDeferred(C) {
    if (this === $Promise) {
      var promise = promiseInit(new $Promise(promiseRaw));
      return {
        promise: promise,
        resolve: (function(x) {
          promiseResolve(promise, x);
        }),
        reject: (function(r) {
          promiseReject(promise, r);
        })
      };
    } else {
      var result = {};
      result.promise = new C((function(resolve, reject) {
        result.resolve = resolve;
        result.reject = reject;
      }));
      return result;
    }
  }
  function promiseSet(promise, status, value, onResolve, onReject) {
    promise.status_ = status;
    promise.value_ = value;
    promise.onResolve_ = onResolve;
    promise.onReject_ = onReject;
    return promise;
  }
  function promiseInit(promise) {
    return promiseSet(promise, 0, undefined, [], []);
  }
  var Promise = function Promise(resolver) {
    if (resolver === promiseRaw)
      return ;
    if (typeof resolver !== 'function')
      throw new TypeError;
    var promise = promiseInit(this);
    try {
      resolver((function(x) {
        promiseResolve(promise, x);
      }), (function(r) {
        promiseReject(promise, r);
      }));
    } catch (e) {
      promiseReject(promise, e);
    }
  };
  ($traceurRuntime.createClass)(Promise, {
    catch: function(onReject) {
      return this.then(undefined, onReject);
    },
    then: function(onResolve, onReject) {
      if (typeof onResolve !== 'function')
        onResolve = idResolveHandler;
      if (typeof onReject !== 'function')
        onReject = idRejectHandler;
      var that = this;
      var constructor = this.constructor;
      return chain(this, function(x) {
        x = promiseCoerce(constructor, x);
        return x === that ? onReject(new TypeError) : isPromise(x) ? x.then(onResolve, onReject) : onResolve(x);
      }, onReject);
    }
  }, {
    resolve: function(x) {
      if (this === $Promise) {
        if (isPromise(x)) {
          return x;
        }
        return promiseSet(new $Promise(promiseRaw), +1, x);
      } else {
        return new this(function(resolve, reject) {
          resolve(x);
        });
      }
    },
    reject: function(r) {
      if (this === $Promise) {
        return promiseSet(new $Promise(promiseRaw), -1, r);
      } else {
        return new this((function(resolve, reject) {
          reject(r);
        }));
      }
    },
    all: function(values) {
      var deferred = getDeferred(this);
      var resolutions = [];
      try {
        var makeCountdownFunction = function(i) {
          return (function(x) {
            resolutions[i] = x;
            if (--count === 0)
              deferred.resolve(resolutions);
          });
        };
        var count = 0;
        var i = 0;
        var $__6 = true;
        var $__7 = false;
        var $__8 = undefined;
        try {
          for (var $__4 = void 0,
              $__3 = (values)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__6 = ($__4 = $__3.next()).done); $__6 = true) {
            var value = $__4.value;
            {
              var countdownFunction = makeCountdownFunction(i);
              this.resolve(value).then(countdownFunction, (function(r) {
                deferred.reject(r);
              }));
              ++i;
              ++count;
            }
          }
        } catch ($__9) {
          $__7 = true;
          $__8 = $__9;
        } finally {
          try {
            if (!$__6 && $__3.return != null) {
              $__3.return();
            }
          } finally {
            if ($__7) {
              throw $__8;
            }
          }
        }
        if (count === 0) {
          deferred.resolve(resolutions);
        }
      } catch (e) {
        deferred.reject(e);
      }
      return deferred.promise;
    },
    race: function(values) {
      var deferred = getDeferred(this);
      try {
        for (var i = 0; i < values.length; i++) {
          this.resolve(values[i]).then((function(x) {
            deferred.resolve(x);
          }), (function(r) {
            deferred.reject(r);
          }));
        }
      } catch (e) {
        deferred.reject(e);
      }
      return deferred.promise;
    }
  });
  var $Promise = Promise;
  var $PromiseReject = $Promise.reject;
  function promiseResolve(promise, x) {
    promiseDone(promise, +1, x, promise.onResolve_);
  }
  function promiseReject(promise, r) {
    promiseDone(promise, -1, r, promise.onReject_);
  }
  function promiseDone(promise, status, value, reactions) {
    if (promise.status_ !== 0)
      return ;
    promiseEnqueue(value, reactions);
    promiseSet(promise, status, value);
  }
  function promiseEnqueue(value, tasks) {
    async((function() {
      for (var i = 0; i < tasks.length; i += 2) {
        promiseHandle(value, tasks[i], tasks[i + 1]);
      }
    }));
  }
  function promiseHandle(value, handler, deferred) {
    try {
      var result = handler(value);
      if (result === deferred.promise)
        throw new TypeError;
      else if (isPromise(result))
        chain(result, deferred.resolve, deferred.reject);
      else
        deferred.resolve(result);
    } catch (e) {
      try {
        deferred.reject(e);
      } catch (e) {}
    }
  }
  var thenableSymbol = '@@thenable';
  function isObject(x) {
    return x && (typeof x === 'object' || typeof x === 'function');
  }
  function promiseCoerce(constructor, x) {
    if (!isPromise(x) && isObject(x)) {
      var then;
      try {
        then = x.then;
      } catch (r) {
        var promise = $PromiseReject.call(constructor, r);
        x[thenableSymbol] = promise;
        return promise;
      }
      if (typeof then === 'function') {
        var p = x[thenableSymbol];
        if (p) {
          return p;
        } else {
          var deferred = getDeferred(constructor);
          x[thenableSymbol] = deferred.promise;
          try {
            then.call(x, deferred.resolve, deferred.reject);
          } catch (r) {
            deferred.reject(r);
          }
          return deferred.promise;
        }
      }
    }
    return x;
  }
  function polyfillPromise(global) {
    if (!global.Promise)
      global.Promise = Promise;
  }
  registerPolyfill(polyfillPromise);
  return {
    get Promise() {
      return Promise;
    },
    get polyfillPromise() {
      return polyfillPromise;
    }
  };
});
System.get("traceur-runtime@0.0.85/src/runtime/polyfills/Promise.js" + '');
System.registerModule("traceur-runtime@0.0.85/src/runtime/polyfills/StringIterator.js", [], function() {
  
  var $__2;
  var __moduleName = "traceur-runtime@0.0.85/src/runtime/polyfills/StringIterator.js";
  var $__0 = System.get("traceur-runtime@0.0.85/src/runtime/polyfills/utils.js"),
      createIteratorResultObject = $__0.createIteratorResultObject,
      isObject = $__0.isObject;
  var toProperty = $traceurRuntime.toProperty;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var iteratedString = Symbol('iteratedString');
  var stringIteratorNextIndex = Symbol('stringIteratorNextIndex');
  var StringIterator = function StringIterator() {};
  ($traceurRuntime.createClass)(StringIterator, ($__2 = {}, Object.defineProperty($__2, "next", {
    value: function() {
      var o = this;
      if (!isObject(o) || !hasOwnProperty.call(o, iteratedString)) {
        throw new TypeError('this must be a StringIterator object');
      }
      var s = o[toProperty(iteratedString)];
      if (s === undefined) {
        return createIteratorResultObject(undefined, true);
      }
      var position = o[toProperty(stringIteratorNextIndex)];
      var len = s.length;
      if (position >= len) {
        o[toProperty(iteratedString)] = undefined;
        return createIteratorResultObject(undefined, true);
      }
      var first = s.charCodeAt(position);
      var resultString;
      if (first < 0xD800 || first > 0xDBFF || position + 1 === len) {
        resultString = String.fromCharCode(first);
      } else {
        var second = s.charCodeAt(position + 1);
        if (second < 0xDC00 || second > 0xDFFF) {
          resultString = String.fromCharCode(first);
        } else {
          resultString = String.fromCharCode(first) + String.fromCharCode(second);
        }
      }
      o[toProperty(stringIteratorNextIndex)] = position + resultString.length;
      return createIteratorResultObject(resultString, false);
    },
    configurable: true,
    enumerable: true,
    writable: true
  }), Object.defineProperty($__2, Symbol.iterator, {
    value: function() {
      return this;
    },
    configurable: true,
    enumerable: true,
    writable: true
  }), $__2), {});
  function createStringIterator(string) {
    var s = String(string);
    var iterator = Object.create(StringIterator.prototype);
    iterator[toProperty(iteratedString)] = s;
    iterator[toProperty(stringIteratorNextIndex)] = 0;
    return iterator;
  }
  return {get createStringIterator() {
      return createStringIterator;
    }};
});
System.registerModule("traceur-runtime@0.0.85/src/runtime/polyfills/String.js", [], function() {
  
  var __moduleName = "traceur-runtime@0.0.85/src/runtime/polyfills/String.js";
  var createStringIterator = System.get("traceur-runtime@0.0.85/src/runtime/polyfills/StringIterator.js").createStringIterator;
  var $__1 = System.get("traceur-runtime@0.0.85/src/runtime/polyfills/utils.js"),
      maybeAddFunctions = $__1.maybeAddFunctions,
      maybeAddIterator = $__1.maybeAddIterator,
      registerPolyfill = $__1.registerPolyfill;
  var $toString = Object.prototype.toString;
  var $indexOf = String.prototype.indexOf;
  var $lastIndexOf = String.prototype.lastIndexOf;
  function startsWith(search) {
    var string = String(this);
    if (this == null || $toString.call(search) == '[object RegExp]') {
      throw TypeError();
    }
    var stringLength = string.length;
    var searchString = String(search);
    var searchLength = searchString.length;
    var position = arguments.length > 1 ? arguments[1] : undefined;
    var pos = position ? Number(position) : 0;
    if (isNaN(pos)) {
      pos = 0;
    }
    var start = Math.min(Math.max(pos, 0), stringLength);
    return $indexOf.call(string, searchString, pos) == start;
  }
  function endsWith(search) {
    var string = String(this);
    if (this == null || $toString.call(search) == '[object RegExp]') {
      throw TypeError();
    }
    var stringLength = string.length;
    var searchString = String(search);
    var searchLength = searchString.length;
    var pos = stringLength;
    if (arguments.length > 1) {
      var position = arguments[1];
      if (position !== undefined) {
        pos = position ? Number(position) : 0;
        if (isNaN(pos)) {
          pos = 0;
        }
      }
    }
    var end = Math.min(Math.max(pos, 0), stringLength);
    var start = end - searchLength;
    if (start < 0) {
      return false;
    }
    return $lastIndexOf.call(string, searchString, start) == start;
  }
  function includes(search) {
    if (this == null) {
      throw TypeError();
    }
    var string = String(this);
    if (search && $toString.call(search) == '[object RegExp]') {
      throw TypeError();
    }
    var stringLength = string.length;
    var searchString = String(search);
    var searchLength = searchString.length;
    var position = arguments.length > 1 ? arguments[1] : undefined;
    var pos = position ? Number(position) : 0;
    if (pos != pos) {
      pos = 0;
    }
    var start = Math.min(Math.max(pos, 0), stringLength);
    if (searchLength + start > stringLength) {
      return false;
    }
    return $indexOf.call(string, searchString, pos) != -1;
  }
  function repeat(count) {
    if (this == null) {
      throw TypeError();
    }
    var string = String(this);
    var n = count ? Number(count) : 0;
    if (isNaN(n)) {
      n = 0;
    }
    if (n < 0 || n == Infinity) {
      throw RangeError();
    }
    if (n == 0) {
      return '';
    }
    var result = '';
    while (n--) {
      result += string;
    }
    return result;
  }
  function codePointAt(position) {
    if (this == null) {
      throw TypeError();
    }
    var string = String(this);
    var size = string.length;
    var index = position ? Number(position) : 0;
    if (isNaN(index)) {
      index = 0;
    }
    if (index < 0 || index >= size) {
      return undefined;
    }
    var first = string.charCodeAt(index);
    var second;
    if (first >= 0xD800 && first <= 0xDBFF && size > index + 1) {
      second = string.charCodeAt(index + 1);
      if (second >= 0xDC00 && second <= 0xDFFF) {
        return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
      }
    }
    return first;
  }
  function raw(callsite) {
    var raw = callsite.raw;
    var len = raw.length >>> 0;
    if (len === 0)
      return '';
    var s = '';
    var i = 0;
    while (true) {
      s += raw[i];
      if (i + 1 === len)
        return s;
      s += arguments[++i];
    }
  }
  function fromCodePoint(_) {
    var codeUnits = [];
    var floor = Math.floor;
    var highSurrogate;
    var lowSurrogate;
    var index = -1;
    var length = arguments.length;
    if (!length) {
      return '';
    }
    while (++index < length) {
      var codePoint = Number(arguments[index]);
      if (!isFinite(codePoint) || codePoint < 0 || codePoint > 0x10FFFF || floor(codePoint) != codePoint) {
        throw RangeError('Invalid code point: ' + codePoint);
      }
      if (codePoint <= 0xFFFF) {
        codeUnits.push(codePoint);
      } else {
        codePoint -= 0x10000;
        highSurrogate = (codePoint >> 10) + 0xD800;
        lowSurrogate = (codePoint % 0x400) + 0xDC00;
        codeUnits.push(highSurrogate, lowSurrogate);
      }
    }
    return String.fromCharCode.apply(null, codeUnits);
  }
  function stringPrototypeIterator() {
    var o = $traceurRuntime.checkObjectCoercible(this);
    var s = String(o);
    return createStringIterator(s);
  }
  function polyfillString(global) {
    var String = global.String;
    maybeAddFunctions(String.prototype, ['codePointAt', codePointAt, 'endsWith', endsWith, 'includes', includes, 'repeat', repeat, 'startsWith', startsWith]);
    maybeAddFunctions(String, ['fromCodePoint', fromCodePoint, 'raw', raw]);
    maybeAddIterator(String.prototype, stringPrototypeIterator, Symbol);
  }
  registerPolyfill(polyfillString);
  return {
    get startsWith() {
      return startsWith;
    },
    get endsWith() {
      return endsWith;
    },
    get includes() {
      return includes;
    },
    get repeat() {
      return repeat;
    },
    get codePointAt() {
      return codePointAt;
    },
    get raw() {
      return raw;
    },
    get fromCodePoint() {
      return fromCodePoint;
    },
    get stringPrototypeIterator() {
      return stringPrototypeIterator;
    },
    get polyfillString() {
      return polyfillString;
    }
  };
});
System.get("traceur-runtime@0.0.85/src/runtime/polyfills/String.js" + '');
System.registerModule("traceur-runtime@0.0.85/src/runtime/polyfills/ArrayIterator.js", [], function() {
  
  var $__2;
  var __moduleName = "traceur-runtime@0.0.85/src/runtime/polyfills/ArrayIterator.js";
  var $__0 = System.get("traceur-runtime@0.0.85/src/runtime/polyfills/utils.js"),
      toObject = $__0.toObject,
      toUint32 = $__0.toUint32,
      createIteratorResultObject = $__0.createIteratorResultObject;
  var ARRAY_ITERATOR_KIND_KEYS = 1;
  var ARRAY_ITERATOR_KIND_VALUES = 2;
  var ARRAY_ITERATOR_KIND_ENTRIES = 3;
  var ArrayIterator = function ArrayIterator() {};
  ($traceurRuntime.createClass)(ArrayIterator, ($__2 = {}, Object.defineProperty($__2, "next", {
    value: function() {
      var iterator = toObject(this);
      var array = iterator.iteratorObject_;
      if (!array) {
        throw new TypeError('Object is not an ArrayIterator');
      }
      var index = iterator.arrayIteratorNextIndex_;
      var itemKind = iterator.arrayIterationKind_;
      var length = toUint32(array.length);
      if (index >= length) {
        iterator.arrayIteratorNextIndex_ = Infinity;
        return createIteratorResultObject(undefined, true);
      }
      iterator.arrayIteratorNextIndex_ = index + 1;
      if (itemKind == ARRAY_ITERATOR_KIND_VALUES)
        return createIteratorResultObject(array[index], false);
      if (itemKind == ARRAY_ITERATOR_KIND_ENTRIES)
        return createIteratorResultObject([index, array[index]], false);
      return createIteratorResultObject(index, false);
    },
    configurable: true,
    enumerable: true,
    writable: true
  }), Object.defineProperty($__2, Symbol.iterator, {
    value: function() {
      return this;
    },
    configurable: true,
    enumerable: true,
    writable: true
  }), $__2), {});
  function createArrayIterator(array, kind) {
    var object = toObject(array);
    var iterator = new ArrayIterator;
    iterator.iteratorObject_ = object;
    iterator.arrayIteratorNextIndex_ = 0;
    iterator.arrayIterationKind_ = kind;
    return iterator;
  }
  function entries() {
    return createArrayIterator(this, ARRAY_ITERATOR_KIND_ENTRIES);
  }
  function keys() {
    return createArrayIterator(this, ARRAY_ITERATOR_KIND_KEYS);
  }
  function values() {
    return createArrayIterator(this, ARRAY_ITERATOR_KIND_VALUES);
  }
  return {
    get entries() {
      return entries;
    },
    get keys() {
      return keys;
    },
    get values() {
      return values;
    }
  };
});
System.registerModule("traceur-runtime@0.0.85/src/runtime/polyfills/Array.js", [], function() {
  
  var __moduleName = "traceur-runtime@0.0.85/src/runtime/polyfills/Array.js";
  var $__0 = System.get("traceur-runtime@0.0.85/src/runtime/polyfills/ArrayIterator.js"),
      entries = $__0.entries,
      keys = $__0.keys,
      jsValues = $__0.values;
  var $__1 = System.get("traceur-runtime@0.0.85/src/runtime/polyfills/utils.js"),
      checkIterable = $__1.checkIterable,
      isCallable = $__1.isCallable,
      isConstructor = $__1.isConstructor,
      maybeAddFunctions = $__1.maybeAddFunctions,
      maybeAddIterator = $__1.maybeAddIterator,
      registerPolyfill = $__1.registerPolyfill,
      toInteger = $__1.toInteger,
      toLength = $__1.toLength,
      toObject = $__1.toObject;
  function from(arrLike) {
    var mapFn = arguments[1];
    var thisArg = arguments[2];
    var C = this;
    var items = toObject(arrLike);
    var mapping = mapFn !== undefined;
    var k = 0;
    var arr,
        len;
    if (mapping && !isCallable(mapFn)) {
      throw TypeError();
    }
    if (checkIterable(items)) {
      arr = isConstructor(C) ? new C() : [];
      var $__5 = true;
      var $__6 = false;
      var $__7 = undefined;
      try {
        for (var $__3 = void 0,
            $__2 = (items)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {
          var item = $__3.value;
          {
            if (mapping) {
              arr[k] = mapFn.call(thisArg, item, k);
            } else {
              arr[k] = item;
            }
            k++;
          }
        }
      } catch ($__8) {
        $__6 = true;
        $__7 = $__8;
      } finally {
        try {
          if (!$__5 && $__2.return != null) {
            $__2.return();
          }
        } finally {
          if ($__6) {
            throw $__7;
          }
        }
      }
      arr.length = k;
      return arr;
    }
    len = toLength(items.length);
    arr = isConstructor(C) ? new C(len) : new Array(len);
    for (; k < len; k++) {
      if (mapping) {
        arr[k] = typeof thisArg === 'undefined' ? mapFn(items[k], k) : mapFn.call(thisArg, items[k], k);
      } else {
        arr[k] = items[k];
      }
    }
    arr.length = len;
    return arr;
  }
  function of() {
    for (var items = [],
        $__9 = 0; $__9 < arguments.length; $__9++)
      items[$__9] = arguments[$__9];
    var C = this;
    var len = items.length;
    var arr = isConstructor(C) ? new C(len) : new Array(len);
    for (var k = 0; k < len; k++) {
      arr[k] = items[k];
    }
    arr.length = len;
    return arr;
  }
  function fill(value) {
    var start = arguments[1] !== (void 0) ? arguments[1] : 0;
    var end = arguments[2];
    var object = toObject(this);
    var len = toLength(object.length);
    var fillStart = toInteger(start);
    var fillEnd = end !== undefined ? toInteger(end) : len;
    fillStart = fillStart < 0 ? Math.max(len + fillStart, 0) : Math.min(fillStart, len);
    fillEnd = fillEnd < 0 ? Math.max(len + fillEnd, 0) : Math.min(fillEnd, len);
    while (fillStart < fillEnd) {
      object[fillStart] = value;
      fillStart++;
    }
    return object;
  }
  function find(predicate) {
    var thisArg = arguments[1];
    return findHelper(this, predicate, thisArg);
  }
  function findIndex(predicate) {
    var thisArg = arguments[1];
    return findHelper(this, predicate, thisArg, true);
  }
  function findHelper(self, predicate) {
    var thisArg = arguments[2];
    var returnIndex = arguments[3] !== (void 0) ? arguments[3] : false;
    var object = toObject(self);
    var len = toLength(object.length);
    if (!isCallable(predicate)) {
      throw TypeError();
    }
    for (var i = 0; i < len; i++) {
      var value = object[i];
      if (predicate.call(thisArg, value, i, object)) {
        return returnIndex ? i : value;
      }
    }
    return returnIndex ? -1 : undefined;
  }
  function polyfillArray(global) {
    var $__10 = global,
        Array = $__10.Array,
        Object = $__10.Object,
        Symbol = $__10.Symbol;
    var values = jsValues;
    if (Symbol && Symbol.iterator && Array.prototype[Symbol.iterator]) {
      values = Array.prototype[Symbol.iterator];
    }
    maybeAddFunctions(Array.prototype, ['entries', entries, 'keys', keys, 'values', values, 'fill', fill, 'find', find, 'findIndex', findIndex]);
    maybeAddFunctions(Array, ['from', from, 'of', of]);
    maybeAddIterator(Array.prototype, values, Symbol);
    maybeAddIterator(Object.getPrototypeOf([].values()), function() {
      return this;
    }, Symbol);
  }
  registerPolyfill(polyfillArray);
  return {
    get from() {
      return from;
    },
    get of() {
      return of;
    },
    get fill() {
      return fill;
    },
    get find() {
      return find;
    },
    get findIndex() {
      return findIndex;
    },
    get polyfillArray() {
      return polyfillArray;
    }
  };
});
System.get("traceur-runtime@0.0.85/src/runtime/polyfills/Array.js" + '');
System.registerModule("traceur-runtime@0.0.85/src/runtime/polyfills/Object.js", [], function() {
  
  var __moduleName = "traceur-runtime@0.0.85/src/runtime/polyfills/Object.js";
  var $__0 = System.get("traceur-runtime@0.0.85/src/runtime/polyfills/utils.js"),
      maybeAddFunctions = $__0.maybeAddFunctions,
      registerPolyfill = $__0.registerPolyfill;
  var $__1 = $traceurRuntime,
      defineProperty = $__1.defineProperty,
      getOwnPropertyDescriptor = $__1.getOwnPropertyDescriptor,
      getOwnPropertyNames = $__1.getOwnPropertyNames,
      isPrivateName = $__1.isPrivateName,
      keys = $__1.keys;
  function is(left, right) {
    if (left === right)
      return left !== 0 || 1 / left === 1 / right;
    return left !== left && right !== right;
  }
  function assign(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      var props = source == null ? [] : keys(source);
      var p = void 0,
          length = props.length;
      for (p = 0; p < length; p++) {
        var name = props[p];
        if (isPrivateName(name))
          continue;
        target[name] = source[name];
      }
    }
    return target;
  }
  function mixin(target, source) {
    var props = getOwnPropertyNames(source);
    var p,
        descriptor,
        length = props.length;
    for (p = 0; p < length; p++) {
      var name = props[p];
      if (isPrivateName(name))
        continue;
      descriptor = getOwnPropertyDescriptor(source, props[p]);
      defineProperty(target, props[p], descriptor);
    }
    return target;
  }
  function polyfillObject(global) {
    var Object = global.Object;
    maybeAddFunctions(Object, ['assign', assign, 'is', is, 'mixin', mixin]);
  }
  registerPolyfill(polyfillObject);
  return {
    get is() {
      return is;
    },
    get assign() {
      return assign;
    },
    get mixin() {
      return mixin;
    },
    get polyfillObject() {
      return polyfillObject;
    }
  };
});
System.get("traceur-runtime@0.0.85/src/runtime/polyfills/Object.js" + '');
System.registerModule("traceur-runtime@0.0.85/src/runtime/polyfills/Number.js", [], function() {
  
  var __moduleName = "traceur-runtime@0.0.85/src/runtime/polyfills/Number.js";
  var $__0 = System.get("traceur-runtime@0.0.85/src/runtime/polyfills/utils.js"),
      isNumber = $__0.isNumber,
      maybeAddConsts = $__0.maybeAddConsts,
      maybeAddFunctions = $__0.maybeAddFunctions,
      registerPolyfill = $__0.registerPolyfill,
      toInteger = $__0.toInteger;
  var $abs = Math.abs;
  var $isFinite = isFinite;
  var $isNaN = isNaN;
  var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;
  var MIN_SAFE_INTEGER = -Math.pow(2, 53) + 1;
  var EPSILON = Math.pow(2, -52);
  function NumberIsFinite(number) {
    return isNumber(number) && $isFinite(number);
  }
  ;
  function isInteger(number) {
    return NumberIsFinite(number) && toInteger(number) === number;
  }
  function NumberIsNaN(number) {
    return isNumber(number) && $isNaN(number);
  }
  ;
  function isSafeInteger(number) {
    if (NumberIsFinite(number)) {
      var integral = toInteger(number);
      if (integral === number)
        return $abs(integral) <= MAX_SAFE_INTEGER;
    }
    return false;
  }
  function polyfillNumber(global) {
    var Number = global.Number;
    maybeAddConsts(Number, ['MAX_SAFE_INTEGER', MAX_SAFE_INTEGER, 'MIN_SAFE_INTEGER', MIN_SAFE_INTEGER, 'EPSILON', EPSILON]);
    maybeAddFunctions(Number, ['isFinite', NumberIsFinite, 'isInteger', isInteger, 'isNaN', NumberIsNaN, 'isSafeInteger', isSafeInteger]);
  }
  registerPolyfill(polyfillNumber);
  return {
    get MAX_SAFE_INTEGER() {
      return MAX_SAFE_INTEGER;
    },
    get MIN_SAFE_INTEGER() {
      return MIN_SAFE_INTEGER;
    },
    get EPSILON() {
      return EPSILON;
    },
    get isFinite() {
      return NumberIsFinite;
    },
    get isInteger() {
      return isInteger;
    },
    get isNaN() {
      return NumberIsNaN;
    },
    get isSafeInteger() {
      return isSafeInteger;
    },
    get polyfillNumber() {
      return polyfillNumber;
    }
  };
});
System.get("traceur-runtime@0.0.85/src/runtime/polyfills/Number.js" + '');
System.registerModule("traceur-runtime@0.0.85/src/runtime/polyfills/fround.js", [], function() {
  
  var __moduleName = "traceur-runtime@0.0.85/src/runtime/polyfills/fround.js";
  var $isFinite = isFinite;
  var $isNaN = isNaN;
  var $__0 = Math,
      LN2 = $__0.LN2,
      abs = $__0.abs,
      floor = $__0.floor,
      log = $__0.log,
      min = $__0.min,
      pow = $__0.pow;
  function packIEEE754(v, ebits, fbits) {
    var bias = (1 << (ebits - 1)) - 1,
        s,
        e,
        f,
        ln,
        i,
        bits,
        str,
        bytes;
    function roundToEven(n) {
      var w = floor(n),
          f = n - w;
      if (f < 0.5)
        return w;
      if (f > 0.5)
        return w + 1;
      return w % 2 ? w + 1 : w;
    }
    if (v !== v) {
      e = (1 << ebits) - 1;
      f = pow(2, fbits - 1);
      s = 0;
    } else if (v === Infinity || v === -Infinity) {
      e = (1 << ebits) - 1;
      f = 0;
      s = (v < 0) ? 1 : 0;
    } else if (v === 0) {
      e = 0;
      f = 0;
      s = (1 / v === -Infinity) ? 1 : 0;
    } else {
      s = v < 0;
      v = abs(v);
      if (v >= pow(2, 1 - bias)) {
        e = min(floor(log(v) / LN2), 1023);
        f = roundToEven(v / pow(2, e) * pow(2, fbits));
        if (f / pow(2, fbits) >= 2) {
          e = e + 1;
          f = 1;
        }
        if (e > bias) {
          e = (1 << ebits) - 1;
          f = 0;
        } else {
          e = e + bias;
          f = f - pow(2, fbits);
        }
      } else {
        e = 0;
        f = roundToEven(v / pow(2, 1 - bias - fbits));
      }
    }
    bits = [];
    for (i = fbits; i; i -= 1) {
      bits.push(f % 2 ? 1 : 0);
      f = floor(f / 2);
    }
    for (i = ebits; i; i -= 1) {
      bits.push(e % 2 ? 1 : 0);
      e = floor(e / 2);
    }
    bits.push(s ? 1 : 0);
    bits.reverse();
    str = bits.join('');
    bytes = [];
    while (str.length) {
      bytes.push(parseInt(str.substring(0, 8), 2));
      str = str.substring(8);
    }
    return bytes;
  }
  function unpackIEEE754(bytes, ebits, fbits) {
    var bits = [],
        i,
        j,
        b,
        str,
        bias,
        s,
        e,
        f;
    for (i = bytes.length; i; i -= 1) {
      b = bytes[i - 1];
      for (j = 8; j; j -= 1) {
        bits.push(b % 2 ? 1 : 0);
        b = b >> 1;
      }
    }
    bits.reverse();
    str = bits.join('');
    bias = (1 << (ebits - 1)) - 1;
    s = parseInt(str.substring(0, 1), 2) ? -1 : 1;
    e = parseInt(str.substring(1, 1 + ebits), 2);
    f = parseInt(str.substring(1 + ebits), 2);
    if (e === (1 << ebits) - 1) {
      return f !== 0 ? NaN : s * Infinity;
    } else if (e > 0) {
      return s * pow(2, e - bias) * (1 + f / pow(2, fbits));
    } else if (f !== 0) {
      return s * pow(2, -(bias - 1)) * (f / pow(2, fbits));
    } else {
      return s < 0 ? -0 : 0;
    }
  }
  function unpackF32(b) {
    return unpackIEEE754(b, 8, 23);
  }
  function packF32(v) {
    return packIEEE754(v, 8, 23);
  }
  function fround(x) {
    if (x === 0 || !$isFinite(x) || $isNaN(x)) {
      return x;
    }
    return unpackF32(packF32(Number(x)));
  }
  return {get fround() {
      return fround;
    }};
});
System.registerModule("traceur-runtime@0.0.85/src/runtime/polyfills/Math.js", [], function() {
  
  var __moduleName = "traceur-runtime@0.0.85/src/runtime/polyfills/Math.js";
  var jsFround = System.get("traceur-runtime@0.0.85/src/runtime/polyfills/fround.js").fround;
  var $__1 = System.get("traceur-runtime@0.0.85/src/runtime/polyfills/utils.js"),
      maybeAddFunctions = $__1.maybeAddFunctions,
      registerPolyfill = $__1.registerPolyfill,
      toUint32 = $__1.toUint32;
  var $isFinite = isFinite;
  var $isNaN = isNaN;
  var $__2 = Math,
      abs = $__2.abs,
      ceil = $__2.ceil,
      exp = $__2.exp,
      floor = $__2.floor,
      log = $__2.log,
      pow = $__2.pow,
      sqrt = $__2.sqrt;
  function clz32(x) {
    x = toUint32(+x);
    if (x == 0)
      return 32;
    var result = 0;
    if ((x & 0xFFFF0000) === 0) {
      x <<= 16;
      result += 16;
    }
    ;
    if ((x & 0xFF000000) === 0) {
      x <<= 8;
      result += 8;
    }
    ;
    if ((x & 0xF0000000) === 0) {
      x <<= 4;
      result += 4;
    }
    ;
    if ((x & 0xC0000000) === 0) {
      x <<= 2;
      result += 2;
    }
    ;
    if ((x & 0x80000000) === 0) {
      x <<= 1;
      result += 1;
    }
    ;
    return result;
  }
  function imul(x, y) {
    x = toUint32(+x);
    y = toUint32(+y);
    var xh = (x >>> 16) & 0xffff;
    var xl = x & 0xffff;
    var yh = (y >>> 16) & 0xffff;
    var yl = y & 0xffff;
    return xl * yl + (((xh * yl + xl * yh) << 16) >>> 0) | 0;
  }
  function sign(x) {
    x = +x;
    if (x > 0)
      return 1;
    if (x < 0)
      return -1;
    return x;
  }
  function log10(x) {
    return log(x) * 0.434294481903251828;
  }
  function log2(x) {
    return log(x) * 1.442695040888963407;
  }
  function log1p(x) {
    x = +x;
    if (x < -1 || $isNaN(x)) {
      return NaN;
    }
    if (x === 0 || x === Infinity) {
      return x;
    }
    if (x === -1) {
      return -Infinity;
    }
    var result = 0;
    var n = 50;
    if (x < 0 || x > 1) {
      return log(1 + x);
    }
    for (var i = 1; i < n; i++) {
      if ((i % 2) === 0) {
        result -= pow(x, i) / i;
      } else {
        result += pow(x, i) / i;
      }
    }
    return result;
  }
  function expm1(x) {
    x = +x;
    if (x === -Infinity) {
      return -1;
    }
    if (!$isFinite(x) || x === 0) {
      return x;
    }
    return exp(x) - 1;
  }
  function cosh(x) {
    x = +x;
    if (x === 0) {
      return 1;
    }
    if ($isNaN(x)) {
      return NaN;
    }
    if (!$isFinite(x)) {
      return Infinity;
    }
    if (x < 0) {
      x = -x;
    }
    if (x > 21) {
      return exp(x) / 2;
    }
    return (exp(x) + exp(-x)) / 2;
  }
  function sinh(x) {
    x = +x;
    if (!$isFinite(x) || x === 0) {
      return x;
    }
    return (exp(x) - exp(-x)) / 2;
  }
  function tanh(x) {
    x = +x;
    if (x === 0)
      return x;
    if (!$isFinite(x))
      return sign(x);
    var exp1 = exp(x);
    var exp2 = exp(-x);
    return (exp1 - exp2) / (exp1 + exp2);
  }
  function acosh(x) {
    x = +x;
    if (x < 1)
      return NaN;
    if (!$isFinite(x))
      return x;
    return log(x + sqrt(x + 1) * sqrt(x - 1));
  }
  function asinh(x) {
    x = +x;
    if (x === 0 || !$isFinite(x))
      return x;
    if (x > 0)
      return log(x + sqrt(x * x + 1));
    return -log(-x + sqrt(x * x + 1));
  }
  function atanh(x) {
    x = +x;
    if (x === -1) {
      return -Infinity;
    }
    if (x === 1) {
      return Infinity;
    }
    if (x === 0) {
      return x;
    }
    if ($isNaN(x) || x < -1 || x > 1) {
      return NaN;
    }
    return 0.5 * log((1 + x) / (1 - x));
  }
  function hypot(x, y) {
    var length = arguments.length;
    var args = new Array(length);
    var max = 0;
    for (var i = 0; i < length; i++) {
      var n = arguments[i];
      n = +n;
      if (n === Infinity || n === -Infinity)
        return Infinity;
      n = abs(n);
      if (n > max)
        max = n;
      args[i] = n;
    }
    if (max === 0)
      max = 1;
    var sum = 0;
    var compensation = 0;
    for (var i = 0; i < length; i++) {
      var n = args[i] / max;
      var summand = n * n - compensation;
      var preliminary = sum + summand;
      compensation = (preliminary - sum) - summand;
      sum = preliminary;
    }
    return sqrt(sum) * max;
  }
  function trunc(x) {
    x = +x;
    if (x > 0)
      return floor(x);
    if (x < 0)
      return ceil(x);
    return x;
  }
  var fround,
      f32;
  if (typeof Float32Array === 'function') {
    f32 = new Float32Array(1);
    fround = function(x) {
      f32[0] = Number(x);
      return f32[0];
    };
  } else {
    fround = jsFround;
  }
  ;
  function cbrt(x) {
    x = +x;
    if (x === 0)
      return x;
    var negate = x < 0;
    if (negate)
      x = -x;
    var result = pow(x, 1 / 3);
    return negate ? -result : result;
  }
  function polyfillMath(global) {
    var Math = global.Math;
    maybeAddFunctions(Math, ['acosh', acosh, 'asinh', asinh, 'atanh', atanh, 'cbrt', cbrt, 'clz32', clz32, 'cosh', cosh, 'expm1', expm1, 'fround', fround, 'hypot', hypot, 'imul', imul, 'log10', log10, 'log1p', log1p, 'log2', log2, 'sign', sign, 'sinh', sinh, 'tanh', tanh, 'trunc', trunc]);
  }
  registerPolyfill(polyfillMath);
  return {
    get clz32() {
      return clz32;
    },
    get imul() {
      return imul;
    },
    get sign() {
      return sign;
    },
    get log10() {
      return log10;
    },
    get log2() {
      return log2;
    },
    get log1p() {
      return log1p;
    },
    get expm1() {
      return expm1;
    },
    get cosh() {
      return cosh;
    },
    get sinh() {
      return sinh;
    },
    get tanh() {
      return tanh;
    },
    get acosh() {
      return acosh;
    },
    get asinh() {
      return asinh;
    },
    get atanh() {
      return atanh;
    },
    get hypot() {
      return hypot;
    },
    get trunc() {
      return trunc;
    },
    get fround() {
      return fround;
    },
    get cbrt() {
      return cbrt;
    },
    get polyfillMath() {
      return polyfillMath;
    }
  };
});
System.get("traceur-runtime@0.0.85/src/runtime/polyfills/Math.js" + '');
System.registerModule("traceur-runtime@0.0.85/src/runtime/polyfills/polyfills.js", [], function() {
  
  var __moduleName = "traceur-runtime@0.0.85/src/runtime/polyfills/polyfills.js";
  var polyfillAll = System.get("traceur-runtime@0.0.85/src/runtime/polyfills/utils.js").polyfillAll;
  polyfillAll(Reflect.global);
  var setupGlobals = $traceurRuntime.setupGlobals;
  $traceurRuntime.setupGlobals = function(global) {
    setupGlobals(global);
    polyfillAll(global);
  };
  return {};
});
System.get("traceur-runtime@0.0.85/src/runtime/polyfills/polyfills.js" + '');

define("traceur-runtime", function(){});

define('diary/diary',[], function() {
  
  var Diary = function Diary(group) {
    this.group = group;
  };
  var $Diary = Diary;
  ($traceurRuntime.createClass)(Diary, {log: function(level, group, message) {
      var $__4 = true;
      var $__5 = false;
      var $__6 = undefined;
      try {
        for (var $__2 = void 0,
            $__1 = ($Diary.reporters)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__4 = ($__2 = $__1.next()).done); $__4 = true) {
          var target = $__2.value;
          {
            var $__8 = target,
                config = $__8.config,
                reporter = $__8.reporter;
            if ((config.level.indexOf('*') !== -1 || config.level.indexOf(level) !== -1) && (config.group.indexOf('*') !== -1 || config.group.indexOf(group) !== -1)) {
              reporter.receive({
                level: level,
                group: group,
                message: message
              });
            }
          }
        }
      } catch ($__7) {
        $__5 = true;
        $__6 = $__7;
      } finally {
        try {
          if (!$__4 && $__1.return != null) {
            $__1.return();
          }
        } finally {
          if ($__5) {
            throw $__6;
          }
        }
      }
    }}, {
    logger: function(group) {
      return new $Diary(group);
    },
    reporter: function(reporter) {
      var config = arguments[1] !== (void 0) ? arguments[1] : {};
      var defaults = {
        level: ['*'],
        group: ['*']
      };
      config = Object.assign(defaults, config);
      var newReporter = {
        reporter: reporter,
        config: config
      };
      $Diary.reporters.push(newReporter);
      return (function() {
        $Diary.reporters.splice($Diary.reporters.indexOf(newReporter), 1);
      });
    },
    get reporters() {
      return reporters;
    }
  });
  var reporters = [];
  var $__4 = true;
  var $__5 = false;
  var $__6 = undefined;
  try {
    for (var $__2 = void 0,
        $__1 = (['info', 'warn', 'fatal', 'error'])[$traceurRuntime.toProperty(Symbol.iterator)](); !($__4 = ($__2 = $__1.next()).done); $__4 = true) {
      var level = $__2.value;
      (function(level) {
        Diary.prototype[level] = function(message) {
          this.log(level, this.group, message);
        };
      })(level);
    }
  } catch ($__7) {
    $__5 = true;
    $__6 = $__7;
  } finally {
    try {
      if (!$__4 && $__1.return != null) {
        $__1.return();
      }
    } finally {
      if ($__5) {
        throw $__6;
      }
    }
  }
  return {
    get Diary() {
      return Diary;
    },
    __esModule: true
  };
});

define('diary', ['diary/diary'], function (main) { return main; });

define('diary/reporters/console',[], function() {
  
  var ConsoleReporter = function ConsoleReporter() {
    var options = arguments[0] !== (void 0) ? arguments[0] : {};
    this.console = options.console || window.console;
  };
  ($traceurRuntime.createClass)(ConsoleReporter, {
    receive: function(log) {
      var $__1 = log,
          level = $__1.level,
          group = $__1.group,
          message = $__1.message;
      var processed = ("[" + level + "|" + group + "] " + message);
      if (level === 'fatal') {
        this.error(processed);
      } else {
        this[level](processed);
      }
    },
    info: function(message) {
      this.console.info(message);
    },
    warn: function(message) {
      this.console.warn(message);
    },
    error: function(message) {
      this.console.error(message);
    }
  }, {});
  return {
    get ConsoleReporter() {
      return ConsoleReporter;
    },
    __esModule: true
  };
});

//! moment.js
//! version : 2.9.0
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

(function (undefined) {
    /************************************
        Constants
    ************************************/

    var moment,
        VERSION = '2.9.0',
        // the global-scope this is NOT the global object in Node.js
        globalScope = (typeof global !== 'undefined' && (typeof window === 'undefined' || window === global.window)) ? global : this,
        oldGlobalMoment,
        round = Math.round,
        hasOwnProperty = Object.prototype.hasOwnProperty,
        i,

        YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,

        // internal storage for locale config files
        locales = {},

        // extra moment internal properties (plugins register props here)
        momentProperties = [],

        // check for nodeJS
        hasModule = (typeof module !== 'undefined' && module && module.exports),

        // ASP.NET json date format regex
        aspNetJsonRegex = /^\/?Date\((\-?\d+)/i,
        aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,

        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,

        // format tokens
        formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,

        // parsing token regexes
        parseTokenOneOrTwoDigits = /\d\d?/, // 0 - 99
        parseTokenOneToThreeDigits = /\d{1,3}/, // 0 - 999
        parseTokenOneToFourDigits = /\d{1,4}/, // 0 - 9999
        parseTokenOneToSixDigits = /[+\-]?\d{1,6}/, // -999,999 - 999,999
        parseTokenDigits = /\d+/, // nonzero number of digits
        parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.
        parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        parseTokenT = /T/i, // T (ISO separator)
        parseTokenOffsetMs = /[\+\-]?\d+/, // 1234567890123
        parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123

        //strict parsing regexes
        parseTokenOneDigit = /\d/, // 0 - 9
        parseTokenTwoDigits = /\d\d/, // 00 - 99
        parseTokenThreeDigits = /\d{3}/, // 000 - 999
        parseTokenFourDigits = /\d{4}/, // 0000 - 9999
        parseTokenSixDigits = /[+-]?\d{6}/, // -999,999 - 999,999
        parseTokenSignedNumber = /[+-]?\d+/, // -inf - inf

        // iso 8601 regex
        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
        isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,

        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',

        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
            ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
            ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d{2}/],
            ['YYYY-DDD', /\d{4}-\d{3}/]
        ],

        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
            ['HH:mm', /(T| )\d\d:\d\d/],
            ['HH', /(T| )\d\d/]
        ],

        // timezone chunker '+10:00' > ['10', '00'] or '-1530' > ['-', '15', '30']
        parseTimezoneChunker = /([\+\-]|\d\d)/gi,

        // getter and setter names
        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),
        unitMillisecondFactors = {
            'Milliseconds' : 1,
            'Seconds' : 1e3,
            'Minutes' : 6e4,
            'Hours' : 36e5,
            'Days' : 864e5,
            'Months' : 2592e6,
            'Years' : 31536e6
        },

        unitAliases = {
            ms : 'millisecond',
            s : 'second',
            m : 'minute',
            h : 'hour',
            d : 'day',
            D : 'date',
            w : 'week',
            W : 'isoWeek',
            M : 'month',
            Q : 'quarter',
            y : 'year',
            DDD : 'dayOfYear',
            e : 'weekday',
            E : 'isoWeekday',
            gg: 'weekYear',
            GG: 'isoWeekYear'
        },

        camelFunctions = {
            dayofyear : 'dayOfYear',
            isoweekday : 'isoWeekday',
            isoweek : 'isoWeek',
            weekyear : 'weekYear',
            isoweekyear : 'isoWeekYear'
        },

        // format function strings
        formatFunctions = {},

        // default relative time thresholds
        relativeTimeThresholds = {
            s: 45,  // seconds to minute
            m: 45,  // minutes to hour
            h: 22,  // hours to day
            d: 26,  // days to month
            M: 11   // months to year
        },

        // tokens to ordinalize and pad
        ordinalizeTokens = 'DDD w W M D d'.split(' '),
        paddedTokens = 'M D H h m s w W'.split(' '),

        formatTokenFunctions = {
            M    : function () {
                return this.month() + 1;
            },
            MMM  : function (format) {
                return this.localeData().monthsShort(this, format);
            },
            MMMM : function (format) {
                return this.localeData().months(this, format);
            },
            D    : function () {
                return this.date();
            },
            DDD  : function () {
                return this.dayOfYear();
            },
            d    : function () {
                return this.day();
            },
            dd   : function (format) {
                return this.localeData().weekdaysMin(this, format);
            },
            ddd  : function (format) {
                return this.localeData().weekdaysShort(this, format);
            },
            dddd : function (format) {
                return this.localeData().weekdays(this, format);
            },
            w    : function () {
                return this.week();
            },
            W    : function () {
                return this.isoWeek();
            },
            YY   : function () {
                return leftZeroFill(this.year() % 100, 2);
            },
            YYYY : function () {
                return leftZeroFill(this.year(), 4);
            },
            YYYYY : function () {
                return leftZeroFill(this.year(), 5);
            },
            YYYYYY : function () {
                var y = this.year(), sign = y >= 0 ? '+' : '-';
                return sign + leftZeroFill(Math.abs(y), 6);
            },
            gg   : function () {
                return leftZeroFill(this.weekYear() % 100, 2);
            },
            gggg : function () {
                return leftZeroFill(this.weekYear(), 4);
            },
            ggggg : function () {
                return leftZeroFill(this.weekYear(), 5);
            },
            GG   : function () {
                return leftZeroFill(this.isoWeekYear() % 100, 2);
            },
            GGGG : function () {
                return leftZeroFill(this.isoWeekYear(), 4);
            },
            GGGGG : function () {
                return leftZeroFill(this.isoWeekYear(), 5);
            },
            e : function () {
                return this.weekday();
            },
            E : function () {
                return this.isoWeekday();
            },
            a    : function () {
                return this.localeData().meridiem(this.hours(), this.minutes(), true);
            },
            A    : function () {
                return this.localeData().meridiem(this.hours(), this.minutes(), false);
            },
            H    : function () {
                return this.hours();
            },
            h    : function () {
                return this.hours() % 12 || 12;
            },
            m    : function () {
                return this.minutes();
            },
            s    : function () {
                return this.seconds();
            },
            S    : function () {
                return toInt(this.milliseconds() / 100);
            },
            SS   : function () {
                return leftZeroFill(toInt(this.milliseconds() / 10), 2);
            },
            SSS  : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            SSSS : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            Z    : function () {
                var a = this.utcOffset(),
                    b = '+';
                if (a < 0) {
                    a = -a;
                    b = '-';
                }
                return b + leftZeroFill(toInt(a / 60), 2) + ':' + leftZeroFill(toInt(a) % 60, 2);
            },
            ZZ   : function () {
                var a = this.utcOffset(),
                    b = '+';
                if (a < 0) {
                    a = -a;
                    b = '-';
                }
                return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);
            },
            z : function () {
                return this.zoneAbbr();
            },
            zz : function () {
                return this.zoneName();
            },
            x    : function () {
                return this.valueOf();
            },
            X    : function () {
                return this.unix();
            },
            Q : function () {
                return this.quarter();
            }
        },

        deprecations = {},

        lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin'],

        updateInProgress = false;

    // Pick the first defined of two or three arguments. dfl comes from
    // default.
    function dfl(a, b, c) {
        switch (arguments.length) {
            case 2: return a != null ? a : b;
            case 3: return a != null ? a : b != null ? b : c;
            default: throw new Error('Implement me');
        }
    }

    function hasOwnProp(a, b) {
        return hasOwnProperty.call(a, b);
    }

    function defaultParsingFlags() {
        // We need to deep clone this object, and es5 standard is not very
        // helpful.
        return {
            empty : false,
            unusedTokens : [],
            unusedInput : [],
            overflow : -2,
            charsLeftOver : 0,
            nullInput : false,
            invalidMonth : null,
            invalidFormat : false,
            userInvalidated : false,
            iso: false
        };
    }

    function printMsg(msg) {
        if (moment.suppressDeprecationWarnings === false &&
                typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
            if (firstTime) {
                printMsg(msg);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
            printMsg(msg);
            deprecations[name] = true;
        }
    }

    function padToken(func, count) {
        return function (a) {
            return leftZeroFill(func.call(this, a), count);
        };
    }
    function ordinalizeToken(func, period) {
        return function (a) {
            return this.localeData().ordinal(func.call(this, a), period);
        };
    }

    function monthDiff(a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        return -(wholeMonthDiff + adjust);
    }

    while (ordinalizeTokens.length) {
        i = ordinalizeTokens.pop();
        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);
    }
    while (paddedTokens.length) {
        i = paddedTokens.pop();
        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);
    }
    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);


    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // thie is not supposed to happen
            return hour;
        }
    }

    /************************************
        Constructors
    ************************************/

    function Locale() {
    }

    // Moment prototype object
    function Moment(config, skipOverflow) {
        if (skipOverflow !== false) {
            checkOverflow(config);
        }
        copyConfig(this, config);
        this._d = new Date(+config._d);
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            moment.updateOffset(this);
            updateInProgress = false;
        }
    }

    // Duration Constructor
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = moment.localeData();

        this._bubble();
    }

    /************************************
        Helpers
    ************************************/


    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function copyConfig(to, from) {
        var i, prop, val;

        if (typeof from._isAMomentObject !== 'undefined') {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (typeof from._i !== 'undefined') {
            to._i = from._i;
        }
        if (typeof from._f !== 'undefined') {
            to._f = from._f;
        }
        if (typeof from._l !== 'undefined') {
            to._l = from._l;
        }
        if (typeof from._strict !== 'undefined') {
            to._strict = from._strict;
        }
        if (typeof from._tzm !== 'undefined') {
            to._tzm = from._tzm;
        }
        if (typeof from._isUTC !== 'undefined') {
            to._isUTC = from._isUTC;
        }
        if (typeof from._offset !== 'undefined') {
            to._offset = from._offset;
        }
        if (typeof from._pf !== 'undefined') {
            to._pf = from._pf;
        }
        if (typeof from._locale !== 'undefined') {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (typeof val !== 'undefined') {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    // left zero fill a number
    // see http://jsperf.com/left-zero-filling for performance comparison
    function leftZeroFill(number, targetLength, forceSign) {
        var output = '' + Math.abs(number),
            sign = number >= 0;

        while (output.length < targetLength) {
            output = '0' + output;
        }
        return (sign ? (forceSign ? '+' : '') : '-') + output;
    }

    function positiveMomentsDifference(base, other) {
        var res = {milliseconds: 0, months: 0};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        other = makeAs(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = moment.duration(val, period);
            addOrSubtractDurationFromMoment(this, dur, direction);
            return this;
        };
    }

    function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months;
        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            rawSetter(mom, 'Date', rawGetter(mom, 'Date') + days * isAdding);
        }
        if (months) {
            rawMonthSetter(mom, rawGetter(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            moment.updateOffset(mom, days || months);
        }
    }

    // check if is an array
    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return Object.prototype.toString.call(input) === '[object Date]' ||
            input instanceof Date;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function normalizeUnits(units) {
        if (units) {
            var lowered = units.toLowerCase().replace(/(.)s$/, '$1');
            units = unitAliases[units] || camelFunctions[lowered] || lowered;
        }
        return units;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function makeList(field) {
        var count, setter;

        if (field.indexOf('week') === 0) {
            count = 7;
            setter = 'day';
        }
        else if (field.indexOf('month') === 0) {
            count = 12;
            setter = 'month';
        }
        else {
            return;
        }

        moment[field] = function (format, index) {
            var i, getter,
                method = moment._locale[field],
                results = [];

            if (typeof format === 'number') {
                index = format;
                format = undefined;
            }

            getter = function (i) {
                var m = moment().utc().set(setter, i);
                return method.call(moment._locale, m, format || '');
            };

            if (index != null) {
                return getter(index);
            }
            else {
                for (i = 0; i < count; i++) {
                    results.push(getter(i));
                }
                return results;
            }
        };
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            if (coercedNumber >= 0) {
                value = Math.floor(coercedNumber);
            } else {
                value = Math.ceil(coercedNumber);
            }
        }

        return value;
    }

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    function weeksInYear(year, dow, doy) {
        return weekOfYear(moment([year, 11, 31 + dow - doy]), dow, doy).week;
    }

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function checkOverflow(m) {
        var overflow;
        if (m._a && m._pf.overflow === -2) {
            overflow =
                m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH :
                m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE :
                m._a[HOUR] < 0 || m._a[HOUR] > 24 ||
                    (m._a[HOUR] === 24 && (m._a[MINUTE] !== 0 ||
                                           m._a[SECOND] !== 0 ||
                                           m._a[MILLISECOND] !== 0)) ? HOUR :
                m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE :
                m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND :
                m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }

            m._pf.overflow = overflow;
        }
    }

    function isValid(m) {
        if (m._isValid == null) {
            m._isValid = !isNaN(m._d.getTime()) &&
                m._pf.overflow < 0 &&
                !m._pf.empty &&
                !m._pf.invalidMonth &&
                !m._pf.nullInput &&
                !m._pf.invalidFormat &&
                !m._pf.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    m._pf.charsLeftOver === 0 &&
                    m._pf.unusedTokens.length === 0 &&
                    m._pf.bigHour === undefined;
            }
        }
        return m._isValid;
    }

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        if (!locales[name] && hasModule) {
            try {
                oldLocale = moment.locale();
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we want to undo that for lazy loaded locales
                moment.locale(oldLocale);
            } catch (e) { }
        }
        return locales[name];
    }

    // Return a moment from input, that is local/utc/utcOffset equivalent to
    // model.
    function makeAs(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (moment.isMoment(input) || isDate(input) ?
                    +input : +moment(input)) - (+res);
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(+res._d + diff);
            moment.updateOffset(res, false);
            return res;
        } else {
            return moment(input).local();
        }
    }

    /************************************
        Locale
    ************************************/


    extend(Locale.prototype, {

        set : function (config) {
            var prop, i;
            for (i in config) {
                prop = config[i];
                if (typeof prop === 'function') {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
            // Lenient ordinal parsing accepts just a number in addition to
            // number + (possibly) stuff coming from _ordinalParseLenient.
            this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + /\d{1,2}/.source);
        },

        _months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        months : function (m) {
            return this._months[m.month()];
        },

        _monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        monthsShort : function (m) {
            return this._monthsShort[m.month()];
        },

        monthsParse : function (monthName, format, strict) {
            var i, mom, regex;

            if (!this._monthsParse) {
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
            }

            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = moment.utc([2000, i]);
                if (strict && !this._longMonthsParse[i]) {
                    this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                    this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
                }
                if (!strict && !this._monthsParse[i]) {
                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                    return i;
                } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                    return i;
                } else if (!strict && this._monthsParse[i].test(monthName)) {
                    return i;
                }
            }
        },

        _weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdays : function (m) {
            return this._weekdays[m.day()];
        },

        _weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysShort : function (m) {
            return this._weekdaysShort[m.day()];
        },

        _weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        weekdaysMin : function (m) {
            return this._weekdaysMin[m.day()];
        },

        weekdaysParse : function (weekdayName) {
            var i, mom, regex;

            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                if (!this._weekdaysParse[i]) {
                    mom = moment([2000, 1]).day(i);
                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (this._weekdaysParse[i].test(weekdayName)) {
                    return i;
                }
            }
        },

        _longDateFormat : {
            LTS : 'h:mm:ss A',
            LT : 'h:mm A',
            L : 'MM/DD/YYYY',
            LL : 'MMMM D, YYYY',
            LLL : 'MMMM D, YYYY LT',
            LLLL : 'dddd, MMMM D, YYYY LT'
        },
        longDateFormat : function (key) {
            var output = this._longDateFormat[key];
            if (!output && this._longDateFormat[key.toUpperCase()]) {
                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {
                    return val.slice(1);
                });
                this._longDateFormat[key] = output;
            }
            return output;
        },

        isPM : function (input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return ((input + '').toLowerCase().charAt(0) === 'p');
        },

        _meridiemParse : /[ap]\.?m?\.?/i,
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'pm' : 'PM';
            } else {
                return isLower ? 'am' : 'AM';
            }
        },


        _calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        calendar : function (key, mom, now) {
            var output = this._calendar[key];
            return typeof output === 'function' ? output.apply(mom, [now]) : output;
        },

        _relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },

        relativeTime : function (number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return (typeof output === 'function') ?
                output(number, withoutSuffix, string, isFuture) :
                output.replace(/%d/i, number);
        },

        pastFuture : function (diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
        },

        ordinal : function (number) {
            return this._ordinal.replace('%d', number);
        },
        _ordinal : '%d',
        _ordinalParse : /\d{1,2}/,

        preparse : function (string) {
            return string;
        },

        postformat : function (string) {
            return string;
        },

        week : function (mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
        },

        _week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        },

        firstDayOfWeek : function () {
            return this._week.dow;
        },

        firstDayOfYear : function () {
            return this._week.doy;
        },

        _invalidDate: 'Invalid date',
        invalidDate: function () {
            return this._invalidDate;
        }
    });

    /************************************
        Formatting
    ************************************/


    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '';
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());

        if (!formatFunctions[format]) {
            formatFunctions[format] = makeFormatFunction(format);
        }

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }


    /************************************
        Parsing
    ************************************/


    // get the regex to find the next token
    function getParseRegexForToken(token, config) {
        var a, strict = config._strict;
        switch (token) {
        case 'Q':
            return parseTokenOneDigit;
        case 'DDDD':
            return parseTokenThreeDigits;
        case 'YYYY':
        case 'GGGG':
        case 'gggg':
            return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;
        case 'Y':
        case 'G':
        case 'g':
            return parseTokenSignedNumber;
        case 'YYYYYY':
        case 'YYYYY':
        case 'GGGGG':
        case 'ggggg':
            return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;
        case 'S':
            if (strict) {
                return parseTokenOneDigit;
            }
            /* falls through */
        case 'SS':
            if (strict) {
                return parseTokenTwoDigits;
            }
            /* falls through */
        case 'SSS':
            if (strict) {
                return parseTokenThreeDigits;
            }
            /* falls through */
        case 'DDD':
            return parseTokenOneToThreeDigits;
        case 'MMM':
        case 'MMMM':
        case 'dd':
        case 'ddd':
        case 'dddd':
            return parseTokenWord;
        case 'a':
        case 'A':
            return config._locale._meridiemParse;
        case 'x':
            return parseTokenOffsetMs;
        case 'X':
            return parseTokenTimestampMs;
        case 'Z':
        case 'ZZ':
            return parseTokenTimezone;
        case 'T':
            return parseTokenT;
        case 'SSSS':
            return parseTokenDigits;
        case 'MM':
        case 'DD':
        case 'YY':
        case 'GG':
        case 'gg':
        case 'HH':
        case 'hh':
        case 'mm':
        case 'ss':
        case 'ww':
        case 'WW':
            return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;
        case 'M':
        case 'D':
        case 'd':
        case 'H':
        case 'h':
        case 'm':
        case 's':
        case 'w':
        case 'W':
        case 'e':
        case 'E':
            return parseTokenOneOrTwoDigits;
        case 'Do':
            return strict ? config._locale._ordinalParse : config._locale._ordinalParseLenient;
        default :
            a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\', '')), 'i'));
            return a;
        }
    }

    function utcOffsetFromString(string) {
        string = string || '';
        var possibleTzMatches = (string.match(parseTokenTimezone) || []),
            tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [],
            parts = (tzChunk + '').match(parseTimezoneChunker) || ['-', 0, 0],
            minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? minutes : -minutes;
    }

    // function to convert string input to date
    function addTimeToArrayFromToken(token, input, config) {
        var a, datePartArray = config._a;

        switch (token) {
        // QUARTER
        case 'Q':
            if (input != null) {
                datePartArray[MONTH] = (toInt(input) - 1) * 3;
            }
            break;
        // MONTH
        case 'M' : // fall through to MM
        case 'MM' :
            if (input != null) {
                datePartArray[MONTH] = toInt(input) - 1;
            }
            break;
        case 'MMM' : // fall through to MMMM
        case 'MMMM' :
            a = config._locale.monthsParse(input, token, config._strict);
            // if we didn't find a month name, mark the date as invalid.
            if (a != null) {
                datePartArray[MONTH] = a;
            } else {
                config._pf.invalidMonth = input;
            }
            break;
        // DAY OF MONTH
        case 'D' : // fall through to DD
        case 'DD' :
            if (input != null) {
                datePartArray[DATE] = toInt(input);
            }
            break;
        case 'Do' :
            if (input != null) {
                datePartArray[DATE] = toInt(parseInt(
                            input.match(/\d{1,2}/)[0], 10));
            }
            break;
        // DAY OF YEAR
        case 'DDD' : // fall through to DDDD
        case 'DDDD' :
            if (input != null) {
                config._dayOfYear = toInt(input);
            }

            break;
        // YEAR
        case 'YY' :
            datePartArray[YEAR] = moment.parseTwoDigitYear(input);
            break;
        case 'YYYY' :
        case 'YYYYY' :
        case 'YYYYYY' :
            datePartArray[YEAR] = toInt(input);
            break;
        // AM / PM
        case 'a' : // fall through to A
        case 'A' :
            config._meridiem = input;
            // config._isPm = config._locale.isPM(input);
            break;
        // HOUR
        case 'h' : // fall through to hh
        case 'hh' :
            config._pf.bigHour = true;
            /* falls through */
        case 'H' : // fall through to HH
        case 'HH' :
            datePartArray[HOUR] = toInt(input);
            break;
        // MINUTE
        case 'm' : // fall through to mm
        case 'mm' :
            datePartArray[MINUTE] = toInt(input);
            break;
        // SECOND
        case 's' : // fall through to ss
        case 'ss' :
            datePartArray[SECOND] = toInt(input);
            break;
        // MILLISECOND
        case 'S' :
        case 'SS' :
        case 'SSS' :
        case 'SSSS' :
            datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);
            break;
        // UNIX OFFSET (MILLISECONDS)
        case 'x':
            config._d = new Date(toInt(input));
            break;
        // UNIX TIMESTAMP WITH MS
        case 'X':
            config._d = new Date(parseFloat(input) * 1000);
            break;
        // TIMEZONE
        case 'Z' : // fall through to ZZ
        case 'ZZ' :
            config._useUTC = true;
            config._tzm = utcOffsetFromString(input);
            break;
        // WEEKDAY - human
        case 'dd':
        case 'ddd':
        case 'dddd':
            a = config._locale.weekdaysParse(input);
            // if we didn't get a weekday name, mark the date as invalid
            if (a != null) {
                config._w = config._w || {};
                config._w['d'] = a;
            } else {
                config._pf.invalidWeekday = input;
            }
            break;
        // WEEK, WEEK DAY - numeric
        case 'w':
        case 'ww':
        case 'W':
        case 'WW':
        case 'd':
        case 'e':
        case 'E':
            token = token.substr(0, 1);
            /* falls through */
        case 'gggg':
        case 'GGGG':
        case 'GGGGG':
            token = token.substr(0, 2);
            if (input) {
                config._w = config._w || {};
                config._w[token] = toInt(input);
            }
            break;
        case 'gg':
        case 'GG':
            config._w = config._w || {};
            config._w[token] = moment.parseTwoDigitYear(input);
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year);
            week = dfl(w.W, 1);
            weekday = dfl(w.E, 1);
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year);
            week = dfl(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < dow) {
                    ++week;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function dateFromConfig(config) {
        var i, date, input = [], currentDate, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = dfl(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                config._pf._overflowDayOfYear = true;
            }

            date = makeUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }

    function dateFromObject(config) {
        var normalizedInput;

        if (config._d) {
            return;
        }

        normalizedInput = normalizeObjectUnits(config._i);
        config._a = [
            normalizedInput.year,
            normalizedInput.month,
            normalizedInput.day || normalizedInput.date,
            normalizedInput.hour,
            normalizedInput.minute,
            normalizedInput.second,
            normalizedInput.millisecond
        ];

        dateFromConfig(config);
    }

    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [
                now.getUTCFullYear(),
                now.getUTCMonth(),
                now.getUTCDate()
            ];
        } else {
            return [now.getFullYear(), now.getMonth(), now.getDate()];
        }
    }

    // date from string and format string
    function makeDateFromStringAndFormat(config) {
        if (config._f === moment.ISO_8601) {
            parseISO(config);
            return;
        }

        config._a = [];
        config._pf.empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    config._pf.unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    config._pf.empty = false;
                }
                else {
                    config._pf.unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                config._pf.unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        config._pf.charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            config._pf.unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._pf.bigHour === true && config._a[HOUR] <= 12) {
            config._pf.bigHour = undefined;
        }
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR],
                config._meridiem);
        dateFromConfig(config);
        checkOverflow(config);
    }

    function unescapeFormat(s) {
        return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        });
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function regexpEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    // date from string and array of format strings
    function makeDateFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            config._pf.invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._pf = defaultParsingFlags();
            tempConfig._f = config._f[i];
            makeDateFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += tempConfig._pf.charsLeftOver;

            //or tokens
            currentScore += tempConfig._pf.unusedTokens.length * 10;

            tempConfig._pf.score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    // date from iso format
    function parseISO(config) {
        var i, l,
            string = config._i,
            match = isoRegex.exec(string);

        if (match) {
            config._pf.iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    // match[5] should be 'T' or undefined
                    config._f = isoDates[i][0] + (match[6] || ' ');
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    config._f += isoTimes[i][0];
                    break;
                }
            }
            if (string.match(parseTokenTimezone)) {
                config._f += 'Z';
            }
            makeDateFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function makeDateFromString(config) {
        parseISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            moment.createFromInputFallback(config);
        }
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function makeDateFromInput(config) {
        var input = config._i, matched;
        if (input === undefined) {
            config._d = new Date();
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if ((matched = aspNetJsonRegex.exec(input)) !== null) {
            config._d = new Date(+matched[1]);
        } else if (typeof input === 'string') {
            makeDateFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            dateFromConfig(config);
        } else if (typeof(input) === 'object') {
            dateFromObject(config);
        } else if (typeof(input) === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            moment.createFromInputFallback(config);
        }
    }

    function makeDate(y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor doesn't accept years < 1970
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }

    function makeUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    function parseWeekday(input, locale) {
        if (typeof input === 'string') {
            if (!isNaN(input)) {
                input = parseInt(input, 10);
            }
            else {
                input = locale.weekdaysParse(input);
                if (typeof input !== 'number') {
                    return null;
                }
            }
        }
        return input;
    }

    /************************************
        Relative Time
    ************************************/


    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime(posNegDuration, withoutSuffix, locale) {
        var duration = moment.duration(posNegDuration).abs(),
            seconds = round(duration.as('s')),
            minutes = round(duration.as('m')),
            hours = round(duration.as('h')),
            days = round(duration.as('d')),
            months = round(duration.as('M')),
            years = round(duration.as('y')),

            args = seconds < relativeTimeThresholds.s && ['s', seconds] ||
                minutes === 1 && ['m'] ||
                minutes < relativeTimeThresholds.m && ['mm', minutes] ||
                hours === 1 && ['h'] ||
                hours < relativeTimeThresholds.h && ['hh', hours] ||
                days === 1 && ['d'] ||
                days < relativeTimeThresholds.d && ['dd', days] ||
                months === 1 && ['M'] ||
                months < relativeTimeThresholds.M && ['MM', months] ||
                years === 1 && ['y'] || ['yy', years];

        args[2] = withoutSuffix;
        args[3] = +posNegDuration > 0;
        args[4] = locale;
        return substituteTimeAgo.apply({}, args);
    }


    /************************************
        Week of Year
    ************************************/


    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;


        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }

        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }

        adjustedMoment = moment(mom).add(daysToDayOfWeek, 'd');
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;

        d = d === 0 ? 7 : d;
        weekday = weekday != null ? weekday : firstDayOfWeek;
        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;

        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }

    /************************************
        Top Level Functions
    ************************************/

    function makeMoment(config) {
        var input = config._i,
            format = config._f,
            res;

        config._locale = config._locale || moment.localeData(config._l);

        if (input === null || (format === undefined && input === '')) {
            return moment.invalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (moment.isMoment(input)) {
            return new Moment(input, true);
        } else if (format) {
            if (isArray(format)) {
                makeDateFromStringAndArray(config);
            } else {
                makeDateFromStringAndFormat(config);
            }
        } else {
            makeDateFromInput(config);
        }

        res = new Moment(config);
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    moment = function (input, format, locale, strict) {
        var c;

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._i = input;
        c._f = format;
        c._l = locale;
        c._strict = strict;
        c._isUTC = false;
        c._pf = defaultParsingFlags();

        return makeMoment(c);
    };

    moment.suppressDeprecationWarnings = false;

    moment.createFromInputFallback = deprecate(
        'moment construction falls back to js Date. This is ' +
        'discouraged and will be removed in upcoming major ' +
        'release. Please refer to ' +
        'https://github.com/moment/moment/issues/1407 for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return moment();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    moment.min = function () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    };

    moment.max = function () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    };

    // creating with utc
    moment.utc = function (input, format, locale, strict) {
        var c;

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._useUTC = true;
        c._isUTC = true;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        c._pf = defaultParsingFlags();

        return makeMoment(c).utc();
    };

    // creating with unix timestamp (in seconds)
    moment.unix = function (input) {
        return moment(input * 1000);
    };

    // duration
    moment.duration = function (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            parseIso,
            diffRes;

        if (moment.isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = isoDurationRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            parseIso = function (inp) {
                // We'd normally use ~~inp for this, but unfortunately it also
                // converts floats to ints.
                // inp may be undefined, so careful calling replace on it.
                var res = inp && parseFloat(inp.replace(',', '.'));
                // apply sign while we're at it
                return (isNaN(res) ? 0 : res) * sign;
            };
            duration = {
                y: parseIso(match[2]),
                M: parseIso(match[3]),
                d: parseIso(match[4]),
                h: parseIso(match[5]),
                m: parseIso(match[6]),
                s: parseIso(match[7]),
                w: parseIso(match[8])
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' &&
                ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(moment(duration.from), moment(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (moment.isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    };

    // version number
    moment.version = VERSION;

    // default format
    moment.defaultFormat = isoFormat;

    // constant that refers to the ISO standard
    moment.ISO_8601 = function () {};

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    moment.momentProperties = momentProperties;

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    moment.updateOffset = function () {};

    // This function allows you to set a threshold for relative time strings
    moment.relativeTimeThreshold = function (threshold, limit) {
        if (relativeTimeThresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return relativeTimeThresholds[threshold];
        }
        relativeTimeThresholds[threshold] = limit;
        return true;
    };

    moment.lang = deprecate(
        'moment.lang is deprecated. Use moment.locale instead.',
        function (key, value) {
            return moment.locale(key, value);
        }
    );

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    moment.locale = function (key, values) {
        var data;
        if (key) {
            if (typeof(values) !== 'undefined') {
                data = moment.defineLocale(key, values);
            }
            else {
                data = moment.localeData(key);
            }

            if (data) {
                moment.duration._locale = moment._locale = data;
            }
        }

        return moment._locale._abbr;
    };

    moment.defineLocale = function (name, values) {
        if (values !== null) {
            values.abbr = name;
            if (!locales[name]) {
                locales[name] = new Locale();
            }
            locales[name].set(values);

            // backwards compat for now: also set the locale
            moment.locale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    };

    moment.langData = deprecate(
        'moment.langData is deprecated. Use moment.localeData instead.',
        function (key) {
            return moment.localeData(key);
        }
    );

    // returns locale data
    moment.localeData = function (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return moment._locale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    };

    // compare moment object
    moment.isMoment = function (obj) {
        return obj instanceof Moment ||
            (obj != null && hasOwnProp(obj, '_isAMomentObject'));
    };

    // for typechecking Duration objects
    moment.isDuration = function (obj) {
        return obj instanceof Duration;
    };

    for (i = lists.length - 1; i >= 0; --i) {
        makeList(lists[i]);
    }

    moment.normalizeUnits = function (units) {
        return normalizeUnits(units);
    };

    moment.invalid = function (flags) {
        var m = moment.utc(NaN);
        if (flags != null) {
            extend(m._pf, flags);
        }
        else {
            m._pf.userInvalidated = true;
        }

        return m;
    };

    moment.parseZone = function () {
        return moment.apply(null, arguments).parseZone();
    };

    moment.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    moment.isDate = isDate;

    /************************************
        Moment Prototype
    ************************************/


    extend(moment.fn = Moment.prototype, {

        clone : function () {
            return moment(this);
        },

        valueOf : function () {
            return +this._d - ((this._offset || 0) * 60000);
        },

        unix : function () {
            return Math.floor(+this / 1000);
        },

        toString : function () {
            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
        },

        toDate : function () {
            return this._offset ? new Date(+this) : this._d;
        },

        toISOString : function () {
            var m = moment(this).utc();
            if (0 < m.year() && m.year() <= 9999) {
                if ('function' === typeof Date.prototype.toISOString) {
                    // native implementation is ~50x faster, use it when we can
                    return this.toDate().toISOString();
                } else {
                    return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
                }
            } else {
                return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        },

        toArray : function () {
            var m = this;
            return [
                m.year(),
                m.month(),
                m.date(),
                m.hours(),
                m.minutes(),
                m.seconds(),
                m.milliseconds()
            ];
        },

        isValid : function () {
            return isValid(this);
        },

        isDSTShifted : function () {
            if (this._a) {
                return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;
            }

            return false;
        },

        parsingFlags : function () {
            return extend({}, this._pf);
        },

        invalidAt: function () {
            return this._pf.overflow;
        },

        utc : function (keepLocalTime) {
            return this.utcOffset(0, keepLocalTime);
        },

        local : function (keepLocalTime) {
            if (this._isUTC) {
                this.utcOffset(0, keepLocalTime);
                this._isUTC = false;

                if (keepLocalTime) {
                    this.subtract(this._dateUtcOffset(), 'm');
                }
            }
            return this;
        },

        format : function (inputString) {
            var output = formatMoment(this, inputString || moment.defaultFormat);
            return this.localeData().postformat(output);
        },

        add : createAdder(1, 'add'),

        subtract : createAdder(-1, 'subtract'),

        diff : function (input, units, asFloat) {
            var that = makeAs(input, this),
                zoneDiff = (that.utcOffset() - this.utcOffset()) * 6e4,
                anchor, diff, output, daysAdjust;

            units = normalizeUnits(units);

            if (units === 'year' || units === 'month' || units === 'quarter') {
                output = monthDiff(this, that);
                if (units === 'quarter') {
                    output = output / 3;
                } else if (units === 'year') {
                    output = output / 12;
                }
            } else {
                diff = this - that;
                output = units === 'second' ? diff / 1e3 : // 1000
                    units === 'minute' ? diff / 6e4 : // 1000 * 60
                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60
                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                    diff;
            }
            return asFloat ? output : absRound(output);
        },

        from : function (time, withoutSuffix) {
            return moment.duration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        },

        fromNow : function (withoutSuffix) {
            return this.from(moment(), withoutSuffix);
        },

        calendar : function (time) {
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're locat/utc/offset
            // or not.
            var now = time || moment(),
                sod = makeAs(now, this).startOf('day'),
                diff = this.diff(sod, 'days', true),
                format = diff < -6 ? 'sameElse' :
                    diff < -1 ? 'lastWeek' :
                    diff < 0 ? 'lastDay' :
                    diff < 1 ? 'sameDay' :
                    diff < 2 ? 'nextDay' :
                    diff < 7 ? 'nextWeek' : 'sameElse';
            return this.format(this.localeData().calendar(format, this, moment(now)));
        },

        isLeapYear : function () {
            return isLeapYear(this.year());
        },

        isDST : function () {
            return (this.utcOffset() > this.clone().month(0).utcOffset() ||
                this.utcOffset() > this.clone().month(5).utcOffset());
        },

        day : function (input) {
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
                input = parseWeekday(input, this.localeData());
                return this.add(input - day, 'd');
            } else {
                return day;
            }
        },

        month : makeAccessor('Month', true),

        startOf : function (units) {
            units = normalizeUnits(units);
            // the following switch intentionally omits break keywords
            // to utilize falling through the cases.
            switch (units) {
            case 'year':
                this.month(0);
                /* falls through */
            case 'quarter':
            case 'month':
                this.date(1);
                /* falls through */
            case 'week':
            case 'isoWeek':
            case 'day':
                this.hours(0);
                /* falls through */
            case 'hour':
                this.minutes(0);
                /* falls through */
            case 'minute':
                this.seconds(0);
                /* falls through */
            case 'second':
                this.milliseconds(0);
                /* falls through */
            }

            // weeks are a special case
            if (units === 'week') {
                this.weekday(0);
            } else if (units === 'isoWeek') {
                this.isoWeekday(1);
            }

            // quarters are also special
            if (units === 'quarter') {
                this.month(Math.floor(this.month() / 3) * 3);
            }

            return this;
        },

        endOf: function (units) {
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond') {
                return this;
            }
            return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
        },

        isAfter: function (input, units) {
            var inputMs;
            units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
            if (units === 'millisecond') {
                input = moment.isMoment(input) ? input : moment(input);
                return +this > +input;
            } else {
                inputMs = moment.isMoment(input) ? +input : +moment(input);
                return inputMs < +this.clone().startOf(units);
            }
        },

        isBefore: function (input, units) {
            var inputMs;
            units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
            if (units === 'millisecond') {
                input = moment.isMoment(input) ? input : moment(input);
                return +this < +input;
            } else {
                inputMs = moment.isMoment(input) ? +input : +moment(input);
                return +this.clone().endOf(units) < inputMs;
            }
        },

        isBetween: function (from, to, units) {
            return this.isAfter(from, units) && this.isBefore(to, units);
        },

        isSame: function (input, units) {
            var inputMs;
            units = normalizeUnits(units || 'millisecond');
            if (units === 'millisecond') {
                input = moment.isMoment(input) ? input : moment(input);
                return +this === +input;
            } else {
                inputMs = +moment(input);
                return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
            }
        },

        min: deprecate(
                 'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
                 function (other) {
                     other = moment.apply(null, arguments);
                     return other < this ? this : other;
                 }
         ),

        max: deprecate(
                'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
                function (other) {
                    other = moment.apply(null, arguments);
                    return other > this ? this : other;
                }
        ),

        zone : deprecate(
                'moment().zone is deprecated, use moment().utcOffset instead. ' +
                'https://github.com/moment/moment/issues/1779',
                function (input, keepLocalTime) {
                    if (input != null) {
                        if (typeof input !== 'string') {
                            input = -input;
                        }

                        this.utcOffset(input, keepLocalTime);

                        return this;
                    } else {
                        return -this.utcOffset();
                    }
                }
        ),

        // keepLocalTime = true means only change the timezone, without
        // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
        // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
        // +0200, so we adjust the time as needed, to be valid.
        //
        // Keeping the time actually adds/subtracts (one hour)
        // from the actual represented time. That is why we call updateOffset
        // a second time. In case it wants us to change the offset again
        // _changeInProgress == true case, then we have to adjust, because
        // there is no such time in the given timezone.
        utcOffset : function (input, keepLocalTime) {
            var offset = this._offset || 0,
                localAdjust;
            if (input != null) {
                if (typeof input === 'string') {
                    input = utcOffsetFromString(input);
                }
                if (Math.abs(input) < 16) {
                    input = input * 60;
                }
                if (!this._isUTC && keepLocalTime) {
                    localAdjust = this._dateUtcOffset();
                }
                this._offset = input;
                this._isUTC = true;
                if (localAdjust != null) {
                    this.add(localAdjust, 'm');
                }
                if (offset !== input) {
                    if (!keepLocalTime || this._changeInProgress) {
                        addOrSubtractDurationFromMoment(this,
                                moment.duration(input - offset, 'm'), 1, false);
                    } else if (!this._changeInProgress) {
                        this._changeInProgress = true;
                        moment.updateOffset(this, true);
                        this._changeInProgress = null;
                    }
                }

                return this;
            } else {
                return this._isUTC ? offset : this._dateUtcOffset();
            }
        },

        isLocal : function () {
            return !this._isUTC;
        },

        isUtcOffset : function () {
            return this._isUTC;
        },

        isUtc : function () {
            return this._isUTC && this._offset === 0;
        },

        zoneAbbr : function () {
            return this._isUTC ? 'UTC' : '';
        },

        zoneName : function () {
            return this._isUTC ? 'Coordinated Universal Time' : '';
        },

        parseZone : function () {
            if (this._tzm) {
                this.utcOffset(this._tzm);
            } else if (typeof this._i === 'string') {
                this.utcOffset(utcOffsetFromString(this._i));
            }
            return this;
        },

        hasAlignedHourOffset : function (input) {
            if (!input) {
                input = 0;
            }
            else {
                input = moment(input).utcOffset();
            }

            return (this.utcOffset() - input) % 60 === 0;
        },

        daysInMonth : function () {
            return daysInMonth(this.year(), this.month());
        },

        dayOfYear : function (input) {
            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;
            return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
        },

        quarter : function (input) {
            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
        },

        weekYear : function (input) {
            var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
            return input == null ? year : this.add((input - year), 'y');
        },

        isoWeekYear : function (input) {
            var year = weekOfYear(this, 1, 4).year;
            return input == null ? year : this.add((input - year), 'y');
        },

        week : function (input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, 'd');
        },

        isoWeek : function (input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, 'd');
        },

        weekday : function (input) {
            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, 'd');
        },

        isoWeekday : function (input) {
            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.
            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
        },

        isoWeeksInYear : function () {
            return weeksInYear(this.year(), 1, 4);
        },

        weeksInYear : function () {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units]();
        },

        set : function (units, value) {
            var unit;
            if (typeof units === 'object') {
                for (unit in units) {
                    this.set(unit, units[unit]);
                }
            }
            else {
                units = normalizeUnits(units);
                if (typeof this[units] === 'function') {
                    this[units](value);
                }
            }
            return this;
        },

        // If passed a locale key, it will set the locale for this
        // instance.  Otherwise, it will return the locale configuration
        // variables for this instance.
        locale : function (key) {
            var newLocaleData;

            if (key === undefined) {
                return this._locale._abbr;
            } else {
                newLocaleData = moment.localeData(key);
                if (newLocaleData != null) {
                    this._locale = newLocaleData;
                }
                return this;
            }
        },

        lang : deprecate(
            'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
            function (key) {
                if (key === undefined) {
                    return this.localeData();
                } else {
                    return this.locale(key);
                }
            }
        ),

        localeData : function () {
            return this._locale;
        },

        _dateUtcOffset : function () {
            // On Firefox.24 Date#getTimezoneOffset returns a floating point.
            // https://github.com/moment/moment/pull/1871
            return -Math.round(this._d.getTimezoneOffset() / 15) * 15;
        }

    });

    function rawMonthSetter(mom, value) {
        var dayOfMonth;

        // TODO: Move this out of here!
        if (typeof value === 'string') {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (typeof value !== 'number') {
                return mom;
            }
        }

        dayOfMonth = Math.min(mom.date(),
                daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function rawGetter(mom, unit) {
        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }

    function rawSetter(mom, unit, value) {
        if (unit === 'Month') {
            return rawMonthSetter(mom, value);
        } else {
            return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
        }
    }

    function makeAccessor(unit, keepTime) {
        return function (value) {
            if (value != null) {
                rawSetter(this, unit, value);
                moment.updateOffset(this, keepTime);
                return this;
            } else {
                return rawGetter(this, unit);
            }
        };
    }

    moment.fn.millisecond = moment.fn.milliseconds = makeAccessor('Milliseconds', false);
    moment.fn.second = moment.fn.seconds = makeAccessor('Seconds', false);
    moment.fn.minute = moment.fn.minutes = makeAccessor('Minutes', false);
    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    moment.fn.hour = moment.fn.hours = makeAccessor('Hours', true);
    // moment.fn.month is defined separately
    moment.fn.date = makeAccessor('Date', true);
    moment.fn.dates = deprecate('dates accessor is deprecated. Use date instead.', makeAccessor('Date', true));
    moment.fn.year = makeAccessor('FullYear', true);
    moment.fn.years = deprecate('years accessor is deprecated. Use year instead.', makeAccessor('FullYear', true));

    // add plural methods
    moment.fn.days = moment.fn.day;
    moment.fn.months = moment.fn.month;
    moment.fn.weeks = moment.fn.week;
    moment.fn.isoWeeks = moment.fn.isoWeek;
    moment.fn.quarters = moment.fn.quarter;

    // add aliased format methods
    moment.fn.toJSON = moment.fn.toISOString;

    // alias isUtc for dev-friendliness
    moment.fn.isUTC = moment.fn.isUtc;

    /************************************
        Duration Prototype
    ************************************/


    function daysToYears (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        return days * 400 / 146097;
    }

    function yearsToDays (years) {
        // years * 365 + absRound(years / 4) -
        //     absRound(years / 100) + absRound(years / 400);
        return years * 146097 / 400;
    }

    extend(moment.duration.fn = Duration.prototype, {

        _bubble : function () {
            var milliseconds = this._milliseconds,
                days = this._days,
                months = this._months,
                data = this._data,
                seconds, minutes, hours, years = 0;

            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;

            seconds = absRound(milliseconds / 1000);
            data.seconds = seconds % 60;

            minutes = absRound(seconds / 60);
            data.minutes = minutes % 60;

            hours = absRound(minutes / 60);
            data.hours = hours % 24;

            days += absRound(hours / 24);

            // Accurately convert days to years, assume start from year 0.
            years = absRound(daysToYears(days));
            days -= absRound(yearsToDays(years));

            // 30 days to a month
            // TODO (iskren): Use anchor date (like 1st Jan) to compute this.
            months += absRound(days / 30);
            days %= 30;

            // 12 months -> 1 year
            years += absRound(months / 12);
            months %= 12;

            data.days = days;
            data.months = months;
            data.years = years;
        },

        abs : function () {
            this._milliseconds = Math.abs(this._milliseconds);
            this._days = Math.abs(this._days);
            this._months = Math.abs(this._months);

            this._data.milliseconds = Math.abs(this._data.milliseconds);
            this._data.seconds = Math.abs(this._data.seconds);
            this._data.minutes = Math.abs(this._data.minutes);
            this._data.hours = Math.abs(this._data.hours);
            this._data.months = Math.abs(this._data.months);
            this._data.years = Math.abs(this._data.years);

            return this;
        },

        weeks : function () {
            return absRound(this.days() / 7);
        },

        valueOf : function () {
            return this._milliseconds +
              this._days * 864e5 +
              (this._months % 12) * 2592e6 +
              toInt(this._months / 12) * 31536e6;
        },

        humanize : function (withSuffix) {
            var output = relativeTime(this, !withSuffix, this.localeData());

            if (withSuffix) {
                output = this.localeData().pastFuture(+this, output);
            }

            return this.localeData().postformat(output);
        },

        add : function (input, val) {
            // supports only 2.0-style add(1, 's') or add(moment)
            var dur = moment.duration(input, val);

            this._milliseconds += dur._milliseconds;
            this._days += dur._days;
            this._months += dur._months;

            this._bubble();

            return this;
        },

        subtract : function (input, val) {
            var dur = moment.duration(input, val);

            this._milliseconds -= dur._milliseconds;
            this._days -= dur._days;
            this._months -= dur._months;

            this._bubble();

            return this;
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units.toLowerCase() + 's']();
        },

        as : function (units) {
            var days, months;
            units = normalizeUnits(units);

            if (units === 'month' || units === 'year') {
                days = this._days + this._milliseconds / 864e5;
                months = this._months + daysToYears(days) * 12;
                return units === 'month' ? months : months / 12;
            } else {
                // handle milliseconds separately because of floating point math errors (issue #1867)
                days = this._days + Math.round(yearsToDays(this._months / 12));
                switch (units) {
                    case 'week': return days / 7 + this._milliseconds / 6048e5;
                    case 'day': return days + this._milliseconds / 864e5;
                    case 'hour': return days * 24 + this._milliseconds / 36e5;
                    case 'minute': return days * 24 * 60 + this._milliseconds / 6e4;
                    case 'second': return days * 24 * 60 * 60 + this._milliseconds / 1000;
                    // Math.floor prevents floating point math errors here
                    case 'millisecond': return Math.floor(days * 24 * 60 * 60 * 1000) + this._milliseconds;
                    default: throw new Error('Unknown unit ' + units);
                }
            }
        },

        lang : moment.fn.lang,
        locale : moment.fn.locale,

        toIsoString : deprecate(
            'toIsoString() is deprecated. Please use toISOString() instead ' +
            '(notice the capitals)',
            function () {
                return this.toISOString();
            }
        ),

        toISOString : function () {
            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            var years = Math.abs(this.years()),
                months = Math.abs(this.months()),
                days = Math.abs(this.days()),
                hours = Math.abs(this.hours()),
                minutes = Math.abs(this.minutes()),
                seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);

            if (!this.asSeconds()) {
                // this is the same as C#'s (Noda) and python (isodate)...
                // but not other JS (goog.date)
                return 'P0D';
            }

            return (this.asSeconds() < 0 ? '-' : '') +
                'P' +
                (years ? years + 'Y' : '') +
                (months ? months + 'M' : '') +
                (days ? days + 'D' : '') +
                ((hours || minutes || seconds) ? 'T' : '') +
                (hours ? hours + 'H' : '') +
                (minutes ? minutes + 'M' : '') +
                (seconds ? seconds + 'S' : '');
        },

        localeData : function () {
            return this._locale;
        },

        toJSON : function () {
            return this.toISOString();
        }
    });

    moment.duration.fn.toString = moment.duration.fn.toISOString;

    function makeDurationGetter(name) {
        moment.duration.fn[name] = function () {
            return this._data[name];
        };
    }

    for (i in unitMillisecondFactors) {
        if (hasOwnProp(unitMillisecondFactors, i)) {
            makeDurationGetter(i.toLowerCase());
        }
    }

    moment.duration.fn.asMilliseconds = function () {
        return this.as('ms');
    };
    moment.duration.fn.asSeconds = function () {
        return this.as('s');
    };
    moment.duration.fn.asMinutes = function () {
        return this.as('m');
    };
    moment.duration.fn.asHours = function () {
        return this.as('h');
    };
    moment.duration.fn.asDays = function () {
        return this.as('d');
    };
    moment.duration.fn.asWeeks = function () {
        return this.as('weeks');
    };
    moment.duration.fn.asMonths = function () {
        return this.as('M');
    };
    moment.duration.fn.asYears = function () {
        return this.as('y');
    };

    /************************************
        Default Locale
    ************************************/


    // Set default locale, other locale will inherit from English.
    moment.locale('en', {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    /* EMBED_LOCALES */

    /************************************
        Exposing Moment
    ************************************/

    function makeGlobal(shouldDeprecate) {
        /*global ender:false */
        if (typeof ender !== 'undefined') {
            return;
        }
        oldGlobalMoment = globalScope.moment;
        if (shouldDeprecate) {
            globalScope.moment = deprecate(
                    'Accessing Moment through the global scope is ' +
                    'deprecated, and will be removed in an upcoming ' +
                    'release.',
                    moment);
        } else {
            globalScope.moment = moment;
        }
    }

    // CommonJS module is defined
    if (hasModule) {
        module.exports = moment;
    } else if (typeof define === 'function' && define.amd) {
        define('moment',['require','exports','module'],function (require, exports, module) {
            if (module.config && module.config() && module.config().noGlobal === true) {
                // release the global variable
                globalScope.moment = oldGlobalMoment;
            }

            return moment;
        });
        makeGlobal(true);
    } else {
        makeGlobal();
    }
}).call(this);

define('common/routes',[], function() {
  
  function routes($urlRouterProvider, $stateProvider) {
    
    return $stateProvider.state('settings', {
      url: '/settings',
      access: {allowAnonymous: false},
      templateUrl: 'common/views/settings.html',
      controller: 'SettingsController'
    }).state('testAuth', {
      url: '/testAuth',
      access: {allowAnonymous: false},
      templateUrl: 'experiments/views/testAuth.html',
      controller: 'LoginController as lc'
    });
  }
  var $__default = routes;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('common/utils/util',[], function() {
  
  
  function loadDOMFromString(templateString) {
    var range = document.createRange();
    range.selectNode(document.body);
    var importedDoc = range.createContextualFragment(templateString);
    range.detach();
    return importedDoc;
  }
  function loadDOMFromString1(templateString) {
    var importedDoc = document.createDocumentFragment();
    var temp = document.createElement('div');
    temp.innerHTML = templateString;
    while (temp.firstChild) {
      importedDoc.appendChild(temp.firstChild);
    }
    return importedDoc;
  }
  function loadDOMFromLink(url) {
    return new Promise((function(resolve, reject) {
      var link = document.querySelector('link[rel=import][href$="' + url + '"]');
      if (link) {
        if (link.import) {
          resolve(link.import);
        } else {
          console.debug('link not loaded yet: ', link, 'onload' in link);
          setTimeout((function() {
            resolve(link.import);
          }), 50);
        }
      } else {
        link = document.createElement('link');
        link.rel = 'import';
        link.onload = (function(e) {
          console.debug('Loaded import: ' + e.target.href);
          resolve(e.target.import);
        });
        link.onerror = (function(e) {
          reject('Error loading import: ' + e.target.href);
        });
        link.href = url;
        document.head.appendChild(link);
      }
    }));
  }
  function serialize(data) {
    if (!angular.isObject(data)) {
      return ((data === null) ? '' : data.toString());
    }
    var buffer = [];
    for (var name in data) {
      if (!data.hasOwnProperty(name)) {
        continue;
      }
      var value = data[name];
      buffer.push(encodeURIComponent(name) + '=' + encodeURIComponent((value === null) ? '' : value));
    }
    var source = buffer.join('&').replace(/%20/g, '+');
    return (source);
  }
  function isProxySupported() {
    try {
      return typeof Proxy !== 'undefined' && new Proxy({}, {get: function() {
          return 5;
        }}).foo === 5;
    } catch (err) {}
    return false;
  }
  ;
  return {
    get isProxySupported() {
      return isProxySupported;
    },
    get loadDOMFromString() {
      return loadDOMFromString;
    },
    get loadDOMFromString1() {
      return loadDOMFromString1;
    },
    get loadDOMFromLink() {
      return loadDOMFromLink;
    },
    get serialize() {
      return serialize;
    },
    __esModule: true
  };
});

define('common/services/AuthenticationService',["../../common/utils/util"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  
  var serialize = $__0.serialize;
  var AUTH_CONFIG = {
    BASE_URL: 'http://localhost:8080/<YourBaaS>',
    LOGIN_URL: 'http://localhost:8080/<YourBaaS>/j_spring_security_check',
    LOGOUT_URL: 'http://localhost:8080/<YourBaaS>/logout',
    PROFILE_URL: 'http://localhost:8080/<YourBaaS>/login/currentUser'
  };
  var AUTH_EVENTS = {
    loginSuccess: 'auth-login-success',
    loginFailed: 'auth-login-failed',
    loginCancelled: 'auth-login-cancelled',
    logoutSuccess: 'auth-logout-success',
    sessionTimeout: 'auth-session-timeout',
    notAuthenticated: 'auth-not-authenticated',
    notAuthorized: 'auth-not-authorized'
  };
  var AuthenticationService = function AuthenticationService($q, $http, $sanitize, UserService, $rootScope, httpBuffer) {
    this.$q = $q;
    this.$http = $http;
    this.$sanitize = $sanitize;
    this.UserService = UserService;
    this.$rootScope = $rootScope;
    this.httpBuffer = httpBuffer;
  };
  ($traceurRuntime.createClass)(AuthenticationService, {
    _sanitizeCredentials: function(credentials) {
      return {
        j_username: this.$sanitize(credentials.username),
        j_password: this.$sanitize(credentials.password),
        _spring_security_remember_me: credentials.rememberMe,
        ajax: true
      };
    },
    login: function(credentials) {
      var $__2 = this;
      this.UserService.clear();
      var transformRequest = (function(data) {
        return serialize(data);
      });
      var headers = {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'};
      var _login = this.$http.post(AUTH_CONFIG.LOGIN_URL, this._sanitizeCredentials(credentials), {
        timeout: 10000,
        headers: headers,
        transformRequest: transformRequest
      });
      var promise = new Promise((function(resolve, reject) {
        _login.success((function(data, status, headers, config) {
          if (data.hasOwnProperty('error')) {
            reject(new Error(data.error));
          } else {
            $__2.UserService.currentUser().then((function(user) {
              resolve(true);
            }));
          }
        })).error((function(data, status, headers, config) {
          reject(new Error(data));
        }));
      }));
      return this.$q.when(promise);
    },
    logout: function() {
      return this.$http({
        method: 'POST',
        url: AUTH_CONFIG.LOGOUT_URL,
        params: {'ajax': true}
      });
    },
    loginSuccess: function(data, configUpdater) {
      var updater = configUpdater || function(config) {
        return config;
      };
      this.$rootScope.$broadcast(AUTH_EVENTS.loginSuccess, data);
      this.httpBuffer.retryAll(updater);
    },
    logoutSuccess: function(data) {
      this.UserService.clear();
      this.$rootScope.$broadcast(AUTH_EVENTS.logoutSuccess, data);
    },
    loginCancelled: function(data, reason) {
      this.httpBuffer.rejectAll(reason);
      this.$rootScope.$broadcast(AUTH_EVENTS.loginCancelled, data);
    },
    notAuthorized: function(data) {
      this.$rootScope.$broadcast(AUTH_EVENTS.notAuthorized, data);
    },
    notAuthenticated: function(data) {
      this.$rootScope.$broadcast(AUTH_EVENTS.notAuthenticated, data);
    }
  }, {});
  return {
    get AUTH_CONFIG() {
      return AUTH_CONFIG;
    },
    get AUTH_EVENTS() {
      return AUTH_EVENTS;
    },
    get AuthenticationService() {
      return AuthenticationService;
    },
    __esModule: true
  };
});

define('common/services/UserService',["./AuthenticationService", "diary"], function($__0,$__2) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__2 || !$__2.__esModule)
    $__2 = {default: $__2};
  var AUTH_CONFIG = $__0.AUTH_CONFIG;
  var Diary = $__2.Diary;
  var USER_KEY = '_currentUser';
  var IS_LOGGED_IN = '_isLoggedIn';
  var USERNAME = '_username';
  var _userCache = Symbol('user', true);
  var UserService = function UserService($q, $log, Restangular, DSCacheFactory) {
    this.$q = $q;
    this.Restangular = Restangular;
    this.logger = Diary.logger('UserService');
    this[_userCache] = new DSCacheFactory('userCache', {
      capacity: 5,
      storageMode: 'sessionStorage',
      verifyIntegrity: true
    });
  };
  ($traceurRuntime.createClass)(UserService, {
    currentUser: function() {
      var $__4 = this;
      var promise = new Promise((function(resolve, reject) {
        $__4.logger.info('in currentUser');
        var _currentUser = $__4[_userCache].get(USER_KEY);
        if (_currentUser) {
          resolve(_currentUser);
        } else {
          $__4.Restangular.oneUrl('UserProfile', AUTH_CONFIG.PROFILE_URL).get().then((function(userProfile) {
            $__4[_userCache].put(IS_LOGGED_IN, true);
            $__4[_userCache].put(USER_KEY, userProfile);
            $__4[_userCache].put(USERNAME, userProfile.username);
            resolve(userProfile);
          })).catch((function(err) {
            $__4.logger.error(err);
            reject(err);
          }));
        }
      }));
      return this.$q.when(promise);
    },
    currentUserFromCache: function() {
      return this[_userCache].get(USER_KEY);
    },
    isLoggedIn: function() {
      return this[_userCache].get(IS_LOGGED_IN) || false;
    },
    getUsername: function() {
      return this[_userCache].get(USERNAME) || false;
    },
    clear: function() {
      this[_userCache].removeAll();
    }
  }, {});
  var $__default = UserService;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('common/controllers/LoginController',["diary", "../services/AuthenticationService", "../services/UserService", "../services/AuthenticationService"], function($__0,$__2,$__4,$__6) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__2 || !$__2.__esModule)
    $__2 = {default: $__2};
  if (!$__4 || !$__4.__esModule)
    $__4 = {default: $__4};
  if (!$__6 || !$__6.__esModule)
    $__6 = {default: $__6};
  var Diary = $__0.Diary;
  var AuthenticationServiceClass = $__2.AuthenticationService;
  var UserServiceClass = $__4.default;
  var AUTH_EVENTS = $__6.AUTH_EVENTS;
  var modalInstance;
  var LoginController = function LoginController($scope, $rootScope, growl, $modal, $state, UserService, AuthenticationService) {
    var $__8 = this;
    this.$rootScope = $rootScope;
    this.growl = growl;
    this.logger = Diary.logger('LoginController');
    this.$modal = $modal;
    this.$state = $state;
    this.UserService = UserService;
    this.AuthenticationService = AuthenticationService;
    this.loginDialogOpened = false;
    $scope.$on(AUTH_EVENTS.notAuthenticated, (function() {
      if (!$__8.loginDialogOpened) {
        $__8.growl.warning('LOGIN_REQUIRED');
        UserService.clear();
        $state.go('home');
        $__8.login();
      }
    }));
    $scope.$on(AUTH_EVENTS.sessionTimeout, (function() {
      if (!$__8.loginDialogOpened) {
        $__8.growl.warning('SESSION_TIMEOUT');
        UserService.clear();
        $state.go('home');
        $__8.login();
      }
    }));
    $scope.$on(AUTH_EVENTS.notAuthorized, (function() {
      if (!$__8.loginDialogOpened) {
        growl.error('You are not authorized to access this page');
        $__8.login();
      }
    }));
    $scope.$on(AUTH_EVENTS.loginSuccess, (function() {
      $__8.growl.success('LOGIN_SUCCESS');
      console.log('destination State', $scope.destinationState);
      if ($scope.destinationState) {
        $__8.logger.info(("redirecting to destination: " + $scope.destinationState.state.name));
        $state.go($scope.destinationState.state.name, $scope.destinationState.stateParams);
      }
    }));
    $scope.$on(AUTH_EVENTS.loginCancelled, (function() {
      $__8.growl.warning('LOGIN_CANCELLED');
    }));
    $scope.$on(AUTH_EVENTS.logoutSuccess, (function() {
      $__8.growl.warning('LOGOUT_SUCCESS');
      $__8.$state.go('home');
    }));
  };
  ($traceurRuntime.createClass)(LoginController, {
    isLoggedIn: function() {
      return this.UserService.isLoggedIn();
    },
    getUsername: function() {
      return this.UserService.getUsername();
    },
    getCurrentUser: function() {
      return this.UserService.currentUserFromCache();
    },
    login: function() {
      var $__8 = this;
      modalInstance = this.$modal.open({
        templateUrl: 'common/views/login.html',
        controller: 'LoginModalController',
        backdrop: true,
        keyboard: true,
        windowClass: 'modal-login'
      });
      modalInstance.opened.then((function() {
        $__8.logger.info('Login modal opened');
        $__8.loginDialogOpened = true;
      }));
      modalInstance.result.then((function(result) {
        $__8.logger.warn(("got result: " + result + " from LoginModalController..."));
        $__8.loginDialogOpened = false;
      })).catch((function(err) {
        $__8.logger.warn('login Modal dismissed', err);
        $__8.loginDialogOpened = false;
      }));
    },
    logout: function() {
      var $__8 = this;
      this.logger.warn('in logout');
      this.AuthenticationService.logout().then((function() {
        $__8.AuthenticationService.logoutSuccess();
      })).catch((function(err) {
        $__8.logger.error(err);
        $__8.growl.error((err.config.url + " not accessible"), {ttl: 8000});
      }));
    }
  }, {});
  Object.defineProperty(LoginController, "parameters", {get: function() {
      return [[], [], [], [], [], [UserServiceClass], [AuthenticationServiceClass]];
    }});
  var LoginModalController = function LoginModalController($scope, growl, AuthenticationService) {
    this.$scope = $scope;
    this.growl = growl;
    this.logger = Diary.logger('LoginModalController');
    this.AuthenticationService = AuthenticationService;
    this.$scope.credentials = {
      username: '',
      password: '',
      rememberMe: false
    };
  };
  ($traceurRuntime.createClass)(LoginModalController, {
    submit: function(credentials) {
      var $__8 = this;
      this.AuthenticationService.login(credentials).then((function(result) {
        $__8.AuthenticationService.loginSuccess();
        modalInstance.close(result);
      })).catch((function(err) {
        $__8.logger.error(err);
        $__8.growl.error(err.message, {ttl: 8000});
      }));
    },
    cancel: function() {
      this.AuthenticationService.loginCancelled();
      modalInstance.dismiss('cancel');
    }
  }, {});
  ;
  return {
    get LoginController() {
      return LoginController;
    },
    get LoginModalController() {
      return LoginModalController;
    },
    __esModule: true
  };
});

define('common/controllers/SettingsController',[], function() {
  
  var SettingsController = function SettingsController($scope, UserService) {
    console.info('in SettingsController....');
    UserService.currentUser().then((function(user) {
      $scope.currentUser = user;
    }));
    $scope.changeTheme = function() {};
  };
  ($traceurRuntime.createClass)(SettingsController, {}, {});
  var $__default = SettingsController;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('common/services/AuthorizationService',[], function() {
  
  var USER_ROLES = {
    all: '*',
    any: '?',
    USER: 'ROLE_USER',
    DATA_ADMIN: 'ROLE_DATA_ADMIN',
    IT_ADMIN: 'ROLE_IT_ADMIN',
    BUSINESS_ADMIN: 'ROLE_BUSINESS_ADMIN',
    SWITCH_USER: 'ROLE_SWITCH_USER',
    SUPER_ADMIN: 'ROLE_SUPER_ADMIN'
  };
  var USER_ROLE_HIERARCHIE = {
    ROLE_USER: ['ROLE_USER'],
    ROLE_DATA_ADMIN: ['ROLE_DATA_ADMIN', 'ROLE_USER'],
    ROLE_IT_ADMIN: ['ROLE_IT_ADMIN', 'ROLE_USER'],
    ROLE_BUSINESS_ADMIN: ['ROLE_BUSINESS_ADMIN', 'ROLE_IT_ADMIN', 'ROLE_DATA_ADMIN', 'ROLE_USER'],
    ROLE_SWITCH_USER: ['ROLE_SWITCH_USER', 'ROLE_BUSINESS_ADMIN', 'ROLE_IT_ADMIN', 'ROLE_DATA_ADMIN', 'ROLE_USER'],
    ROLE_SUPER_ADMIN: ['ROLE_SUPER_ADMIN', 'ROLE_SWITCH_USER', 'ROLE_BUSINESS_ADMIN', 'ROLE_IT_ADMIN', 'ROLE_DATA_ADMIN', 'ROLE_USER']
  };
  var AuthorizationService = function AuthorizationService($rootScope, UserService) {
    this.$rootScope = $rootScope;
    this.UserService = UserService;
  };
  ($traceurRuntime.createClass)(AuthorizationService, {
    isAuthenticated: function() {
      return this.UserService.isLoggedIn();
    },
    isAuthorized: function(authorizedRoles) {
      if (!this.isAuthenticated()) {
        return false;
      }
      if (typeof authorizedRoles === 'undefined') {
        return true;
      }
      if (!angular.isArray(authorizedRoles)) {
        authorizedRoles = [authorizedRoles];
      }
      var currentUser = this.UserService.currentUserFromCache();
      var authorities = currentUser.authorities.map((function(x) {
        return x.authority;
      }));
      var expandedAuthorities = _.flatten(authorities.map((function(x) {
        return USER_ROLE_HIERARCHIE[x];
      })));
      var intersection = _.intersection(expandedAuthorities, authorizedRoles);
      return (this.isAuthenticated() && intersection.length > 0);
    },
    isAuthorized1: function(authorizedRoles) {
      var currentUser,
          authorities,
          intersection;
      return $traceurRuntime.asyncWrap(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $ctx.state = (!this.isAuthenticated()) ? 1 : 3;
              break;
            case 1:
              $ctx.returnValue = false;
              $ctx.state = 2;
              break;
            case 2:
              $ctx.state = -2;
              break;
            case 3:
              $ctx.state = (typeof authorizedRoles === 'undefined') ? 5 : 7;
              break;
            case 5:
              $ctx.returnValue = true;
              $ctx.state = 6;
              break;
            case 6:
              $ctx.state = -2;
              break;
            case 7:
              if (!angular.isArray(authorizedRoles)) {
                authorizedRoles = [authorizedRoles];
              }
              $ctx.state = 16;
              break;
            case 16:
              Promise.resolve(this.UserService.currentUser()).then($ctx.createCallback(11), $ctx.errback);
              return ;
            case 11:
              currentUser = $ctx.value;
              $ctx.state = 10;
              break;
            case 10:
              authorities = new Set((function() {
                var $__1 = 0,
                    $__2 = [];
                var $__6 = true;
                var $__7 = false;
                var $__8 = undefined;
                try {
                  for (var $__4 = void 0,
                      $__3 = (currentUser.authorities)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__6 = ($__4 = $__3.next()).done); $__6 = true) {
                    var x = $__4.value;
                    $__2[$__1++] = x.authority;
                  }
                } catch ($__9) {
                  $__7 = true;
                  $__8 = $__9;
                } finally {
                  try {
                    if (!$__6 && $__3.return != null) {
                      $__3.return();
                    }
                  } finally {
                    if ($__7) {
                      throw $__8;
                    }
                  }
                }
                return $__2;
              }()));
              intersection = (function() {
                var $__1 = 0,
                    $__2 = [];
                var $__6 = true;
                var $__7 = false;
                var $__8 = undefined;
                try {
                  for (var $__4 = void 0,
                      $__3 = (authorizedRoles)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__6 = ($__4 = $__3.next()).done); $__6 = true) {
                    var x = $__4.value;
                    if (authorities.has(x))
                      $__2[$__1++] = x;
                  }
                } catch ($__9) {
                  $__7 = true;
                  $__8 = $__9;
                } finally {
                  try {
                    if (!$__6 && $__3.return != null) {
                      $__3.return();
                    }
                  } finally {
                    if ($__7) {
                      throw $__8;
                    }
                  }
                }
                return $__2;
              }());
              $ctx.state = 18;
              break;
            case 18:
              $ctx.returnValue = (this.isAuthenticated() && intersection.length > 0);
              $ctx.state = 13;
              break;
            case 13:
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, this);
    }
  }, {});
  return {
    get USER_ROLES() {
      return USER_ROLES;
    },
    get AuthorizationService() {
      return AuthorizationService;
    },
    __esModule: true
  };
});

define('common/elements/hasPermission',["../services/AuthenticationService"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  
  var AUTH_EVENTS = $__0.AUTH_EVENTS;
  function hasPermission(AuthorizationService) {
    return {link: function(scope, element, attrs) {
        if (!angular.isString(attrs.hasPermission)) {
          throw 'hasPermission value must be a string';
        }
        var value = attrs.hasPermission.trim();
        var notPermissionFlag = value[0] === '!';
        if (notPermissionFlag) {
          value = value.slice(1).trim();
        }
        function toggleVisibilityBasedOnPermission() {
          var hasPermission = AuthorizationService.isAuthorized(value);
          if (hasPermission && !notPermissionFlag || !hasPermission && notPermissionFlag) {
            (element[0].tagName === 'DIV') ? element.removeClass('ng-hide') : element.removeClass('disabled');
          } else {
            (element[0].tagName === 'DIV') ? element.addClass('ng-hide') : element.addClass('disabled');
          }
        }
        toggleVisibilityBasedOnPermission();
        scope.$on(AUTH_EVENTS.loginSuccess, toggleVisibilityBasedOnPermission);
        scope.$on(AUTH_EVENTS.notAuthenticated, toggleVisibilityBasedOnPermission);
        scope.$on(AUTH_EVENTS.logoutSuccess, toggleVisibilityBasedOnPermission);
      }};
  }
  var $__default = hasPermission;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('common/elements/Directive',[], function() {
  
  var Directive = function Directive() {
    this.link = this.link.bind(this);
  };
  ($traceurRuntime.createClass)(Directive, {link: function(scope, element, attrs) {
      this.$ = scope;
      this.element = element;
      this.attrs = attrs;
      for (var prop in this) {
        if (typeof this[prop] === 'function' && prop !== "link") {
          this.$[prop] = this[prop].bind(this);
        }
      }
    }}, {});
  var $__default = Directive;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('common/elements/ScrollOnClickDirective',["./Directive"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var Directive = $__0.default;
  var ScrollOnClickDirective = function ScrollOnClickDirective($rootScope, $timeout, $location) {
    $traceurRuntime.superConstructor($ScrollOnClickDirective).call(this);
    this.rootScope = $rootScope;
    this.timeout = $timeout;
    this.location = $location;
    this.restrict = "A";
  };
  var $ScrollOnClickDirective = ScrollOnClickDirective;
  ($traceurRuntime.createClass)(ScrollOnClickDirective, {link: function(scope, element, attrs) {
      var $__2 = this;
      $traceurRuntime.superGet(this, $ScrollOnClickDirective.prototype, "link").call(this, arguments);
      var settings = angular.extend({
        href: angular.element(),
        offset: -100,
        duration: 800,
        easing: 'easeOutCirc'
      }, attrs);
      settings.href = settings.href.replace('#', '');
      element.on('click', (function(e) {
        var scroll;
        if (settings.href) {
          scroll = element[0].getBoundingClientRect().top + Number(settings.offset);
          $__2.location.hash(settings.href);
        } else {
          scroll = element[0].getBoundingClientRect().top + Number(settings.offset);
        }
        $__2.rootScope.scrolling = true;
        e.preventDefault();
      }));
    }}, {}, Directive);
  var $__default = ScrollOnClickDirective;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('common/elements/ContenteditableDirective',["./Directive"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var Directive = $__0.default;
  var ContenteditableDirective = function ContenteditableDirective($sce) {
    $traceurRuntime.superConstructor($ContenteditableDirective).call(this);
    this.sce = $sce;
    this.restrict = 'A';
    this.require = '?ngModel';
  };
  var $ContenteditableDirective = ContenteditableDirective;
  ($traceurRuntime.createClass)(ContenteditableDirective, {link: function(scope, element, attrs, ngModel) {
      $traceurRuntime.superGet(this, $ContenteditableDirective.prototype, "link").call(this, arguments);
      if (!ngModel) {
        return ;
      }
      ngModel.$render = (function() {
        element.html(ngModel.$viewValue || '');
      });
      element.on('blur keyup change', (function() {
        scope.$evalAsync(read);
      }));
      function read() {
        var html = element.html();
        if (attrs.stripBr && html == '<br>') {
          html = '';
        }
        if (attrs.noLineBreaks) {
          html = html.replace(/<div>/g, '').replace(/<br>/g, '').replace(/<\/div>/g, '');
        }
        html = html.replace(/<br>/g, '<br/>').replace(/<col ([^>]*)>/g, '<col $1 />').replace(/<img ([^>]*)>/g, '<img $1 />').replace(/&nbsp/g, ' ');
        ngModel.$setViewValue(html);
      }
    }}, {}, Directive);
  var $__default = ContenteditableDirective;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('common/utils/AuthInterceptor',["../services/AuthenticationService"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var AUTH_EVENTS = $__0.AUTH_EVENTS;
  function AuthInterceptor($rootScope, $q, httpBuffer) {
    
    return {responseError: function(rejection) {
        if (rejection.status === 401 && !rejection.config.ignoreAuthModule) {
          var deferred = $q.defer();
          httpBuffer.append(rejection.config, deferred);
          $rootScope.$broadcast(AUTH_EVENTS.notAuthenticated, rejection);
          return deferred.promise;
        }
        if (rejection.status === 419 || rejection.status === 440) {
          $rootScope.$broadcast(AUTH_EVENTS.sessionTimeout, rejection);
        }
        if (rejection.status === 403 && !rejection.config.ignoreAuthModule) {
          var deferred2 = $q.defer();
          httpBuffer.append(rejection.config, deferred2);
          $rootScope.$broadcast(AUTH_EVENTS.notAuthorized, rejection);
          return deferred2.promise;
        }
        return $q.reject(rejection);
      }};
  }
  var $__default = AuthInterceptor;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

/* SockJS client, version 0.3.4, http://sockjs.org, MIT License

Copyright (c) 2011-2012 VMware, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// JSON2 by Douglas Crockford (minified).
var JSON;JSON||(JSON={}),function(){function str(a,b){var c,d,e,f,g=gap,h,i=b[a];i&&typeof i=="object"&&typeof i.toJSON=="function"&&(i=i.toJSON(a)),typeof rep=="function"&&(i=rep.call(b,a,i));switch(typeof i){case"string":return quote(i);case"number":return isFinite(i)?String(i):"null";case"boolean":case"null":return String(i);case"object":if(!i)return"null";gap+=indent,h=[];if(Object.prototype.toString.apply(i)==="[object Array]"){f=i.length;for(c=0;c<f;c+=1)h[c]=str(c,i)||"null";e=h.length===0?"[]":gap?"[\n"+gap+h.join(",\n"+gap)+"\n"+g+"]":"["+h.join(",")+"]",gap=g;return e}if(rep&&typeof rep=="object"){f=rep.length;for(c=0;c<f;c+=1)typeof rep[c]=="string"&&(d=rep[c],e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e))}else for(d in i)Object.prototype.hasOwnProperty.call(i,d)&&(e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e));e=h.length===0?"{}":gap?"{\n"+gap+h.join(",\n"+gap)+"\n"+g+"}":"{"+h.join(",")+"}",gap=g;return e}}function quote(a){escapable.lastIndex=0;return escapable.test(a)?'"'+a.replace(escapable,function(a){var b=meta[a];return typeof b=="string"?b:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+a+'"'}function f(a){return a<10?"0"+a:a}"use strict",typeof Date.prototype.toJSON!="function"&&(Date.prototype.toJSON=function(a){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(a){return this.valueOf()});var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;typeof JSON.stringify!="function"&&(JSON.stringify=function(a,b,c){var d;gap="",indent="";if(typeof c=="number")for(d=0;d<c;d+=1)indent+=" ";else typeof c=="string"&&(indent=c);rep=b;if(!b||typeof b=="function"||typeof b=="object"&&typeof b.length=="number")return str("",{"":a});throw new Error("JSON.stringify")}),typeof JSON.parse!="function"&&(JSON.parse=function(text,reviver){function walk(a,b){var c,d,e=a[b];if(e&&typeof e=="object")for(c in e)Object.prototype.hasOwnProperty.call(e,c)&&(d=walk(e,c),d!==undefined?e[c]=d:delete e[c]);return reviver.call(a,b,e)}var j;text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,""))){j=eval("("+text+")");return typeof reviver=="function"?walk({"":j},""):j}throw new SyntaxError("JSON.parse")})}()


//     [*] Including lib/index.js
// Public object
SockJS = (function(){
              var _document = document;
              var _window = window;
              var utils = {};


//         [*] Including lib/reventtarget.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

/* Simplified implementation of DOM2 EventTarget.
 *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget
 */
var REventTarget = function() {};
REventTarget.prototype.addEventListener = function (eventType, listener) {
    if(!this._listeners) {
         this._listeners = {};
    }
    if(!(eventType in this._listeners)) {
        this._listeners[eventType] = [];
    }
    var arr = this._listeners[eventType];
    if(utils.arrIndexOf(arr, listener) === -1) {
        arr.push(listener);
    }
    return;
};

REventTarget.prototype.removeEventListener = function (eventType, listener) {
    if(!(this._listeners && (eventType in this._listeners))) {
        return;
    }
    var arr = this._listeners[eventType];
    var idx = utils.arrIndexOf(arr, listener);
    if (idx !== -1) {
        if(arr.length > 1) {
            this._listeners[eventType] = arr.slice(0, idx).concat( arr.slice(idx+1) );
        } else {
            delete this._listeners[eventType];
        }
        return;
    }
    return;
};

REventTarget.prototype.dispatchEvent = function (event) {
    var t = event.type;
    var args = Array.prototype.slice.call(arguments, 0);
    if (this['on'+t]) {
        this['on'+t].apply(this, args);
    }
    if (this._listeners && t in this._listeners) {
        for(var i=0; i < this._listeners[t].length; i++) {
            this._listeners[t][i].apply(this, args);
        }
    }
};
//         [*] End of lib/reventtarget.js


//         [*] Including lib/simpleevent.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

var SimpleEvent = function(type, obj) {
    this.type = type;
    if (typeof obj !== 'undefined') {
        for(var k in obj) {
            if (!obj.hasOwnProperty(k)) continue;
            this[k] = obj[k];
        }
    }
};

SimpleEvent.prototype.toString = function() {
    var r = [];
    for(var k in this) {
        if (!this.hasOwnProperty(k)) continue;
        var v = this[k];
        if (typeof v === 'function') v = '[function]';
        r.push(k + '=' + v);
    }
    return 'SimpleEvent(' + r.join(', ') + ')';
};
//         [*] End of lib/simpleevent.js


//         [*] Including lib/eventemitter.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

var EventEmitter = function(events) {
    var that = this;
    that._events = events || [];
    that._listeners = {};
};
EventEmitter.prototype.emit = function(type) {
    var that = this;
    that._verifyType(type);
    if (that._nuked) return;

    var args = Array.prototype.slice.call(arguments, 1);
    if (that['on'+type]) {
        that['on'+type].apply(that, args);
    }
    if (type in that._listeners) {
        for(var i = 0; i < that._listeners[type].length; i++) {
            that._listeners[type][i].apply(that, args);
        }
    }
};

EventEmitter.prototype.on = function(type, callback) {
    var that = this;
    that._verifyType(type);
    if (that._nuked) return;

    if (!(type in that._listeners)) {
        that._listeners[type] = [];
    }
    that._listeners[type].push(callback);
};

EventEmitter.prototype._verifyType = function(type) {
    var that = this;
    if (utils.arrIndexOf(that._events, type) === -1) {
        utils.log('Event ' + JSON.stringify(type) +
                  ' not listed ' + JSON.stringify(that._events) +
                  ' in ' + that);
    }
};

EventEmitter.prototype.nuke = function() {
    var that = this;
    that._nuked = true;
    for(var i=0; i<that._events.length; i++) {
        delete that[that._events[i]];
    }
    that._listeners = {};
};
//         [*] End of lib/eventemitter.js


//         [*] Including lib/utils.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

var random_string_chars = 'abcdefghijklmnopqrstuvwxyz0123456789_';
utils.random_string = function(length, max) {
    max = max || random_string_chars.length;
    var i, ret = [];
    for(i=0; i < length; i++) {
        ret.push( random_string_chars.substr(Math.floor(Math.random() * max),1) );
    }
    return ret.join('');
};
utils.random_number = function(max) {
    return Math.floor(Math.random() * max);
};
utils.random_number_string = function(max) {
    var t = (''+(max - 1)).length;
    var p = Array(t+1).join('0');
    return (p + utils.random_number(max)).slice(-t);
};

// Assuming that url looks like: http://asdasd:111/asd
utils.getOrigin = function(url) {
    url += '/';
    var parts = url.split('/').slice(0, 3);
    return parts.join('/');
};

utils.isSameOriginUrl = function(url_a, url_b) {
    // location.origin would do, but it's not always available.
    if (!url_b) url_b = _window.location.href;

    return (url_a.split('/').slice(0,3).join('/')
                ===
            url_b.split('/').slice(0,3).join('/'));
};

utils.getParentDomain = function(url) {
    // ipv4 ip address
    if (/^[0-9.]*$/.test(url)) return url;
    // ipv6 ip address
    if (/^\[/.test(url)) return url;
    // no dots
    if (!(/[.]/.test(url))) return url;

    var parts = url.split('.').slice(1);
    return parts.join('.');
};

utils.objectExtend = function(dst, src) {
    for(var k in src) {
        if (src.hasOwnProperty(k)) {
            dst[k] = src[k];
        }
    }
    return dst;
};

var WPrefix = '_jp';

utils.polluteGlobalNamespace = function() {
    if (!(WPrefix in _window)) {
        _window[WPrefix] = {};
    }
};

utils.closeFrame = function (code, reason) {
    return 'c'+JSON.stringify([code, reason]);
};

utils.userSetCode = function (code) {
    return code === 1000 || (code >= 3000 && code <= 4999);
};

// See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/
// and RFC 2988.
utils.countRTO = function (rtt) {
    var rto;
    if (rtt > 100) {
        rto = 3 * rtt; // rto > 300msec
    } else {
        rto = rtt + 200; // 200msec < rto <= 300msec
    }
    return rto;
}

utils.log = function() {
    if (_window.console && console.log && console.log.apply) {
        console.log.apply(console, arguments);
    }
};

utils.bind = function(fun, that) {
    if (fun.bind) {
        return fun.bind(that);
    } else {
        return function() {
            return fun.apply(that, arguments);
        };
    }
};

utils.flatUrl = function(url) {
    return url.indexOf('?') === -1 && url.indexOf('#') === -1;
};

utils.amendUrl = function(url) {
    var dl = _document.location;
    if (!url) {
        throw new Error('Wrong url for SockJS');
    }
    if (!utils.flatUrl(url)) {
        throw new Error('Only basic urls are supported in SockJS');
    }

    //  '//abc' --> 'http://abc'
    if (url.indexOf('//') === 0) {
        url = dl.protocol + url;
    }
    // '/abc' --> 'http://localhost:80/abc'
    if (url.indexOf('/') === 0) {
        url = dl.protocol + '//' + dl.host + url;
    }
    // strip trailing slashes
    url = url.replace(/[/]+$/,'');
    return url;
};

// IE doesn't support [].indexOf.
utils.arrIndexOf = function(arr, obj){
    for(var i=0; i < arr.length; i++){
        if(arr[i] === obj){
            return i;
        }
    }
    return -1;
};

utils.arrSkip = function(arr, obj) {
    var idx = utils.arrIndexOf(arr, obj);
    if (idx === -1) {
        return arr.slice();
    } else {
        var dst = arr.slice(0, idx);
        return dst.concat(arr.slice(idx+1));
    }
};

// Via: https://gist.github.com/1133122/2121c601c5549155483f50be3da5305e83b8c5df
utils.isArray = Array.isArray || function(value) {
    return {}.toString.call(value).indexOf('Array') >= 0
};

utils.delay = function(t, fun) {
    if(typeof t === 'function') {
        fun = t;
        t = 0;
    }
    return setTimeout(fun, t);
};


// Chars worth escaping, as defined by Douglas Crockford:
//   https://github.com/douglascrockford/JSON-js/blob/47a9882cddeb1e8529e07af9736218075372b8ac/json2.js#L196
var json_escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    json_lookup = {
"\u0000":"\\u0000","\u0001":"\\u0001","\u0002":"\\u0002","\u0003":"\\u0003",
"\u0004":"\\u0004","\u0005":"\\u0005","\u0006":"\\u0006","\u0007":"\\u0007",
"\b":"\\b","\t":"\\t","\n":"\\n","\u000b":"\\u000b","\f":"\\f","\r":"\\r",
"\u000e":"\\u000e","\u000f":"\\u000f","\u0010":"\\u0010","\u0011":"\\u0011",
"\u0012":"\\u0012","\u0013":"\\u0013","\u0014":"\\u0014","\u0015":"\\u0015",
"\u0016":"\\u0016","\u0017":"\\u0017","\u0018":"\\u0018","\u0019":"\\u0019",
"\u001a":"\\u001a","\u001b":"\\u001b","\u001c":"\\u001c","\u001d":"\\u001d",
"\u001e":"\\u001e","\u001f":"\\u001f","\"":"\\\"","\\":"\\\\",
"\u007f":"\\u007f","\u0080":"\\u0080","\u0081":"\\u0081","\u0082":"\\u0082",
"\u0083":"\\u0083","\u0084":"\\u0084","\u0085":"\\u0085","\u0086":"\\u0086",
"\u0087":"\\u0087","\u0088":"\\u0088","\u0089":"\\u0089","\u008a":"\\u008a",
"\u008b":"\\u008b","\u008c":"\\u008c","\u008d":"\\u008d","\u008e":"\\u008e",
"\u008f":"\\u008f","\u0090":"\\u0090","\u0091":"\\u0091","\u0092":"\\u0092",
"\u0093":"\\u0093","\u0094":"\\u0094","\u0095":"\\u0095","\u0096":"\\u0096",
"\u0097":"\\u0097","\u0098":"\\u0098","\u0099":"\\u0099","\u009a":"\\u009a",
"\u009b":"\\u009b","\u009c":"\\u009c","\u009d":"\\u009d","\u009e":"\\u009e",
"\u009f":"\\u009f","\u00ad":"\\u00ad","\u0600":"\\u0600","\u0601":"\\u0601",
"\u0602":"\\u0602","\u0603":"\\u0603","\u0604":"\\u0604","\u070f":"\\u070f",
"\u17b4":"\\u17b4","\u17b5":"\\u17b5","\u200c":"\\u200c","\u200d":"\\u200d",
"\u200e":"\\u200e","\u200f":"\\u200f","\u2028":"\\u2028","\u2029":"\\u2029",
"\u202a":"\\u202a","\u202b":"\\u202b","\u202c":"\\u202c","\u202d":"\\u202d",
"\u202e":"\\u202e","\u202f":"\\u202f","\u2060":"\\u2060","\u2061":"\\u2061",
"\u2062":"\\u2062","\u2063":"\\u2063","\u2064":"\\u2064","\u2065":"\\u2065",
"\u2066":"\\u2066","\u2067":"\\u2067","\u2068":"\\u2068","\u2069":"\\u2069",
"\u206a":"\\u206a","\u206b":"\\u206b","\u206c":"\\u206c","\u206d":"\\u206d",
"\u206e":"\\u206e","\u206f":"\\u206f","\ufeff":"\\ufeff","\ufff0":"\\ufff0",
"\ufff1":"\\ufff1","\ufff2":"\\ufff2","\ufff3":"\\ufff3","\ufff4":"\\ufff4",
"\ufff5":"\\ufff5","\ufff6":"\\ufff6","\ufff7":"\\ufff7","\ufff8":"\\ufff8",
"\ufff9":"\\ufff9","\ufffa":"\\ufffa","\ufffb":"\\ufffb","\ufffc":"\\ufffc",
"\ufffd":"\\ufffd","\ufffe":"\\ufffe","\uffff":"\\uffff"};

// Some extra characters that Chrome gets wrong, and substitutes with
// something else on the wire.
var extra_escapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,
    extra_lookup;

// JSON Quote string. Use native implementation when possible.
var JSONQuote = (JSON && JSON.stringify) || function(string) {
    json_escapable.lastIndex = 0;
    if (json_escapable.test(string)) {
        string = string.replace(json_escapable, function(a) {
            return json_lookup[a];
        });
    }
    return '"' + string + '"';
};

// This may be quite slow, so let's delay until user actually uses bad
// characters.
var unroll_lookup = function(escapable) {
    var i;
    var unrolled = {}
    var c = []
    for(i=0; i<65536; i++) {
        c.push( String.fromCharCode(i) );
    }
    escapable.lastIndex = 0;
    c.join('').replace(escapable, function (a) {
        unrolled[ a ] = '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        return '';
    });
    escapable.lastIndex = 0;
    return unrolled;
};

// Quote string, also taking care of unicode characters that browsers
// often break. Especially, take care of unicode surrogates:
//    http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates
utils.quote = function(string) {
    var quoted = JSONQuote(string);

    // In most cases this should be very fast and good enough.
    extra_escapable.lastIndex = 0;
    if(!extra_escapable.test(quoted)) {
        return quoted;
    }

    if(!extra_lookup) extra_lookup = unroll_lookup(extra_escapable);

    return quoted.replace(extra_escapable, function(a) {
        return extra_lookup[a];
    });
}

var _all_protocols = ['websocket',
                      'xdr-streaming',
                      'xhr-streaming',
                      'iframe-eventsource',
                      'iframe-htmlfile',
                      'xdr-polling',
                      'xhr-polling',
                      'iframe-xhr-polling',
                      'jsonp-polling'];

utils.probeProtocols = function() {
    var probed = {};
    for(var i=0; i<_all_protocols.length; i++) {
        var protocol = _all_protocols[i];
        // User can have a typo in protocol name.
        probed[protocol] = SockJS[protocol] &&
                           SockJS[protocol].enabled();
    }
    return probed;
};

utils.detectProtocols = function(probed, protocols_whitelist, info) {
    var pe = {},
        protocols = [];
    if (!protocols_whitelist) protocols_whitelist = _all_protocols;
    for(var i=0; i<protocols_whitelist.length; i++) {
        var protocol = protocols_whitelist[i];
        pe[protocol] = probed[protocol];
    }
    var maybe_push = function(protos) {
        var proto = protos.shift();
        if (pe[proto]) {
            protocols.push(proto);
        } else {
            if (protos.length > 0) {
                maybe_push(protos);
            }
        }
    }

    // 1. Websocket
    if (info.websocket !== false) {
        maybe_push(['websocket']);
    }

    // 2. Streaming
    if (pe['xhr-streaming'] && !info.null_origin) {
        protocols.push('xhr-streaming');
    } else {
        if (pe['xdr-streaming'] && !info.cookie_needed && !info.null_origin) {
            protocols.push('xdr-streaming');
        } else {
            maybe_push(['iframe-eventsource',
                        'iframe-htmlfile']);
        }
    }

    // 3. Polling
    if (pe['xhr-polling'] && !info.null_origin) {
        protocols.push('xhr-polling');
    } else {
        if (pe['xdr-polling'] && !info.cookie_needed && !info.null_origin) {
            protocols.push('xdr-polling');
        } else {
            maybe_push(['iframe-xhr-polling',
                        'jsonp-polling']);
        }
    }
    return protocols;
}
//         [*] End of lib/utils.js


//         [*] Including lib/dom.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

// May be used by htmlfile jsonp and transports.
var MPrefix = '_sockjs_global';
utils.createHook = function() {
    var window_id = 'a' + utils.random_string(8);
    if (!(MPrefix in _window)) {
        var map = {};
        _window[MPrefix] = function(window_id) {
            if (!(window_id in map)) {
                map[window_id] = {
                    id: window_id,
                    del: function() {delete map[window_id];}
                };
            }
            return map[window_id];
        }
    }
    return _window[MPrefix](window_id);
};



utils.attachMessage = function(listener) {
    utils.attachEvent('message', listener);
};
utils.attachEvent = function(event, listener) {
    if (typeof _window.addEventListener !== 'undefined') {
        _window.addEventListener(event, listener, false);
    } else {
        // IE quirks.
        // According to: http://stevesouders.com/misc/test-postmessage.php
        // the message gets delivered only to 'document', not 'window'.
        _document.attachEvent("on" + event, listener);
        // I get 'window' for ie8.
        _window.attachEvent("on" + event, listener);
    }
};

utils.detachMessage = function(listener) {
    utils.detachEvent('message', listener);
};
utils.detachEvent = function(event, listener) {
    if (typeof _window.addEventListener !== 'undefined') {
        _window.removeEventListener(event, listener, false);
    } else {
        _document.detachEvent("on" + event, listener);
        _window.detachEvent("on" + event, listener);
    }
};


var on_unload = {};
// Things registered after beforeunload are to be called immediately.
var after_unload = false;

var trigger_unload_callbacks = function() {
    for(var ref in on_unload) {
        on_unload[ref]();
        delete on_unload[ref];
    };
};

var unload_triggered = function() {
    if(after_unload) return;
    after_unload = true;
    trigger_unload_callbacks();
};

// 'unload' alone is not reliable in opera within an iframe, but we
// can't use `beforeunload` as IE fires it on javascript: links.
utils.attachEvent('unload', unload_triggered);

utils.unload_add = function(listener) {
    var ref = utils.random_string(8);
    on_unload[ref] = listener;
    if (after_unload) {
        utils.delay(trigger_unload_callbacks);
    }
    return ref;
};
utils.unload_del = function(ref) {
    if (ref in on_unload)
        delete on_unload[ref];
};


utils.createIframe = function (iframe_url, error_callback) {
    var iframe = _document.createElement('iframe');
    var tref, unload_ref;
    var unattach = function() {
        clearTimeout(tref);
        // Explorer had problems with that.
        try {iframe.onload = null;} catch (x) {}
        iframe.onerror = null;
    };
    var cleanup = function() {
        if (iframe) {
            unattach();
            // This timeout makes chrome fire onbeforeunload event
            // within iframe. Without the timeout it goes straight to
            // onunload.
            setTimeout(function() {
                if(iframe) {
                    iframe.parentNode.removeChild(iframe);
                }
                iframe = null;
            }, 0);
            utils.unload_del(unload_ref);
        }
    };
    var onerror = function(r) {
        if (iframe) {
            cleanup();
            error_callback(r);
        }
    };
    var post = function(msg, origin) {
        try {
            // When the iframe is not loaded, IE raises an exception
            // on 'contentWindow'.
            if (iframe && iframe.contentWindow) {
                iframe.contentWindow.postMessage(msg, origin);
            }
        } catch (x) {};
    };

    iframe.src = iframe_url;
    iframe.style.display = 'none';
    iframe.style.position = 'absolute';
    iframe.onerror = function(){onerror('onerror');};
    iframe.onload = function() {
        // `onload` is triggered before scripts on the iframe are
        // executed. Give it few seconds to actually load stuff.
        clearTimeout(tref);
        tref = setTimeout(function(){onerror('onload timeout');}, 2000);
    };
    _document.body.appendChild(iframe);
    tref = setTimeout(function(){onerror('timeout');}, 15000);
    unload_ref = utils.unload_add(cleanup);
    return {
        post: post,
        cleanup: cleanup,
        loaded: unattach
    };
};

utils.createHtmlfile = function (iframe_url, error_callback) {
    var doc = new ActiveXObject('htmlfile');
    var tref, unload_ref;
    var iframe;
    var unattach = function() {
        clearTimeout(tref);
    };
    var cleanup = function() {
        if (doc) {
            unattach();
            utils.unload_del(unload_ref);
            iframe.parentNode.removeChild(iframe);
            iframe = doc = null;
            CollectGarbage();
        }
    };
    var onerror = function(r)  {
        if (doc) {
            cleanup();
            error_callback(r);
        }
    };
    var post = function(msg, origin) {
        try {
            // When the iframe is not loaded, IE raises an exception
            // on 'contentWindow'.
            if (iframe && iframe.contentWindow) {
                iframe.contentWindow.postMessage(msg, origin);
            }
        } catch (x) {};
    };

    doc.open();
    doc.write('<html><s' + 'cript>' +
              'document.domain="' + document.domain + '";' +
              '</s' + 'cript></html>');
    doc.close();
    doc.parentWindow[WPrefix] = _window[WPrefix];
    var c = doc.createElement('div');
    doc.body.appendChild(c);
    iframe = doc.createElement('iframe');
    c.appendChild(iframe);
    iframe.src = iframe_url;
    tref = setTimeout(function(){onerror('timeout');}, 15000);
    unload_ref = utils.unload_add(cleanup);
    return {
        post: post,
        cleanup: cleanup,
        loaded: unattach
    };
};
//         [*] End of lib/dom.js


//         [*] Including lib/dom2.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

var AbstractXHRObject = function(){};
AbstractXHRObject.prototype = new EventEmitter(['chunk', 'finish']);

AbstractXHRObject.prototype._start = function(method, url, payload, opts) {
    var that = this;

    try {
        that.xhr = new XMLHttpRequest();
    } catch(x) {};

    if (!that.xhr) {
        try {
            that.xhr = new _window.ActiveXObject('Microsoft.XMLHTTP');
        } catch(x) {};
    }
    if (_window.ActiveXObject || _window.XDomainRequest) {
        // IE8 caches even POSTs
        url += ((url.indexOf('?') === -1) ? '?' : '&') + 't='+(+new Date);
    }

    // Explorer tends to keep connection open, even after the
    // tab gets closed: http://bugs.jquery.com/ticket/5280
    that.unload_ref = utils.unload_add(function(){that._cleanup(true);});
    try {
        that.xhr.open(method, url, true);
    } catch(e) {
        // IE raises an exception on wrong port.
        that.emit('finish', 0, '');
        that._cleanup();
        return;
    };

    if (!opts || !opts.no_credentials) {
        // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :
        // "This never affects same-site requests."
        that.xhr.withCredentials = 'true';
    }
    if (opts && opts.headers) {
        for(var key in opts.headers) {
            that.xhr.setRequestHeader(key, opts.headers[key]);
        }
    }

    that.xhr.onreadystatechange = function() {
        if (that.xhr) {
            var x = that.xhr;
            switch (x.readyState) {
            case 3:
                // IE doesn't like peeking into responseText or status
                // on Microsoft.XMLHTTP and readystate=3
                try {
                    var status = x.status;
                    var text = x.responseText;
                } catch (x) {};
                // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
                if (status === 1223) status = 204;

                // IE does return readystate == 3 for 404 answers.
                if (text && text.length > 0) {
                    that.emit('chunk', status, text);
                }
                break;
            case 4:
                var status = x.status;
                // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
                if (status === 1223) status = 204;

                that.emit('finish', status, x.responseText);
                that._cleanup(false);
                break;
            }
        }
    };
    that.xhr.send(payload);
};

AbstractXHRObject.prototype._cleanup = function(abort) {
    var that = this;
    if (!that.xhr) return;
    utils.unload_del(that.unload_ref);

    // IE needs this field to be a function
    that.xhr.onreadystatechange = function(){};

    if (abort) {
        try {
            that.xhr.abort();
        } catch(x) {};
    }
    that.unload_ref = that.xhr = null;
};

AbstractXHRObject.prototype.close = function() {
    var that = this;
    that.nuke();
    that._cleanup(true);
};

var XHRCorsObject = utils.XHRCorsObject = function() {
    var that = this, args = arguments;
    utils.delay(function(){that._start.apply(that, args);});
};
XHRCorsObject.prototype = new AbstractXHRObject();

var XHRLocalObject = utils.XHRLocalObject = function(method, url, payload) {
    var that = this;
    utils.delay(function(){
        that._start(method, url, payload, {
            no_credentials: true
        });
    });
};
XHRLocalObject.prototype = new AbstractXHRObject();



// References:
//   http://ajaxian.com/archives/100-line-ajax-wrapper
//   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx
var XDRObject = utils.XDRObject = function(method, url, payload) {
    var that = this;
    utils.delay(function(){that._start(method, url, payload);});
};
XDRObject.prototype = new EventEmitter(['chunk', 'finish']);
XDRObject.prototype._start = function(method, url, payload) {
    var that = this;
    var xdr = new XDomainRequest();
    // IE caches even POSTs
    url += ((url.indexOf('?') === -1) ? '?' : '&') + 't='+(+new Date);

    var onerror = xdr.ontimeout = xdr.onerror = function() {
        that.emit('finish', 0, '');
        that._cleanup(false);
    };
    xdr.onprogress = function() {
        that.emit('chunk', 200, xdr.responseText);
    };
    xdr.onload = function() {
        that.emit('finish', 200, xdr.responseText);
        that._cleanup(false);
    };
    that.xdr = xdr;
    that.unload_ref = utils.unload_add(function(){that._cleanup(true);});
    try {
        // Fails with AccessDenied if port number is bogus
        that.xdr.open(method, url);
        that.xdr.send(payload);
    } catch(x) {
        onerror();
    }
};

XDRObject.prototype._cleanup = function(abort) {
    var that = this;
    if (!that.xdr) return;
    utils.unload_del(that.unload_ref);

    that.xdr.ontimeout = that.xdr.onerror = that.xdr.onprogress =
        that.xdr.onload = null;
    if (abort) {
        try {
            that.xdr.abort();
        } catch(x) {};
    }
    that.unload_ref = that.xdr = null;
};

XDRObject.prototype.close = function() {
    var that = this;
    that.nuke();
    that._cleanup(true);
};

// 1. Is natively via XHR
// 2. Is natively via XDR
// 3. Nope, but postMessage is there so it should work via the Iframe.
// 4. Nope, sorry.
utils.isXHRCorsCapable = function() {
    if (_window.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest()) {
        return 1;
    }
    // XDomainRequest doesn't work if page is served from file://
    if (_window.XDomainRequest && _document.domain) {
        return 2;
    }
    if (IframeTransport.enabled()) {
        return 3;
    }
    return 4;
};
//         [*] End of lib/dom2.js


//         [*] Including lib/sockjs.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

var SockJS = function(url, dep_protocols_whitelist, options) {
    if (this === _window) {
        // makes `new` optional
        return new SockJS(url, dep_protocols_whitelist, options);
    }
    
    var that = this, protocols_whitelist;
    that._options = {devel: false, debug: false, protocols_whitelist: [],
                     info: undefined, rtt: undefined};
    if (options) {
        utils.objectExtend(that._options, options);
    }
    that._base_url = utils.amendUrl(url);
    that._server = that._options.server || utils.random_number_string(1000);
    if (that._options.protocols_whitelist &&
        that._options.protocols_whitelist.length) {
        protocols_whitelist = that._options.protocols_whitelist;
    } else {
        // Deprecated API
        if (typeof dep_protocols_whitelist === 'string' &&
            dep_protocols_whitelist.length > 0) {
            protocols_whitelist = [dep_protocols_whitelist];
        } else if (utils.isArray(dep_protocols_whitelist)) {
            protocols_whitelist = dep_protocols_whitelist
        } else {
            protocols_whitelist = null;
        }
        if (protocols_whitelist) {
            that._debug('Deprecated API: Use "protocols_whitelist" option ' +
                        'instead of supplying protocol list as a second ' +
                        'parameter to SockJS constructor.');
        }
    }
    that._protocols = [];
    that.protocol = null;
    that.readyState = SockJS.CONNECTING;
    that._ir = createInfoReceiver(that._base_url);
    that._ir.onfinish = function(info, rtt) {
        that._ir = null;
        if (info) {
            if (that._options.info) {
                // Override if user supplies the option
                info = utils.objectExtend(info, that._options.info);
            }
            if (that._options.rtt) {
                rtt = that._options.rtt;
            }
            that._applyInfo(info, rtt, protocols_whitelist);
            that._didClose();
        } else {
            that._didClose(1002, 'Can\'t connect to server', true);
        }
    };
};
// Inheritance
SockJS.prototype = new REventTarget();

SockJS.version = "0.3.4";

SockJS.CONNECTING = 0;
SockJS.OPEN = 1;
SockJS.CLOSING = 2;
SockJS.CLOSED = 3;

SockJS.prototype._debug = function() {
    if (this._options.debug)
        utils.log.apply(utils, arguments);
};

SockJS.prototype._dispatchOpen = function() {
    var that = this;
    if (that.readyState === SockJS.CONNECTING) {
        if (that._transport_tref) {
            clearTimeout(that._transport_tref);
            that._transport_tref = null;
        }
        that.readyState = SockJS.OPEN;
        that.dispatchEvent(new SimpleEvent("open"));
    } else {
        // The server might have been restarted, and lost track of our
        // connection.
        that._didClose(1006, "Server lost session");
    }
};

SockJS.prototype._dispatchMessage = function(data) {
    var that = this;
    if (that.readyState !== SockJS.OPEN)
            return;
    that.dispatchEvent(new SimpleEvent("message", {data: data}));
};

SockJS.prototype._dispatchHeartbeat = function(data) {
    var that = this;
    if (that.readyState !== SockJS.OPEN)
        return;
    that.dispatchEvent(new SimpleEvent('heartbeat', {}));
};

SockJS.prototype._didClose = function(code, reason, force) {
    var that = this;
    if (that.readyState !== SockJS.CONNECTING &&
        that.readyState !== SockJS.OPEN &&
        that.readyState !== SockJS.CLOSING)
            throw new Error('INVALID_STATE_ERR');
    if (that._ir) {
        that._ir.nuke();
        that._ir = null;
    }

    if (that._transport) {
        that._transport.doCleanup();
        that._transport = null;
    }

    var close_event = new SimpleEvent("close", {
        code: code,
        reason: reason,
        wasClean: utils.userSetCode(code)});

    if (!utils.userSetCode(code) &&
        that.readyState === SockJS.CONNECTING && !force) {
        if (that._try_next_protocol(close_event)) {
            return;
        }
        close_event = new SimpleEvent("close", {code: 2000,
                                                reason: "All transports failed",
                                                wasClean: false,
                                                last_event: close_event});
    }
    that.readyState = SockJS.CLOSED;

    utils.delay(function() {
                   that.dispatchEvent(close_event);
                });
};

SockJS.prototype._didMessage = function(data) {
    var that = this;
    var type = data.slice(0, 1);
    switch(type) {
    case 'o':
        that._dispatchOpen();
        break;
    case 'a':
        var payload = JSON.parse(data.slice(1) || '[]');
        for(var i=0; i < payload.length; i++){
            that._dispatchMessage(payload[i]);
        }
        break;
    case 'm':
        var payload = JSON.parse(data.slice(1) || 'null');
        that._dispatchMessage(payload);
        break;
    case 'c':
        var payload = JSON.parse(data.slice(1) || '[]');
        that._didClose(payload[0], payload[1]);
        break;
    case 'h':
        that._dispatchHeartbeat();
        break;
    }
};

SockJS.prototype._try_next_protocol = function(close_event) {
    var that = this;
    if (that.protocol) {
        that._debug('Closed transport:', that.protocol, ''+close_event);
        that.protocol = null;
    }
    if (that._transport_tref) {
        clearTimeout(that._transport_tref);
        that._transport_tref = null;
    }

    while(1) {
        var protocol = that.protocol = that._protocols.shift();
        if (!protocol) {
            return false;
        }
        // Some protocols require access to `body`, what if were in
        // the `head`?
        if (SockJS[protocol] &&
            SockJS[protocol].need_body === true &&
            (!_document.body ||
             (typeof _document.readyState !== 'undefined'
              && _document.readyState !== 'complete'))) {
            that._protocols.unshift(protocol);
            that.protocol = 'waiting-for-load';
            utils.attachEvent('load', function(){
                that._try_next_protocol();
            });
            return true;
        }

        if (!SockJS[protocol] ||
              !SockJS[protocol].enabled(that._options)) {
            that._debug('Skipping transport:', protocol);
        } else {
            var roundTrips = SockJS[protocol].roundTrips || 1;
            var to = ((that._options.rto || 0) * roundTrips) || 5000;
            that._transport_tref = utils.delay(to, function() {
                if (that.readyState === SockJS.CONNECTING) {
                    // I can't understand how it is possible to run
                    // this timer, when the state is CLOSED, but
                    // apparently in IE everythin is possible.
                    that._didClose(2007, "Transport timeouted");
                }
            });

            var connid = utils.random_string(8);
            var trans_url = that._base_url + '/' + that._server + '/' + connid;
            that._debug('Opening transport:', protocol, ' url:'+trans_url,
                        ' RTO:'+that._options.rto);
            that._transport = new SockJS[protocol](that, trans_url,
                                                   that._base_url);
            return true;
        }
    }
};

SockJS.prototype.close = function(code, reason) {
    var that = this;
    if (code && !utils.userSetCode(code))
        throw new Error("INVALID_ACCESS_ERR");
    if(that.readyState !== SockJS.CONNECTING &&
       that.readyState !== SockJS.OPEN) {
        return false;
    }
    that.readyState = SockJS.CLOSING;
    that._didClose(code || 1000, reason || "Normal closure");
    return true;
};

SockJS.prototype.send = function(data) {
    var that = this;
    if (that.readyState === SockJS.CONNECTING)
        throw new Error('INVALID_STATE_ERR');
    if (that.readyState === SockJS.OPEN) {
        that._transport.doSend(utils.quote('' + data));
    }
    return true;
};

SockJS.prototype._applyInfo = function(info, rtt, protocols_whitelist) {
    var that = this;
    that._options.info = info;
    that._options.rtt = rtt;
    that._options.rto = utils.countRTO(rtt);
    that._options.info.null_origin = !_document.domain;
    var probed = utils.probeProtocols();
    that._protocols = utils.detectProtocols(probed, protocols_whitelist, info);
};
//         [*] End of lib/sockjs.js


//         [*] Including lib/trans-websocket.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

var WebSocketTransport = SockJS.websocket = function(ri, trans_url) {
    var that = this;
    var url = trans_url + '/websocket';
    if (url.slice(0, 5) === 'https') {
        url = 'wss' + url.slice(5);
    } else {
        url = 'ws' + url.slice(4);
    }
    that.ri = ri;
    that.url = url;
    var Constructor = _window.WebSocket || _window.MozWebSocket;

    that.ws = new Constructor(that.url);
    that.ws.onmessage = function(e) {
        that.ri._didMessage(e.data);
    };
    // Firefox has an interesting bug. If a websocket connection is
    // created after onunload, it stays alive even when user
    // navigates away from the page. In such situation let's lie -
    // let's not open the ws connection at all. See:
    // https://github.com/sockjs/sockjs-client/issues/28
    // https://bugzilla.mozilla.org/show_bug.cgi?id=696085
    that.unload_ref = utils.unload_add(function(){that.ws.close()});
    that.ws.onclose = function() {
        that.ri._didMessage(utils.closeFrame(1006, "WebSocket connection broken"));
    };
};

WebSocketTransport.prototype.doSend = function(data) {
    this.ws.send('[' + data + ']');
};

WebSocketTransport.prototype.doCleanup = function() {
    var that = this;
    var ws = that.ws;
    if (ws) {
        ws.onmessage = ws.onclose = null;
        ws.close();
        utils.unload_del(that.unload_ref);
        that.unload_ref = that.ri = that.ws = null;
    }
};

WebSocketTransport.enabled = function() {
    return !!(_window.WebSocket || _window.MozWebSocket);
};

// In theory, ws should require 1 round trip. But in chrome, this is
// not very stable over SSL. Most likely a ws connection requires a
// separate SSL connection, in which case 2 round trips are an
// absolute minumum.
WebSocketTransport.roundTrips = 2;
//         [*] End of lib/trans-websocket.js


//         [*] Including lib/trans-sender.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

var BufferedSender = function() {};
BufferedSender.prototype.send_constructor = function(sender) {
    var that = this;
    that.send_buffer = [];
    that.sender = sender;
};
BufferedSender.prototype.doSend = function(message) {
    var that = this;
    that.send_buffer.push(message);
    if (!that.send_stop) {
        that.send_schedule();
    }
};

// For polling transports in a situation when in the message callback,
// new message is being send. If the sending connection was started
// before receiving one, it is possible to saturate the network and
// timeout due to the lack of receiving socket. To avoid that we delay
// sending messages by some small time, in order to let receiving
// connection be started beforehand. This is only a halfmeasure and
// does not fix the big problem, but it does make the tests go more
// stable on slow networks.
BufferedSender.prototype.send_schedule_wait = function() {
    var that = this;
    var tref;
    that.send_stop = function() {
        that.send_stop = null;
        clearTimeout(tref);
    };
    tref = utils.delay(25, function() {
        that.send_stop = null;
        that.send_schedule();
    });
};

BufferedSender.prototype.send_schedule = function() {
    var that = this;
    if (that.send_buffer.length > 0) {
        var payload = '[' + that.send_buffer.join(',') + ']';
        that.send_stop = that.sender(that.trans_url, payload, function(success, abort_reason) {
            that.send_stop = null;
            if (success === false) {
                that.ri._didClose(1006, 'Sending error ' + abort_reason);
            } else {
                that.send_schedule_wait();
            }
        });
        that.send_buffer = [];
    }
};

BufferedSender.prototype.send_destructor = function() {
    var that = this;
    if (that._send_stop) {
        that._send_stop();
    }
    that._send_stop = null;
};

var jsonPGenericSender = function(url, payload, callback) {
    var that = this;

    if (!('_send_form' in that)) {
        var form = that._send_form = _document.createElement('form');
        var area = that._send_area = _document.createElement('textarea');
        area.name = 'd';
        form.style.display = 'none';
        form.style.position = 'absolute';
        form.method = 'POST';
        form.enctype = 'application/x-www-form-urlencoded';
        form.acceptCharset = "UTF-8";
        form.appendChild(area);
        _document.body.appendChild(form);
    }
    var form = that._send_form;
    var area = that._send_area;
    var id = 'a' + utils.random_string(8);
    form.target = id;
    form.action = url + '/jsonp_send?i=' + id;

    var iframe;
    try {
        // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
        iframe = _document.createElement('<iframe name="'+ id +'">');
    } catch(x) {
        iframe = _document.createElement('iframe');
        iframe.name = id;
    }
    iframe.id = id;
    form.appendChild(iframe);
    iframe.style.display = 'none';

    try {
        area.value = payload;
    } catch(e) {
        utils.log('Your browser is seriously broken. Go home! ' + e.message);
    }
    form.submit();

    var completed = function(e) {
        if (!iframe.onerror) return;
        iframe.onreadystatechange = iframe.onerror = iframe.onload = null;
        // Opera mini doesn't like if we GC iframe
        // immediately, thus this timeout.
        utils.delay(500, function() {
                       iframe.parentNode.removeChild(iframe);
                       iframe = null;
                   });
        area.value = '';
        // It is not possible to detect if the iframe succeeded or
        // failed to submit our form.
        callback(true);
    };
    iframe.onerror = iframe.onload = completed;
    iframe.onreadystatechange = function(e) {
        if (iframe.readyState == 'complete') completed();
    };
    return completed;
};

var createAjaxSender = function(AjaxObject) {
    return function(url, payload, callback) {
        var xo = new AjaxObject('POST', url + '/xhr_send', payload);
        xo.onfinish = function(status, text) {
            callback(status === 200 || status === 204,
                     'http status ' + status);
        };
        return function(abort_reason) {
            callback(false, abort_reason);
        };
    };
};
//         [*] End of lib/trans-sender.js


//         [*] Including lib/trans-jsonp-receiver.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

// Parts derived from Socket.io:
//    https://github.com/LearnBoost/socket.io/blob/0.6.17/lib/socket.io/transports/jsonp-polling.js
// and jQuery-JSONP:
//    https://code.google.com/p/jquery-jsonp/source/browse/trunk/core/jquery.jsonp.js
var jsonPGenericReceiver = function(url, callback) {
    var tref;
    var script = _document.createElement('script');
    var script2;  // Opera synchronous load trick.
    var close_script = function(frame) {
        if (script2) {
            script2.parentNode.removeChild(script2);
            script2 = null;
        }
        if (script) {
            clearTimeout(tref);
            // Unfortunately, you can't really abort script loading of
            // the script.
            script.parentNode.removeChild(script);
            script.onreadystatechange = script.onerror =
                script.onload = script.onclick = null;
            script = null;
            callback(frame);
            callback = null;
        }
    };

    // IE9 fires 'error' event after orsc or before, in random order.
    var loaded_okay = false;
    var error_timer = null;

    script.id = 'a' + utils.random_string(8);
    script.src = url;
    script.type = 'text/javascript';
    script.charset = 'UTF-8';
    script.onerror = function(e) {
        if (!error_timer) {
            // Delay firing close_script.
            error_timer = setTimeout(function() {
                if (!loaded_okay) {
                    close_script(utils.closeFrame(
                        1006,
                        "JSONP script loaded abnormally (onerror)"));
                }
            }, 1000);
        }
    };
    script.onload = function(e) {
        close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onload)"));
    };

    script.onreadystatechange = function(e) {
        if (/loaded|closed/.test(script.readyState)) {
            if (script && script.htmlFor && script.onclick) {
                loaded_okay = true;
                try {
                    // In IE, actually execute the script.
                    script.onclick();
                } catch (x) {}
            }
            if (script) {
                close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onreadystatechange)"));
            }
        }
    };
    // IE: event/htmlFor/onclick trick.
    // One can't rely on proper order for onreadystatechange. In order to
    // make sure, set a 'htmlFor' and 'event' properties, so that
    // script code will be installed as 'onclick' handler for the
    // script object. Later, onreadystatechange, manually execute this
    // code. FF and Chrome doesn't work with 'event' and 'htmlFor'
    // set. For reference see:
    //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
    // Also, read on that about script ordering:
    //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order
    if (typeof script.async === 'undefined' && _document.attachEvent) {
        // According to mozilla docs, in recent browsers script.async defaults
        // to 'true', so we may use it to detect a good browser:
        // https://developer.mozilla.org/en/HTML/Element/script
        if (!/opera/i.test(navigator.userAgent)) {
            // Naively assume we're in IE
            try {
                script.htmlFor = script.id;
                script.event = "onclick";
            } catch (x) {}
            script.async = true;
        } else {
            // Opera, second sync script hack
            script2 = _document.createElement('script');
            script2.text = "try{var a = document.getElementById('"+script.id+"'); if(a)a.onerror();}catch(x){};";
            script.async = script2.async = false;
        }
    }
    if (typeof script.async !== 'undefined') {
        script.async = true;
    }

    // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.
    tref = setTimeout(function() {
                          close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (timeout)"));
                      }, 35000);

    var head = _document.getElementsByTagName('head')[0];
    head.insertBefore(script, head.firstChild);
    if (script2) {
        head.insertBefore(script2, head.firstChild);
    }
    return close_script;
};
//         [*] End of lib/trans-jsonp-receiver.js


//         [*] Including lib/trans-jsonp-polling.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

// The simplest and most robust transport, using the well-know cross
// domain hack - JSONP. This transport is quite inefficient - one
// mssage could use up to one http request. But at least it works almost
// everywhere.
// Known limitations:
//   o you will get a spinning cursor
//   o for Konqueror a dumb timer is needed to detect errors


var JsonPTransport = SockJS['jsonp-polling'] = function(ri, trans_url) {
    utils.polluteGlobalNamespace();
    var that = this;
    that.ri = ri;
    that.trans_url = trans_url;
    that.send_constructor(jsonPGenericSender);
    that._schedule_recv();
};

// Inheritnace
JsonPTransport.prototype = new BufferedSender();

JsonPTransport.prototype._schedule_recv = function() {
    var that = this;
    var callback = function(data) {
        that._recv_stop = null;
        if (data) {
            // no data - heartbeat;
            if (!that._is_closing) {
                that.ri._didMessage(data);
            }
        }
        // The message can be a close message, and change is_closing state.
        if (!that._is_closing) {
            that._schedule_recv();
        }
    };
    that._recv_stop = jsonPReceiverWrapper(that.trans_url + '/jsonp',
                                           jsonPGenericReceiver, callback);
};

JsonPTransport.enabled = function() {
    return true;
};

JsonPTransport.need_body = true;


JsonPTransport.prototype.doCleanup = function() {
    var that = this;
    that._is_closing = true;
    if (that._recv_stop) {
        that._recv_stop();
    }
    that.ri = that._recv_stop = null;
    that.send_destructor();
};


// Abstract away code that handles global namespace pollution.
var jsonPReceiverWrapper = function(url, constructReceiver, user_callback) {
    var id = 'a' + utils.random_string(6);
    var url_id = url + '?c=' + escape(WPrefix + '.' + id);

    // Unfortunately it is not possible to abort loading of the
    // script. We need to keep track of frake close frames.
    var aborting = 0;

    // Callback will be called exactly once.
    var callback = function(frame) {
        switch(aborting) {
        case 0:
            // Normal behaviour - delete hook _and_ emit message.
            delete _window[WPrefix][id];
            user_callback(frame);
            break;
        case 1:
            // Fake close frame - emit but don't delete hook.
            user_callback(frame);
            aborting = 2;
            break;
        case 2:
            // Got frame after connection was closed, delete hook, don't emit.
            delete _window[WPrefix][id];
            break;
        }
    };

    var close_script = constructReceiver(url_id, callback);
    _window[WPrefix][id] = close_script;
    var stop = function() {
        if (_window[WPrefix][id]) {
            aborting = 1;
            _window[WPrefix][id](utils.closeFrame(1000, "JSONP user aborted read"));
        }
    };
    return stop;
};
//         [*] End of lib/trans-jsonp-polling.js


//         [*] Including lib/trans-xhr.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

var AjaxBasedTransport = function() {};
AjaxBasedTransport.prototype = new BufferedSender();

AjaxBasedTransport.prototype.run = function(ri, trans_url,
                                            url_suffix, Receiver, AjaxObject) {
    var that = this;
    that.ri = ri;
    that.trans_url = trans_url;
    that.send_constructor(createAjaxSender(AjaxObject));
    that.poll = new Polling(ri, Receiver,
                            trans_url + url_suffix, AjaxObject);
};

AjaxBasedTransport.prototype.doCleanup = function() {
    var that = this;
    if (that.poll) {
        that.poll.abort();
        that.poll = null;
    }
};

// xhr-streaming
var XhrStreamingTransport = SockJS['xhr-streaming'] = function(ri, trans_url) {
    this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XHRCorsObject);
};

XhrStreamingTransport.prototype = new AjaxBasedTransport();

XhrStreamingTransport.enabled = function() {
    // Support for CORS Ajax aka Ajax2? Opera 12 claims CORS but
    // doesn't do streaming.
    return (_window.XMLHttpRequest &&
            'withCredentials' in new XMLHttpRequest() &&
            (!/opera/i.test(navigator.userAgent)));
};
XhrStreamingTransport.roundTrips = 2; // preflight, ajax

// Safari gets confused when a streaming ajax request is started
// before onload. This causes the load indicator to spin indefinetely.
XhrStreamingTransport.need_body = true;


// According to:
//   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests
//   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/


// xdr-streaming
var XdrStreamingTransport = SockJS['xdr-streaming'] = function(ri, trans_url) {
    this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XDRObject);
};

XdrStreamingTransport.prototype = new AjaxBasedTransport();

XdrStreamingTransport.enabled = function() {
    return !!_window.XDomainRequest;
};
XdrStreamingTransport.roundTrips = 2; // preflight, ajax



// xhr-polling
var XhrPollingTransport = SockJS['xhr-polling'] = function(ri, trans_url) {
    this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRCorsObject);
};

XhrPollingTransport.prototype = new AjaxBasedTransport();

XhrPollingTransport.enabled = XhrStreamingTransport.enabled;
XhrPollingTransport.roundTrips = 2; // preflight, ajax


// xdr-polling
var XdrPollingTransport = SockJS['xdr-polling'] = function(ri, trans_url) {
    this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XDRObject);
};

XdrPollingTransport.prototype = new AjaxBasedTransport();

XdrPollingTransport.enabled = XdrStreamingTransport.enabled;
XdrPollingTransport.roundTrips = 2; // preflight, ajax
//         [*] End of lib/trans-xhr.js


//         [*] Including lib/trans-iframe.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

// Few cool transports do work only for same-origin. In order to make
// them working cross-domain we shall use iframe, served form the
// remote domain. New browsers, have capabilities to communicate with
// cross domain iframe, using postMessage(). In IE it was implemented
// from IE 8+, but of course, IE got some details wrong:
//    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx
//    http://stevesouders.com/misc/test-postmessage.php

var IframeTransport = function() {};

IframeTransport.prototype.i_constructor = function(ri, trans_url, base_url) {
    var that = this;
    that.ri = ri;
    that.origin = utils.getOrigin(base_url);
    that.base_url = base_url;
    that.trans_url = trans_url;

    var iframe_url = base_url + '/iframe.html';
    if (that.ri._options.devel) {
        iframe_url += '?t=' + (+new Date);
    }
    that.window_id = utils.random_string(8);
    iframe_url += '#' + that.window_id;

    that.iframeObj = utils.createIframe(iframe_url, function(r) {
                                            that.ri._didClose(1006, "Unable to load an iframe (" + r + ")");
                                        });

    that.onmessage_cb = utils.bind(that.onmessage, that);
    utils.attachMessage(that.onmessage_cb);
};

IframeTransport.prototype.doCleanup = function() {
    var that = this;
    if (that.iframeObj) {
        utils.detachMessage(that.onmessage_cb);
        try {
            // When the iframe is not loaded, IE raises an exception
            // on 'contentWindow'.
            if (that.iframeObj.iframe.contentWindow) {
                that.postMessage('c');
            }
        } catch (x) {}
        that.iframeObj.cleanup();
        that.iframeObj = null;
        that.onmessage_cb = that.iframeObj = null;
    }
};

IframeTransport.prototype.onmessage = function(e) {
    var that = this;
    if (e.origin !== that.origin) return;
    var window_id = e.data.slice(0, 8);
    var type = e.data.slice(8, 9);
    var data = e.data.slice(9);

    if (window_id !== that.window_id) return;

    switch(type) {
    case 's':
        that.iframeObj.loaded();
        that.postMessage('s', JSON.stringify([SockJS.version, that.protocol, that.trans_url, that.base_url]));
        break;
    case 't':
        that.ri._didMessage(data);
        break;
    }
};

IframeTransport.prototype.postMessage = function(type, data) {
    var that = this;
    that.iframeObj.post(that.window_id + type + (data || ''), that.origin);
};

IframeTransport.prototype.doSend = function (message) {
    this.postMessage('m', message);
};

IframeTransport.enabled = function() {
    // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with
    // huge delay, or not at all.
    var konqueror = navigator && navigator.userAgent && navigator.userAgent.indexOf('Konqueror') !== -1;
    return ((typeof _window.postMessage === 'function' ||
            typeof _window.postMessage === 'object') && (!konqueror));
};
//         [*] End of lib/trans-iframe.js


//         [*] Including lib/trans-iframe-within.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

var curr_window_id;

var postMessage = function (type, data) {
    if(parent !== _window) {
        parent.postMessage(curr_window_id + type + (data || ''), '*');
    } else {
        utils.log("Can't postMessage, no parent window.", type, data);
    }
};

var FacadeJS = function() {};
FacadeJS.prototype._didClose = function (code, reason) {
    postMessage('t', utils.closeFrame(code, reason));
};
FacadeJS.prototype._didMessage = function (frame) {
    postMessage('t', frame);
};
FacadeJS.prototype._doSend = function (data) {
    this._transport.doSend(data);
};
FacadeJS.prototype._doCleanup = function () {
    this._transport.doCleanup();
};

utils.parent_origin = undefined;

SockJS.bootstrap_iframe = function() {
    var facade;
    curr_window_id = _document.location.hash.slice(1);
    var onMessage = function(e) {
        if(e.source !== parent) return;
        if(typeof utils.parent_origin === 'undefined')
            utils.parent_origin = e.origin;
        if (e.origin !== utils.parent_origin) return;

        var window_id = e.data.slice(0, 8);
        var type = e.data.slice(8, 9);
        var data = e.data.slice(9);
        if (window_id !== curr_window_id) return;
        switch(type) {
        case 's':
            var p = JSON.parse(data);
            var version = p[0];
            var protocol = p[1];
            var trans_url = p[2];
            var base_url = p[3];
            if (version !== SockJS.version) {
                utils.log("Incompatibile SockJS! Main site uses:" +
                          " \"" + version + "\", the iframe:" +
                          " \"" + SockJS.version + "\".");
            }
            if (!utils.flatUrl(trans_url) || !utils.flatUrl(base_url)) {
                utils.log("Only basic urls are supported in SockJS");
                return;
            }

            if (!utils.isSameOriginUrl(trans_url) ||
                !utils.isSameOriginUrl(base_url)) {
                utils.log("Can't connect to different domain from within an " +
                          "iframe. (" + JSON.stringify([_window.location.href, trans_url, base_url]) +
                          ")");
                return;
            }
            facade = new FacadeJS();
            facade._transport = new FacadeJS[protocol](facade, trans_url, base_url);
            break;
        case 'm':
            facade._doSend(data);
            break;
        case 'c':
            if (facade)
                facade._doCleanup();
            facade = null;
            break;
        }
    };

    // alert('test ticker');
    // facade = new FacadeJS();
    // facade._transport = new FacadeJS['w-iframe-xhr-polling'](facade, 'http://host.com:9999/ticker/12/basd');

    utils.attachMessage(onMessage);

    // Start
    postMessage('s');
};
//         [*] End of lib/trans-iframe-within.js


//         [*] Including lib/info.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

var InfoReceiver = function(base_url, AjaxObject) {
    var that = this;
    utils.delay(function(){that.doXhr(base_url, AjaxObject);});
};

InfoReceiver.prototype = new EventEmitter(['finish']);

InfoReceiver.prototype.doXhr = function(base_url, AjaxObject) {
    var that = this;
    var t0 = (new Date()).getTime();
    var xo = new AjaxObject('GET', base_url + '/info');

    var tref = utils.delay(8000,
                           function(){xo.ontimeout();});

    xo.onfinish = function(status, text) {
        clearTimeout(tref);
        tref = null;
        if (status === 200) {
            var rtt = (new Date()).getTime() - t0;
            var info = JSON.parse(text);
            if (typeof info !== 'object') info = {};
            that.emit('finish', info, rtt);
        } else {
            that.emit('finish');
        }
    };
    xo.ontimeout = function() {
        xo.close();
        that.emit('finish');
    };
};

var InfoReceiverIframe = function(base_url) {
    var that = this;
    var go = function() {
        var ifr = new IframeTransport();
        ifr.protocol = 'w-iframe-info-receiver';
        var fun = function(r) {
            if (typeof r === 'string' && r.substr(0,1) === 'm') {
                var d = JSON.parse(r.substr(1));
                var info = d[0], rtt = d[1];
                that.emit('finish', info, rtt);
            } else {
                that.emit('finish');
            }
            ifr.doCleanup();
            ifr = null;
        };
        var mock_ri = {
            _options: {},
            _didClose: fun,
            _didMessage: fun
        };
        ifr.i_constructor(mock_ri, base_url, base_url);
    }
    if(!_document.body) {
        utils.attachEvent('load', go);
    } else {
        go();
    }
};
InfoReceiverIframe.prototype = new EventEmitter(['finish']);


var InfoReceiverFake = function() {
    // It may not be possible to do cross domain AJAX to get the info
    // data, for example for IE7. But we want to run JSONP, so let's
    // fake the response, with rtt=2s (rto=6s).
    var that = this;
    utils.delay(function() {
        that.emit('finish', {}, 2000);
    });
};
InfoReceiverFake.prototype = new EventEmitter(['finish']);

var createInfoReceiver = function(base_url) {
    if (utils.isSameOriginUrl(base_url)) {
        // If, for some reason, we have SockJS locally - there's no
        // need to start up the complex machinery. Just use ajax.
        return new InfoReceiver(base_url, utils.XHRLocalObject);
    }
    switch (utils.isXHRCorsCapable()) {
    case 1:
        // XHRLocalObject -> no_credentials=true
        return new InfoReceiver(base_url, utils.XHRLocalObject);
    case 2:
        return new InfoReceiver(base_url, utils.XDRObject);
    case 3:
        // Opera
        return new InfoReceiverIframe(base_url);
    default:
        // IE 7
        return new InfoReceiverFake();
    };
};


var WInfoReceiverIframe = FacadeJS['w-iframe-info-receiver'] = function(ri, _trans_url, base_url) {
    var ir = new InfoReceiver(base_url, utils.XHRLocalObject);
    ir.onfinish = function(info, rtt) {
        ri._didMessage('m'+JSON.stringify([info, rtt]));
        ri._didClose();
    }
};
WInfoReceiverIframe.prototype.doCleanup = function() {};
//         [*] End of lib/info.js


//         [*] Including lib/trans-iframe-eventsource.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

var EventSourceIframeTransport = SockJS['iframe-eventsource'] = function () {
    var that = this;
    that.protocol = 'w-iframe-eventsource';
    that.i_constructor.apply(that, arguments);
};

EventSourceIframeTransport.prototype = new IframeTransport();

EventSourceIframeTransport.enabled = function () {
    return ('EventSource' in _window) && IframeTransport.enabled();
};

EventSourceIframeTransport.need_body = true;
EventSourceIframeTransport.roundTrips = 3; // html, javascript, eventsource


// w-iframe-eventsource
var EventSourceTransport = FacadeJS['w-iframe-eventsource'] = function(ri, trans_url) {
    this.run(ri, trans_url, '/eventsource', EventSourceReceiver, utils.XHRLocalObject);
}
EventSourceTransport.prototype = new AjaxBasedTransport();
//         [*] End of lib/trans-iframe-eventsource.js


//         [*] Including lib/trans-iframe-xhr-polling.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

var XhrPollingIframeTransport = SockJS['iframe-xhr-polling'] = function () {
    var that = this;
    that.protocol = 'w-iframe-xhr-polling';
    that.i_constructor.apply(that, arguments);
};

XhrPollingIframeTransport.prototype = new IframeTransport();

XhrPollingIframeTransport.enabled = function () {
    return _window.XMLHttpRequest && IframeTransport.enabled();
};

XhrPollingIframeTransport.need_body = true;
XhrPollingIframeTransport.roundTrips = 3; // html, javascript, xhr


// w-iframe-xhr-polling
var XhrPollingITransport = FacadeJS['w-iframe-xhr-polling'] = function(ri, trans_url) {
    this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRLocalObject);
};

XhrPollingITransport.prototype = new AjaxBasedTransport();
//         [*] End of lib/trans-iframe-xhr-polling.js


//         [*] Including lib/trans-iframe-htmlfile.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

// This transport generally works in any browser, but will cause a
// spinning cursor to appear in any browser other than IE.
// We may test this transport in all browsers - why not, but in
// production it should be only run in IE.

var HtmlFileIframeTransport = SockJS['iframe-htmlfile'] = function () {
    var that = this;
    that.protocol = 'w-iframe-htmlfile';
    that.i_constructor.apply(that, arguments);
};

// Inheritance.
HtmlFileIframeTransport.prototype = new IframeTransport();

HtmlFileIframeTransport.enabled = function() {
    return IframeTransport.enabled();
};

HtmlFileIframeTransport.need_body = true;
HtmlFileIframeTransport.roundTrips = 3; // html, javascript, htmlfile


// w-iframe-htmlfile
var HtmlFileTransport = FacadeJS['w-iframe-htmlfile'] = function(ri, trans_url) {
    this.run(ri, trans_url, '/htmlfile', HtmlfileReceiver, utils.XHRLocalObject);
};
HtmlFileTransport.prototype = new AjaxBasedTransport();
//         [*] End of lib/trans-iframe-htmlfile.js


//         [*] Including lib/trans-polling.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

var Polling = function(ri, Receiver, recv_url, AjaxObject) {
    var that = this;
    that.ri = ri;
    that.Receiver = Receiver;
    that.recv_url = recv_url;
    that.AjaxObject = AjaxObject;
    that._scheduleRecv();
};

Polling.prototype._scheduleRecv = function() {
    var that = this;
    var poll = that.poll = new that.Receiver(that.recv_url, that.AjaxObject);
    var msg_counter = 0;
    poll.onmessage = function(e) {
        msg_counter += 1;
        that.ri._didMessage(e.data);
    };
    poll.onclose = function(e) {
        that.poll = poll = poll.onmessage = poll.onclose = null;
        if (!that.poll_is_closing) {
            if (e.reason === 'permanent') {
                that.ri._didClose(1006, 'Polling error (' + e.reason + ')');
            } else {
                that._scheduleRecv();
            }
        }
    };
};

Polling.prototype.abort = function() {
    var that = this;
    that.poll_is_closing = true;
    if (that.poll) {
        that.poll.abort();
    }
};
//         [*] End of lib/trans-polling.js


//         [*] Including lib/trans-receiver-eventsource.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

var EventSourceReceiver = function(url) {
    var that = this;
    var es = new EventSource(url);
    es.onmessage = function(e) {
        that.dispatchEvent(new SimpleEvent('message',
                                           {'data': unescape(e.data)}));
    };
    that.es_close = es.onerror = function(e, abort_reason) {
        // ES on reconnection has readyState = 0 or 1.
        // on network error it's CLOSED = 2
        var reason = abort_reason ? 'user' :
            (es.readyState !== 2 ? 'network' : 'permanent');
        that.es_close = es.onmessage = es.onerror = null;
        // EventSource reconnects automatically.
        es.close();
        es = null;
        // Safari and chrome < 15 crash if we close window before
        // waiting for ES cleanup. See:
        //   https://code.google.com/p/chromium/issues/detail?id=89155
        utils.delay(200, function() {
                        that.dispatchEvent(new SimpleEvent('close', {reason: reason}));
                    });
    };
};

EventSourceReceiver.prototype = new REventTarget();

EventSourceReceiver.prototype.abort = function() {
    var that = this;
    if (that.es_close) {
        that.es_close({}, true);
    }
};
//         [*] End of lib/trans-receiver-eventsource.js


//         [*] Including lib/trans-receiver-htmlfile.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

var _is_ie_htmlfile_capable;
var isIeHtmlfileCapable = function() {
    if (_is_ie_htmlfile_capable === undefined) {
        if ('ActiveXObject' in _window) {
            try {
                _is_ie_htmlfile_capable = !!new ActiveXObject('htmlfile');
            } catch (x) {}
        } else {
            _is_ie_htmlfile_capable = false;
        }
    }
    return _is_ie_htmlfile_capable;
};


var HtmlfileReceiver = function(url) {
    var that = this;
    utils.polluteGlobalNamespace();

    that.id = 'a' + utils.random_string(6, 26);
    url += ((url.indexOf('?') === -1) ? '?' : '&') +
        'c=' + escape(WPrefix + '.' + that.id);

    var constructor = isIeHtmlfileCapable() ?
        utils.createHtmlfile : utils.createIframe;

    var iframeObj;
    _window[WPrefix][that.id] = {
        start: function () {
            iframeObj.loaded();
        },
        message: function (data) {
            that.dispatchEvent(new SimpleEvent('message', {'data': data}));
        },
        stop: function () {
            that.iframe_close({}, 'network');
        }
    };
    that.iframe_close = function(e, abort_reason) {
        iframeObj.cleanup();
        that.iframe_close = iframeObj = null;
        delete _window[WPrefix][that.id];
        that.dispatchEvent(new SimpleEvent('close', {reason: abort_reason}));
    };
    iframeObj = constructor(url, function(e) {
                                that.iframe_close({}, 'permanent');
                            });
};

HtmlfileReceiver.prototype = new REventTarget();

HtmlfileReceiver.prototype.abort = function() {
    var that = this;
    if (that.iframe_close) {
        that.iframe_close({}, 'user');
    }
};
//         [*] End of lib/trans-receiver-htmlfile.js


//         [*] Including lib/trans-receiver-xhr.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

var XhrReceiver = function(url, AjaxObject) {
    var that = this;
    var buf_pos = 0;

    that.xo = new AjaxObject('POST', url, null);
    that.xo.onchunk = function(status, text) {
        if (status !== 200) return;
        while (1) {
            var buf = text.slice(buf_pos);
            var p = buf.indexOf('\n');
            if (p === -1) break;
            buf_pos += p+1;
            var msg = buf.slice(0, p);
            that.dispatchEvent(new SimpleEvent('message', {data: msg}));
        }
    };
    that.xo.onfinish = function(status, text) {
        that.xo.onchunk(status, text);
        that.xo = null;
        var reason = status === 200 ? 'network' : 'permanent';
        that.dispatchEvent(new SimpleEvent('close', {reason: reason}));
    }
};

XhrReceiver.prototype = new REventTarget();

XhrReceiver.prototype.abort = function() {
    var that = this;
    if (that.xo) {
        that.xo.close();
        that.dispatchEvent(new SimpleEvent('close', {reason: 'user'}));
        that.xo = null;
    }
};
//         [*] End of lib/trans-receiver-xhr.js


//         [*] Including lib/test-hooks.js
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Copyright (c) 2011-2012 VMware, Inc.
 *
 * For the license see COPYING.
 * ***** END LICENSE BLOCK *****
 */

// For testing
SockJS.getUtils = function(){
    return utils;
};

SockJS.getIframeTransport = function(){
    return IframeTransport;
};
//         [*] End of lib/test-hooks.js

                  return SockJS;
          })();
if ('_sockjs_onload' in window) setTimeout(_sockjs_onload, 1);

// AMD compliance
if (typeof define === 'function' && define.amd) {
    define('sockjs', [], function(){return SockJS;});
}
//     [*] End of lib/index.js

// [*] End of lib/all.js

;
define("bower-sockjs-client", function(){});

// Generated by CoffeeScript 1.7.1

/*
   Stomp Over WebSocket http://www.jmesnil.net/stomp-websocket/doc/ | Apache License V2.0

   Copyright (C) 2010-2013 [Jeff Mesnil](http://jmesnil.net/)
   Copyright (C) 2012 [FuseSource, Inc.](http://fusesource.com)
 */

(function() {
  var Byte, Client, Frame, Stomp,
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  Byte = {
    LF: '\x0A',
    NULL: '\x00'
  };

  Frame = (function() {
    var unmarshallSingle;

    function Frame(command, headers, body) {
      this.command = command;
      this.headers = headers != null ? headers : {};
      this.body = body != null ? body : '';
    }

    Frame.prototype.toString = function() {
      var lines, name, skipContentLength, value, _ref;
      lines = [this.command];
      skipContentLength = this.headers['content-length'] === false ? true : false;
      if (skipContentLength) {
        delete this.headers['content-length'];
      }
      _ref = this.headers;
      for (name in _ref) {
        if (!__hasProp.call(_ref, name)) continue;
        value = _ref[name];
        lines.push("" + name + ":" + value);
      }
      if (this.body && !skipContentLength) {
        lines.push("content-length:" + (Frame.sizeOfUTF8(this.body)));
      }
      lines.push(Byte.LF + this.body);
      return lines.join(Byte.LF);
    };

    Frame.sizeOfUTF8 = function(s) {
      if (s) {
        return encodeURI(s).match(/%..|./g).length;
      } else {
        return 0;
      }
    };

    unmarshallSingle = function(data) {
      var body, chr, command, divider, headerLines, headers, i, idx, len, line, start, trim, _i, _j, _len, _ref, _ref1;
      divider = data.search(RegExp("" + Byte.LF + Byte.LF));
      headerLines = data.substring(0, divider).split(Byte.LF);
      command = headerLines.shift();
      headers = {};
      trim = function(str) {
        return str.replace(/^\s+|\s+$/g, '');
      };
      _ref = headerLines.reverse();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        idx = line.indexOf(':');
        headers[trim(line.substring(0, idx))] = trim(line.substring(idx + 1));
      }
      body = '';
      start = divider + 2;
      if (headers['content-length']) {
        len = parseInt(headers['content-length']);
        body = ('' + data).substring(start, start + len);
      } else {
        chr = null;
        for (i = _j = start, _ref1 = data.length; start <= _ref1 ? _j < _ref1 : _j > _ref1; i = start <= _ref1 ? ++_j : --_j) {
          chr = data.charAt(i);
          if (chr === Byte.NULL) {
            break;
          }
          body += chr;
        }
      }
      return new Frame(command, headers, body);
    };

    Frame.unmarshall = function(datas) {
      var frame, frames, last_frame, r;
      frames = datas.split(RegExp("" + Byte.NULL + Byte.LF + "*"));
      r = {
        frames: [],
        partial: ''
      };
      r.frames = (function() {
        var _i, _len, _ref, _results;
        _ref = frames.slice(0, -1);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          frame = _ref[_i];
          _results.push(unmarshallSingle(frame));
        }
        return _results;
      })();
      last_frame = frames.slice(-1)[0];
      if (last_frame === Byte.LF || (last_frame.search(RegExp("" + Byte.NULL + Byte.LF + "*$"))) !== -1) {
        r.frames.push(unmarshallSingle(last_frame));
      } else {
        r.partial = last_frame;
      }
      return r;
    };

    Frame.marshall = function(command, headers, body) {
      var frame;
      frame = new Frame(command, headers, body);
      return frame.toString() + Byte.NULL;
    };

    return Frame;

  })();

  Client = (function() {
    var now;

    function Client(ws) {
      this.ws = ws;
      this.ws.binaryType = "arraybuffer";
      this.counter = 0;
      this.connected = false;
      this.heartbeat = {
        outgoing: 10000,
        incoming: 10000
      };
      this.maxWebSocketFrameSize = 16 * 1024;
      this.subscriptions = {};
      this.partialData = '';
    }

    Client.prototype.debug = function(message) {
      var _ref;
      return typeof window !== "undefined" && window !== null ? (_ref = window.console) != null ? _ref.log(message) : void 0 : void 0;
    };

    now = function() {
      if (Date.now) {
        return Date.now();
      } else {
        return new Date().valueOf;
      }
    };

    Client.prototype._transmit = function(command, headers, body) {
      var out;
      out = Frame.marshall(command, headers, body);
      if (typeof this.debug === "function") {
        this.debug(">>> " + out);
      }
      while (true) {
        if (out.length > this.maxWebSocketFrameSize) {
          this.ws.send(out.substring(0, this.maxWebSocketFrameSize));
          out = out.substring(this.maxWebSocketFrameSize);
          if (typeof this.debug === "function") {
            this.debug("remaining = " + out.length);
          }
        } else {
          return this.ws.send(out);
        }
      }
    };

    Client.prototype._setupHeartbeat = function(headers) {
      var serverIncoming, serverOutgoing, ttl, v, _ref, _ref1;
      if ((_ref = headers.version) !== Stomp.VERSIONS.V1_1 && _ref !== Stomp.VERSIONS.V1_2) {
        return;
      }
      _ref1 = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = headers['heart-beat'].split(",");
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          v = _ref1[_i];
          _results.push(parseInt(v));
        }
        return _results;
      })(), serverOutgoing = _ref1[0], serverIncoming = _ref1[1];
      if (!(this.heartbeat.outgoing === 0 || serverIncoming === 0)) {
        ttl = Math.max(this.heartbeat.outgoing, serverIncoming);
        if (typeof this.debug === "function") {
          this.debug("send PING every " + ttl + "ms");
        }
        this.pinger = Stomp.setInterval(ttl, (function(_this) {
          return function() {
            _this.ws.send(Byte.LF);
            return typeof _this.debug === "function" ? _this.debug(">>> PING") : void 0;
          };
        })(this));
      }
      if (!(this.heartbeat.incoming === 0 || serverOutgoing === 0)) {
        ttl = Math.max(this.heartbeat.incoming, serverOutgoing);
        if (typeof this.debug === "function") {
          this.debug("check PONG every " + ttl + "ms");
        }
        return this.ponger = Stomp.setInterval(ttl, (function(_this) {
          return function() {
            var delta;
            delta = now() - _this.serverActivity;
            if (delta > ttl * 2) {
              if (typeof _this.debug === "function") {
                _this.debug("did not receive server activity for the last " + delta + "ms");
              }
              return _this.ws.close();
            }
          };
        })(this));
      }
    };

    Client.prototype._parseConnect = function() {
      var args, connectCallback, errorCallback, headers;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      headers = {};
      switch (args.length) {
        case 2:
          headers = args[0], connectCallback = args[1];
          break;
        case 3:
          if (args[1] instanceof Function) {
            headers = args[0], connectCallback = args[1], errorCallback = args[2];
          } else {
            headers.login = args[0], headers.passcode = args[1], connectCallback = args[2];
          }
          break;
        case 4:
          headers.login = args[0], headers.passcode = args[1], connectCallback = args[2], errorCallback = args[3];
          break;
        default:
          headers.login = args[0], headers.passcode = args[1], connectCallback = args[2], errorCallback = args[3], headers.host = args[4];
      }
      return [headers, connectCallback, errorCallback];
    };

    Client.prototype.connect = function() {
      var args, errorCallback, headers, out;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      out = this._parseConnect.apply(this, args);
      headers = out[0], this.connectCallback = out[1], errorCallback = out[2];
      if (typeof this.debug === "function") {
        this.debug("Opening Web Socket...");
      }
      this.ws.onmessage = (function(_this) {
        return function(evt) {
          var arr, c, client, data, frame, messageID, onreceive, subscription, unmarshalledData, _i, _len, _ref, _results;
          data = typeof ArrayBuffer !== 'undefined' && evt.data instanceof ArrayBuffer ? (arr = new Uint8Array(evt.data), typeof _this.debug === "function" ? _this.debug("--- got data length: " + arr.length) : void 0, ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = arr.length; _i < _len; _i++) {
              c = arr[_i];
              _results.push(String.fromCharCode(c));
            }
            return _results;
          })()).join('')) : evt.data;
          _this.serverActivity = now();
          if (data === Byte.LF) {
            if (typeof _this.debug === "function") {
              _this.debug("<<< PONG");
            }
            return;
          }
          if (typeof _this.debug === "function") {
            _this.debug("<<< " + data);
          }
          unmarshalledData = Frame.unmarshall(_this.partialData + data);
          _this.partialData = unmarshalledData.partial;
          _ref = unmarshalledData.frames;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            frame = _ref[_i];
            switch (frame.command) {
              case "CONNECTED":
                if (typeof _this.debug === "function") {
                  _this.debug("connected to server " + frame.headers.server);
                }
                _this.connected = true;
                _this._setupHeartbeat(frame.headers);
                _results.push(typeof _this.connectCallback === "function" ? _this.connectCallback(frame) : void 0);
                break;
              case "MESSAGE":
                subscription = frame.headers.subscription;
                onreceive = _this.subscriptions[subscription] || _this.onreceive;
                if (onreceive) {
                  client = _this;
                  messageID = frame.headers["message-id"];
                  frame.ack = function(headers) {
                    if (headers == null) {
                      headers = {};
                    }
                    return client.ack(messageID, subscription, headers);
                  };
                  frame.nack = function(headers) {
                    if (headers == null) {
                      headers = {};
                    }
                    return client.nack(messageID, subscription, headers);
                  };
                  _results.push(onreceive(frame));
                } else {
                  _results.push(typeof _this.debug === "function" ? _this.debug("Unhandled received MESSAGE: " + frame) : void 0);
                }
                break;
              case "RECEIPT":
                _results.push(typeof _this.onreceipt === "function" ? _this.onreceipt(frame) : void 0);
                break;
              case "ERROR":
                _results.push(typeof errorCallback === "function" ? errorCallback(frame) : void 0);
                break;
              default:
                _results.push(typeof _this.debug === "function" ? _this.debug("Unhandled frame: " + frame) : void 0);
            }
          }
          return _results;
        };
      })(this);
      this.ws.onclose = (function(_this) {
        return function() {
          var msg;
          msg = "Whoops! Lost connection to " + _this.ws.url;
          if (typeof _this.debug === "function") {
            _this.debug(msg);
          }
          _this._cleanUp();
          return typeof errorCallback === "function" ? errorCallback(msg) : void 0;
        };
      })(this);
      return this.ws.onopen = (function(_this) {
        return function() {
          if (typeof _this.debug === "function") {
            _this.debug('Web Socket Opened...');
          }
          headers["accept-version"] = Stomp.VERSIONS.supportedVersions();
          headers["heart-beat"] = [_this.heartbeat.outgoing, _this.heartbeat.incoming].join(',');
          return _this._transmit("CONNECT", headers);
        };
      })(this);
    };

    Client.prototype.disconnect = function(disconnectCallback, headers) {
      if (headers == null) {
        headers = {};
      }
      this._transmit("DISCONNECT", headers);
      this.ws.onclose = null;
      this.ws.close();
      this._cleanUp();
      return typeof disconnectCallback === "function" ? disconnectCallback() : void 0;
    };

    Client.prototype._cleanUp = function() {
      this.connected = false;
      if (this.pinger) {
        Stomp.clearInterval(this.pinger);
      }
      if (this.ponger) {
        return Stomp.clearInterval(this.ponger);
      }
    };

    Client.prototype.send = function(destination, headers, body) {
      if (headers == null) {
        headers = {};
      }
      if (body == null) {
        body = '';
      }
      headers.destination = destination;
      return this._transmit("SEND", headers, body);
    };

    Client.prototype.subscribe = function(destination, callback, headers) {
      var client;
      if (headers == null) {
        headers = {};
      }
      if (!headers.id) {
        headers.id = "sub-" + this.counter++;
      }
      headers.destination = destination;
      this.subscriptions[headers.id] = callback;
      this._transmit("SUBSCRIBE", headers);
      client = this;
      return {
        id: headers.id,
        unsubscribe: function() {
          return client.unsubscribe(headers.id);
        }
      };
    };

    Client.prototype.unsubscribe = function(id) {
      delete this.subscriptions[id];
      return this._transmit("UNSUBSCRIBE", {
        id: id
      });
    };

    Client.prototype.begin = function(transaction) {
      var client, txid;
      txid = transaction || "tx-" + this.counter++;
      this._transmit("BEGIN", {
        transaction: txid
      });
      client = this;
      return {
        id: txid,
        commit: function() {
          return client.commit(txid);
        },
        abort: function() {
          return client.abort(txid);
        }
      };
    };

    Client.prototype.commit = function(transaction) {
      return this._transmit("COMMIT", {
        transaction: transaction
      });
    };

    Client.prototype.abort = function(transaction) {
      return this._transmit("ABORT", {
        transaction: transaction
      });
    };

    Client.prototype.ack = function(messageID, subscription, headers) {
      if (headers == null) {
        headers = {};
      }
      headers["message-id"] = messageID;
      headers.subscription = subscription;
      return this._transmit("ACK", headers);
    };

    Client.prototype.nack = function(messageID, subscription, headers) {
      if (headers == null) {
        headers = {};
      }
      headers["message-id"] = messageID;
      headers.subscription = subscription;
      return this._transmit("NACK", headers);
    };

    return Client;

  })();

  Stomp = {
    VERSIONS: {
      V1_0: '1.0',
      V1_1: '1.1',
      V1_2: '1.2',
      supportedVersions: function() {
        return '1.1,1.0';
      }
    },
    client: function(url, protocols) {
      var klass, ws;
      if (protocols == null) {
        protocols = ['v10.stomp', 'v11.stomp'];
      }
      klass = Stomp.WebSocketClass || WebSocket;
      ws = new klass(url, protocols);
      return new Client(ws);
    },
    over: function(ws) {
      return new Client(ws);
    },
    Frame: Frame
  };

  if (typeof exports !== "undefined" && exports !== null) {
    exports.Stomp = Stomp;
  }

  if (typeof window !== "undefined" && window !== null) {
    Stomp.setInterval = function(interval, f) {
      return window.setInterval(f, interval);
    };
    Stomp.clearInterval = function(id) {
      return window.clearInterval(id);
    };
    window.Stomp = Stomp;
  } else if (!exports) {
    self.Stomp = Stomp;
  }

}).call(this);

define("stomp-websocket", function(){});

define('utils/Enum',[], function() {
  
  var EnumSymbol = function EnumSymbol(name, $__11) {
    var $__12 = $__11,
        value = $__12.value,
        description = $__12.description;
    this.sym = Symbol.for(name);
    if (!Object.is(value, undefined))
      this.value = value;
    if (description)
      this.description = description;
    Object.freeze(this);
  };
  ($traceurRuntime.createClass)(EnumSymbol, {
    get display() {
      return this.description || Symbol.keyFor(this.sym);
    },
    toString: function() {
      return this.sym;
    },
    valueOf: function() {
      return this.value;
    }
  }, {});
  Object.defineProperty(EnumSymbol, "parameters", {get: function() {
      return [[$traceurRuntime.type.string], []];
    }});
  var Enum = function Enum(enumLiterals) {
    for (var key in enumLiterals) {
      if (!enumLiterals[key])
        throw new TypeError('each enum should have been initialized with atleast empty {} value');
      this[key] = new EnumSymbol(key, enumLiterals[key]);
    }
    Object.freeze(this);
  };
  ($traceurRuntime.createClass)(Enum, {
    symbols: function() {
      var $__3 = this;
      return (function() {
        var $__1 = 0,
            $__2 = [];
        var $__7 = true;
        var $__8 = false;
        var $__9 = undefined;
        try {
          for (var $__5 = void 0,
              $__4 = (Object.keys($__3))[$traceurRuntime.toProperty(Symbol.iterator)](); !($__7 = ($__5 = $__4.next()).done); $__7 = true) {
            var key = $__5.value;
            $__2[$__1++] = $__3[key];
          }
        } catch ($__10) {
          $__8 = true;
          $__9 = $__10;
        } finally {
          try {
            if (!$__7 && $__4.return != null) {
              $__4.return();
            }
          } finally {
            if ($__8) {
              throw $__9;
            }
          }
        }
        return $__2;
      }());
    },
    keys: function() {
      return Object.keys(this);
    },
    contains: function(sym) {
      if (!(sym instanceof EnumSymbol))
        return false;
      return this[Symbol.keyFor(sym.sym)] === sym;
    }
  }, {});
  return {
    get EnumSymbol() {
      return EnumSymbol;
    },
    get Enum() {
      return Enum;
    },
    __esModule: true
  };
});

// Copyright (C) 2011-2012 Software Languages Lab, Vrije Universiteit Brussel
// This code is dual-licensed under both the Apache License and the MPL

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/* Version: MPL 1.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is a shim for the ES-Harmony reflection module
 *
 * The Initial Developer of the Original Code is
 * Tom Van Cutsem, Vrije Universiteit Brussel.
 * Portions created by the Initial Developer are Copyright (C) 2011-2012
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 */

 // ----------------------------------------------------------------------------

 // This file is a polyfill for the upcoming ECMAScript Reflect API,
 // including support for Proxies. See the draft specification at:
 // http://wiki.ecmascript.org/doku.php?id=harmony:reflect_api
 // http://wiki.ecmascript.org/doku.php?id=harmony:direct_proxies

 // For an implementation of the Handler API, see handlers.js, which implements:
 // http://wiki.ecmascript.org/doku.php?id=harmony:virtual_object_api

 // This implementation supersedes the earlier polyfill at:
 // code.google.com/p/es-lab/source/browse/trunk/src/proxies/DirectProxies.js

 // This code was tested on tracemonkey / Firefox 12
//  (and should run fine on older Firefox versions starting with FF4)
 // The code also works correctly on
 //   v8 --harmony_proxies --harmony_weakmaps (v3.6.5.1)

 // Language Dependencies:
 //  - ECMAScript 5/strict
 //  - "old" (i.e. non-direct) Harmony Proxies
 //  - Harmony WeakMaps
 // Patches:
 //  - Object.{freeze,seal,preventExtensions}
 //  - Object.{isFrozen,isSealed,isExtensible}
 //  - Object.getPrototypeOf
 //  - Object.prototype.valueOf
 //  - Object.prototype.isPrototypeOf
 //  - Object.prototype.toString
 //  - Object.prototype.hasOwnProperty
 //  - Object.getOwnPropertyDescriptor
 //  - Object.keys
 //  - Function.prototype.toString
 //  - Date.prototype.toString
 //  - Array.isArray
 //  - Proxy
 // Adds new globals:
 //  - Reflect

 // Direct proxies can be created via Proxy(target, handler)

 // ----------------------------------------------------------------------------

(function(global){ // function-as-module pattern


// === Direct Proxies: Invariant Enforcement ===

// Direct proxies build on non-direct proxies by automatically wrapping
// all user-defined proxy handlers in a Validator handler that checks and
// enforces ES5 invariants.

// A direct proxy is a proxy for an existing object called the target object.

// A Validator handler is a wrapper for a target proxy handler H.
// The Validator forwards all operations to H, but additionally
// performs a number of integrity checks on the results of some traps,
// to make sure H does not violate the ES5 invariants w.r.t. non-configurable
// properties and non-extensible, sealed or frozen objects.

// For each property that H exposes as own, non-configurable
// (e.g. by returning a descriptor from a call to getOwnPropertyDescriptor)
// the Validator handler defines those properties on the target object.
// When the proxy becomes non-extensible, also configurable own properties
// are checked against the target.
// We will call properties that are defined on the target object
// "fixed properties".

// We will name fixed non-configurable properties "sealed properties".
// We will name fixed non-configurable non-writable properties "frozen
// properties".

// The Validator handler upholds the following invariants w.r.t. non-configurability:
// - getOwnPropertyDescriptor cannot report sealed properties as non-existent
// - getOwnPropertyDescriptor cannot report incompatible changes to the
//   attributes of a sealed property (e.g. reporting a non-configurable
//   property as configurable, or reporting a non-configurable, non-writable
//   property as writable)
// - getPropertyDescriptor cannot report sealed properties as non-existent
// - getPropertyDescriptor cannot report incompatible changes to the
//   attributes of a sealed property. It _can_ report incompatible changes
//   to the attributes of non-own, inherited properties.
// - defineProperty cannot make incompatible changes to the attributes of
//   sealed properties
// - deleteProperty cannot report a successful deletion of a sealed property
// - hasOwn cannot report a sealed property as non-existent
// - has cannot report a sealed property as non-existent
// - get cannot report inconsistent values for frozen data
//   properties, and must report undefined for sealed accessors with an
//   undefined getter
// - set cannot report a successful assignment for frozen data
//   properties or sealed accessors with an undefined setter.
// - get{Own}PropertyNames lists all sealed properties of the target.
// - keys lists all enumerable sealed properties of the target.
// - enumerate lists all enumerable sealed properties of the target.
// - if a property of a non-extensible proxy is reported as non-existent,
//   then it must forever be reported as non-existent. This applies to
//   own and inherited properties and is enforced in the
//   deleteProperty, get{Own}PropertyDescriptor, has{Own},
//   get{Own}PropertyNames, keys and enumerate traps

// Violation of any of these invariants by H will result in TypeError being
// thrown.

// Additionally, once Object.preventExtensions, Object.seal or Object.freeze
// is invoked on the proxy, the set of own property names for the proxy is
// fixed. Any property name that is not fixed is called a 'new' property.

// The Validator upholds the following invariants regarding extensibility:
// - getOwnPropertyDescriptor cannot report new properties as existent
//   (it must report them as non-existent by returning undefined)
// - defineProperty cannot successfully add a new property (it must reject)
// - getOwnPropertyNames cannot list new properties
// - hasOwn cannot report true for new properties (it must report false)
// - keys cannot list new properties

// Invariants currently not enforced:
// - getOwnPropertyNames lists only own property names
// - keys lists only enumerable own property names
// Both traps may list more property names than are actually defined on the
// target.

// Invariants with regard to inheritance are currently not enforced.
// - a non-configurable potentially inherited property on a proxy with
//   non-mutable ancestry cannot be reported as non-existent
// (An object with non-mutable ancestry is a non-extensible object whose
// [[Prototype]] is either null or an object with non-mutable ancestry.)

// Changes in Handler API compared to previous harmony:proxies, see:
// http://wiki.ecmascript.org/doku.php?id=strawman:direct_proxies
// http://wiki.ecmascript.org/doku.php?id=harmony:direct_proxies

// ----------------------------------------------------------------------------

// ---- WeakMap polyfill ----

// TODO: find a proper WeakMap polyfill

// define an empty WeakMap so that at least the Reflect module code
// will work in the absence of WeakMaps. Proxy emulation depends on
// actual WeakMaps, so will not work with this little shim.
if (typeof WeakMap === "undefined") {
  global.WeakMap = function(){};
  global.WeakMap.prototype = {
    get: function(k) { return undefined; },
    set: function(k,v) { throw new Error("WeakMap not supported"); }
  };
}

// ---- Normalization functions for property descriptors ----

function isStandardAttribute(name) {
  return /^(get|set|value|writable|enumerable|configurable)$/.test(name);
}

// Adapted from ES5 section 8.10.5
function toPropertyDescriptor(obj) {
  if (Object(obj) !== obj) {
    throw new TypeError("property descriptor should be an Object, given: "+
                        obj);
  }
  var desc = {};
  if ('enumerable' in obj) { desc.enumerable = !!obj.enumerable; }
  if ('configurable' in obj) { desc.configurable = !!obj.configurable; }
  if ('value' in obj) { desc.value = obj.value; }
  if ('writable' in obj) { desc.writable = !!obj.writable; }
  if ('get' in obj) {
    var getter = obj.get;
    if (getter !== undefined && typeof getter !== "function") {
      throw new TypeError("property descriptor 'get' attribute must be "+
                          "callable or undefined, given: "+getter);
    }
    desc.get = getter;
  }
  if ('set' in obj) {
    var setter = obj.set;
    if (setter !== undefined && typeof setter !== "function") {
      throw new TypeError("property descriptor 'set' attribute must be "+
                          "callable or undefined, given: "+setter);
    }
    desc.set = setter;
  }
  if ('get' in desc || 'set' in desc) {
    if ('value' in desc || 'writable' in desc) {
      throw new TypeError("property descriptor cannot be both a data and an "+
                          "accessor descriptor: "+obj);
    }
  }
  return desc;
}

function isAccessorDescriptor(desc) {
  if (desc === undefined) return false;
  return ('get' in desc || 'set' in desc);
}
function isDataDescriptor(desc) {
  if (desc === undefined) return false;
  return ('value' in desc || 'writable' in desc);
}
function isGenericDescriptor(desc) {
  if (desc === undefined) return false;
  return !isAccessorDescriptor(desc) && !isDataDescriptor(desc);
}

function toCompletePropertyDescriptor(desc) {
  var internalDesc = toPropertyDescriptor(desc);
  if (isGenericDescriptor(internalDesc) || isDataDescriptor(internalDesc)) {
    if (!('value' in internalDesc)) { internalDesc.value = undefined; }
    if (!('writable' in internalDesc)) { internalDesc.writable = false; }
  } else {
    if (!('get' in internalDesc)) { internalDesc.get = undefined; }
    if (!('set' in internalDesc)) { internalDesc.set = undefined; }
  }
  if (!('enumerable' in internalDesc)) { internalDesc.enumerable = false; }
  if (!('configurable' in internalDesc)) { internalDesc.configurable = false; }
  return internalDesc;
}

function isEmptyDescriptor(desc) {
  return !('get' in desc) &&
         !('set' in desc) &&
         !('value' in desc) &&
         !('writable' in desc) &&
         !('enumerable' in desc) &&
         !('configurable' in desc);
}

function isEquivalentDescriptor(desc1, desc2) {
  return sameValue(desc1.get, desc2.get) &&
         sameValue(desc1.set, desc2.set) &&
         sameValue(desc1.value, desc2.value) &&
         sameValue(desc1.writable, desc2.writable) &&
         sameValue(desc1.enumerable, desc2.enumerable) &&
         sameValue(desc1.configurable, desc2.configurable);
}

// copied from http://wiki.ecmascript.org/doku.php?id=harmony:egal
function sameValue(x, y) {
  if (x === y) {
    // 0 === -0, but they are not identical
    return x !== 0 || 1 / x === 1 / y;
  }

  // NaN !== NaN, but they are identical.
  // NaNs are the only non-reflexive value, i.e., if x !== x,
  // then x is a NaN.
  // isNaN is broken: it converts its argument to number, so
  // isNaN("foo") => true
  return x !== x && y !== y;
}

/**
 * Returns a fresh property descriptor that is guaranteed
 * to be complete (i.e. contain all the standard attributes).
 * Additionally, any non-standard enumerable properties of
 * attributes are copied over to the fresh descriptor.
 *
 * If attributes is undefined, returns undefined.
 *
 * See also: http://wiki.ecmascript.org/doku.php?id=harmony:proxies_semantics
 */
function normalizeAndCompletePropertyDescriptor(attributes) {
  if (attributes === undefined) { return undefined; }
  var desc = toCompletePropertyDescriptor(attributes);
  // Note: no need to call FromPropertyDescriptor(desc), as we represent
  // "internal" property descriptors as proper Objects from the start
  for (var name in attributes) {
    if (!isStandardAttribute(name)) {
      Object.defineProperty(desc, name,
        { value: attributes[name],
          writable: true,
          enumerable: true,
          configurable: true });
    }
  }
  return desc;
}

/**
 * Returns a fresh property descriptor whose standard
 * attributes are guaranteed to be data properties of the right type.
 * Additionally, any non-standard enumerable properties of
 * attributes are copied over to the fresh descriptor.
 *
 * If attributes is undefined, will throw a TypeError.
 *
 * See also: http://wiki.ecmascript.org/doku.php?id=harmony:proxies_semantics
 */
function normalizePropertyDescriptor(attributes) {
  var desc = toPropertyDescriptor(attributes);
  // Note: no need to call FromGenericPropertyDescriptor(desc), as we represent
  // "internal" property descriptors as proper Objects from the start
  for (var name in attributes) {
    if (!isStandardAttribute(name)) {
      Object.defineProperty(desc, name,
        { value: attributes[name],
          writable: true,
          enumerable: true,
          configurable: true });
    }
  }
  return desc;
}

// store a reference to the real ES5 primitives before patching them later
var prim_preventExtensions =        Object.preventExtensions,
    prim_seal =                     Object.seal,
    prim_freeze =                   Object.freeze,
    prim_isExtensible =             Object.isExtensible,
    prim_isSealed =                 Object.isSealed,
    prim_isFrozen =                 Object.isFrozen,
    prim_getPrototypeOf =           Object.getPrototypeOf,
    prim_getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,
    prim_defineProperty =           Object.defineProperty,
    prim_keys =                     Object.keys,
    prim_getOwnPropertyNames =      Object.getOwnPropertyNames,
    prim_isArray =                  Array.isArray,
    prim_concat =                   Array.prototype.concat,
    prim_isPrototypeOf =            Object.prototype.isPrototypeOf,
    prim_hasOwnProperty =           Object.prototype.hasOwnProperty;

// these will point to the patched versions of the respective methods on
// Object. They are used within this module as the "intrinsic" bindings
// of these methods (i.e. the "original" bindings as defined in the spec)
var Object_isFrozen,
    Object_isSealed,
    Object_isExtensible,
    Object_getPrototypeOf,
    Object_getOwnPropertyNames;

/**
 * A property 'name' is fixed if it is an own property of the target.
 */
function isFixed(name, target) {
  return ({}).hasOwnProperty.call(target, name);
}
function isSealed(name, target) {
  var desc = Object.getOwnPropertyDescriptor(target, name);
  if (desc === undefined) { return false; }
  return desc.configurable === false;
}
function isSealedDesc(desc) {
  return desc !== undefined && desc.configurable === false;
}

/**
 * Performs all validation that Object.defineProperty performs,
 * without actually defining the property. Returns a boolean
 * indicating whether validation succeeded.
 *
 * Implementation transliterated from ES5.1 section 8.12.9
 */
function isCompatibleDescriptor(extensible, current, desc) {
  if (current === undefined && extensible === false) {
    return false;
  }
  if (current === undefined && extensible === true) {
    return true;
  }
  if (isEmptyDescriptor(desc)) {
    return true;
  }
  if (isEquivalentDescriptor(current, desc)) {
    return true;
  }
  if (current.configurable === false) {
    if (desc.configurable === true) {
      return false;
    }
    if ('enumerable' in desc && desc.enumerable !== current.enumerable) {
      return false;
    }
  }
  if (isGenericDescriptor(desc)) {
    return true;
  }
  if (isDataDescriptor(current) !== isDataDescriptor(desc)) {
    if (current.configurable === false) {
      return false;
    }
    return true;
  }
  if (isDataDescriptor(current) && isDataDescriptor(desc)) {
    if (current.configurable === false) {
      if (current.writable === false && desc.writable === true) {
        return false;
      }
      if (current.writable === false) {
        if ('value' in desc && !sameValue(desc.value, current.value)) {
          return false;
        }
      }
    }
    return true;
  }
  if (isAccessorDescriptor(current) && isAccessorDescriptor(desc)) {
    if (current.configurable === false) {
      if ('set' in desc && !sameValue(desc.set, current.set)) {
        return false;
      }
      if ('get' in desc && !sameValue(desc.get, current.get)) {
        return false;
      }
    }
  }
  return true;
}

// ES6 7.3.11 SetIntegrityLevel
// level is one of "sealed" or "frozen"
function setIntegrityLevel(target, level) {
  var ownProps = Object_getOwnPropertyNames(target);
  var pendingException = undefined;
  if (level === "sealed") {
    var l = +ownProps.length;
    var k;
    for (var i = 0; i < l; i++) {
      k = String(ownProps[i]);
      try {
        Object.defineProperty(target, k, { configurable: false });
      } catch (e) {
        if (pendingException === undefined) {
          pendingException = e;
        }
      }
    }
  } else {
    // level === "frozen"
    var l = +ownProps.length;
    var k;
    for (var i = 0; i < l; i++) {
      k = String(ownProps[i]);
      try {
        var currentDesc = Object.getOwnPropertyDescriptor(target, k);
        if (currentDesc !== undefined) {
          var desc;
          if (isAccessorDescriptor(currentDesc)) {
            desc = { configurable: false }
          } else {
            desc = { configurable: false, writable: false }
          }
          Object.defineProperty(target, k, desc);
        }        
      } catch (e) {
        if (pendingException === undefined) {
          pendingException = e;
        }
      }
    }
  }
  if (pendingException !== undefined) {
    throw pendingException;
  }
  return Reflect.preventExtensions(target);
}

// ES6 7.3.12 TestIntegrityLevel
// level is one of "sealed" or "frozen"
function testIntegrityLevel(target, level) {
  var isExtensible = Object_isExtensible(target);
  if (isExtensible) return false;
  
  var ownProps = Object_getOwnPropertyNames(target);
  var pendingException = undefined;
  var configurable = false;
  var writable = false;
  
  var l = +ownProps.length;
  var k;
  var currentDesc;
  for (var i = 0; i < l; i++) {
    k = String(ownProps[i]);
    try {
      currentDesc = Object.getOwnPropertyDescriptor(target, k);
      configurable = configurable || currentDesc.configurable;
      if (isDataDescriptor(currentDesc)) {
        writable = writable || currentDesc.writable;
      }
    } catch (e) {
      if (pendingException === undefined) {
        pendingException = e;
        configurable = true;
      }
    }
  }
  if (pendingException !== undefined) {
    throw pendingException;
  }
  if (level === "frozen" && writable === true) {
    return false;
  }
  if (configurable === true) {
    return false;
  }
  return true;
}

// ---- The Validator handler wrapper around user handlers ----

/**
 * @param target the object wrapped by this proxy.
 * As long as the proxy is extensible, only non-configurable properties
 * are checked against the target. Once the proxy becomes non-extensible,
 * invariants w.r.t. non-extensibility are also enforced.
 *
 * @param handler the handler of the direct proxy. The object emulated by
 * this handler is validated against the target object of the direct proxy.
 * Any violations that the handler makes against the invariants
 * of the target will cause a TypeError to be thrown.
 *
 * Both target and handler must be proper Objects at initialization time.
 */
function Validator(target, handler) {
  // for non-revokable proxies, these are const references
  // for revokable proxies, on revocation:
  // - this.target is set to null
  // - this.handler is set to a handler that throws on all traps
  this.target  = target;
  this.handler = handler;
}

Validator.prototype = {

  /**
   * If getTrap returns undefined, the caller should perform the
   * default forwarding behavior.
   * If getTrap returns normally otherwise, the return value
   * will be a callable trap function. When calling the trap function,
   * the caller is responsible for binding its |this| to |this.handler|.
   */
  getTrap: function(trapName) {
    var trap = this.handler[trapName];
    if (trap === undefined) {
      // the trap was not defined,
      // perform the default forwarding behavior
      return undefined;
    }

    if (typeof trap !== "function") {
      throw new TypeError(trapName + " trap is not callable: "+trap);
    }

    return trap;
  },

  // === fundamental traps ===

  /**
   * If name denotes a fixed property, check:
   *   - whether targetHandler reports it as existent
   *   - whether the returned descriptor is compatible with the fixed property
   * If the proxy is non-extensible, check:
   *   - whether name is not a new property
   * Additionally, the returned descriptor is normalized and completed.
   */
  getOwnPropertyDescriptor: function(name) {
    

    var trap = this.getTrap("getOwnPropertyDescriptor");
    if (trap === undefined) {
      return Reflect.getOwnPropertyDescriptor(this.target, name);
    }

    name = String(name);
    var desc = trap.call(this.handler, this.target, name);
    desc = normalizeAndCompletePropertyDescriptor(desc);

    var targetDesc = Object.getOwnPropertyDescriptor(this.target, name);
    var extensible = Object.isExtensible(this.target);

    if (desc === undefined) {
      if (isSealedDesc(targetDesc)) {
        throw new TypeError("cannot report non-configurable property '"+name+
                            "' as non-existent");
      }
      if (!extensible && targetDesc !== undefined) {
          // if handler is allowed to return undefined, we cannot guarantee
          // that it will not return a descriptor for this property later.
          // Once a property has been reported as non-existent on a non-extensible
          // object, it should forever be reported as non-existent
          throw new TypeError("cannot report existing own property '"+name+
                              "' as non-existent on a non-extensible object");
      }
      return undefined;
    }

    // at this point, we know (desc !== undefined), i.e.
    // targetHandler reports 'name' as an existing property

    // Note: we could collapse the following two if-tests into a single
    // test. Separating out the cases to improve error reporting.

    if (!extensible) {
      if (targetDesc === undefined) {
        throw new TypeError("cannot report a new own property '"+
                            name + "' on a non-extensible object");
      }
    }

    if (name !== undefined) {
      if (!isCompatibleDescriptor(extensible, targetDesc, desc)) {
        throw new TypeError("cannot report incompatible property descriptor "+
                            "for property '"+name+"'");
      }
    }

    if (desc.configurable === false && !isSealedDesc(targetDesc)) {
      // if the property is configurable or non-existent on the target,
      // but is reported as a non-configurable property, it may later be
      // reported as configurable or non-existent, which violates the
      // invariant that if the property might change or disappear, the
      // configurable attribute must be true.
      throw new TypeError("cannot report a non-configurable descriptor "+
                          "for configurable or non-existent property '"+name+"'");
    }

    return desc;
  },

  /**
   * In the direct proxies design with refactored prototype climbing,
   * this trap is deprecated. For proxies-as-prototypes, instead
   * of calling this trap, the get, set, has or enumerate traps are
   * called instead.
   *
   * In this implementation, we "abuse" getPropertyDescriptor to
   * support trapping the get or set traps for proxies-as-prototypes.
   * We do this by returning a getter/setter pair that invokes
   * the corresponding traps.
   *
   * While this hack works for inherited property access, it has some
   * quirks:
   *
   * In Firefox, this trap is only called after a prior invocation
   * of the 'has' trap has returned true. Hence, expect the following
   * behavior:
   * <code>
   * var child = Object.create(Proxy(target, handler));
   * child[name] // triggers handler.has(target, name)
   * // if that returns true, triggers handler.get(target, name, child)
   * </code>
   *
   * On v8, the 'in' operator, when applied to an object that inherits
   * from a proxy, will call getPropertyDescriptor and walk the proto-chain.
   * That calls the below getPropertyDescriptor trap on the proxy. The
   * result of the 'in'-operator is then determined by whether this trap
   * returns undefined or a property descriptor object. That is why
   * we first explicitly trigger the 'has' trap to determine whether
   * the property exists.
   *
   * This has the side-effect that when enumerating properties on
   * an object that inherits from a proxy in v8, only properties
   * for which 'has' returns true are returned:
   *
   * <code>
   * var child = Object.create(Proxy(target, handler));
   * for (var prop in child) {
   *   // only enumerates prop if (prop in child) returns true
   * }
   * </code>
   */
  getPropertyDescriptor: function(name) {
    var handler = this;

    if (!handler.has(name)) return undefined;

    return {
      get: function() {
        return handler.get(this, name);
      },
      set: function(val) {
        if (handler.set(this, name, val)) {
          return val;
        } else {
          throw new TypeError("failed assignment to "+name);
        }
      },
      enumerable: true,
      configurable: true
    };
  },

  /**
   * If name denotes a fixed property, check for incompatible changes.
   * If the proxy is non-extensible, check that new properties are rejected.
   */
  defineProperty: function(name, desc) {
    // TODO(tvcutsem): the current tracemonkey implementation of proxies
    // auto-completes 'desc', which is not correct. 'desc' should be
    // normalized, but not completed. Consider:
    // Object.defineProperty(proxy, 'foo', {enumerable:false})
    // This trap will receive desc =
    //  {value:undefined,writable:false,enumerable:false,configurable:false}
    // This will also set all other attributes to their default value,
    // which is unexpected and different from [[DefineOwnProperty]].
    // Bug filed: https://bugzilla.mozilla.org/show_bug.cgi?id=601329

    var trap = this.getTrap("defineProperty");
    if (trap === undefined) {
      // default forwarding behavior
      return Reflect.defineProperty(this.target, name, desc);
    }

    name = String(name);
    desc = normalizePropertyDescriptor(desc);
    var success = trap.call(this.handler, this.target, name, desc);
    success = !!success; // coerce to Boolean

    if (success === true) {

      var targetDesc = Object.getOwnPropertyDescriptor(this.target, name);
      var extensible = Object.isExtensible(this.target);

      // Note: we could collapse the following two if-tests into a single
      // test. Separating out the cases to improve error reporting.

      if (!extensible) {
        if (targetDesc === undefined) {
          throw new TypeError("cannot successfully add a new property '"+
                              name + "' to a non-extensible object");
        }
      }

      if (targetDesc !== undefined) {
        if (!isCompatibleDescriptor(extensible, targetDesc, desc)) {
          throw new TypeError("cannot define incompatible property "+
                              "descriptor for property '"+name+"'");
        }
      }

      if (desc.configurable === false && !isSealedDesc(targetDesc)) {
        // if the property is configurable or non-existent on the target,
        // but is successfully being redefined as a non-configurable property,
        // it may later be reported as configurable or non-existent, which violates
        // the invariant that if the property might change or disappear, the
        // configurable attribute must be true.
        throw new TypeError("cannot successfully define a non-configurable "+
                            "descriptor for configurable or non-existent property '"+
                            name+"'");
      }

    }

    return success;
  },

  /**
   * On success, check whether the target object is indeed non-extensible.
   */
  preventExtensions: function() {
    var trap = this.getTrap("preventExtensions");
    if (trap === undefined) {
      // default forwarding behavior
      return Reflect.preventExtensions(this.target);
    }

    var success = trap.call(this.handler, this.target);
    success = !!success; // coerce to Boolean
    if (success) {
      if (Object_isExtensible(this.target)) {
        throw new TypeError("can't report extensible object as non-extensible: "+
                            this.target);
      }
    }
    return success;
  },

  /**
   * If name denotes a sealed property, check whether handler rejects.
   */
  delete: function(name) {
    
    var trap = this.getTrap("deleteProperty");
    if (trap === undefined) {
      // default forwarding behavior
      return Reflect.deleteProperty(this.target, name);
    }

    name = String(name);
    var res = trap.call(this.handler, this.target, name);
    res = !!res; // coerce to Boolean

    if (res === true) {
      if (isSealed(name, this.target)) {
        throw new TypeError("property '"+name+"' is non-configurable "+
                            "and can't be deleted");
      }
    }

    return res;
  },

  /**
   * The getOwnPropertyNames trap was replaced by the ownKeys trap,
   * which now also returns an array (of strings or symbols) and
   * which performs the same rigorous invariant checks as getOwnPropertyNames
   */
  getOwnPropertyNames: function() {
    throw new TypeError("getOwnPropertyNames trap is deprecated");
  },

  /**
   * Checks whether the trap result does not contain any new properties
   * if the proxy is non-extensible.
   *
   * Any own non-configurable properties of the target that are not included
   * in the trap result give rise to a TypeError. As such, we check whether the
   * returned result contains at least all sealed properties of the target
   * object.
   *
   * Additionally, the trap result is normalized.
   * Instead of returning the trap result directly:
   *  - create and return a fresh Array,
   *  - of which each element is coerced to a String
   *
   * This trap is called a.o. by Reflect.ownKeys, Object.getOwnPropertyNames
   * and Object.keys (the latter filters out only the enumerable own properties).
   */
  ownKeys: function() {
    var trap = this.getTrap("ownKeys");
    if (trap === undefined) {
      // default forwarding behavior
      return Reflect.ownKeys(this.target);
    }

    var trapResult = trap.call(this.handler, this.target);

    // propNames is used as a set of strings
    var propNames = Object.create(null);
    var numProps = +trapResult.length;
    var result = new Array(numProps);

    for (var i = 0; i < numProps; i++) {
      var s = String(trapResult[i]);
      if (!Object.isExtensible(this.target) && !isFixed(s, this.target)) {
        // non-extensible proxies don't tolerate new own property names
        throw new TypeError("ownKeys trap cannot list a new "+
                            "property '"+s+"' on a non-extensible object");
      }

      propNames[s] = true;
      result[i] = s;
    }

    var ownProps = Object_getOwnPropertyNames(this.target);
    var target = this.target;
    ownProps.forEach(function (ownProp) {
      if (!propNames[ownProp]) {
        if (isSealed(ownProp, target)) {
          throw new TypeError("ownKeys trap failed to include "+
                              "non-configurable property '"+ownProp+"'");
        }
        if (!Object.isExtensible(target) &&
            isFixed(ownProp, target)) {
            // if handler is allowed to report ownProp as non-existent,
            // we cannot guarantee that it will never later report it as
            // existent. Once a property has been reported as non-existent
            // on a non-extensible object, it should forever be reported as
            // non-existent
            throw new TypeError("ownKeys trap cannot report existing own property '"+
                                ownProp+"' as non-existent on a non-extensible object");
        }
      }
    });

    return result;
  },

  /**
   * Checks whether the trap result is consistent with the state of the
   * wrapped target.
   */
  isExtensible: function() {
    var trap = this.getTrap("isExtensible");
    if (trap === undefined) {
      // default forwarding behavior
      return Reflect.isExtensible(this.target);
    }

    var result = trap.call(this.handler, this.target);
    result = !!result; // coerce to Boolean
    var state = Object_isExtensible(this.target);
    if (result !== state) {
      if (result) {
        throw new TypeError("cannot report non-extensible object as extensible: "+
                             this.target);
      } else {
        throw new TypeError("cannot report extensible object as non-extensible: "+
                             this.target);
      }
    }
    return state;
  },

  /**
   * Check whether the trap result corresponds to the target's [[Prototype]]
   */
  getPrototypeOf: function() {
    var trap = this.getTrap("getPrototypeOf");
    if (trap === undefined) {
      // default forwarding behavior
      return Reflect.getPrototypeOf(this.target);
    }

    var allegedProto = trap.call(this.handler, this.target);

    if (!Object_isExtensible(this.target)) {
      var actualProto = Object_getPrototypeOf(this.target);
      if (!sameValue(allegedProto, actualProto)) {
        throw new TypeError("prototype value does not match: " + this.target);
      }
    }

    return allegedProto;
  },

  /**
   * If target is non-extensible and setPrototypeOf trap returns true,
   * check whether the trap result corresponds to the target's [[Prototype]]
   */
  setPrototypeOf: function(newProto) {
    var trap = this.getTrap("setPrototypeOf");
    if (trap === undefined) {
      // default forwarding behavior
      return Reflect.setPrototypeOf(this.target, newProto);
    }

    var success = trap.call(this.handler, this.target, newProto);

    success = !!success;
    if (success && !Object_isExtensible(this.target)) {
      var actualProto = Object_getPrototypeOf(this.target);
      if (!sameValue(newProto, actualProto)) {
        throw new TypeError("prototype value does not match: " + this.target);
      }
    }

    return success;
  },

  /**
   * In the direct proxies design with refactored prototype climbing,
   * this trap is deprecated. For proxies-as-prototypes, for-in will
   * call the enumerate() trap. If that trap is not defined, the
   * operation is forwarded to the target, no more fallback on this
   * fundamental trap.
   */
  getPropertyNames: function() {
    throw new TypeError("getPropertyNames trap is deprecated");
  },

  // === derived traps ===

  /**
   * If name denotes a fixed property, check whether the trap returns true.
   */
  has: function(name) {
    var trap = this.getTrap("has");
    if (trap === undefined) {
      // default forwarding behavior
      return Reflect.has(this.target, name);
    }

    name = String(name);
    var res = trap.call(this.handler, this.target, name);
    res = !!res; // coerce to Boolean

    if (res === false) {
      if (isSealed(name, this.target)) {
        throw new TypeError("cannot report existing non-configurable own "+
                            "property '"+ name + "' as a non-existent "+
                            "property");
      }
      if (!Object.isExtensible(this.target) &&
          isFixed(name, this.target)) {
          // if handler is allowed to return false, we cannot guarantee
          // that it will not return true for this property later.
          // Once a property has been reported as non-existent on a non-extensible
          // object, it should forever be reported as non-existent
          throw new TypeError("cannot report existing own property '"+name+
                              "' as non-existent on a non-extensible object");
      }
    }

    // if res === true, we don't need to check for extensibility
    // even for a non-extensible proxy that has no own name property,
    // the property may have been inherited

    return res;
  },

  /**
   * If name denotes a fixed non-configurable, non-writable data property,
   * check its return value against the previously asserted value of the
   * fixed property.
   */
  get: function(receiver, name) {

    // experimental support for invoke() trap on platforms that
    // support __noSuchMethod__
    /*
    if (name === '__noSuchMethod__') {
      var handler = this;
      return function(name, args) {
        return handler.invoke(receiver, name, args);
      }
    }
    */

    var trap = this.getTrap("get");
    if (trap === undefined) {
      // default forwarding behavior
      return Reflect.get(this.target, name, receiver);
    }

    name = String(name);
    var res = trap.call(this.handler, this.target, name, receiver);

    var fixedDesc = Object.getOwnPropertyDescriptor(this.target, name);
    // check consistency of the returned value
    if (fixedDesc !== undefined) { // getting an existing property
      if (isDataDescriptor(fixedDesc) &&
          fixedDesc.configurable === false &&
          fixedDesc.writable === false) { // own frozen data property
        if (!sameValue(res, fixedDesc.value)) {
          throw new TypeError("cannot report inconsistent value for "+
                              "non-writable, non-configurable property '"+
                              name+"'");
        }
      } else { // it's an accessor property
        if (isAccessorDescriptor(fixedDesc) &&
            fixedDesc.configurable === false &&
            fixedDesc.get === undefined) {
          if (res !== undefined) {
            throw new TypeError("must report undefined for non-configurable "+
                                "accessor property '"+name+"' without getter");
          }
        }
      }
    }

    return res;
  },

  /**
   * If name denotes a fixed non-configurable, non-writable data property,
   * check that the trap rejects the assignment.
   */
  set: function(receiver, name, val) {
    var trap = this.getTrap("set");
    if (trap === undefined) {
      // default forwarding behavior
      return Reflect.set(this.target, name, val, receiver);
    }

    name = String(name);
    var res = trap.call(this.handler, this.target, name, val, receiver);
    res = !!res; // coerce to Boolean

    // if success is reported, check whether property is truly assignable
    if (res === true) {
      var fixedDesc = Object.getOwnPropertyDescriptor(this.target, name);
      if (fixedDesc !== undefined) { // setting an existing property
        if (isDataDescriptor(fixedDesc) &&
            fixedDesc.configurable === false &&
            fixedDesc.writable === false) {
          if (!sameValue(val, fixedDesc.value)) {
            throw new TypeError("cannot successfully assign to a "+
                                "non-writable, non-configurable property '"+
                                name+"'");
          }
        } else {
          if (isAccessorDescriptor(fixedDesc) &&
              fixedDesc.configurable === false && // non-configurable
              fixedDesc.set === undefined) {      // accessor with undefined setter
            throw new TypeError("setting a property '"+name+"' that has "+
                                " only a getter");
          }
        }
      }
    }

    return res;
  },

  /**
   * Any own enumerable non-configurable properties of the target that are not
   * included in the trap result give rise to a TypeError. As such, we check
   * whether the returned result contains at least all sealed enumerable properties
   * of the target object.
   *
   * The trap should return an iterator.
   *
   * However, as implementations of pre-direct proxies still expect enumerate
   * to return an array of strings, we convert the iterator into an array.
   */
  enumerate: function() {
    var trap = this.getTrap("enumerate");
    if (trap === undefined) {
      // default forwarding behavior
      var trapResult = Reflect.enumerate(this.target);
      var result = [];
      var nxt = trapResult.next();
      while (!nxt.done) {
        result.push(String(nxt.value));
        nxt = trapResult.next();
      }
      return result;
    }

    var trapResult = trap.call(this.handler, this.target);
    
    if (trapResult === null ||
        trapResult === undefined ||
        trapResult.next === undefined) {
      throw new TypeError("enumerate trap should return an iterator, got: "+
                          trapResult);    
    }
    
    // propNames is used as a set of strings
    var propNames = Object.create(null);
    
    // var numProps = +trapResult.length;
    var result = []; // new Array(numProps);
    
    // trapResult is supposed to be an iterator
    // drain iterator to array as current implementations still expect
    // enumerate to return an array of strings
    var nxt = trapResult.next();
    
    while (!nxt.done) {
      var s = String(nxt.value);
      if (propNames[s]) {
        throw new TypeError("enumerate trap cannot list a "+
                            "duplicate property '"+s+"'");
      }
      propNames[s] = true;
      result.push(s);
      nxt = trapResult.next();
    }
    
    /*for (var i = 0; i < numProps; i++) {
      var s = String(trapResult[i]);
      if (propNames[s]) {
        throw new TypeError("enumerate trap cannot list a "+
                            "duplicate property '"+s+"'");
      }

      propNames[s] = true;
      result[i] = s;
    } */

    var ownEnumerableProps = Object.keys(this.target);
    var target = this.target;
    ownEnumerableProps.forEach(function (ownEnumerableProp) {
      if (!propNames[ownEnumerableProp]) {
        if (isSealed(ownEnumerableProp, target)) {
          throw new TypeError("enumerate trap failed to include "+
                              "non-configurable enumerable property '"+
                              ownEnumerableProp+"'");
        }
        if (!Object.isExtensible(target) &&
            isFixed(ownEnumerableProp, target)) {
            // if handler is allowed not to report ownEnumerableProp as an own
            // property, we cannot guarantee that it will never report it as
            // an own property later. Once a property has been reported as
            // non-existent on a non-extensible object, it should forever be
            // reported as non-existent
            throw new TypeError("cannot report existing own property '"+
                                ownEnumerableProp+"' as non-existent on a "+
                                "non-extensible object");
        }
      }
    });

    return result;
  },

  /**
   * The iterate trap is deprecated by the enumerate trap.
   */
  iterate: Validator.prototype.enumerate,

  /**
   * Any own non-configurable properties of the target that are not included
   * in the trap result give rise to a TypeError. As such, we check whether the
   * returned result contains at least all sealed properties of the target
   * object.
   *
   * The trap result is normalized.
   * The trap result is not returned directly. Instead:
   *  - create and return a fresh Array,
   *  - of which each element is coerced to String,
   *  - which does not contain duplicates
   *
   * FIXME: keys trap is deprecated
   */
  /*
  keys: function() {
    var trap = this.getTrap("keys");
    if (trap === undefined) {
      // default forwarding behavior
      return Reflect.keys(this.target);
    }

    var trapResult = trap.call(this.handler, this.target);

    // propNames is used as a set of strings
    var propNames = Object.create(null);
    var numProps = +trapResult.length;
    var result = new Array(numProps);

    for (var i = 0; i < numProps; i++) {
     var s = String(trapResult[i]);
     if (propNames[s]) {
       throw new TypeError("keys trap cannot list a "+
                           "duplicate property '"+s+"'");
     }
     if (!Object.isExtensible(this.target) && !isFixed(s, this.target)) {
       // non-extensible proxies don't tolerate new own property names
       throw new TypeError("keys trap cannot list a new "+
                           "property '"+s+"' on a non-extensible object");
     }

     propNames[s] = true;
     result[i] = s;
    }

    var ownEnumerableProps = Object.keys(this.target);
    var target = this.target;
    ownEnumerableProps.forEach(function (ownEnumerableProp) {
      if (!propNames[ownEnumerableProp]) {
        if (isSealed(ownEnumerableProp, target)) {
          throw new TypeError("keys trap failed to include "+
                              "non-configurable enumerable property '"+
                              ownEnumerableProp+"'");
        }
        if (!Object.isExtensible(target) &&
            isFixed(ownEnumerableProp, target)) {
            // if handler is allowed not to report ownEnumerableProp as an own
            // property, we cannot guarantee that it will never report it as
            // an own property later. Once a property has been reported as
            // non-existent on a non-extensible object, it should forever be
            // reported as non-existent
            throw new TypeError("cannot report existing own property '"+
                                ownEnumerableProp+"' as non-existent on a "+
                                "non-extensible object");
        }
      }
    });

    return result;
  },
  */
  
  /**
   * New trap that reifies [[Call]].
   * If the target is a function, then a call to
   *   proxy(...args)
   * Triggers this trap
   */
  apply: function(target, thisBinding, args) {
    var trap = this.getTrap("apply");
    if (trap === undefined) {
      return Reflect.apply(target, thisBinding, args);
    }

    if (typeof this.target === "function") {
      return trap.call(this.handler, target, thisBinding, args);
    } else {
      throw new TypeError("apply: "+ target + " is not a function");
    }
  },

  /**
   * New trap that reifies [[Construct]].
   * If the target is a function, then a call to
   *   new proxy(...args)
   * Triggers this trap
   */
  construct: function(target, args) {
    var trap = this.getTrap("construct");
    if (trap === undefined) {
      return Reflect.construct(target, args);
    }

    if (typeof this.target === "function") {
      return trap.call(this.handler, target, args);
    } else {
      throw new TypeError("new: "+ target + " is not a function");
    }
  }
};

// ---- end of the Validator handler wrapper handler ----

// In what follows, a 'direct proxy' is a proxy
// whose handler is a Validator. Such proxies can be made non-extensible,
// sealed or frozen without losing the ability to trap.

// maps direct proxies to their Validator handlers
var directProxies = new WeakMap();

// patch Object.{preventExtensions,seal,freeze} so that
// they recognize fixable proxies and act accordingly
Object.preventExtensions = function(subject) {
  var vhandler = directProxies.get(subject);
  if (vhandler !== undefined) {
    if (vhandler.preventExtensions()) {
      return subject;
    } else {
      throw new TypeError("preventExtensions on "+subject+" rejected");
    }
  } else {
    return prim_preventExtensions(subject);
  }
};
Object.seal = function(subject) {
  setIntegrityLevel(subject, "sealed");
  return subject;
};
Object.freeze = function(subject) {
  setIntegrityLevel(subject, "frozen");
  return subject;
};
Object.isExtensible = Object_isExtensible = function(subject) {
  var vHandler = directProxies.get(subject);
  if (vHandler !== undefined) {
    return vHandler.isExtensible();
  } else {
    return prim_isExtensible(subject);
  }
};
Object.isSealed = Object_isSealed = function(subject) {
  return testIntegrityLevel(subject, "sealed");
};
Object.isFrozen = Object_isFrozen = function(subject) {
  return testIntegrityLevel(subject, "frozen");
};
Object.getPrototypeOf = Object_getPrototypeOf = function(subject) {
  var vHandler = directProxies.get(subject);
  if (vHandler !== undefined) {
    return vHandler.getPrototypeOf();
  } else {
    return prim_getPrototypeOf(subject);
  }
};

// patch Object.getOwnPropertyDescriptor to directly call
// the Validator.prototype.getOwnPropertyDescriptor trap
// This is to circumvent an assertion in the built-in Proxy
// trapping mechanism of v8, which disallows that trap to
// return non-configurable property descriptors (as per the
// old Proxy design)
Object.getOwnPropertyDescriptor = function(subject, name) {
  var vhandler = directProxies.get(subject);
  if (vhandler !== undefined) {
    return vhandler.getOwnPropertyDescriptor(name);
  } else {
    return prim_getOwnPropertyDescriptor(subject, name);
  }
};

// patch Object.defineProperty to directly call
// the Validator.prototype.defineProperty trap
// This is to circumvent two issues with the built-in
// trap mechanism:
// 1) the current tracemonkey implementation of proxies
// auto-completes 'desc', which is not correct. 'desc' should be
// normalized, but not completed. Consider:
// Object.defineProperty(proxy, 'foo', {enumerable:false})
// This trap will receive desc =
//  {value:undefined,writable:false,enumerable:false,configurable:false}
// This will also set all other attributes to their default value,
// which is unexpected and different from [[DefineOwnProperty]].
// Bug filed: https://bugzilla.mozilla.org/show_bug.cgi?id=601329
// 2) the current spidermonkey implementation does not
// throw an exception when this trap returns 'false', but instead silently
// ignores the operation (this is regardless of strict-mode)
// 2a) v8 does throw an exception for this case, but includes the rather
//     unhelpful error message:
// 'Proxy handler #<Object> returned false from 'defineProperty' trap'
Object.defineProperty = function(subject, name, desc) {
  var vhandler = directProxies.get(subject);
  if (vhandler !== undefined) {
    var normalizedDesc = normalizePropertyDescriptor(desc);
    var success = vhandler.defineProperty(name, normalizedDesc);
    if (success === false) {
      throw new TypeError("can't redefine property '"+name+"'");
    }
    return success;
  } else {
    return prim_defineProperty(subject, name, desc);
  }
};

Object.keys = function(subject) {
  var vHandler = directProxies.get(subject);
  if (vHandler !== undefined) {
    var ownKeys = vHandler.ownKeys();
    var result = [];
    for (var i = 0; i < ownKeys.length; i++) {
      var k = String(ownKeys[i]);
      var desc = Object.getOwnPropertyDescriptor(subject, k);
      if (desc !== undefined && desc.enumerable === true) {
        result.push(k);
      }
    }
    return result;
  } else {
    return prim_keys(subject);
  }
}

Object.getOwnPropertyNames = Object_getOwnPropertyNames = function(subject) {
  var vHandler = directProxies.get(subject);
  if (vHandler !== undefined) {
    return vHandler.ownKeys();
  } else {
    return prim_getOwnPropertyNames(subject);
  }
}

// returns whether an argument is a reference to an object,
// which is legal as a WeakMap key.
function isObject(arg) {
  var type = typeof arg;
  return (type === 'object' && arg !== null) || (type === 'function');
};

// a wrapper for WeakMap.get which returns the undefined value
// for keys that are not objects (in which case the underlying
// WeakMap would have thrown a TypeError).
function safeWeakMapGet(map, key) {
  return isObject(key) ? map.get(key) : undefined;
};

// returns a new function of zero arguments that recursively
// unwraps any proxies specified as the |this|-value.
// The primitive is assumed to be a zero-argument method
// that uses its |this|-binding.
function makeUnwrapping0ArgMethod(primitive) {
  return function builtin() {
    var vHandler = safeWeakMapGet(directProxies, this);
    if (vHandler !== undefined) {
      return builtin.call(vHandler.target);
    } else {
      return primitive.call(this);
    }
  }
};

// returns a new function of 1 arguments that recursively
// unwraps any proxies specified as the |this|-value.
// The primitive is assumed to be a 1-argument method
// that uses its |this|-binding.
function makeUnwrapping1ArgMethod(primitive) {
  return function builtin(arg) {
    var vHandler = safeWeakMapGet(directProxies, this);
    if (vHandler !== undefined) {
      return builtin.call(vHandler.target, arg);
    } else {
      return primitive.call(this, arg);
    }
  }
};

Object.prototype.valueOf =
  makeUnwrapping0ArgMethod(Object.prototype.valueOf);
Object.prototype.toString =
  makeUnwrapping0ArgMethod(Object.prototype.toString);
Function.prototype.toString =
  makeUnwrapping0ArgMethod(Function.prototype.toString);
Date.prototype.toString =
  makeUnwrapping0ArgMethod(Date.prototype.toString);

Object.prototype.isPrototypeOf = function builtin(arg) {
  // bugfix thanks to Bill Mark:
  // built-in isPrototypeOf does not unwrap proxies used
  // as arguments. So, we implement the builtin ourselves,
  // based on the ECMAScript 6 spec. Our encoding will
  // make sure that if a proxy is used as an argument,
  // its getPrototypeOf trap will be called.
  while (true) {
    var vHandler2 = safeWeakMapGet(directProxies, arg);
    if (vHandler2 !== undefined) {
      arg = vHandler2.getPrototypeOf();
      if (arg === null) {
        return false;
      } else if (sameValue(arg, this)) {
        return true;
      }
    } else {
      return prim_isPrototypeOf.call(this, arg);
    }
  }
};

Array.isArray = function(subject) {
  var vHandler = safeWeakMapGet(directProxies, subject);
  if (vHandler !== undefined) {
    return Array.isArray(vHandler.target);
  } else {
    return prim_isArray(subject);
  }
};

function isProxyArray(arg) {
  var vHandler = safeWeakMapGet(directProxies, arg);
  if (vHandler !== undefined) {
    return Array.isArray(vHandler.target);
  }
  return false;
}

// Array.prototype.concat internally tests whether one of its
// arguments is an Array, by checking whether [[Class]] == "Array"
// As such, it will fail to recognize proxies-for-arrays as arrays.
// We patch Array.prototype.concat so that it "unwraps" proxies-for-arrays
// by making a copy. This will trigger the exact same sequence of
// traps on the proxy-for-array as if we would not have unwrapped it.
// See <https://github.com/tvcutsem/harmony-reflect/issues/19> for more.
Array.prototype.concat = function(/*...args*/) {
  var length;
  for (var i = 0; i < arguments.length; i++) {
    if (isProxyArray(arguments[i])) {
      length = arguments[i].length;
      arguments[i] = Array.prototype.slice.call(arguments[i], 0, length);
    }
  }
  return prim_concat.apply(this, arguments);
};

// setPrototypeOf support on platforms that support __proto__

var prim_setPrototypeOf = Object.setPrototypeOf;

// patch and extract original __proto__ setter
var __proto__setter = (function() {
  var protoDesc = prim_getOwnPropertyDescriptor(Object.prototype,'__proto__');
  if (protoDesc === undefined ||
      typeof protoDesc.set !== "function") {
    return function() {
      throw new TypeError("setPrototypeOf not supported on this platform");
    }
  }

  // see if we can actually mutate a prototype with the generic setter
  // (e.g. Chrome v28 doesn't allow setting __proto__ via the generic setter)
  try {
    protoDesc.set.call({},{});
  } catch (e) {
    return function() {
      throw new TypeError("setPrototypeOf not supported on this platform");
    }
  }

  prim_defineProperty(Object.prototype, '__proto__', {
    set: function(newProto) {
      return Object.setPrototypeOf(this, newProto);
    }
  });

  return protoDesc.set;
}());

Object.setPrototypeOf = function(target, newProto) {
  var handler = directProxies.get(target);
  if (handler !== undefined) {
    if (handler.setPrototypeOf(newProto)) {
      return target;
    } else {
      throw new TypeError("proxy rejected prototype mutation");
    }
  } else {
    if (!Object_isExtensible(target)) {
      throw new TypeError("can't set prototype on non-extensible object: " +
                          target);
    }
    if (prim_setPrototypeOf)
      return prim_setPrototypeOf(target, newProto);

    if (Object(newProto) !== newProto || newProto === null) {
      throw new TypeError("Object prototype may only be an Object or null: " +
                         newProto);
      // throw new TypeError("prototype must be an object or null")
    }
    __proto__setter.call(target, newProto);
    return target;
  }
}

Object.prototype.hasOwnProperty = function(name) {
  var handler = safeWeakMapGet(directProxies, this);
  if (handler !== undefined) {
    var desc = handler.getOwnPropertyDescriptor(name);
    return desc !== undefined;
  } else {
    return prim_hasOwnProperty.call(this, name);
  }
}

// ============= Reflection module =============
// see http://wiki.ecmascript.org/doku.php?id=harmony:reflect_api

var Reflect = global.Reflect = {
  getOwnPropertyDescriptor: function(target, name) {
    return Object.getOwnPropertyDescriptor(target, name);
  },
  defineProperty: function(target, name, desc) {

    // if target is a proxy, invoke its "defineProperty" trap
    var handler = directProxies.get(target);
    if (handler !== undefined) {
      return handler.defineProperty(target, name, desc);
    }

    // Implementation transliterated from [[DefineOwnProperty]]
    // see ES5.1 section 8.12.9
    // this is the _exact same algorithm_ as the isCompatibleDescriptor
    // algorithm defined above, except that at every place it
    // returns true, this algorithm actually does define the property.
    var current = Object.getOwnPropertyDescriptor(target, name);
    var extensible = Object.isExtensible(target);
    if (current === undefined && extensible === false) {
      return false;
    }
    if (current === undefined && extensible === true) {
      Object.defineProperty(target, name, desc); // should never fail
      return true;
    }
    if (isEmptyDescriptor(desc)) {
      return true;
    }
    if (isEquivalentDescriptor(current, desc)) {
      return true;
    }
    if (current.configurable === false) {
      if (desc.configurable === true) {
        return false;
      }
      if ('enumerable' in desc && desc.enumerable !== current.enumerable) {
        return false;
      }
    }
    if (isGenericDescriptor(desc)) {
      // no further validation necessary
    } else if (isDataDescriptor(current) !== isDataDescriptor(desc)) {
      if (current.configurable === false) {
        return false;
      }
    } else if (isDataDescriptor(current) && isDataDescriptor(desc)) {
      if (current.configurable === false) {
        if (current.writable === false && desc.writable === true) {
          return false;
        }
        if (current.writable === false) {
          if ('value' in desc && !sameValue(desc.value, current.value)) {
            return false;
          }
        }
      }
    } else if (isAccessorDescriptor(current) && isAccessorDescriptor(desc)) {
      if (current.configurable === false) {
        if ('set' in desc && !sameValue(desc.set, current.set)) {
          return false;
        }
        if ('get' in desc && !sameValue(desc.get, current.get)) {
          return false;
        }
      }
    }
    Object.defineProperty(target, name, desc); // should never fail
    return true;
  },
  deleteProperty: function(target, name) {
    var handler = directProxies.get(target);
    if (handler !== undefined) {
      return handler.deleteProperty(target, name);
    }
    
    var desc = Object.getOwnPropertyDescriptor(target, name);
    if (desc === undefined) {
      return true;
    }
    if (desc.configurable === true) {
      delete target[name];
      return true;
    }
    return false;    
  },
  getPrototypeOf: function(target) {
    return Object.getPrototypeOf(target);
  },
  setPrototypeOf: function(target, newProto) {
    
    var handler = directProxies.get(target);
    if (handler !== undefined) {
      return handler.setPrototypeOf(newProto);
    }
    
    if (Object(newProto) !== newProto || newProto === null) {
      throw new TypeError("Object prototype may only be an Object or null: " +
                         newProto);
    }
    
    if (!Object_isExtensible(target)) {
      return false;
    }
    
    var current = Object.getPrototypeOf(target);
    if (sameValue(current, newProto)) {
      return true;
    }
    
    if (prim_setPrototypeOf) {
      try {
        prim_setPrototypeOf(target, newProto);
        return true;
      } catch (e) {
        return false;
      }
    }

    __proto__setter.call(target, newProto);
    return true;
  },
  preventExtensions: function(target) {
    var handler = directProxies.get(target);
    if (handler !== undefined) {
      return handler.preventExtensions();
    }
    prim_preventExtensions(target);
    return true;
  },
  isExtensible: function(target) {
    return Object.isExtensible(target);
  },
  has: function(target, name) {
    return name in target;
  },
  get: function(target, name, receiver) {
    receiver = receiver || target;

    // if target is a proxy, invoke its "get" trap
    var handler = directProxies.get(target);
    if (handler !== undefined) {
      return handler.get(receiver, name);
    }

    var desc = Object.getOwnPropertyDescriptor(target, name);
    if (desc === undefined) {
      var proto = Object.getPrototypeOf(target);
      if (proto === null) {
        return undefined;
      }
      return Reflect.get(proto, name, receiver);
    }
    if (isDataDescriptor(desc)) {
      return desc.value;
    }
    var getter = desc.get;
    if (getter === undefined) {
      return undefined;
    }
    return desc.get.call(receiver);
  },
  // Reflect.set implementation based on latest version of [[SetP]] at
  // http://wiki.ecmascript.org/doku.php?id=harmony:proto_climbing_refactoring
  set: function(target, name, value, receiver) {
    receiver = receiver || target;

    // if target is a proxy, invoke its "set" trap
    var handler = directProxies.get(target);
    if (handler !== undefined) {
      return handler.set(receiver, name, value);
    }

    // first, check whether target has a non-writable property
    // shadowing name on receiver
    var ownDesc = Object.getOwnPropertyDescriptor(target, name);

    if (ownDesc === undefined) {
      // name is not defined in target, search target's prototype
      var proto = Object.getPrototypeOf(target);

      if (proto !== null) {
        // continue the search in target's prototype
        return Reflect.set(proto, name, value, receiver);
      }

      // Rev16 change. Cf. https://bugs.ecmascript.org/show_bug.cgi?id=1549
      // target was the last prototype, now we know that 'name' is not shadowed
      // by an existing (accessor or data) property, so we can add the property
      // to the initial receiver object
      // (this branch will intentionally fall through to the code below)
      ownDesc =
        { value: undefined,
          writable: true,
          enumerable: true,
          configurable: true };
    }

    // we now know that ownDesc !== undefined
    if (isAccessorDescriptor(ownDesc)) {
      var setter = ownDesc.set;
      if (setter === undefined) return false;
      setter.call(receiver, value); // assumes Function.prototype.call
      return true;
    }
    // otherwise, isDataDescriptor(ownDesc) must be true
    if (ownDesc.writable === false) return false;
    // we found an existing writable data property on the prototype chain.
    // Now update or add the data property on the receiver, depending on
    // whether the receiver already defines the property or not.
    var existingDesc = Object.getOwnPropertyDescriptor(receiver, name);
    if (existingDesc !== undefined) {
      var updateDesc =
        { value: value,
          // FIXME: it should not be necessary to describe the following
          // attributes. Added to circumvent a bug in tracemonkey:
          // https://bugzilla.mozilla.org/show_bug.cgi?id=601329
          writable:     existingDesc.writable,
          enumerable:   existingDesc.enumerable,
          configurable: existingDesc.configurable };
      Object.defineProperty(receiver, name, updateDesc);
      return true;
    } else {
      if (!Object.isExtensible(receiver)) return false;
      var newDesc =
        { value: value,
          writable: true,
          enumerable: true,
          configurable: true };
      Object.defineProperty(receiver, name, newDesc);
      return true;
    }
  },
  /*invoke: function(target, name, args, receiver) {
    receiver = receiver || target;

    var handler = directProxies.get(target);
    if (handler !== undefined) {
      return handler.invoke(receiver, name, args);
    }

    var fun = Reflect.get(target, name, receiver);
    return Function.prototype.apply.call(fun, receiver, args);
  },*/
  enumerate: function(target) {
    var handler = directProxies.get(target);
    var result;
    if (handler !== undefined) {
      // handler.enumerate should return an iterator directly, but the
      // iterator gets converted to an array for backward-compat reasons,
      // so we must re-iterate over the array
      result = handler.enumerate(handler.target);
    } else {
      result = [];
      for (var name in target) { result.push(name); };      
    }
    var l = +result.length;
    var idx = 0;
    return {
      next: function() {
        if (idx === l) return { done: true };
        return { done: false, value: result[idx++] };
      }
    };
  },
  // imperfect ownKeys implementation: in ES6, should also include
  // symbol-keyed properties.
  ownKeys: function(target) {
    return Object_getOwnPropertyNames(target);
  },
  apply: function(target, receiver, args) {
    // target.apply(receiver, args)
    return Function.prototype.apply.call(target, receiver, args);
  },
  construct: function(target, args) {
    // return new target(...args);

    // if target is a proxy, invoke its "construct" trap
    var handler = directProxies.get(target);
    if (handler !== undefined) {
      return handler.construct(handler.target, args);
    }

    var proto = target.prototype;
    var instance = (Object(proto) === proto) ? Object.create(proto) : {};
    var result = Function.prototype.apply.call(target, instance, args);
    return Object(result) === result ? result : instance;
  }
};

// feature-test whether the Proxy global exists
if (typeof Proxy !== "undefined") {

  var primCreate = Proxy.create,
      primCreateFunction = Proxy.createFunction;

  var revokedHandler = primCreate({
    get: function() { throw new TypeError("proxy is revoked"); }
  });

  global.Proxy = function(target, handler) {
    // check that target is an Object
    if (Object(target) !== target) {
      throw new TypeError("Proxy target must be an Object, given "+target);
    }
    // check that handler is an Object
    if (Object(handler) !== handler) {
      throw new TypeError("Proxy handler must be an Object, given "+handler);
    }

    var vHandler = new Validator(target, handler);
    var proxy;
    if (typeof target === "function") {
      proxy = primCreateFunction(vHandler,
        // call trap
        function() {
          var args = Array.prototype.slice.call(arguments);
          return vHandler.apply(target, this, args);
        },
        // construct trap
        function() {
          var args = Array.prototype.slice.call(arguments);
          return vHandler.construct(target, args);
        });
    } else {
      proxy = primCreate(vHandler, Object.getPrototypeOf(target));
    }
    directProxies.set(proxy, vHandler);
    return proxy;
  };

  global.Proxy.revocable = function(target, handler) {
    var proxy = new Proxy(target, handler);
    var revoke = function() {
      var vHandler = directProxies.get(proxy);
      if (vHandler !== null) {
        vHandler.target  = null;
        vHandler.handler = revokedHandler;
      }
      return undefined;
    };
    return {proxy: proxy, revoke: revoke};
  }

} else {
  // Proxy global not defined, so proxies are not supported

  global.Proxy = function(_target, _handler) {
    throw new Error("proxies not supported on this platform");
  }

}

// for node.js modules, export every property in the Reflect object
// as part of the module interface
if (typeof exports !== 'undefined') {
  Object.keys(Reflect).forEach(function (key) {
    exports[key] = Reflect[key];
  });
}

}(typeof exports !== 'undefined' ? global : this)); // function-as-module pattern;
define("harmony-reflect", (function (global) {
    return function () {
        var ret, fn;
        return ret || global.Reflect;
    };
}(this)));

define('resiliency/Retry',["../utils/Enum", "harmony-reflect"], function($__0,$__2) {
  
  var $__14,
      $__15;
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__2 || !$__2.__esModule)
    $__2 = {default: $__2};
  var $__1 = $__0,
      EnumSymbol = $__1.EnumSymbol,
      Enum = $__1.Enum;
  var Reflect = $__2.default;
  var $__13 = [{}, {}, {}],
      INCREMENTAL = ($__14 = $__13[$traceurRuntime.toProperty(Symbol.iterator)](), ($__15 = $__14.next()).done ? void 0 : $__15.value),
      EXPONENTIAL = ($__15 = $__14.next()).done ? void 0 : $__15.value,
      FIBONACCI = ($__15 = $__14.next()).done ? void 0 : $__15.value;
  var BackoffStrategy = new Enum({
    INCREMENTAL: INCREMENTAL,
    EXPONENTIAL: EXPONENTIAL,
    FIBONACCI: FIBONACCI
  });
  var Retry = function Retry($__16) {
    var $__17 = $__16,
        maxTries = $__17.maxTries,
        maxDelay = $__17.maxDelay,
        delayRatio = $__17.delayRatio,
        backoffStrategy = $__17.backoffStrategy,
        intermediate = $__17.intermediate;
    this.maxTries = 1;
    this.maxDelay = Infinity;
    this.delayRatio = 1;
    this.backoffStrategy = BackoffStrategy.INCREMENTAL;
    this.intermediate = function() {};
    if (maxTries)
      this.maxTries = maxTries;
    if (maxDelay)
      this.maxDelay = maxDelay;
    if (delayRatio)
      this.delayRatio = delayRatio;
    if (backoffStrategy) {
      if (BackoffStrategy.contains(backoffStrategy)) {
        this.backoffStrategy = backoffStrategy;
      } else {
        throw Error('backoffStrategy value should be of EnumSymbol<BackoffStrategy>  type');
      }
    }
    if (intermediate)
      this.intermediate = intermediate;
    switch (this.backoffStrategy) {
      case BackoffStrategy.INCREMENTAL:
        this._backoffStrategy = this.incremental();
        break;
      case BackoffStrategy.EXPONENTIAL:
        this._backoffStrategy = this.exponential();
        break;
      case BackoffStrategy.FIBONACCI:
        this._backoffStrategy = this.fibonacci();
        break;
      default:
        this._backoffStrategy = this.incremental();
        break;
    }
  };
  var $Retry = Retry;
  ($traceurRuntime.createClass)(Retry, {
    try: function(target, receiver) {
      var $__25,
          args,
          intermediate,
          remainingTries,
          $__4,
          delay;
      var $arguments = arguments;
      return $traceurRuntime.asyncWrap(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              args = $arguments[2] !== (void 0) ? $arguments[2] : [];
              intermediate = $arguments[3] !== (void 0) ? $arguments[3] : this.intermediate;
              remainingTries = $arguments[4] !== (void 0) ? $arguments[4] : this.maxTries;
              $__4 = this;
              delay = this._calculateDelay(remainingTries);
              $ctx.state = 7;
              break;
            case 7:
              Promise.resolve(this._sleep(delay * 1000)).then($ctx.createCallback(2), $ctx.errback);
              return ;
            case 2:
              $ctx.returnValue = ($__25 = target).call.apply($__25, $traceurRuntime.spread([receiver], args)).catch((function(error) {
                var intermediateResult = intermediate(error, remainingTries, delay);
                if (remainingTries <= 1) {
                  throw new Error('Giving up! maximum retry attempts reached.');
                }
                if (intermediateResult === false) {
                  throw new Error('Intermediate callback returned false. Retry stopped.');
                } else {
                  return $__4.try(target, receiver, args, intermediate, remainingTries - 1);
                }
              }));
              $ctx.state = 4;
              break;
            case 4:
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, this);
    },
    _calculateDelay: function(remainingTries) {
      var delay = this.delayRatio * this._backoffStrategy.next().value;
      return Math.min(delay, this.maxDelay);
    },
    _sleep: function(ms) {
      return new Promise((function(resolve) {
        setTimeout(resolve, ms);
      }));
    },
    incremental: $traceurRuntime.initGeneratorFunction(function $__27() {
      var i,
          reset;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              i = 0;
              $ctx.state = 9;
              break;
            case 9:
              $ctx.state = (true) ? 1 : -2;
              break;
            case 6:
              i++;
              $ctx.state = 9;
              break;
            case 1:
              $ctx.state = 2;
              return i;
            case 2:
              reset = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              if (reset) {
                i = 0;
              }
              $ctx.state = 6;
              break;
            default:
              return $ctx.end();
          }
      }, $__27, this);
    }),
    exponential: $traceurRuntime.initGeneratorFunction(function $__28() {
      var i,
          reset;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              i = 0;
              $ctx.state = 9;
              break;
            case 9:
              $ctx.state = (true) ? 1 : -2;
              break;
            case 6:
              i++;
              $ctx.state = 9;
              break;
            case 1:
              $ctx.state = 2;
              return Math.pow(2, i);
            case 2:
              reset = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              if (reset) {
                i = 0;
              }
              $ctx.state = 6;
              break;
            default:
              return $ctx.end();
          }
      }, $__28, this);
    }),
    fibonacci: $traceurRuntime.initGeneratorFunction(function $__29() {
      var $__17,
          $__18,
          $__19,
          $__20,
          $__21,
          $__22,
          $__23,
          $__24,
          $__16,
          prev,
          curr,
          reset;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $__16 = [0, 1], prev = ($__17 = $__16[$traceurRuntime.toProperty(Symbol.iterator)](), ($__18 = $__17.next()).done ? void 0 : $__18.value), curr = ($__18 = $__17.next()).done ? void 0 : $__18.value;
              $ctx.state = 11;
              break;
            case 11:
              $ctx.state = (true) ? 5 : -2;
              break;
            case 5:
              ($__19 = [curr, prev + curr], prev = ($__20 = $__19[$traceurRuntime.toProperty(Symbol.iterator)](), ($__21 = $__20.next()).done ? void 0 : $__21.value), curr = ($__21 = $__20.next()).done ? void 0 : $__21.value, $__19);
              $ctx.state = 6;
              break;
            case 6:
              $ctx.state = 2;
              return curr;
            case 2:
              reset = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              if (reset) {
                ($__22 = [0, 1], prev = ($__23 = $__22[$traceurRuntime.toProperty(Symbol.iterator)](), ($__24 = $__23.next()).done ? void 0 : $__24.value), curr = ($__24 = $__23.next()).done ? void 0 : $__24.value, $__22);
              }
              $ctx.state = 11;
              break;
            default:
              return $ctx.end();
          }
      }, $__29, this);
    })
  }, {proxify: function(obj) {
      var classRetry;
      var proxifyed = false;
      if (obj.annotations) {
        for (var anno in obj.annotations) {
          if (anno instanceof $Retry) {
            classRetry = anno;
          }
        }
      }
      for (var name in obj.__proto__) {
        var methodRetry = undefined;
        if (obj[name].annotations) {
          var $__9 = true;
          var $__10 = false;
          var $__11 = undefined;
          try {
            for (var $__7 = void 0,
                $__6 = (obj[name].annotations)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__9 = ($__7 = $__6.next()).done); $__9 = true) {
              var anno$__26 = $__7.value;
              {
                if (anno$__26 instanceof $Retry) {
                  methodRetry = anno$__26;
                }
              }
            }
          } catch ($__12) {
            $__10 = true;
            $__11 = $__12;
          } finally {
            try {
              if (!$__9 && $__6.return != null) {
                $__6.return();
              }
            } finally {
              if ($__10) {
                throw $__11;
              }
            }
          }
        }
        if (methodRetry || classRetry) {
          proxifyed = true;
          var retry = methodRetry || classRetry;
          obj[name] = new Proxy(obj[name], {apply: (function(target, receiver, args) {
              return retry.try.call(retry, target, receiver, args);
            })});
        }
      }
      if (!proxifyed) {
        throw new Error('No @Retry annotations found on target class or its methods. Cannot apply Retry aspect');
      }
      return obj;
    }});
  Object.defineProperty(Retry.prototype.try, "parameters", {get: function() {
      return [[Function], [], [], [Function], [$traceurRuntime.type.number]];
    }});
  Object.defineProperty(Retry.prototype._calculateDelay, "parameters", {get: function() {
      return [[$traceurRuntime.type.number]];
    }});
  return {
    get BackoffStrategy() {
      return BackoffStrategy;
    },
    get Retry() {
      return Retry;
    },
    __esModule: true
  };
});

define('reactive/EventBus',["bower-sockjs-client", "stomp-websocket", "../utils/Enum", "../resiliency/Retry"], function($__0,$__1,$__2,$__4) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__1 || !$__1.__esModule)
    $__1 = {default: $__1};
  if (!$__2 || !$__2.__esModule)
    $__2 = {default: $__2};
  if (!$__4 || !$__4.__esModule)
    $__4 = {default: $__4};
  $__0;
  $__1;
  var $__3 = $__2,
      EnumSymbol = $__3.EnumSymbol,
      Enum = $__3.Enum;
  var $__5 = $__4,
      BackoffStrategy = $__5.BackoffStrategy,
      Retry = $__5.Retry;
  var EBUS_CONFIG = {
    BASE_URL: 'http://localhost:8080/<YourBaaS>/stomp',
    CONNECTION_OPTIONS: {headers: {}}
  };
  var ReadyState = new Enum({
    CONNECTING: {
      value: 0,
      description: 'Connecting'
    },
    OPEN: {
      value: 1,
      description: 'Open'
    },
    AUTHENTICATED: {
      value: 2,
      description: 'Authenticated'
    },
    CLOSING: {
      value: 3,
      description: 'Closing'
    },
    CLOSED: {
      value: 4,
      description: 'Closed'
    },
    RECONNECT_ABORTED: {
      value: 5,
      description: 'Reconnect Aborted'
    }
  });
  var user = Symbol('user', true);
  var handlers = Symbol('handlers', true);
  var subscriptions = Symbol('subscriptions', true);
  var cBaseUrl = Symbol('cBaseUrl', true);
  var cOptions = Symbol('cOptions', true);
  var readyState = Symbol('readyState', true);
  var onDisconnectDefaultListener = Symbol('onDisconnect', true);
  var retryIntermediateCallback = (function(error, remainingTries, delay) {
    console.error(("Previous error: [" + error + "]"));
    console.info(("Previous remaining tries: [" + remainingTries + "]"));
    console.info(("Previous delay: [" + delay + "s]"));
  });
  var EventBus = function EventBus() {
    var baseUrl = arguments[0] !== (void 0) ? arguments[0] : EBUS_CONFIG.BASE_URL;
    var options = arguments[1] !== (void 0) ? arguments[1] : EBUS_CONFIG.CONNECTION_OPTIONS;
    var $__6 = this;
    this[cOptions] = options;
    this[readyState] = ReadyState.CLOSED;
    this[cBaseUrl] = baseUrl;
    this.stompClient = undefined;
    this[handlers] = new Map();
    this[subscriptions] = new Map();
    this[onDisconnectDefaultListener] = (function(error) {
      console.error('in onDisconnectDefaultListener. will try in 30sec. Error: ', error);
      setTimeout((function() {
        return $__6.open(true, $__6[onDisconnectDefaultListener]);
      }), 30000);
    });
  };
  ($traceurRuntime.createClass)(EventBus, {
    get readyState() {
      return this[readyState];
    },
    getUser: function() {
      return this[user];
    },
    open: function() {
      var force = arguments[0] !== (void 0) ? arguments[0] : false;
      var onDisconnect = arguments[1] !== (void 0) ? arguments[1] : this[onDisconnectDefaultListener];
      var $__6 = this;
      return new Promise((function(resolve, reject) {
        if (force || $__6[readyState] >= ReadyState.CLOSED) {
          console.log('trying to open STOMP connection...');
          var socket = new SockJS($__6[cBaseUrl]);
          $__6.stompClient = Stomp.over(socket);
          $__6[readyState] = ReadyState.CONNECTING;
          $__6.stompClient.connect($__6[cOptions].headers, (function(frame) {
            if (frame.headers["user-name"]) {
              $__6[readyState] = ReadyState.AUTHENTICATED;
            } else {
              $__6[readyState] = ReadyState.OPEN;
            }
            $__6._resubscribe();
            console.group();
            console.log('%cConnection Opened Succssfully.', 'background: #222; color: #bada55');
            console.info(("%cFrame: " + frame), 'background: #222; color: #bada55');
            console.info(("%cConnected username: %c" + frame.headers["user-name"]), 'background: #222; color: #bada55', 'background: #222; color: #7FFFD4');
            console.info('Registering onDisconnect listener to monitoring future disconnects.');
            $__6[user] = frame.headers["user-name"];
            $__6.stompClient.ws.onclose = (function(error) {
              $__6[readyState] = ReadyState.CLOSED;
              onDisconnect(error);
            });
            console.groupEnd();
            resolve(frame);
          }), (function(error) {
            $__6[readyState] = ReadyState.CLOSED;
            reject(error);
          }));
        } else {
          console.info('EventBus already open');
          resolve();
        }
      }));
    },
    close: function() {
      var force = arguments[0] !== (void 0) ? arguments[0] : false;
      var $__6 = this;
      return new Promise((function(resolve, reject) {
        if (force || $__6[readyState] < ReadyState.CLOSED) {
          $__6[readyState] = ReadyState.CLOSING;
          $__6.stompClient.disconnect((function() {
            $__6[readyState] = ReadyState.CLOSED;
            console.log("%cSTOMP connection closed", 'background: #222; color: #bada55');
            resolve('STOMP connection closed');
          }));
        } else {
          console.log("%cSTOMP connection already closed", 'background: #222; color: #bada55');
          resolve('STOMP connection already closed');
        }
      }));
    },
    _resubscribe: function() {
      var $__6 = this;
      var myHandlers = this[handlers];
      myHandlers.forEach((function(callback, address, myHandlers) {
        $__6[subscriptions].set(address, $__6.stompClient.subscribe(address, callback));
      }));
    },
    registerHandler: function(address, callback) {
      this[handlers].set(address, callback);
      if ((this[readyState] === ReadyState.OPEN || this[readyState] === ReadyState.AUTHENTICATED) && !this[subscriptions].has(address)) {
        this[subscriptions].set(address, this.stompClient.subscribe(address, callback));
      }
    },
    unregisterHandler: function(address) {
      this[handlers].delete(address);
      if (this[subscriptions].has(address)) {
        this[subscriptions].get(address).unsubscribe();
        this[subscriptions].delete(address);
      }
    },
    send: function(address, data) {
      var headers = arguments[2] !== (void 0) ? arguments[2] : {};
      var $__6 = this;
      return new Promise((function(resolve, reject) {
        var subscription = $__6.stompClient.subscribe(address, (function(result) {
          if (result.body) {
            resolve(JSON.parse(result.body));
          } else {
            reject({error: 'got empty message'});
          }
        }));
      }));
    },
    publish: function(address, data) {
      var headers = arguments[2] !== (void 0) ? arguments[2] : {};
      this.stompClient.send(address, headers, JSON.stringify(data));
    }
  }, {});
  Object.defineProperty(EventBus, "parameters", {get: function() {
      return [[$traceurRuntime.type.string], [Object]];
    }});
  Object.defineProperty(EventBus.prototype.open, "annotations", {get: function() {
      return [new Retry({
        maxTries: 20,
        maxDelay: 5,
        backoffStrategy: BackoffStrategy.INCREMENTAL,
        intermediate: retryIntermediateCallback
      })];
    }});
  Object.defineProperty(EventBus.prototype.open, "parameters", {get: function() {
      return [[], [Function]];
    }});
  return {
    get EBUS_CONFIG() {
      return EBUS_CONFIG;
    },
    get ReadyState() {
      return ReadyState;
    },
    get EventBus() {
      return EventBus;
    },
    __esModule: true
  };
});

define('common/utils/UniqueFilter',[], function() {
  
  function UniqueFilter($parse) {
    return (function(items, filterOn) {
      if (filterOn === false) {
        return items;
      }
      if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {
        var newItems = [],
            get = angular.isString(filterOn) ? $parse(filterOn) : function(item) {
              return item;
            };
        var extractValueToCompare = function(item) {
          return angular.isObject(item) ? get(item) : item;
        };
        angular.forEach(items, function(item) {
          var isDuplicate = false;
          for (var i = 0; i < newItems.length; i++) {
            if (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) {
              isDuplicate = true;
              break;
            }
          }
          if (!isDuplicate) {
            newItems.push(item);
          }
        });
        items = newItems;
      }
      return items;
    });
  }
  var $__default = UniqueFilter;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('common/utils/Filters',[], function() {
  
  var Filters = function Filters() {};
  ($traceurRuntime.createClass)(Filters, {}, {
    max: function(arr) {
      if (!arr)
        return arr;
      return Math.max.apply(null, arr);
    },
    min: function(arr) {
      if (!arr)
        return arr;
      return Math.min.apply(null, arr);
    },
    reverse: function(arr) {
      if (!arr)
        return arr;
      return arr.reverse();
    },
    unique: function(items, filterOn) {
      if (filterOn === false) {
        return items;
      }
      if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {
        var newItems = [],
            get = angular.isString(filterOn) ? $parse(filterOn) : function(item) {
              return item;
            };
        var extractValueToCompare = function(item) {
          return angular.isObject(item) ? get(item) : item;
        };
        angular.forEach(items, function(item) {
          var isDuplicate = false;
          for (var i = 0; i < newItems.length; i++) {
            if (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) {
              isDuplicate = true;
              break;
            }
          }
          if (!isDuplicate) {
            newItems.push(item);
          }
        });
        items = newItems;
      }
      return items;
    }
  });
  var $__default = Filters;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('common/utils/Formaters',[], function() {
  
  var Formaters = function Formaters() {};
  ($traceurRuntime.createClass)(Formaters, {}, {
    print: function(str) {
      console.log("Filters.debug.print", str);
      return str;
    },
    YesNo: function(b) {
      return b === true ? 'Yes' : 'No';
    },
    format: function(str) {
      if (!str || arguments.length <= 1)
        return str;
      var args = arguments;
      for (var i = 1; i < arguments.length; i++) {
        var reg = new RegExp("\\{" + (i - 1) + "\\}", "gm");
        str = str.replace(reg, arguments[i]);
      }
      return str;
    },
    html2string: function(str) {
      if (!str)
        return str;
      return $('<div/>').html(str).text();
    },
    shorten: function(str, length) {
      if (!str || !length || str.length <= length)
        return (str || '');
      return str.substr(0, length) + (length <= 3 ? '' : '...');
    },
    lowercase: function(str) {
      return (str || '').toLowerCase();
    },
    uppercase: function(str) {
      return (str || '').toUpperCase();
    },
    camelcase: function(str) {
      return (str || '').toLowerCase().replace(/(\s.|^.)/g, function(match, group) {
        return group ? group.toUpperCase() : '';
      });
    },
    capitalize: function(str) {
      if (str != null)
        str = str.toLowerCase();
      return str.substring(0, 1).toUpperCase() + str.substring(1);
    },
    trim: function(str) {
      return (str || '').replace(/(^\s*|\s*$)/g, function(match, group) {
        return '';
      });
    },
    trimstart: function(str) {
      return (str || '').replace(/(^\s*)/g, function(match, group) {
        return '';
      });
    },
    trimend: function(str) {
      return (str || '').replace(/(\s*$)/g, function(match, group) {
        return '';
      });
    },
    replace: function(str, pattern, replacement) {
      try {
        return (str || '').replace(RegExp(pattern, 'g'), replacement);
      } catch (e) {
        console.error("error in replace filter", e);
        return (str || '');
      }
    },
    join: function(arr, seperator) {
      if (!arr)
        return arr;
      return arr.join(seperator || ',');
    }
  });
  var $__default = Formaters;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('common/index',["./routes", "./controllers/LoginController", "./controllers/SettingsController", "./services/AuthenticationService", "./services/AuthorizationService", "./services/UserService", "./elements/hasPermission", "./elements/ScrollOnClickDirective", "./elements/ContenteditableDirective", "./utils/AuthInterceptor", "../reactive/EventBus", "../resiliency/Retry", "./utils/util", "./utils/UniqueFilter", "./utils/Filters", "./utils/Formaters"], function($__0,$__2,$__4,$__6,$__8,$__10,$__12,$__14,$__16,$__18,$__20,$__22,$__24,$__26,$__28,$__30) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__2 || !$__2.__esModule)
    $__2 = {default: $__2};
  if (!$__4 || !$__4.__esModule)
    $__4 = {default: $__4};
  if (!$__6 || !$__6.__esModule)
    $__6 = {default: $__6};
  if (!$__8 || !$__8.__esModule)
    $__8 = {default: $__8};
  if (!$__10 || !$__10.__esModule)
    $__10 = {default: $__10};
  if (!$__12 || !$__12.__esModule)
    $__12 = {default: $__12};
  if (!$__14 || !$__14.__esModule)
    $__14 = {default: $__14};
  if (!$__16 || !$__16.__esModule)
    $__16 = {default: $__16};
  if (!$__18 || !$__18.__esModule)
    $__18 = {default: $__18};
  if (!$__20 || !$__20.__esModule)
    $__20 = {default: $__20};
  if (!$__22 || !$__22.__esModule)
    $__22 = {default: $__22};
  if (!$__24 || !$__24.__esModule)
    $__24 = {default: $__24};
  if (!$__26 || !$__26.__esModule)
    $__26 = {default: $__26};
  if (!$__28 || !$__28.__esModule)
    $__28 = {default: $__28};
  if (!$__30 || !$__30.__esModule)
    $__30 = {default: $__30};
  var routes = $__0.default;
  var $__3 = $__2,
      LoginController = $__3.LoginController,
      LoginModalController = $__3.LoginModalController;
  var SettingsController = $__4.default;
  var $__7 = $__6,
      AUTH_CONFIG = $__7.AUTH_CONFIG,
      AUTH_EVENTS = $__7.AUTH_EVENTS,
      AuthenticationService = $__7.AuthenticationService;
  var AuthorizationService = $__8.AuthorizationService;
  var UserService = $__10.default;
  var hasPermission = $__12.default;
  var ScrollOnClickDirective = $__14.default;
  var ContenteditableDirective = $__16.default;
  var AuthInterceptor = $__18.default;
  var $__21 = $__20,
      EBUS_CONFIG = $__21.EBUS_CONFIG,
      EventBus = $__21.EventBus;
  var $__23 = $__22,
      BackoffStrategy = $__23.BackoffStrategy,
      Retry = $__23.Retry;
  var isProxySupported = $__24.isProxySupported;
  var UniqueFilter = $__26.default;
  var Filters = $__28.default;
  var Formaters = $__30.default;
  var moduleName = 'spaApp.common';
  var commonModule = angular.module(moduleName, ['http-auth-interceptor-buffer']);
  commonModule.service('UserService', UserService);
  commonModule.service('AuthenticationService', AuthenticationService);
  commonModule.service('AuthorizationService', AuthorizationService);
  commonModule.service('$eventBus', EventBus);
  commonModule.directive('hasPermission', hasPermission);
  commonModule.directive('scrollOnClick', (function($rootScope, $timeout, $location) {
    return new ScrollOnClickDirective($rootScope, $timeout, $location);
  }));
  commonModule.directive('contenteditable', (function($sce) {
    return new ContenteditableDirective($sce);
  }));
  commonModule.controller('LoginController', LoginController);
  commonModule.controller('LoginModalController', LoginModalController);
  commonModule.controller('SettingsController', SettingsController);
  commonModule.filter('unique', UniqueFilter);
  commonModule.filter('string_replace', [(function() {
    return Formaters.replace;
  })]);
  commonModule.filter('string_camelcase', [(function() {
    return Formaters.camelcase;
  })]);
  commonModule.config(routes);
  commonModule.config((function($httpProvider) {
    
    $httpProvider.interceptors.push(AuthInterceptor);
    AUTH_CONFIG.BASE_URL = 'http://apsrd3850:8080/apiApp';
    AUTH_CONFIG.LOGIN_URL = AUTH_CONFIG.BASE_URL + '/j_spring_security_check';
    AUTH_CONFIG.LOGOUT_URL = AUTH_CONFIG.BASE_URL + '/logout';
    AUTH_CONFIG.PROFILE_URL = AUTH_CONFIG.BASE_URL + '/login/currentUser';
    EBUS_CONFIG.BASE_URL = 'http://apsrd3850:8080/apiApp/stomp';
  }));
  commonModule.run((function($rootScope, $eventBus) {
    
    var eventBus = $eventBus;
    if (isProxySupported()) {
      eventBus = Retry.proxify($eventBus);
    }
    if (typeof Object.observe === 'function') {
      Object.observe(eventBus, (function(changes) {
        $rootScope.$apply();
      }), ['update']);
    } else {
      console.warn('Object.observe() not supported');
    }
    var onDisconnectListener = (function(error) {
      console.log('in onDisconnectListener - Error: ', error);
      console.error(("SockJS closed.........readyState: " + eventBus.readyState.description));
      console.info("Attempting to reconnect");
      eventBus.open(true, onDisconnectListener);
    });
    var openConnection = (function() {
      return eventBus.open(true, onDisconnectListener).catch((function(error) {
        console.error('Error: ', error);
      }));
    });
    $rootScope.$on(AUTH_EVENTS.loginSuccess, (function() {
      eventBus.close().then((function(msg) {
        console.log('reconnection STOMP after loginSuccess');
      })).then(openConnection);
    }));
    $rootScope.$on(AUTH_EVENTS.logoutSuccess, (function() {
      eventBus.close();
    }));
    openConnection();
  }));
  var $__default = moduleName;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('home/routes',[], function() {
  
  function routes($urlRouterProvider, $stateProvider) {
    
    $urlRouterProvider.otherwise('/home');
    return $stateProvider.state('home', {
      url: '/home',
      access: {allowAnonymous: true},
      templateUrl: 'home/views/home.html',
      controller: 'HomeController'
    });
  }
  var $__default = routes;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('home/controllers/HomeController',[], function() {
  
  var HomeController = function HomeController($scope) {
    $scope.awesomeThings = ['HTML5 Boilerplate', 'AngularJS', 'Karma'];
  };
  ($traceurRuntime.createClass)(HomeController, {}, {});
  var $__default = HomeController;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('home/index',["./routes", "./controllers/HomeController"], function($__0,$__2) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__2 || !$__2.__esModule)
    $__2 = {default: $__2};
  var routes = $__0.default;
  var HomeController = $__2.default;
  var moduleName = 'spaApp.home';
  var homeModule = angular.module(moduleName, []);
  homeModule.controller('HomeController', HomeController);
  homeModule.config(routes);
  var $__default = moduleName;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('drug/routes',[], function() {
  
  function routes($urlRouterProvider, $stateProvider) {
    
    $urlRouterProvider.when('/drugs', '/drugs/list');
    return $stateProvider.state('drugs', {
      abstract: true,
      url: '/drugs',
      templateUrl: 'drug/views/drugs.html'
    }).state('drugs.list', {
      url: '/list',
      resolve: {drugs: ['DrugService', '$stateParams', function(DrugService, $stateParams) {
          return DrugService.listDrugs();
        }]},
      views: {
        '@drugs': {controller: function($scope, drugs) {
            console.log('in drugs.list controller');
            $scope.searchCollapsed = true;
            $scope.metadata = drugs.metadata;
          }},
        'filters@drugs.list': {
          templateUrl: 'drug/views/drugs.search.html',
          controller: 'DrugSearchController as dsc'
        },
        'results@drugs.list': {
          templateUrl: 'drug/views/drugs.results.html',
          controller: 'DrugResultsController as drc'
        }
      }
    }).state('drugs.search', {
      url: '/search',
      resolve: {drugs: ['DrugService', function(DrugService) {
          return DrugService.searchDrugs();
        }]},
      views: {
        '@drugs': {controller: function($scope, drugs) {
            console.log('in drugs.search controller');
            $scope.metadata = drugs.metadata;
          }},
        'filters@drugs.search': {
          templateUrl: 'drug/views/drugs.search.html',
          controller: 'DrugSearchController as dsc'
        },
        'results@drugs.search': {
          templateUrl: 'drug/views/drugs.results.html',
          controller: 'DrugResultsController as drc'
        }
      }
    }).state('drugs.list.detail', {
      url: '/:drugId',
      resolve: {drug: ['DrugService', '$stateParams', function(DrugService, $stateParams) {
          return DrugService.getDrug($stateParams.drugId);
        }]},
      views: {'details@drugs.list': {
          templateUrl: 'drug/views/drugs.detail.html',
          controller: 'DrugDetailController'
        }}
    }).state('drugs.search.detail', {
      url: '/:drugId',
      resolve: {drug: ['DrugService', '$stateParams', function(DrugService, $stateParams) {
          return DrugService.getDrug($stateParams.drugId);
        }]},
      views: {'details@drugs.search': {
          templateUrl: 'drug/views/drugs.detail.html',
          controller: 'DrugDetailController'
        }}
    });
  }
  var $__default = routes;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('drug/services/DrugService',[], function() {
  
  var DRUG_SEARCH_CONFIG = {BASE_API_URL: 'http://localhost:8080/<YourBaaS>/DrugSearchAPI'};
  function DrugRestangular(Restangular) {
    
    return Restangular.withConfig(function(RestangularConfigurer) {
      RestangularConfigurer.setBaseUrl(DRUG_SEARCH_CONFIG.BASE_API_URL);
      RestangularConfigurer.setDefaultHeaders({
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      });
      RestangularConfigurer.setDefaultRequestParams({format: 'json'});
      RestangularConfigurer.addResponseInterceptor(function(data, operation, what, url, response, deferred) {
        var extractedData;
        if (operation === 'getList' && data.hasOwnProperty('metadata')) {
          extractedData = data.records;
          extractedData.metadata = data.metadata;
        } else {
          extractedData = data;
        }
        return extractedData;
      });
    });
  }
  var DRUG_LIST_PARAMS = {
    pageSize: 100,
    offset: 0,
    sort: 'ndc',
    order: 'asc',
    fields: 'ndc,id,recordTypeA,recordTypeE,recordTypeG,recordTypeJ,recordTypeL'
  };
  var DRUG_SEARCH_PARAMS = {
    pageSize: 100,
    offset: 0,
    sort: 'ndc',
    order: 'asc',
    fields: 'ndc,id,recordTypeA,recordTypeE,recordTypeG,recordTypeJ,recordTypeL',
    ndc: '',
    labelerName: '',
    productName: ''
  };
  var _drugCache = Symbol('drugs', true);
  var DrugService = function DrugService($q, DrugRestangular, DSCacheFactory) {
    console.info('in DrugService....');
    this.$q = $q;
    this.DrugRestangular = DrugRestangular;
    this[_drugCache] = new DSCacheFactory('drugCache', {
      maxAge: 600000,
      deleteOnExpire: 'passive',
      onExpire: function(key, value) {
        console.log(("cache expired for drug key: " + key + ", value: " + value));
      }
    });
  };
  ($traceurRuntime.createClass)(DrugService, {
    listDrugs: function() {
      var listParams = arguments[0] !== (void 0) ? arguments[0] : DRUG_LIST_PARAMS;
      return this.DrugRestangular.all('drugs').getList(listParams);
    },
    searchDrugs: function() {
      var searchParams = arguments[0] !== (void 0) ? arguments[0] : DRUG_SEARCH_PARAMS;
      return this.DrugRestangular.all('drugs').all('search').getList(searchParams);
    },
    getDrug: function(drugId) {
      var $__0 = this;
      var promise = new Promise((function(resolve, reject) {
        var cachedDrug = $__0[_drugCache].get(drugId);
        if (cachedDrug) {
          resolve(cachedDrug);
        } else {
          $__0.DrugRestangular.one('drugs', drugId).get().then((function(drug) {
            $__0[_drugCache].put(drugId, drug);
            resolve(drug);
          })).catch((function(err) {
            console.error(err);
            reject(err);
          }));
        }
      }));
      return this.$q.when(promise);
    }
  }, {});
  return {
    get DRUG_SEARCH_CONFIG() {
      return DRUG_SEARCH_CONFIG;
    },
    get DrugRestangular() {
      return DrugRestangular;
    },
    get DRUG_LIST_PARAMS() {
      return DRUG_LIST_PARAMS;
    },
    get DRUG_SEARCH_PARAMS() {
      return DRUG_SEARCH_PARAMS;
    },
    get DrugService() {
      return DrugService;
    },
    __esModule: true
  };
});

define('drug/controllers/DrugSearchController',["../services/DrugService"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var $__1 = $__0,
      DRUG_LIST_PARAMS = $__1.DRUG_LIST_PARAMS,
      DRUG_SEARCH_PARAMS = $__1.DRUG_SEARCH_PARAMS;
  var state = Symbol('state', true);
  var DrugSearchController = function DrugSearchController($scope, drugs, DrugService, $state) {
    var $__2 = this;
    console.log('in DrugSearchController');
    this[state] = $state;
    this.drugListParams = DRUG_LIST_PARAMS;
    this.drugSearchParams = DRUG_SEARCH_PARAMS;
    $scope.$parent.dbCursorMove = (function(n) {
      console.log('xxxxx', n);
      if ($__2[state].current.name === 'drugs.search' || $__2[state].current.name === 'drugs.search.detail') {
        $__2.drugSearchParams.offset = $__2.drugSearchParams.offset + n;
      } else if ($__2[state].current.name === 'drugs.list' || $__2[state].current.name === 'drugs.list.detail') {
        $__2.drugListParams.offset = $__2.drugListParams.offset + n;
      }
      $__2[state].transitionTo($__2[state].current, null, {
        reload: true,
        inherit: true,
        notify: true
      });
    });
  };
  ($traceurRuntime.createClass)(DrugSearchController, {onSearch: function() {
      this.drugSearchParams.offset = 0;
      this[state].transitionTo('drugs.search', null, {
        reload: true,
        inherit: true,
        notify: true
      });
    }}, {});
  var $__default = DrugSearchController;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('drug/controllers/DrugResultsController',[], function() {
  
  var DrugResultsController = function DrugResultsController($scope, drugs, $filter, ngTableParams) {
    console.log('in DrugResultsController');
    $scope.tableParams = new ngTableParams({
      page: 1,
      count: 3,
      sorting: {ndc: 'asc'}
    }, {
      total: drugs.length,
      getData: function($defer, params) {
        var filteredData = params.filter() ? $filter('filter')(drugs, params.filter()) : drugs;
        var orderedData = params.sorting() ? $filter('orderBy')(filteredData, params.orderBy()) : filteredData;
        $scope.drugs = orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count());
        params.total(orderedData.length);
        $defer.resolve($scope.drugs);
      }
    });
  };
  ($traceurRuntime.createClass)(DrugResultsController, {}, {});
  var $__default = DrugResultsController;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('drug/controllers/DrugDetailController',[], function() {
  
  var DrugDetailController = function DrugDetailController($scope, drug) {
    $scope.selectedDrug = drug;
  };
  ($traceurRuntime.createClass)(DrugDetailController, {}, {});
  var $__default = DrugDetailController;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('drug/index',["./routes", "./controllers/DrugSearchController", "./controllers/DrugResultsController", "./controllers/DrugDetailController", "./services/DrugService"], function($__0,$__2,$__4,$__6,$__8) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__2 || !$__2.__esModule)
    $__2 = {default: $__2};
  if (!$__4 || !$__4.__esModule)
    $__4 = {default: $__4};
  if (!$__6 || !$__6.__esModule)
    $__6 = {default: $__6};
  if (!$__8 || !$__8.__esModule)
    $__8 = {default: $__8};
  var routes = $__0.default;
  var DrugSearchController = $__2.default;
  var DrugResultsController = $__4.default;
  var DrugDetailController = $__6.default;
  var $__9 = $__8,
      DRUG_SEARCH_CONFIG = $__9.DRUG_SEARCH_CONFIG,
      DrugRestangular = $__9.DrugRestangular,
      DrugService = $__9.DrugService;
  var moduleName = 'spaApp.drug';
  var drugModule = angular.module(moduleName, ['restangular', 'ngTable']);
  drugModule.factory('DrugRestangular', DrugRestangular);
  drugModule.service('DrugService', DrugService);
  drugModule.controller('DrugSearchController', DrugSearchController);
  drugModule.controller('DrugResultsController', DrugResultsController);
  drugModule.controller('DrugDetailController', DrugDetailController);
  drugModule.config(routes);
  drugModule.config((function() {
    
    DRUG_SEARCH_CONFIG.BASE_API_URL = 'http://apsrd3850:8080/apiApp';
  }));
  var $__default = moduleName;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

/** @license
 * RequireJS plugin for async dependency load like JSONP and Google Maps
 * Author: Miller Medeiros
 * Version: 0.1.2 (2014/02/24)
 * Released under the MIT license
 */
define('requirejs-plugins/async',[],function(){

    var DEFAULT_PARAM_NAME = 'callback',
        _uid = 0;

    function injectScript(src){
        var s, t;
        s = document.createElement('script'); s.type = 'text/javascript'; s.async = true; s.src = src;
        t = document.getElementsByTagName('script')[0]; t.parentNode.insertBefore(s,t);
    }

    function formatUrl(name, id){
        var paramRegex = /!(.+)/,
            url = name.replace(paramRegex, ''),
            param = (paramRegex.test(name))? name.replace(/.+!/, '') : DEFAULT_PARAM_NAME;
        url += (url.indexOf('?') < 0)? '?' : '&';
        return url + param +'='+ id;
    }

    function uid() {
        _uid += 1;
        return '__async_req_'+ _uid +'__';
    }

    return{
        load : function(name, req, onLoad, config){
            if(config.isBuild){
                onLoad(null); //avoid errors on the optimizer
            }else{
                var id = uid();
                //create a global variable that stores onLoad so callback
                //function can define new module after async load
                window[id] = onLoad;
                injectScript(formatUrl(req.toUrl(name), id));
            }
        }
    };
});


define('provider/utils/gMaps',["requirejs-plugins/async!//maps.googleapis.com/maps/api/js?key=AIzaSyCOPhbBgg7Rb8SS_f4iC-w9zIB-vD44ZkQ&sensor=false"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  $__0;
  var $__default = window.google.maps;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('provider/models/GeoLocation',["../utils/gMaps"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var gMaps = $__0.default;
  var LatLng = gMaps.LatLng;
  var _latLng = Symbol('_latLng', true);
  var GeoLocation = function GeoLocation(latitude, longitude, address, zip) {
    this[_latLng] = new gMaps.LatLng(latitude, longitude);
    this.address = address;
    this.zip = zip;
  };
  ($traceurRuntime.createClass)(GeoLocation, {
    get latLng() {
      return this[_latLng];
    },
    set latLng(value) {
      this[_latLng] = value;
    }
  }, {});
  var $__default = GeoLocation;
  Object.defineProperty(Object.getOwnPropertyDescriptor(GeoLocation.prototype, "latLng").set, "parameters", {get: function() {
      return [[LatLng]];
    }});
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('provider/services/ProviderService',["../models/GeoLocation"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var GeoLocation = $__0.default;
  var PROVIDER_SEARCH_CONFIG = {BASE_API_URL: 'http://localhost:8080/<YourBaaS>/ProviderSearchAPI'};
  function ProviderRestangular(Restangular) {
    
    return Restangular.withConfig(function(RestangularConfigurer) {
      RestangularConfigurer.setBaseUrl(PROVIDER_SEARCH_CONFIG.BASE_API_URL);
      RestangularConfigurer.addResponseInterceptor(function(data, operation, what, url, response, deferred) {
        var extractedData;
        if (operation === 'getList' && data.hasOwnProperty('metadata')) {
          extractedData = data.records;
          extractedData.metadata = data.metadata;
        } else {
          extractedData = data;
        }
        return extractedData;
      });
    });
  }
  var PROVIDER_SEARCH_PARAMS = {
    pageSize: 33,
    offset: 0,
    sort: 'radius',
    order: 'asc',
    facets: 'PROV_GDR_CD,ADR_CTY_NM,SPCL_TYP_FULL_DESC',
    specialty: '',
    gender: '',
    address: '',
    radius: 50
  };
  var PROVIDER_SEARCH_GEOLOCATION = new GeoLocation();
  var _providerCache = Symbol('providers', true);
  var q = Symbol('q', true);
  var sanitize = Symbol('sanitize', true);
  var providerRestangular = Symbol('providerRestangular', true);
  var ProviderService = function ProviderService($q, $sanitize, ProviderRestangular, DSCacheFactory) {
    console.info('in ProviderService....');
    this[q] = $q;
    this[sanitize] = $sanitize;
    this[providerRestangular] = ProviderRestangular;
    this[_providerCache] = new DSCacheFactory('providerCache', {
      maxAge: 600000,
      deleteOnExpire: 'passive',
      onExpire: function(key, value) {
        console.log(("cache expired for drug key: " + key + ", value: " + value));
      }
    });
  };
  ($traceurRuntime.createClass)(ProviderService, {
    _sanitizeParams: function(geoLoc, params) {
      var sanitizedParams = {
        pageSize: params.pageSize,
        offset: params.offset,
        sort: params.sort,
        order: params.order,
        facets: params.facets,
        lat: geoLoc.latLng.lat(),
        lng: geoLoc.latLng.lng(),
        radius: params.radius
      };
      var query = '';
      if (params.specialty && params.specialty.length > 0) {
        query = (query + " AND specialty:\"" + params.specialty + "\"");
      }
      if (params.gender && params.gender.length > 0) {
        query = (query + " AND PROV_GDR_CD:\"" + params.gender + "\"");
      }
      if (query.startsWith(" AND")) {
        query = query.substring(4);
      }
      sanitizedParams.q = ("( " + query + " )");
      console.debug(sanitizedParams.q);
      console.log('sanitizedParams', sanitizedParams);
      return sanitizedParams;
    },
    searchProviders: function() {
      var geoLoc = arguments[0] !== (void 0) ? arguments[0] : PROVIDER_SEARCH_GEOLOCATION;
      var searchParams = arguments[1] !== (void 0) ? arguments[1] : PROVIDER_SEARCH_PARAMS;
      console.log('geoLoc', geoLoc);
      console.log('searchParams', searchParams);
      return this[providerRestangular].all('providers').getList(this._sanitizeParams(geoLoc, searchParams));
    },
    getProvider: function(providerId) {
      var $__2 = this;
      var promise = new Promise((function(resolve, reject) {
        var cachedProvider = $__2[_providerCache].get(providerId);
        if (cachedProvider) {
          resolve(cachedProvider);
        } else {
          $__2[providerRestangular].one('providers', providerId).get().then((function(provider) {
            $__2[_providerCache].put(providerId, provider);
            resolve(provider);
          })).catch((function(err) {
            console.error(err);
            reject(err);
          }));
        }
      }));
      return this[q].when(promise);
    }
  }, {});
  return {
    get PROVIDER_SEARCH_CONFIG() {
      return PROVIDER_SEARCH_CONFIG;
    },
    get ProviderRestangular() {
      return ProviderRestangular;
    },
    get PROVIDER_SEARCH_PARAMS() {
      return PROVIDER_SEARCH_PARAMS;
    },
    get PROVIDER_SEARCH_GEOLOCATION() {
      return PROVIDER_SEARCH_GEOLOCATION;
    },
    get ProviderService() {
      return ProviderService;
    },
    __esModule: true
  };
});

define('provider/routes',["./services/ProviderService"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var $__1 = $__0,
      PROVIDER_SEARCH_GEOLOCATION = $__1.PROVIDER_SEARCH_GEOLOCATION,
      PROVIDER_SEARCH_PARAMS = $__1.PROVIDER_SEARCH_PARAMS;
  function routes($stateProvider) {
    
    return $stateProvider.state('providers', {
      abstract: true,
      url: '/providers',
      templateUrl: 'provider/views/providers.html',
      resolve: {geolocation: ['GeolocationService', function(GeolocationService) {
          return GeolocationService.getGeolocation();
        }]}
    }).state('providers.search', {
      url: '',
      access: {
        allowAnonymous: false,
        roles: ['ROLE_USER']
      },
      resolve: {providers: ['ProviderService', 'angulargmUtils', 'geolocation', function(ProviderService, angulargmUtils, geolocation) {
          if (angulargmUtils.hasNaN(PROVIDER_SEARCH_GEOLOCATION.latLng)) {
            PROVIDER_SEARCH_GEOLOCATION.latLng = geolocation.latLng;
            PROVIDER_SEARCH_GEOLOCATION.address = geolocation.address;
          }
          return ProviderService.searchProviders();
        }]},
      views: {
        '@providers': {controller: function($scope, providers, ProviderService) {
            $scope.searchCollapsed = true;
            $scope.providers = providers.sort((function(a, b) {
              return a.addresses[0].distance - b.addresses[0].distance;
            }));
            $scope.doSearch = (function() {
              PROVIDER_SEARCH_PARAMS.offset = 0;
              ProviderService.searchProviders().then((function(providers) {
                $scope.providers = providers.sort((function(a, b) {
                  return a.addresses[0].distance - b.addresses[0].distance;
                }));
              }));
            });
          }},
        'filters@providers.search': {
          templateUrl: 'provider/views/providers.search.html',
          controller: 'ProviderSearchController as psc'
        },
        'map@providers.search': {
          templateUrl: 'provider/views/providers.map.html',
          controller: 'ProviderMapController as pmc'
        },
        'results@providers.search': {
          templateUrl: 'provider/views/providers.results.html',
          controller: 'ProviderResultsController as prc'
        }
      }
    }).state('providers.search.detail', {
      url: '/:providerId',
      resolve: {provider: ['ProviderService', '$stateParams', function(ProviderService, $stateParams) {
          return ProviderService.getProvider($stateParams.providerId);
        }]},
      views: {'details@providers.search': {
          templateUrl: 'provider/views/providers.detail.html',
          controller: 'ProviderDetailController as pdc'
        }}
    }).state('providers.detail', {
      url: '/detail/:providerId',
      resolve: {provider: ['ProviderService', '$stateParams', function(ProviderService, $stateParams) {
          return ProviderService.getProvider($stateParams.providerId);
        }]},
      views: {'details@providers': {
          templateUrl: 'provider/views/providers.detail.html',
          controller: 'ProviderDetailController as pdc'
        }}
    });
  }
  var $__default = routes;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('provider/controllers/ProviderSearchController',["../services/ProviderService"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var $__1 = $__0,
      PROVIDER_SEARCH_PARAMS = $__1.PROVIDER_SEARCH_PARAMS,
      PROVIDER_SEARCH_GEOLOCATION = $__1.PROVIDER_SEARCH_GEOLOCATION;
  var scope = Symbol('scope', true);
  var state = Symbol('state', true);
  var http = Symbol('http', true);
  var providerRestangular = Symbol('providerRestangular', true);
  var geocoderService = Symbol('geocoderService', true);
  var providerService = Symbol('providerService', true);
  var ProviderSearchController = function ProviderSearchController($scope, $http, $state, ProviderRestangular, GeocoderService, ProviderService) {
    var $__2 = this;
    console.log('in ProviderSearchController...');
    this[scope] = $scope;
    this[state] = $state;
    this[http] = $http;
    this[providerRestangular] = ProviderRestangular;
    this[geocoderService] = GeocoderService;
    this[providerService] = ProviderService;
    this.providerSearchParams = PROVIDER_SEARCH_PARAMS;
    this.providerSearchGeolocation = PROVIDER_SEARCH_GEOLOCATION;
    this.specialities = ['PEDIATRICS', 'CARDIOLOGY', 'NEPHROLOGY', 'CHIROPRACTIC MEDICINE'];
    this.status = {isopen: false};
    $scope.$parent.centerSearch = this.centerSearch;
    $scope.$parent.dbCursorMove = (function(n) {
      PROVIDER_SEARCH_PARAMS.offset = PROVIDER_SEARCH_PARAMS.offset + n;
      $__2[state].transitionTo($__2[state].current, null, {
        reload: true,
        inherit: true,
        notify: true
      });
    });
  };
  ($traceurRuntime.createClass)(ProviderSearchController, {
    setDistance: function(dist) {
      this.providerSearchParams.radius = dist;
      this.status.isopen = false;
    },
    onSelect: function($item, $model, $label) {
      this.providerSearchGeolocation.latLng = $model.geometry.location;
      this.providerSearchGeolocation.address = $model.formatted_address;
    },
    _getZip: function(address) {
      var addressComponents = address.address_components;
      var zippy = addressComponents.filter((function(i) {
        return i.types[0] === 'postal_code';
      }));
      if (undefined !== zippy && zippy.length > 0) {
        return zippy[0].long_name;
      }
    },
    dbCursorMove: function(n) {
      PROVIDER_SEARCH_PARAMS.offset = PROVIDER_SEARCH_PARAMS.offset + n;
      this[state].transitionTo(this[state].current, null, {
        reload: true,
        inherit: true,
        notify: true
      });
    },
    getLocations: function(address) {
      return this[geocoderService].getLocations(address);
    },
    getSpecialities: function(prefix) {
      var related = arguments[1] !== (void 0) ? arguments[1] : false;
      var n = arguments[2] !== (void 0) ? arguments[2] : 25;
      return this[providerRestangular].all('providers').all('specialties').getList({
        prefix: prefix,
        n: n,
        related: related
      });
    }
  }, {});
  var $__default = ProviderSearchController;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('provider/controllers/ProviderResultsController',[], function() {
  
  var ProviderResultsController = function ProviderResultsController($scope) {
    var $__0 = this;
    console.log('in ProviderResultsController...');
    this.currentPage = 1;
    this.itemsPerPage = 3;
    this.maxSize = 7;
    this.filterField = '';
    $scope.$watch('providers', function(newProviders) {
      console.log('providers in scope changed...');
      $scope.filteredProviders = newProviders;
    });
    $scope.filterProviders = (function() {
      $scope.filteredProviders = $scope.providers.filter((function(provider) {
        return ((provider.FST_NM || '') + ' ' + provider.LST_NM).contains($__0.filterField.toUpperCase());
      }));
    });
  };
  ($traceurRuntime.createClass)(ProviderResultsController, {}, {});
  var $__default = ProviderResultsController;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('provider/controllers/ProviderMapController',["../utils/gMaps", "../services/ProviderService"], function($__0,$__2) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__2 || !$__2.__esModule)
    $__2 = {default: $__2};
  var gMaps = $__0.default;
  var $__3 = $__2,
      PROVIDER_SEARCH_PARAMS = $__3.PROVIDER_SEARCH_PARAMS,
      PROVIDER_SEARCH_GEOLOCATION = $__3.PROVIDER_SEARCH_GEOLOCATION;
  var scope = Symbol('scope', true);
  var state = Symbol('state', true);
  var ProviderMapController = function ProviderMapController($scope, $state) {
    var $__4 = this;
    this[scope] = $scope;
    this[state] = $state;
    this.center = PROVIDER_SEARCH_GEOLOCATION;
    this.zoom = 13;
    this.bounds = this.getBounds($scope.providers);
    this.mapInitOptions = {
      zoom: this.zoom,
      center: this.bounds.getCenter(),
      mapTypeId: gMaps.MapTypeId.ROADMAP,
      panControl: false,
      zoomControlOptions: {
        style: gMaps.ZoomControlStyle.LARGE,
        position: gMaps.ControlPosition.RIGHT_BOTTOM
      }
    };
    this.markerOptions = {
      selected: {icon: 'common/images/hospital.png'},
      notselected: {icon: 'common/images/hospital_H_S_8x_2.png'},
      mouseover: {icon: 'common/images/hospital_H_search_L_8x_2.png'},
      mouseout: {icon: 'common/images/hospital_H_S_8x_2.png'}
    };
    this.mouseOverInfoWindowOptions = {pixelOffset: new google.maps.Size(120, 110)};
    this.selectedProvider = $scope.providers[0];
    this.selectedMarker = undefined;
    $scope.$watch('providers', (function(newProviders) {
      $__4.bounds = $__4.getBounds(newProviders);
    }));
  };
  ($traceurRuntime.createClass)(ProviderMapController, {
    getBounds: function(providers) {
      var bounds = new gMaps.LatLngBounds();
      var $__16 = true;
      var $__17 = false;
      var $__18 = undefined;
      try {
        for (var $__14 = void 0,
            $__13 = (providers)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__16 = ($__14 = $__13.next()).done); $__16 = true) {
          var provider = $__14.value;
          {
            var $__9 = true;
            var $__10 = false;
            var $__11 = undefined;
            try {
              for (var $__7 = void 0,
                  $__6 = (provider.addresses)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__9 = ($__7 = $__6.next()).done); $__9 = true) {
                var address = $__7.value;
                {
                  if (address.ADR_CANC_DT === '9999-12-31' && address.distance < PROVIDER_SEARCH_PARAMS.radius) {
                    bounds.extend(new gMaps.LatLng(address.LAT_NBR, address.LONG_NBR));
                  }
                }
              }
            } catch ($__12) {
              $__10 = true;
              $__11 = $__12;
            } finally {
              try {
                if (!$__9 && $__6.return != null) {
                  $__6.return();
                }
              } finally {
                if ($__10) {
                  throw $__11;
                }
              }
            }
          }
        }
      } catch ($__19) {
        $__17 = true;
        $__18 = $__19;
      } finally {
        try {
          if (!$__16 && $__13.return != null) {
            $__13.return();
          }
        } finally {
          if ($__17) {
            throw $__18;
          }
        }
      }
      return bounds;
    },
    onProviderClick: function(provider, marker) {
      this.selectedProvider = provider;
      PROVIDER_SEARCH_GEOLOCATION.latLng = new gMaps.LatLng(provider.addresses[0].LAT_NBR, provider.addresses[0].LONG_NBR);
      this[scope].markerEvents = [{
        event: 'openinfowindow',
        ids: [provider.id]
      }, {
        event: 'activatemarker',
        ids: [provider.id]
      }];
      this[state].go('providers.search.detail', {providerId: provider.id});
    },
    activateMarker: function(marker) {
      if (this.selectedMarker) {
        this.selectedMarker.setIcon(this.markerOptions.notselected.icon);
      }
      this.selectedMarker = marker;
      marker.setIcon(this.markerOptions.selected.icon);
    },
    onMouseOver: function(provider, marker) {
      console.log('onMouseOver');
    },
    onMouseOut: function(provider, marker) {
      console.log('onMouseOut');
    },
    markerAnimate: function(marker) {
      if (marker.getAnimation() !== null) {
        marker.setAnimation(null);
      } else {
        marker.setAnimation(google.maps.Animation.BOUNCE);
      }
    },
    getProviderOpts: function(provider) {
      return angular.extend({
        title: (provider.FST_NM + " " + (provider.MDL_NM || '') + " " + provider.LST_NM),
        animation: gMaps.Animation.DROP
      }, this.markerOptions.notselected);
    }
  }, {});
  var $__default = ProviderMapController;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('provider/controllers/ProviderDetailController',[], function() {
  
  var ProviderDetailController = function ProviderDetailController($scope, provider) {
    this.selectedProvider = provider;
  };
  ($traceurRuntime.createClass)(ProviderDetailController, {}, {});
  var $__default = ProviderDetailController;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('provider/controllers/ProviderFacetsController',["../services/ProviderService"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var $__1 = $__0,
      PROVIDER_SEARCH_PARAMS = $__1.PROVIDER_SEARCH_PARAMS,
      PROVIDER_SEARCH_GEOLOCATION = $__1.PROVIDER_SEARCH_GEOLOCATION;
  var ProviderFacetsController = function ProviderFacetsController($scope, $state, $timeout, GeocoderService) {
    var $__2 = this;
    this.open = undefined;
    this.providerSearchParams = PROVIDER_SEARCH_PARAMS;
    $scope.genders = $scope.providers.metadata.facets.PROV_GDR_CD;
    $scope.cities = $scope.providers.metadata.facets.ADR_CTY_NM;
    $scope.specialties = $scope.providers.metadata.facets.SPCL_TYP_FULL_DESC;
    $scope.$watch('providers', (function(newProviders) {
      console.log('providers   changed... will update facets', newProviders.metadata.facets.PROV_GDR_CD);
      $scope.genders = newProviders.metadata.facets.PROV_GDR_CD;
      $scope.cities = newProviders.metadata.facets.ADR_CTY_NM;
      $scope.specialties = newProviders.metadata.facets.SPCL_TYP_FULL_DESC;
    }));
    $scope.$watch((function() {
      return $__2.open1;
    }), (function(newVal, oldVal) {
      return nv.graphs[0].update();
    }));
    $scope.$watch((function() {
      return $__2.open2;
    }), (function(newVal, oldVal) {
      return nv.graphs[1].update();
    }));
    $scope.$watch((function() {
      return $__2.open3;
    }), (function(newVal, oldVal) {
      return nv.graphs[2].update();
    }));
    $scope.$on('elementClick.directive', (function(angularEvent, event) {
      switch (angularEvent.targetScope.id) {
        case 'genders':
          PROVIDER_SEARCH_PARAMS.gender = event.label;
          $scope.doSearch();
          break;
        case 'specialties':
          PROVIDER_SEARCH_PARAMS.specialty = event.label;
          $scope.doSearch();
          break;
        case 'cities':
          GeocoderService.getLocations(event.label).then((function(add) {
            console.log(add[0].geometry.location);
            PROVIDER_SEARCH_GEOLOCATION.latLng = add[0].geometry.location;
            PROVIDER_SEARCH_GEOLOCATION.address = add[0].formatted_address;
            PROVIDER_SEARCH_PARAMS.address = add[0].formatted_address;
            $scope.doSearch();
          })).catch(console.error);
          break;
      }
    }));
    $scope.$on('legendClick.directive', (function(angularEvent, event) {
      console.log('legendClick event', event);
    }));
  };
  ($traceurRuntime.createClass)(ProviderFacetsController, {
    xFunction: function() {
      return (function(d) {
        return d.value;
      });
    },
    yFunction: function() {
      return (function(d) {
        return d.count;
      });
    },
    descriptionFunction: function() {
      return (function(d) {
        return d.value;
      });
    }
  }, {});
  var $__default = ProviderFacetsController;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('provider/services/GeolocationService',["../models/GeoLocation"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var GeoLocation = $__0.default;
  var q = Symbol('q', true);
  var http = Symbol('http', true);
  var _window = Symbol('_window', true);
  function TelizeRestangular(Restangular) {
    
    return Restangular.withConfig((function(RestangularConfigurer) {
      RestangularConfigurer.setBaseUrl('http://www.telize.com');
      RestangularConfigurer.setDefaultRequestParams();
      RestangularConfigurer.setJsonp(true);
      RestangularConfigurer.setDefaultRequestParams('jsonp', {callback: 'JSON_CALLBACK'});
    }));
  }
  var GeolocationService = function GeolocationService($q, $http, $window, TelizeRestangular) {
    console.info('in GeoIPService constructor....');
    this[q] = $q;
    this[http] = $http;
    this[_window] = $window;
    this.TelizeRestangular = TelizeRestangular;
    this.cachedGeolocation = null;
  };
  ($traceurRuntime.createClass)(GeolocationService, {
    getGeolocation: function() {
      var refresh = arguments[0] !== (void 0) ? arguments[0] : false;
      var $__2 = this;
      var promise = new Promise((function(resolve, reject) {
        if ($__2.cachedGeolocation && refresh === false) {
          resolve($__2.cachedGeolocation);
        } else {
          $__2.getGeolocationByIp().then((function(geoLoc) {
            $__2.cachedGeolocation = geoLoc;
            resolve(geoLoc);
          })).catch((function(err1) {
            console.log('error with getGeolocationByIp(), will try getGeolocationByHtml5()', err1);
            $__2.getGeolocationByHtml5().then((function(geoLoc) {
              $__2.cachedGeolocation = geoLoc;
              resolve(geoLoc);
            })).catch((function(err2) {
              console.log('error with getGeolocationByHtml5(), default to SF', err2);
              resolve(new GeoLocation(37.7577, -122.4376, 'San Francisco, CA', '94110'));
            }));
          }));
        }
      }));
      return promise;
    },
    getGeolocationByIp: function() {
      return this.TelizeRestangular.all('geoip').customGET().then((function(geoInfo) {
        if (!geoInfo.hasOwnProperty('postal_code')) {
          throw Error('Geolocation has not enough accuracy');
        }
        return new GeoLocation(geoInfo.latitude, geoInfo.longitude, geoInfo.city + ', ' + geoInfo.region_code, geoInfo.postal_code);
      }));
    },
    getGeolocationByHtml5: function() {
      var $__2 = this;
      return new Promise((function(resolve, reject) {
        if ($__2[_window].navigator && $__2[_window].navigator.geolocation) {
          $__2[_window].navigator.geolocation.getCurrentPosition((function(position) {
            resolve(new GeoLocation(position.coords.latitude, position.coords.longitude, '', ''));
          }), (function(error) {
            switch (error.code) {
              case error.PERMISSION_DENIED:
                reject(new Error('You have rejected access to your location'));
                break;
              case error.POSITION_UNAVAILABLE:
                reject(new Error('Unable to determine your location'));
                break;
              case error.TIMEOUT:
                reject(new Error('Service timeout has been reached'));
                break;
              default:
                reject(new Error('default error'));
            }
          }));
        } else {
          reject(new Error('Browser does not support location services'));
        }
      }));
    }
  }, {});
  return {
    get TelizeRestangular() {
      return TelizeRestangular;
    },
    get GeolocationService() {
      return GeolocationService;
    },
    __esModule: true
  };
});

define('provider/services/GeocoderService',["../utils/gMaps"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var gMaps = $__0.default;
  var GeocoderService = function GeocoderService() {
    console.info('in GeocoderService constructor....');
  };
  ($traceurRuntime.createClass)(GeocoderService, {getLocations: function(address) {
      return new Promise((function(resolve, reject) {
        var geocoder = new gMaps.Geocoder();
        return geocoder.geocode({
          'address': address,
          'region': 'us',
          componentRestrictions: {country: 'US'}
        }, function(results, status) {
          if (status === google.maps.GeocoderStatus.OK) {
            resolve(results);
          } else {
            throw Error('Geocode was not successful for the following reason: ' + status);
          }
        });
      }));
    }}, {});
  var $__default = GeocoderService;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('provider/utils/StartFromFilter',[], function() {
  
  function StartFromFilter() {
    
    return function(input, start) {
      start = +start;
      return input.slice(start);
    };
  }
  var $__default = StartFromFilter;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('provider/index',["./routes", "./controllers/ProviderSearchController", "./controllers/ProviderResultsController", "./controllers/ProviderMapController", "./controllers/ProviderDetailController", "./controllers/ProviderFacetsController", "./services/GeolocationService", "./services/GeocoderService", "./services/ProviderService", "./utils/StartFromFilter"], function($__0,$__2,$__4,$__6,$__8,$__10,$__12,$__14,$__16,$__18) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__2 || !$__2.__esModule)
    $__2 = {default: $__2};
  if (!$__4 || !$__4.__esModule)
    $__4 = {default: $__4};
  if (!$__6 || !$__6.__esModule)
    $__6 = {default: $__6};
  if (!$__8 || !$__8.__esModule)
    $__8 = {default: $__8};
  if (!$__10 || !$__10.__esModule)
    $__10 = {default: $__10};
  if (!$__12 || !$__12.__esModule)
    $__12 = {default: $__12};
  if (!$__14 || !$__14.__esModule)
    $__14 = {default: $__14};
  if (!$__16 || !$__16.__esModule)
    $__16 = {default: $__16};
  if (!$__18 || !$__18.__esModule)
    $__18 = {default: $__18};
  var routes = $__0.default;
  var ProviderSearchController = $__2.default;
  var ProviderResultsController = $__4.default;
  var ProviderMapController = $__6.default;
  var ProviderDetailController = $__8.default;
  var ProviderFacetsController = $__10.default;
  var $__13 = $__12,
      TelizeRestangular = $__13.TelizeRestangular,
      GeolocationService = $__13.GeolocationService;
  var GeocoderService = $__14.default;
  var $__17 = $__16,
      PROVIDER_SEARCH_CONFIG = $__17.PROVIDER_SEARCH_CONFIG,
      ProviderRestangular = $__17.ProviderRestangular,
      ProviderService = $__17.ProviderService;
  var StartFromFilter = $__18.default;
  var moduleName = 'spaApp.provider';
  var providerModule = angular.module(moduleName, ['restangular', 'ngTable', 'ui.bootstrap', 'AngularGM', 'truncate']);
  providerModule.factory('ProviderRestangular', ProviderRestangular);
  providerModule.factory('TelizeRestangular', TelizeRestangular);
  providerModule.service('GeolocationService', GeolocationService);
  providerModule.service('GeocoderService', GeocoderService);
  providerModule.service('ProviderService', ProviderService);
  providerModule.controller('ProviderSearchController', ProviderSearchController);
  providerModule.controller('ProviderResultsController', ProviderResultsController);
  providerModule.controller('ProviderMapController', ProviderMapController);
  providerModule.controller('ProviderDetailController', ProviderDetailController);
  providerModule.controller('ProviderFacetsController', ProviderFacetsController);
  providerModule.filter('startFrom', StartFromFilter);
  providerModule.config(routes);
  providerModule.config((function() {
    
    PROVIDER_SEARCH_CONFIG.BASE_API_URL = 'http://apsed2427:8080/api';
  }));
  var $__default = moduleName;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('experiments/routes',[], function() {
  
  function routes($stateProvider) {
    
    return $stateProvider.state('slow', {
      url: '/slow',
      templateUrl: 'experiments/views/experiment.html',
      controller: 'ExperimentController',
      resolve: {dummy: ['$stateParams', '$timeout', function($stateParams, $timeout) {
          return $timeout((function() {
            return [];
          }), 3000);
        }]},
      onEnter: function(dummy) {
        if (dummy) {
          console.log('inside slow: onEnter');
        }
      },
      onExit: function(dummy) {
        if (dummy) {
          console.log('inside slow: onExit');
        }
      }
    }).state('experiments', {
      url: '/experiments',
      templateUrl: 'experiments/views/experiment.html',
      controller: 'ExperimentController'
    }).state('translations', {
      url: '/translations',
      templateUrl: 'experiments/views/growlTranslate.html',
      controller: 'GrowlTranslateDemoController',
      resolve: {experimentsTranslations: function($translatePartialLoader, $translate) {
          $translatePartialLoader.addPart('experiments');
        }}
    }).state('elements', {
      url: '/elements',
      templateUrl: 'experiments/views/elements.html',
      controller: 'ElementsController'
    }).state('messaging', {
      url: '/messaging',
      templateUrl: 'experiments/views/messaging.html',
      controller: 'MessagingController as mc'
    }).state('terminal', {
      url: '/terminal/:containerId',
      access: {allowAnonymous: false},
      templateUrl: 'experiments/views/terminal.html',
      controller: 'TerminalController as tc',
      onExit: function() {
        console.log('exit terminal');
      }
    }).state('IoT', {
      url: '/IoT',
      templateUrl: 'experiments/views/IoT.html',
      controller: 'IoTController as ic'
    }).state('async', {
      url: '/async',
      templateUrl: 'experiments/views/async.html',
      controller: 'AsyncController as ac'
    }).state('todoMVC', {
      url: '/todo',
      templateUrl: 'experiments/views/todo.html',
      controller: 'TodoController as tc'
    });
  }
  var $__default = routes;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('experiments/services/EmailService',["diary"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var Diary = $__0.Diary;
  var EmailService = function EmailService() {
    this.logger = Diary.logger('EmailService');
    this.logger.info('in EmailService....');
    this.content = '';
  };
  ($traceurRuntime.createClass)(EmailService, {
    send: function(recipient) {
      return $traceurRuntime.asyncWrap(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              this.logger.info('before await....');
              $ctx.state = 7;
              break;
            case 7:
              Promise.resolve(this.timeout(1000)).then($ctx.createCallback(2), $ctx.errback);
              return ;
            case 2:
              this.logger.info('after await....');
              $ctx.state = 9;
              break;
            case 9:
              $ctx.returnValue = ("sending  " + this.content + " to " + recipient + " ...");
              $ctx.state = 4;
              break;
            case 4:
              $ctx.state = -2;
              break;
            default:
              return $ctx.end();
          }
      }, this);
    },
    timeout: function(ms) {
      return new Promise((function(resolve) {
        setTimeout(resolve, ms);
      }));
    }
  }, {
    format: function() {
      var name = arguments[0] !== (void 0) ? arguments[0] : "Anonymous";
      return name.toUpperCase();
    },
    add: function(a, b) {
      return a + b;
    }
  });
  var $__default = EmailService;
  Object.defineProperty(EmailService.format, "parameters", {get: function() {
      return [[$traceurRuntime.type.string]];
    }});
  Object.defineProperty(EmailService.add, "parameters", {get: function() {
      return [[$traceurRuntime.type.number], [$traceurRuntime.type.number]];
    }});
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('di/util',[], function() {
  
  function isUpperCase(char) {
    return char.toUpperCase() === char;
  }
  function isFunction(value) {
    return typeof value === 'function';
  }
  function isObject(value) {
    return typeof value === 'object';
  }
  function toString(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token === undefined || token === null) {
      return '' + token;
    }
    if (token.name) {
      return token.name;
    }
    return token.toString();
  }
  var ownKeys = (Reflect && Reflect.ownKeys ? Reflect.ownKeys : function ownKeys(O) {
    var keys = Object.getOwnPropertyNames(O);
    if (Object.getOwnPropertySymbols)
      return keys.concat(Object.getOwnPropertySymbols(O));
    return keys;
  });
  ;
  return {
    get isUpperCase() {
      return isUpperCase;
    },
    get isFunction() {
      return isFunction;
    },
    get isObject() {
      return isObject;
    },
    get toString() {
      return toString;
    },
    get ownKeys() {
      return ownKeys;
    },
    __esModule: true
  };
});

define('di/annotations',["./util"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var isFunction = $__0.isFunction;
  var SuperConstructor = function SuperConstructor() {};
  ($traceurRuntime.createClass)(SuperConstructor, {}, {});
  var TransientScope = function TransientScope() {};
  ($traceurRuntime.createClass)(TransientScope, {}, {});
  var Inject = function Inject() {
    for (var tokens = [],
        $__17 = 0; $__17 < arguments.length; $__17++)
      tokens[$__17] = arguments[$__17];
    this.tokens = tokens;
    this.isPromise = false;
    this.isLazy = false;
  };
  ($traceurRuntime.createClass)(Inject, {}, {});
  var InjectPromise = function InjectPromise() {
    for (var tokens = [],
        $__18 = 0; $__18 < arguments.length; $__18++)
      tokens[$__18] = arguments[$__18];
    this.tokens = tokens;
    this.isPromise = true;
    this.isLazy = false;
  };
  ($traceurRuntime.createClass)(InjectPromise, {}, {}, Inject);
  var InjectLazy = function InjectLazy() {
    for (var tokens = [],
        $__19 = 0; $__19 < arguments.length; $__19++)
      tokens[$__19] = arguments[$__19];
    this.tokens = tokens;
    this.isPromise = false;
    this.isLazy = true;
  };
  ($traceurRuntime.createClass)(InjectLazy, {}, {}, Inject);
  var Provide = function Provide(token) {
    this.token = token;
    this.isPromise = false;
  };
  ($traceurRuntime.createClass)(Provide, {}, {});
  var ProvidePromise = function ProvidePromise(token) {
    this.token = token;
    this.isPromise = true;
  };
  ($traceurRuntime.createClass)(ProvidePromise, {}, {}, Provide);
  var ClassProvider = function ClassProvider() {};
  ($traceurRuntime.createClass)(ClassProvider, {}, {});
  var FactoryProvider = function FactoryProvider() {};
  ($traceurRuntime.createClass)(FactoryProvider, {}, {});
  function annotate(fn, annotation) {
    fn.annotations = fn.annotations || [];
    fn.annotations.push(annotation);
  }
  function hasAnnotation(fn, annotationClass) {
    if (!fn.annotations || fn.annotations.length === 0) {
      return false;
    }
    var $__6 = true;
    var $__7 = false;
    var $__8 = undefined;
    try {
      for (var $__4 = void 0,
          $__3 = (fn.annotations)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__6 = ($__4 = $__3.next()).done); $__6 = true) {
        var annotation = $__4.value;
        {
          if (annotation instanceof annotationClass) {
            return true;
          }
        }
      }
    } catch ($__9) {
      $__7 = true;
      $__8 = $__9;
    } finally {
      try {
        if (!$__6 && $__3.return != null) {
          $__3.return();
        }
      } finally {
        if ($__7) {
          throw $__8;
        }
      }
    }
    return false;
  }
  function readAnnotations(fn) {
    var collectedAnnotations = {
      provide: {
        token: null,
        isPromise: false
      },
      params: []
    };
    if (fn.annotations && fn.annotations.length) {
      var $__6 = true;
      var $__7 = false;
      var $__8 = undefined;
      try {
        for (var $__4 = void 0,
            $__3 = (fn.annotations)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__6 = ($__4 = $__3.next()).done); $__6 = true) {
          var annotation = $__4.value;
          {
            if (annotation instanceof Inject) {
              annotation.tokens.forEach((function(token) {
                collectedAnnotations.params.push({
                  token: token,
                  isPromise: annotation.isPromise,
                  isLazy: annotation.isLazy
                });
              }));
            }
            if (annotation instanceof Provide) {
              collectedAnnotations.provide.token = annotation.token;
              collectedAnnotations.provide.isPromise = annotation.isPromise;
            }
          }
        }
      } catch ($__9) {
        $__7 = true;
        $__8 = $__9;
      } finally {
        try {
          if (!$__6 && $__3.return != null) {
            $__3.return();
          }
        } finally {
          if ($__7) {
            throw $__8;
          }
        }
      }
    }
    if (fn.parameters) {
      fn.parameters.forEach((function(param, idx) {
        var $__13 = true;
        var $__14 = false;
        var $__15 = undefined;
        try {
          for (var $__11 = void 0,
              $__10 = (param)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__13 = ($__11 = $__10.next()).done); $__13 = true) {
            var paramAnnotation = $__11.value;
            {
              if (isFunction(paramAnnotation) && !collectedAnnotations.params[idx]) {
                collectedAnnotations.params[idx] = {
                  token: paramAnnotation,
                  isPromise: false,
                  isLazy: false
                };
              } else if (paramAnnotation instanceof Inject) {
                collectedAnnotations.params[idx] = {
                  token: paramAnnotation.tokens[0],
                  isPromise: paramAnnotation.isPromise,
                  isLazy: paramAnnotation.isLazy
                };
              }
            }
          }
        } catch ($__16) {
          $__14 = true;
          $__15 = $__16;
        } finally {
          try {
            if (!$__13 && $__10.return != null) {
              $__10.return();
            }
          } finally {
            if ($__14) {
              throw $__15;
            }
          }
        }
      }));
    }
    return collectedAnnotations;
  }
  ;
  return {
    get annotate() {
      return annotate;
    },
    get hasAnnotation() {
      return hasAnnotation;
    },
    get readAnnotations() {
      return readAnnotations;
    },
    get SuperConstructor() {
      return SuperConstructor;
    },
    get TransientScope() {
      return TransientScope;
    },
    get Inject() {
      return Inject;
    },
    get InjectPromise() {
      return InjectPromise;
    },
    get InjectLazy() {
      return InjectLazy;
    },
    get Provide() {
      return Provide;
    },
    get ProvidePromise() {
      return ProvidePromise;
    },
    get ClassProvider() {
      return ClassProvider;
    },
    get FactoryProvider() {
      return FactoryProvider;
    },
    __esModule: true
  };
});

define('di/profiler',["./util"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var toString = $__0.toString;
  var IS_DEBUG = false;
  var _global = null;
  if (typeof process === 'object' && process.env) {
    IS_DEBUG = !!process.env['DEBUG'];
    _global = global;
  } else if (typeof location === 'object' && location.search) {
    IS_DEBUG = /di_debug/.test(location.search);
    _global = window;
  }
  var globalCounter = 0;
  function getUniqueId() {
    return ++globalCounter;
  }
  function serializeToken(token, tokens) {
    if (!tokens.has(token)) {
      tokens.set(token, getUniqueId().toString());
    }
    return tokens.get(token);
  }
  function serializeProvider(provider, key, tokens) {
    return {
      id: serializeToken(key, tokens),
      name: toString(key),
      isPromise: provider.isPromise,
      dependencies: provider.params.map(function(param) {
        return {
          token: serializeToken(param.token, tokens),
          isPromise: param.isPromise,
          isLazy: param.isLazy
        };
      })
    };
  }
  function serializeInjector(injector, tokens, Injector) {
    var serializedInjector = {
      id: serializeToken(injector, tokens),
      parent_id: injector._parent ? serializeToken(injector._parent, tokens) : null,
      providers: {}
    };
    var injectorClassId = serializeToken(Injector, tokens);
    serializedInjector.providers[injectorClassId] = {
      id: injectorClassId,
      name: toString(Injector),
      isPromise: false,
      dependencies: []
    };
    injector._providers.forEach(function(provider, key) {
      var serializedProvider = serializeProvider(provider, key, tokens);
      serializedInjector.providers[serializedProvider.id] = serializedProvider;
    });
    return serializedInjector;
  }
  function profileInjector(injector, Injector) {
    if (!IS_DEBUG) {
      return ;
    }
    if (!_global.__di_dump__) {
      _global.__di_dump__ = {
        injectors: [],
        tokens: new Map()
      };
    }
    _global.__di_dump__.injectors.push(serializeInjector(injector, _global.__di_dump__.tokens, Injector));
  }
  return {
    get profileInjector() {
      return profileInjector;
    },
    __esModule: true
  };
});

define('di/providers',["./annotations", "./util"], function($__0,$__2) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__2 || !$__2.__esModule)
    $__2 = {default: $__2};
  var $__1 = $__0,
      ClassProviderAnnotation = $__1.ClassProvider,
      FactoryProviderAnnotation = $__1.FactoryProvider,
      SuperConstructorAnnotation = $__1.SuperConstructor,
      readAnnotations = $__1.readAnnotations,
      hasAnnotation = $__1.hasAnnotation;
  var $__3 = $__2,
      isFunction = $__3.isFunction,
      isObject = $__3.isObject,
      toString = $__3.toString,
      isUpperCase = $__3.isUpperCase,
      ownKeys = $__3.ownKeys;
  function isClass(clsOrFunction) {
    if (hasAnnotation(clsOrFunction, ClassProviderAnnotation)) {
      return true;
    } else if (hasAnnotation(clsOrFunction, FactoryProviderAnnotation)) {
      return false;
    } else if (clsOrFunction.name) {
      return isUpperCase(clsOrFunction.name.charAt(0));
    } else {
      return ownKeys(clsOrFunction.prototype).length > 0;
    }
  }
  var EmptyFunction = Object.getPrototypeOf(Function);
  var ClassProvider = function ClassProvider(clazz, params, isPromise) {
    this.provider = clazz;
    this.isPromise = isPromise;
    this.params = [];
    this._constructors = [];
    this._flattenParams(clazz, params);
    this._constructors.unshift([clazz, 0, this.params.length - 1]);
  };
  ($traceurRuntime.createClass)(ClassProvider, {
    _flattenParams: function(constructor, params) {
      var SuperConstructor;
      var constructorInfo;
      var $__8 = true;
      var $__9 = false;
      var $__10 = undefined;
      try {
        for (var $__6 = void 0,
            $__5 = (params)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__8 = ($__6 = $__5.next()).done); $__8 = true) {
          var param = $__6.value;
          {
            if (param.token === SuperConstructorAnnotation) {
              SuperConstructor = Object.getPrototypeOf(constructor);
              if (SuperConstructor === EmptyFunction) {
                throw new Error((toString(constructor) + " does not have a parent constructor. Only classes with a parent can ask for SuperConstructor!"));
              }
              constructorInfo = [SuperConstructor, this.params.length];
              this._constructors.push(constructorInfo);
              this._flattenParams(SuperConstructor, readAnnotations(SuperConstructor).params);
              constructorInfo.push(this.params.length - 1);
            } else {
              this.params.push(param);
            }
          }
        }
      } catch ($__11) {
        $__9 = true;
        $__10 = $__11;
      } finally {
        try {
          if (!$__8 && $__5.return != null) {
            $__5.return();
          }
        } finally {
          if ($__9) {
            throw $__10;
          }
        }
      }
    },
    _createConstructor: function(currentConstructorIdx, context, allArguments) {
      var constructorInfo = this._constructors[currentConstructorIdx];
      var nextConstructorInfo = this._constructors[currentConstructorIdx + 1];
      var argsForCurrentConstructor;
      if (nextConstructorInfo) {
        argsForCurrentConstructor = allArguments.slice(constructorInfo[1], nextConstructorInfo[1]).concat([this._createConstructor(currentConstructorIdx + 1, context, allArguments)]).concat(allArguments.slice(nextConstructorInfo[2] + 1, constructorInfo[2] + 1));
      } else {
        argsForCurrentConstructor = allArguments.slice(constructorInfo[1], constructorInfo[2] + 1);
      }
      return function InjectedAndBoundSuperConstructor() {
        return constructorInfo[0].apply(context, argsForCurrentConstructor);
      };
    },
    create: function(args) {
      var context = Object.create(this.provider.prototype);
      var constructor = this._createConstructor(0, context, args);
      var returnedValue = constructor();
      if (isFunction(returnedValue) || isObject(returnedValue)) {
        return returnedValue;
      }
      return context;
    }
  }, {});
  var FactoryProvider = function FactoryProvider(factoryFunction, params, isPromise) {
    this.provider = factoryFunction;
    this.params = params;
    this.isPromise = isPromise;
    var $__8 = true;
    var $__9 = false;
    var $__10 = undefined;
    try {
      for (var $__6 = void 0,
          $__5 = (params)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__8 = ($__6 = $__5.next()).done); $__8 = true) {
        var param = $__6.value;
        {
          if (param.token === SuperConstructorAnnotation) {
            throw new Error((toString(factoryFunction) + " is not a class. Only classes with a parent can ask for SuperConstructor!"));
          }
        }
      }
    } catch ($__11) {
      $__9 = true;
      $__10 = $__11;
    } finally {
      try {
        if (!$__8 && $__5.return != null) {
          $__5.return();
        }
      } finally {
        if ($__9) {
          throw $__10;
        }
      }
    }
  };
  ($traceurRuntime.createClass)(FactoryProvider, {create: function(args) {
      return this.provider.apply(undefined, args);
    }}, {});
  function createProviderFromFnOrClass(fnOrClass, annotations) {
    if (isClass(fnOrClass)) {
      return new ClassProvider(fnOrClass, annotations.params, annotations.provide.isPromise);
    }
    return new FactoryProvider(fnOrClass, annotations.params, annotations.provide.isPromise);
  }
  return {
    get createProviderFromFnOrClass() {
      return createProviderFromFnOrClass;
    },
    __esModule: true
  };
});

define('di/injector',["./annotations", "./util", "./profiler", "./providers"], function($__0,$__2,$__4,$__6) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__2 || !$__2.__esModule)
    $__2 = {default: $__2};
  if (!$__4 || !$__4.__esModule)
    $__4 = {default: $__4};
  if (!$__6 || !$__6.__esModule)
    $__6 = {default: $__6};
  var $__1 = $__0,
      annotate = $__1.annotate,
      readAnnotations = $__1.readAnnotations,
      hasAnnotation = $__1.hasAnnotation,
      ProvideAnnotation = $__1.Provide,
      TransientScopeAnnotation = $__1.TransientScope;
  var $__3 = $__2,
      isFunction = $__3.isFunction,
      toString = $__3.toString;
  var profileInjector = $__4.profileInjector;
  var createProviderFromFnOrClass = $__6.createProviderFromFnOrClass;
  function constructResolvingMessage(resolving, token) {
    if (arguments.length > 1) {
      resolving.push(token);
    }
    if (resolving.length > 1) {
      return (" (" + resolving.map(toString).join(' -> ') + ")");
    }
    return '';
  }
  var Injector = function Injector() {
    var modules = arguments[0] !== (void 0) ? arguments[0] : [];
    var parentInjector = arguments[1] !== (void 0) ? arguments[1] : null;
    var providers = arguments[2] !== (void 0) ? arguments[2] : new Map();
    var scopes = arguments[3] !== (void 0) ? arguments[3] : [];
    this._cache = new Map();
    this._providers = providers;
    this._parent = parentInjector;
    this._scopes = scopes;
    this._loadModules(modules);
    profileInjector(this, $Injector);
  };
  var $Injector = Injector;
  ($traceurRuntime.createClass)(Injector, {
    _collectProvidersWithAnnotation: function(annotationClass, collectedProviders) {
      this._providers.forEach((function(provider, token) {
        if (!collectedProviders.has(token) && hasAnnotation(provider.provider, annotationClass)) {
          collectedProviders.set(token, provider);
        }
      }));
      if (this._parent) {
        this._parent._collectProvidersWithAnnotation(annotationClass, collectedProviders);
      }
    },
    _loadModules: function(modules) {
      var $__13 = true;
      var $__14 = false;
      var $__15 = undefined;
      try {
        for (var $__11 = void 0,
            $__10 = (modules)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__13 = ($__11 = $__10.next()).done); $__13 = true) {
          var module = $__11.value;
          {
            if (isFunction(module)) {
              this._loadFnOrClass(module);
              continue;
            }
            throw new Error('Invalid module!');
          }
        }
      } catch ($__16) {
        $__14 = true;
        $__15 = $__16;
      } finally {
        try {
          if (!$__13 && $__10.return != null) {
            $__10.return();
          }
        } finally {
          if ($__14) {
            throw $__15;
          }
        }
      }
    },
    _loadFnOrClass: function(fnOrClass) {
      var annotations = readAnnotations(fnOrClass);
      var token = annotations.provide.token || fnOrClass;
      var provider = createProviderFromFnOrClass(fnOrClass, annotations);
      this._providers.set(token, provider);
    },
    _hasProviderFor: function(token) {
      if (this._providers.has(token)) {
        return true;
      }
      if (this._parent) {
        return this._parent._hasProviderFor(token);
      }
      return false;
    },
    _instantiateDefaultProvider: function(provider, token, resolving, wantPromise, wantLazy) {
      if (!this._parent) {
        this._providers.set(token, provider);
        return this.get(token, resolving, wantPromise, wantLazy);
      }
      var $__13 = true;
      var $__14 = false;
      var $__15 = undefined;
      try {
        for (var $__11 = void 0,
            $__10 = (this._scopes)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__13 = ($__11 = $__10.next()).done); $__13 = true) {
          var ScopeClass = $__11.value;
          {
            if (hasAnnotation(provider.provider, ScopeClass)) {
              this._providers.set(token, provider);
              return this.get(token, resolving, wantPromise, wantLazy);
            }
          }
        }
      } catch ($__16) {
        $__14 = true;
        $__15 = $__16;
      } finally {
        try {
          if (!$__13 && $__10.return != null) {
            $__10.return();
          }
        } finally {
          if ($__14) {
            throw $__15;
          }
        }
      }
      return this._parent._instantiateDefaultProvider(provider, token, resolving, wantPromise, wantLazy);
    },
    get: function(token) {
      var resolving = arguments[1] !== (void 0) ? arguments[1] : [];
      var wantPromise = arguments[2] !== (void 0) ? arguments[2] : false;
      var wantLazy = arguments[3] !== (void 0) ? arguments[3] : false;
      var $__8 = this;
      var resolvingMsg = '';
      var provider;
      var instance;
      var injector = this;
      if (token === null || token === undefined) {
        resolvingMsg = constructResolvingMessage(resolving, token);
        throw new Error(("Invalid token \"" + token + "\" requested!" + resolvingMsg));
      }
      if (token === $Injector) {
        if (wantPromise) {
          return Promise.resolve(this);
        }
        return this;
      }
      if (wantLazy) {
        return function createLazyInstance() {
          var lazyInjector = injector;
          if (arguments.length) {
            var locals = [];
            var args = arguments;
            for (var i = 0; i < args.length; i += 2) {
              locals.push((function(ii) {
                var fn = function createLocalInstance() {
                  return args[ii + 1];
                };
                annotate(fn, new ProvideAnnotation(args[ii]));
                return fn;
              })(i));
            }
            lazyInjector = injector.createChild(locals);
          }
          return lazyInjector.get(token, resolving, wantPromise, false);
        };
      }
      if (this._cache.has(token)) {
        instance = this._cache.get(token);
        provider = this._providers.get(token);
        if (provider.isPromise && !wantPromise) {
          resolvingMsg = constructResolvingMessage(resolving, token);
          throw new Error(("Cannot instantiate " + toString(token) + " synchronously. It is provided as a promise!" + resolvingMsg));
        }
        if (!provider.isPromise && wantPromise) {
          return Promise.resolve(instance);
        }
        return instance;
      }
      provider = this._providers.get(token);
      if (!provider && isFunction(token) && !this._hasProviderFor(token)) {
        provider = createProviderFromFnOrClass(token, readAnnotations(token));
        return this._instantiateDefaultProvider(provider, token, resolving, wantPromise, wantLazy);
      }
      if (!provider) {
        if (!this._parent) {
          resolvingMsg = constructResolvingMessage(resolving, token);
          throw new Error(("No provider for " + toString(token) + "!" + resolvingMsg));
        }
        return this._parent.get(token, resolving, wantPromise, wantLazy);
      }
      if (resolving.indexOf(token) !== -1) {
        resolvingMsg = constructResolvingMessage(resolving, token);
        throw new Error(("Cannot instantiate cyclic dependency!" + resolvingMsg));
      }
      resolving.push(token);
      var delayingInstantiation = wantPromise && provider.params.some((function(param) {
        return !param.isPromise;
      }));
      var args = provider.params.map((function(param) {
        if (delayingInstantiation) {
          return $__8.get(param.token, resolving, true, param.isLazy);
        }
        return $__8.get(param.token, resolving, param.isPromise, param.isLazy);
      }));
      if (delayingInstantiation) {
        var delayedResolving = resolving.slice();
        resolving.pop();
        return Promise.all(args).then(function(args) {
          try {
            instance = provider.create(args);
          } catch (e) {
            resolvingMsg = constructResolvingMessage(delayedResolving);
            var originalMsg = 'ORIGINAL ERROR: ' + e.message;
            e.message = ("Error during instantiation of " + toString(token) + "!" + resolvingMsg + "\n" + originalMsg);
            throw e;
          }
          if (!hasAnnotation(provider.provider, TransientScopeAnnotation)) {
            injector._cache.set(token, instance);
          }
          return instance;
        });
      }
      try {
        instance = provider.create(args);
      } catch (e) {
        resolvingMsg = constructResolvingMessage(resolving);
        var originalMsg = 'ORIGINAL ERROR: ' + e.message;
        e.message = ("Error during instantiation of " + toString(token) + "!" + resolvingMsg + "\n" + originalMsg);
        throw e;
      }
      if (!hasAnnotation(provider.provider, TransientScopeAnnotation)) {
        this._cache.set(token, instance);
      }
      if (!wantPromise && provider.isPromise) {
        resolvingMsg = constructResolvingMessage(resolving);
        throw new Error(("Cannot instantiate " + toString(token) + " synchronously. It is provided as a promise!" + resolvingMsg));
      }
      if (wantPromise && !provider.isPromise) {
        instance = Promise.resolve(instance);
      }
      resolving.pop();
      return instance;
    },
    getPromise: function(token) {
      return this.get(token, [], true);
    },
    createChild: function() {
      var modules = arguments[0] !== (void 0) ? arguments[0] : [];
      var forceNewInstancesOf = arguments[1] !== (void 0) ? arguments[1] : [];
      var forcedProviders = new Map();
      forceNewInstancesOf.push(TransientScopeAnnotation);
      var $__13 = true;
      var $__14 = false;
      var $__15 = undefined;
      try {
        for (var $__11 = void 0,
            $__10 = (forceNewInstancesOf)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__13 = ($__11 = $__10.next()).done); $__13 = true) {
          var annotation = $__11.value;
          {
            this._collectProvidersWithAnnotation(annotation, forcedProviders);
          }
        }
      } catch ($__16) {
        $__14 = true;
        $__15 = $__16;
      } finally {
        try {
          if (!$__13 && $__10.return != null) {
            $__10.return();
          }
        } finally {
          if ($__14) {
            throw $__15;
          }
        }
      }
      return new $Injector(modules, this, forcedProviders, forceNewInstancesOf);
    }
  }, {});
  ;
  return {
    get Injector() {
      return Injector;
    },
    __esModule: true
  };
});

define('di/index',["./injector", "./annotations"], function($__0,$__1) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__1 || !$__1.__esModule)
    $__1 = {default: $__1};
  var $__injector__ = $__0;
  var $__annotations__ = $__1;
  return {
    get Injector() {
      return $__injector__.Injector;
    },
    get annotate() {
      return $__annotations__.annotate;
    },
    get Inject() {
      return $__annotations__.Inject;
    },
    get InjectLazy() {
      return $__annotations__.InjectLazy;
    },
    get InjectPromise() {
      return $__annotations__.InjectPromise;
    },
    get Provide() {
      return $__annotations__.Provide;
    },
    get ProvidePromise() {
      return $__annotations__.ProvidePromise;
    },
    get SuperConstructor() {
      return $__annotations__.SuperConstructor;
    },
    get TransientScope() {
      return $__annotations__.TransientScope;
    },
    get ClassProvider() {
      return $__annotations__.ClassProvider;
    },
    get FactoryProvider() {
      return $__annotations__.FactoryProvider;
    },
    __esModule: true
  };
});

define('di', ['di/index'], function (main) { return main; });

define('experiments/models/TodoItem',[], function() {
  
  var TodoItem = function TodoItem(text) {
    var done = arguments[1] !== (void 0) ? arguments[1] : false;
    this.text = text;
    this.done = done;
  };
  ($traceurRuntime.createClass)(TodoItem, {
    toggle: function() {
      this.done = !this.done;
    },
    toString: function() {
      return this.text;
    }
  }, {});
  var $__default = TodoItem;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('common/utils/Generators',["di"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  
  var $__1 = $__0,
      Provide = $__1.Provide,
      Inject = $__1.Inject,
      TransientScope = $__1.TransientScope;
  var Generators = function Generators() {};
  ($traceurRuntime.createClass)(Generators, {}, {
    entries: $traceurRuntime.initGeneratorFunction(function $__10(obj) {
      var $__6,
          $__7,
          $__8,
          $__4,
          $__3,
          key,
          $__9;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $__6 = true;
              $__7 = false;
              $__8 = undefined;
              $ctx.state = 24;
              break;
            case 24:
              $ctx.pushTry(10, 11);
              $ctx.state = 13;
              break;
            case 13:
              $__4 = void 0, $__3 = (Object.keys(obj))[$traceurRuntime.toProperty(Symbol.iterator)]();
              $ctx.state = 9;
              break;
            case 9:
              $ctx.state = (!($__6 = ($__4 = $__3.next()).done)) ? 5 : 7;
              break;
            case 4:
              $__6 = true;
              $ctx.state = 9;
              break;
            case 5:
              key = $__4.value;
              $ctx.state = 6;
              break;
            case 6:
              $ctx.state = 2;
              return [key, obj[key]];
            case 2:
              $ctx.maybeThrow();
              $ctx.state = 4;
              break;
            case 7:
              $ctx.popTry();
              $ctx.state = 11;
              $ctx.finallyFallThrough = -2;
              break;
            case 10:
              $ctx.popTry();
              $ctx.maybeUncatchable();
              $__9 = $ctx.storedException;
              $ctx.state = 16;
              break;
            case 16:
              $__7 = true;
              $__8 = $__9;
              $ctx.state = 11;
              $ctx.finallyFallThrough = -2;
              break;
            case 11:
              $ctx.popTry();
              $ctx.state = 22;
              break;
            case 22:
              try {
                if (!$__6 && $__3.return != null) {
                  $__3.return();
                }
              } finally {
                if ($__7) {
                  throw $__8;
                }
              }
              $ctx.state = 20;
              break;
            case 20:
              $ctx.state = $ctx.finallyFallThrough;
              break;
            default:
              return $ctx.end();
          }
      }, $__10, this);
    }),
    keys: $traceurRuntime.initGeneratorFunction(function $__11(obj) {
      var $__6,
          $__7,
          $__8,
          $__4,
          $__3,
          key,
          $__9;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $__6 = true;
              $__7 = false;
              $__8 = undefined;
              $ctx.state = 24;
              break;
            case 24:
              $ctx.pushTry(10, 11);
              $ctx.state = 13;
              break;
            case 13:
              $__4 = void 0, $__3 = (Object.keys(obj))[$traceurRuntime.toProperty(Symbol.iterator)]();
              $ctx.state = 9;
              break;
            case 9:
              $ctx.state = (!($__6 = ($__4 = $__3.next()).done)) ? 5 : 7;
              break;
            case 4:
              $__6 = true;
              $ctx.state = 9;
              break;
            case 5:
              key = $__4.value;
              $ctx.state = 6;
              break;
            case 6:
              $ctx.state = 2;
              return key;
            case 2:
              $ctx.maybeThrow();
              $ctx.state = 4;
              break;
            case 7:
              $ctx.popTry();
              $ctx.state = 11;
              $ctx.finallyFallThrough = -2;
              break;
            case 10:
              $ctx.popTry();
              $ctx.maybeUncatchable();
              $__9 = $ctx.storedException;
              $ctx.state = 16;
              break;
            case 16:
              $__7 = true;
              $__8 = $__9;
              $ctx.state = 11;
              $ctx.finallyFallThrough = -2;
              break;
            case 11:
              $ctx.popTry();
              $ctx.state = 22;
              break;
            case 22:
              try {
                if (!$__6 && $__3.return != null) {
                  $__3.return();
                }
              } finally {
                if ($__7) {
                  throw $__8;
                }
              }
              $ctx.state = 20;
              break;
            case 20:
              $ctx.state = $ctx.finallyFallThrough;
              break;
            default:
              return $ctx.end();
          }
      }, $__11, this);
    }),
    take: $traceurRuntime.initGeneratorFunction(function $__12(iterator, n) {
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $ctx.state = (n > 0) ? 1 : -2;
              break;
            case 1:
              $ctx.state = 2;
              return iterator.next();
            case 2:
              $ctx.maybeThrow();
              $ctx.state = 4;
              break;
            case 4:
              n--;
              $ctx.state = 0;
              break;
            default:
              return $ctx.end();
          }
      }, $__12, this);
    }),
    values: $traceurRuntime.initGeneratorFunction(function $__13(obj) {
      var $__6,
          $__7,
          $__8,
          $__4,
          $__3,
          key,
          $__9;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $__6 = true;
              $__7 = false;
              $__8 = undefined;
              $ctx.state = 24;
              break;
            case 24:
              $ctx.pushTry(10, 11);
              $ctx.state = 13;
              break;
            case 13:
              $__4 = void 0, $__3 = (Object.keys(obj))[$traceurRuntime.toProperty(Symbol.iterator)]();
              $ctx.state = 9;
              break;
            case 9:
              $ctx.state = (!($__6 = ($__4 = $__3.next()).done)) ? 5 : 7;
              break;
            case 4:
              $__6 = true;
              $ctx.state = 9;
              break;
            case 5:
              key = $__4.value;
              $ctx.state = 6;
              break;
            case 6:
              $ctx.state = 2;
              return obj[key];
            case 2:
              $ctx.maybeThrow();
              $ctx.state = 4;
              break;
            case 7:
              $ctx.popTry();
              $ctx.state = 11;
              $ctx.finallyFallThrough = -2;
              break;
            case 10:
              $ctx.popTry();
              $ctx.maybeUncatchable();
              $__9 = $ctx.storedException;
              $ctx.state = 16;
              break;
            case 16:
              $__7 = true;
              $__8 = $__9;
              $ctx.state = 11;
              $ctx.finallyFallThrough = -2;
              break;
            case 11:
              $ctx.popTry();
              $ctx.state = 22;
              break;
            case 22:
              try {
                if (!$__6 && $__3.return != null) {
                  $__3.return();
                }
              } finally {
                if ($__7) {
                  throw $__8;
                }
              }
              $ctx.state = 20;
              break;
            case 20:
              $ctx.state = $ctx.finallyFallThrough;
              break;
            default:
              return $ctx.end();
          }
      }, $__13, this);
    }),
    keyGenerator: $traceurRuntime.initGeneratorFunction(function $__14() {
      var i,
          reset;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              i = 1;
              $ctx.state = 9;
              break;
            case 9:
              $ctx.state = (true) ? 1 : -2;
              break;
            case 6:
              i++;
              $ctx.state = 9;
              break;
            case 1:
              $ctx.state = 2;
              return i;
            case 2:
              reset = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              if (reset) {
                i = 0;
              }
              $ctx.state = 6;
              break;
            default:
              return $ctx.end();
          }
      }, $__14, this);
    })
  });
  Object.defineProperty(Generators.keyGenerator, "annotations", {get: function() {
      return [new TransientScope, new Inject, new Provide('sumoKeyGen')];
    }});
  return {
    get Generators() {
      return Generators;
    },
    __esModule: true
  };
});

define('experiments/models/TodoList',["./TodoItem", "../../common/utils/Generators", "di", "diary"], function($__0,$__2,$__4,$__6) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__2 || !$__2.__esModule)
    $__2 = {default: $__2};
  if (!$__4 || !$__4.__esModule)
    $__4 = {default: $__4};
  if (!$__6 || !$__6.__esModule)
    $__6 = {default: $__6};
  var Todo = $__0.default;
  var Generators = $__2.Generators;
  var Inject = $__4.Inject;
  var Diary = $__6.Diary;
  var TodoList = function TodoList(sumoKeyGen) {
    this.logger = Diary.logger('TodoList');
    this.keyGen = sumoKeyGen;
    this.todos = {};
    this.length = 0;
  };
  ($traceurRuntime.createClass)(TodoList, {
    add: function(text) {
      var done = arguments[1] !== (void 0) ? arguments[1] : false;
      var todo = new Todo(text, done);
      var key = this.keyGen.next().value;
      this.todos[key] = todo;
      this.length++;
    },
    getTodo: function(key) {
      return this.todos[key];
    },
    allTodos: function() {
      return this.todos;
    },
    archiveCompleted: function() {
      var $__12 = true;
      var $__13 = false;
      var $__14 = undefined;
      try {
        for (var $__10 = void 0,
            $__9 = (Generators.values(this.todos))[$traceurRuntime.toProperty(Symbol.iterator)](); !($__12 = ($__10 = $__9.next()).done); $__12 = true) {
          var todo = $__10.value;
          {
            if (todo.done) {
              console.log('removing...', todo);
            }
          }
        }
      } catch ($__15) {
        $__13 = true;
        $__14 = $__15;
      } finally {
        try {
          if (!$__12 && $__9.return != null) {
            $__9.return();
          }
        } finally {
          if ($__13) {
            throw $__14;
          }
        }
      }
    },
    remove: function(key) {
      delete this.todos[key];
      this.length--;
    },
    getUncompletedCount: function() {
      var count = 0;
      var $__12 = true;
      var $__13 = false;
      var $__14 = undefined;
      try {
        for (var $__10 = void 0,
            $__9 = (Generators.values(this.todos))[$traceurRuntime.toProperty(Symbol.iterator)](); !($__12 = ($__10 = $__9.next()).done); $__12 = true) {
          var todo = $__10.value;
          {
            if (!todo.done) {
              count++;
            }
          }
        }
      } catch ($__15) {
        $__13 = true;
        $__14 = $__15;
      } finally {
        try {
          if (!$__12 && $__9.return != null) {
            $__9.return();
          }
        } finally {
          if ($__13) {
            throw $__14;
          }
        }
      }
      return count;
    },
    completed: function() {
      return this.todos.values().filter((function(todo) {
        return todo.done === true;
      }));
    },
    remaining: function() {
      var $__16;
      return ($__16 = this.todos.values()).without.apply($__16, $traceurRuntime.spread(this.completed()));
    },
    clearAll: function() {
      var $__12 = true;
      var $__13 = false;
      var $__14 = undefined;
      try {
        for (var $__10 = void 0,
            $__9 = (Generators.keys(this.todos))[$traceurRuntime.toProperty(Symbol.iterator)](); !($__12 = ($__10 = $__9.next()).done); $__12 = true) {
          var todo = $__10.value;
          {
            this.remove(todo);
          }
        }
      } catch ($__15) {
        $__13 = true;
        $__14 = $__15;
      } finally {
        try {
          if (!$__12 && $__9.return != null) {
            $__9.return();
          }
        } finally {
          if ($__13) {
            throw $__14;
          }
        }
      }
      this.logger.info(("Reseting keyGen to : " + this.keyGen.next(true).value));
    }
  }, {});
  Object.defineProperty(TodoList, "annotations", {get: function() {
      return [new Inject('sumoKeyGen')];
    }});
  var $__default = TodoList;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('common/utils/generators',["di"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  
  var $__1 = $__0,
      Provide = $__1.Provide,
      Inject = $__1.Inject,
      TransientScope = $__1.TransientScope;
  var Generators = function Generators() {};
  ($traceurRuntime.createClass)(Generators, {}, {
    entries: $traceurRuntime.initGeneratorFunction(function $__10(obj) {
      var $__6,
          $__7,
          $__8,
          $__4,
          $__3,
          key,
          $__9;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $__6 = true;
              $__7 = false;
              $__8 = undefined;
              $ctx.state = 24;
              break;
            case 24:
              $ctx.pushTry(10, 11);
              $ctx.state = 13;
              break;
            case 13:
              $__4 = void 0, $__3 = (Object.keys(obj))[$traceurRuntime.toProperty(Symbol.iterator)]();
              $ctx.state = 9;
              break;
            case 9:
              $ctx.state = (!($__6 = ($__4 = $__3.next()).done)) ? 5 : 7;
              break;
            case 4:
              $__6 = true;
              $ctx.state = 9;
              break;
            case 5:
              key = $__4.value;
              $ctx.state = 6;
              break;
            case 6:
              $ctx.state = 2;
              return [key, obj[key]];
            case 2:
              $ctx.maybeThrow();
              $ctx.state = 4;
              break;
            case 7:
              $ctx.popTry();
              $ctx.state = 11;
              $ctx.finallyFallThrough = -2;
              break;
            case 10:
              $ctx.popTry();
              $ctx.maybeUncatchable();
              $__9 = $ctx.storedException;
              $ctx.state = 16;
              break;
            case 16:
              $__7 = true;
              $__8 = $__9;
              $ctx.state = 11;
              $ctx.finallyFallThrough = -2;
              break;
            case 11:
              $ctx.popTry();
              $ctx.state = 22;
              break;
            case 22:
              try {
                if (!$__6 && $__3.return != null) {
                  $__3.return();
                }
              } finally {
                if ($__7) {
                  throw $__8;
                }
              }
              $ctx.state = 20;
              break;
            case 20:
              $ctx.state = $ctx.finallyFallThrough;
              break;
            default:
              return $ctx.end();
          }
      }, $__10, this);
    }),
    keys: $traceurRuntime.initGeneratorFunction(function $__11(obj) {
      var $__6,
          $__7,
          $__8,
          $__4,
          $__3,
          key,
          $__9;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $__6 = true;
              $__7 = false;
              $__8 = undefined;
              $ctx.state = 24;
              break;
            case 24:
              $ctx.pushTry(10, 11);
              $ctx.state = 13;
              break;
            case 13:
              $__4 = void 0, $__3 = (Object.keys(obj))[$traceurRuntime.toProperty(Symbol.iterator)]();
              $ctx.state = 9;
              break;
            case 9:
              $ctx.state = (!($__6 = ($__4 = $__3.next()).done)) ? 5 : 7;
              break;
            case 4:
              $__6 = true;
              $ctx.state = 9;
              break;
            case 5:
              key = $__4.value;
              $ctx.state = 6;
              break;
            case 6:
              $ctx.state = 2;
              return key;
            case 2:
              $ctx.maybeThrow();
              $ctx.state = 4;
              break;
            case 7:
              $ctx.popTry();
              $ctx.state = 11;
              $ctx.finallyFallThrough = -2;
              break;
            case 10:
              $ctx.popTry();
              $ctx.maybeUncatchable();
              $__9 = $ctx.storedException;
              $ctx.state = 16;
              break;
            case 16:
              $__7 = true;
              $__8 = $__9;
              $ctx.state = 11;
              $ctx.finallyFallThrough = -2;
              break;
            case 11:
              $ctx.popTry();
              $ctx.state = 22;
              break;
            case 22:
              try {
                if (!$__6 && $__3.return != null) {
                  $__3.return();
                }
              } finally {
                if ($__7) {
                  throw $__8;
                }
              }
              $ctx.state = 20;
              break;
            case 20:
              $ctx.state = $ctx.finallyFallThrough;
              break;
            default:
              return $ctx.end();
          }
      }, $__11, this);
    }),
    take: $traceurRuntime.initGeneratorFunction(function $__12(iterator, n) {
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $ctx.state = (n > 0) ? 1 : -2;
              break;
            case 1:
              $ctx.state = 2;
              return iterator.next();
            case 2:
              $ctx.maybeThrow();
              $ctx.state = 4;
              break;
            case 4:
              n--;
              $ctx.state = 0;
              break;
            default:
              return $ctx.end();
          }
      }, $__12, this);
    }),
    values: $traceurRuntime.initGeneratorFunction(function $__13(obj) {
      var $__6,
          $__7,
          $__8,
          $__4,
          $__3,
          key,
          $__9;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $__6 = true;
              $__7 = false;
              $__8 = undefined;
              $ctx.state = 24;
              break;
            case 24:
              $ctx.pushTry(10, 11);
              $ctx.state = 13;
              break;
            case 13:
              $__4 = void 0, $__3 = (Object.keys(obj))[$traceurRuntime.toProperty(Symbol.iterator)]();
              $ctx.state = 9;
              break;
            case 9:
              $ctx.state = (!($__6 = ($__4 = $__3.next()).done)) ? 5 : 7;
              break;
            case 4:
              $__6 = true;
              $ctx.state = 9;
              break;
            case 5:
              key = $__4.value;
              $ctx.state = 6;
              break;
            case 6:
              $ctx.state = 2;
              return obj[key];
            case 2:
              $ctx.maybeThrow();
              $ctx.state = 4;
              break;
            case 7:
              $ctx.popTry();
              $ctx.state = 11;
              $ctx.finallyFallThrough = -2;
              break;
            case 10:
              $ctx.popTry();
              $ctx.maybeUncatchable();
              $__9 = $ctx.storedException;
              $ctx.state = 16;
              break;
            case 16:
              $__7 = true;
              $__8 = $__9;
              $ctx.state = 11;
              $ctx.finallyFallThrough = -2;
              break;
            case 11:
              $ctx.popTry();
              $ctx.state = 22;
              break;
            case 22:
              try {
                if (!$__6 && $__3.return != null) {
                  $__3.return();
                }
              } finally {
                if ($__7) {
                  throw $__8;
                }
              }
              $ctx.state = 20;
              break;
            case 20:
              $ctx.state = $ctx.finallyFallThrough;
              break;
            default:
              return $ctx.end();
          }
      }, $__13, this);
    }),
    keyGenerator: $traceurRuntime.initGeneratorFunction(function $__14() {
      var i,
          reset;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              i = 1;
              $ctx.state = 9;
              break;
            case 9:
              $ctx.state = (true) ? 1 : -2;
              break;
            case 6:
              i++;
              $ctx.state = 9;
              break;
            case 1:
              $ctx.state = 2;
              return i;
            case 2:
              reset = $ctx.sent;
              $ctx.state = 4;
              break;
            case 4:
              if (reset) {
                i = 0;
              }
              $ctx.state = 6;
              break;
            default:
              return $ctx.end();
          }
      }, $__14, this);
    })
  });
  Object.defineProperty(Generators.keyGenerator, "annotations", {get: function() {
      return [new TransientScope, new Inject, new Provide('sumoKeyGen')];
    }});
  return {
    get Generators() {
      return Generators;
    },
    __esModule: true
  };
});

define('experiments/controllers/TodoController',["di", "../models/TodoList", "../../common/utils/generators"], function($__0,$__2,$__4) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__2 || !$__2.__esModule)
    $__2 = {default: $__2};
  if (!$__4 || !$__4.__esModule)
    $__4 = {default: $__4};
  var Injector = $__0.Injector;
  var TodoList = $__2.default;
  var Generators = $__4.Generators;
  var TodoController = function TodoController($scope, growl) {
    var injector = new Injector([Generators.keyGenerator]);
    this.todos = injector.get(TodoList);
    this.todos.add('learn AngularJS', true);
    this.todos.add('build an AngularJS app');
    this.newTodo = '';
    this.growl = growl;
  };
  ($traceurRuntime.createClass)(TodoController, {
    addTodo: function() {
      this.todos.add(this.newTodo, false);
      this.growl.info((this.newTodo + " ... added"), {ttl: 3000});
      this.newTodo = '';
    },
    removeTodo: function(key) {
      var anItem = this.todos.getTodo(key);
      this.growl.warning((anItem.text + " ... removed"), {ttl: 3000});
      this.todos.remove(key);
    },
    clearAll: function() {
      this.todos.clearAll();
      this.growl.error('All Clear', {ttl: 3000});
    },
    completed: function() {
      return this.todos.completed();
    },
    remaining: function() {
      return this.todos.remaining();
    }
  }, {});
  var $__default = TodoController;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('experiments/controllers/MessagingController',[], function() {
  
  var _scope = Symbol('scope');
  var _eventBus = Symbol('eventBus');
  var MessagingController = function MessagingController($scope, growl, $eventBus, UserService) {
    var $__0 = this;
    this.users = [];
    this.rooms = [];
    this.messages = [];
    this.notifications = [];
    this.selectedUser = 'All';
    this.selectedRoom = 'Developers';
    this.joined = false;
    this[_scope] = $scope;
    this[_eventBus] = $eventBus;
    var notify = (function(message, error) {
      if ($__0.notifications.length > 2) {
        $__0.notifications.shift();
      }
      $__0.notifications.push({
        message: message,
        error: error
      });
    });
    if (!UserService.isLoggedIn()) {
      notify('Please login to participate in the Chat', true);
    }
    $scope.$watch((function() {
      return $eventBus.readyState.value;
    }), (function(value) {
      $__0.readyState = value;
      notify(("Connection state: " + $__0[_eventBus].readyState.description), $eventBus.readyState.value > 2);
    }));
    this.getChatRooms();
    this.getActiveUsers('stocks');
    var onMessage = (function(message) {
      var privt = arguments[1] !== (void 0) ? arguments[1] : false;
      if (message.body) {
        $scope.$apply((function() {
          if ($__0.messages.length > 9) {
            $__0.messages.shift();
          }
          $__0.messages.push({
            message: JSON.parse(message.body),
            private: privt
          });
        }));
      }
    });
    var onError = (function(error) {
      if (error.body) {
        $scope.$apply((function() {
          notify(error.body, true);
        }));
      }
    });
    var onStockQuote = (function(message) {
      switch (message.headers.destination) {
        case '/topic/price.stock.AAPL':
          $__0.AAPL = JSON.parse(message.body);
          break;
        case '/topic/price.stock.GOOG':
          $__0.GOOG = JSON.parse(message.body);
          break;
        case '/topic/price.stock.YHOO':
          $__0.YHOO = JSON.parse(message.body);
          break;
      }
      $scope.$apply();
    });
    var onAnnouncements = (function(message) {
      notify(JSON.parse(message.body));
      $__0.getActiveUsers('stocks');
      $__0.selectedUser = 'All';
    });
    var onNotification = (function(message) {
      var payload = JSON.parse(message.body);
      var body = payload.body || 'no message body';
      var title = payload.subject || 'Broadcast Notification';
      var id = payload.id || 'C42531110091071';
      var ttl = payload.ttl || 30000;
      growl.info(body + ("<br> Go to <a href=\"#/calls/list/" + id + "\">" + id + "</>"), {
        title: title,
        ttl: ttl
      });
    });
    var onPrivateNotification = (function(message) {
      var payload = JSON.parse(message.body);
      var body = payload.body || 'no message body';
      var title = payload.subject || 'Private Notification';
      var ttl = payload.ttl || -1;
      growl.warning(body, {
        title: title,
        ttl: ttl
      });
    });
    $eventBus.registerHandler('/topic/chat/announcements.*', onAnnouncements);
    $eventBus.registerHandler('/topic/chat/messages', onMessage);
    $eventBus.registerHandler('/user/queue/chat/messages', (function(message) {
      onMessage(message, true);
    }));
    $eventBus.registerHandler('/user/queue/chat/self', onMessage);
    $eventBus.registerHandler('/user/queue/errors', onError);
    $eventBus.registerHandler('/topic/price.stock.*', onStockQuote);
    $eventBus.registerHandler('/topic/notifications.*', onNotification);
    $eventBus.registerHandler('/user/queue/notifications.*', onPrivateNotification);
    $scope.$on('$destroy', (function() {
      $eventBus.publish('/app/chat/leave', 'Goodbye World');
      $eventBus.unregisterHandler('/topic/chat/announcements.*');
      $eventBus.unregisterHandler('/topic/chat/messages');
      $eventBus.unregisterHandler('/user/queue/chat/messages');
      $eventBus.unregisterHandler('/user/queue/chat/self');
      $eventBus.unregisterHandler('/user/queue/errors');
      $eventBus.unregisterHandler('/topic/price.stock.*');
    }));
  };
  ($traceurRuntime.createClass)(MessagingController, {
    joinLeave: function() {
      if (this.joined) {
        this[_eventBus].publish('/app/chat/leave', 'Goodbye World');
        this.joined = false;
      } else {
        this[_eventBus].publish('/app/chat/join', 'Hello World');
        this.joined = true;
      }
    },
    getChatRooms: function() {
      var $__0 = this;
      this[_eventBus].send('/app/chat/rooms/' + 'sumo').then((function(rooms) {
        $__0[_scope].$apply((function() {
          $__0.rooms = rooms;
        }));
      }));
    },
    getActiveUsers: function(room) {
      var $__0 = this;
      this[_eventBus].send('/app/chat/users/' + room).then((function(users) {
        $__0[_scope].$apply((function() {
          $__0.users = users;
        }));
      }));
    },
    sendSelf: function(message) {
      this[_eventBus].publish('/app/chat/self', message);
    },
    sendMessage: function(newMessage) {
      if (this.selectedUser === 'All') {
        this[_eventBus].publish('/app/chat/messages', newMessage);
      } else {
        this.messages.push({
          message: ("[ >> " + this.selectedUser + "]: " + newMessage),
          private: true
        });
        this[_eventBus].publish(("/user/" + this.selectedUser + "/queue/chat/messages"), ("[" + this[_eventBus].getUser() + "]: " + newMessage));
      }
      this.newMessage = '';
    }
  }, {});
  var $__default = MessagingController;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

/**
 * term.js - an xterm emulator
 * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)
 * https://github.com/chjj/term.js
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Originally forked from (with the author's permission):
 *   Fabrice Bellard's javascript vt100 for jslinux:
 *   http://bellard.org/jslinux/
 *   Copyright (c) 2011 Fabrice Bellard
 *   The original design remains. The terminal itself
 *   has been extended to include xterm CSI codes, among
 *   other features.
 */

;(function() {

/**
 * Terminal Emulation References:
 *   http://vt100.net/
 *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt
 *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html
 *   http://invisible-island.net/vttest/
 *   http://www.inwap.com/pdp10/ansicode.txt
 *   http://linux.die.net/man/4/console_codes
 *   http://linux.die.net/man/7/urxvt
 */



/**
 * Shared
 */

var window = this
  , document = this.document;

/**
 * EventEmitter
 */

function EventEmitter() {
  this._events = this._events || {};
}

EventEmitter.prototype.addListener = function(type, listener) {
  this._events[type] = this._events[type] || [];
  this._events[type].push(listener);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.removeListener = function(type, listener) {
  if (!this._events[type]) return;

  var obj = this._events[type]
    , i = obj.length;

  while (i--) {
    if (obj[i] === listener || obj[i].listener === listener) {
      obj.splice(i, 1);
      return;
    }
  }
};

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners = function(type) {
  if (this._events[type]) delete this._events[type];
};

EventEmitter.prototype.once = function(type, listener) {
  function on() {
    var args = Array.prototype.slice.call(arguments);
    this.removeListener(type, on);
    return listener.apply(this, args);
  }
  on.listener = listener;
  return this.on(type, on);
};

EventEmitter.prototype.emit = function(type) {
  if (!this._events[type]) return;

  var args = Array.prototype.slice.call(arguments, 1)
    , obj = this._events[type]
    , l = obj.length
    , i = 0;

  for (; i < l; i++) {
    obj[i].apply(this, args);
  }
};

EventEmitter.prototype.listeners = function(type) {
  return this._events[type] = this._events[type] || [];
};

/**
 * States
 */

var normal = 0
  , escaped = 1
  , csi = 2
  , osc = 3
  , charset = 4
  , dcs = 5
  , ignore = 6;

/**
 * Terminal
 */

function Terminal(options) {
  var self = this;

  if (!(this instanceof Terminal)) {
    return new Terminal(arguments[0], arguments[1], arguments[2]);
  }

  EventEmitter.call(this);

  if (typeof options === 'number') {
    options = {
      cols: arguments[0],
      rows: arguments[1],
      handler: arguments[2]
    };
  }

  options = options || {};

  each(keys(Terminal.defaults), function(key) {
    if (options[key] == null) {
      options[key] = Terminal.options[key];
      // Legacy:
      if (Terminal[key] !== Terminal.defaults[key]) {
        options[key] = Terminal[key];
      }
    }
    self[key] = options[key];
  });

  if (options.colors.length === 8) {
    options.colors = options.colors.concat(Terminal._colors.slice(8));
  } else if (options.colors.length === 16) {
    options.colors = options.colors.concat(Terminal._colors.slice(16));
  } else if (options.colors.length === 10) {
    options.colors = options.colors.slice(0, -2).concat(
      Terminal._colors.slice(8, -2), options.colors.slice(-2));
  } else if (options.colors.length === 18) {
    options.colors = options.colors.concat(
      Terminal._colors.slice(16, -2), options.colors.slice(-2));
  }
  this.colors = options.colors;

  this.options = options;

  // this.context = options.context || window;
  // this.document = options.document || document;
  this.parent = options.body || options.parent
    || (document ? document.getElementsByTagName('body')[0] : null);

  this.cols = options.cols || options.geometry[0];
  this.rows = options.rows || options.geometry[1];

  if (options.handler) {
    this.on('data', options.handler);
  }

  this.ybase = 0;
  this.ydisp = 0;
  this.x = 0;
  this.y = 0;
  this.cursorState = 0;
  this.cursorHidden = false;
  this.convertEol;
  this.state = 0;
  this.queue = '';
  this.scrollTop = 0;
  this.scrollBottom = this.rows - 1;

  // modes
  this.applicationKeypad = false;
  this.applicationCursor = false;
  this.originMode = false;
  this.insertMode = false;
  this.wraparoundMode = false;
  this.normal = null;

  // select modes
  this.prefixMode = false;
  this.selectMode = false;
  this.visualMode = false;
  this.searchMode = false;
  this.searchDown;
  this.entry = '';
  this.entryPrefix = 'Search: ';
  this._real;
  this._selected;
  this._textarea;

  // charset
  this.charset = null;
  this.gcharset = null;
  this.glevel = 0;
  this.charsets = [null];

  // mouse properties
  this.decLocator;
  this.x10Mouse;
  this.vt200Mouse;
  this.vt300Mouse;
  this.normalMouse;
  this.mouseEvents;
  this.sendFocus;
  this.utfMouse;
  this.sgrMouse;
  this.urxvtMouse;

  // misc
  this.element;
  this.children;
  this.refreshStart;
  this.refreshEnd;
  this.savedX;
  this.savedY;
  this.savedCols;

  // stream
  this.readable = true;
  this.writable = true;

  this.defAttr = (0 << 18) | (257 << 9) | (256 << 0);
  this.curAttr = this.defAttr;

  this.params = [];
  this.currentParam = 0;
  this.prefix = '';
  this.postfix = '';

  this.lines = [];
  var i = this.rows;
  while (i--) {
    this.lines.push(this.blankLine());
  }

  this.tabs;
  this.setupStops();
}

inherits(Terminal, EventEmitter);

// back_color_erase feature for xterm.
Terminal.prototype.eraseAttr = function() {
  // if (this.is('screen')) return this.defAttr;
  return (this.defAttr & ~0x1ff) | (this.curAttr & 0x1ff);
};

/**
 * Colors
 */

// Colors 0-15
Terminal.tangoColors = [
  // dark:
  '#2e3436',
  '#cc0000',
  '#4e9a06',
  '#c4a000',
  '#3465a4',
  '#75507b',
  '#06989a',
  '#d3d7cf',
  // bright:
  '#555753',
  '#ef2929',
  '#8ae234',
  '#fce94f',
  '#729fcf',
  '#ad7fa8',
  '#34e2e2',
  '#eeeeec'
];

Terminal.xtermColors = [
  // dark:
  '#000000', // black
  '#cd0000', // red3
  '#00cd00', // green3
  '#cdcd00', // yellow3
  '#0000ee', // blue2
  '#cd00cd', // magenta3
  '#00cdcd', // cyan3
  '#e5e5e5', // gray90
  // bright:
  '#7f7f7f', // gray50
  '#ff0000', // red
  '#00ff00', // green
  '#ffff00', // yellow
  '#5c5cff', // rgb:5c/5c/ff
  '#ff00ff', // magenta
  '#00ffff', // cyan
  '#ffffff'  // white
];

// Colors 0-15 + 16-255
// Much thanks to TooTallNate for writing this.
Terminal.colors = (function() {
  var colors = Terminal.tangoColors.slice()
    , r = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff]
    , i;

  // 16-231
  i = 0;
  for (; i < 216; i++) {
    out(r[(i / 36) % 6 | 0], r[(i / 6) % 6 | 0], r[i % 6]);
  }

  // 232-255 (grey)
  i = 0;
  for (; i < 24; i++) {
    r = 8 + i * 10;
    out(r, r, r);
  }

  function out(r, g, b) {
    colors.push('#' + hex(r) + hex(g) + hex(b));
  }

  function hex(c) {
    c = c.toString(16);
    return c.length < 2 ? '0' + c : c;
  }

  return colors;
})();

// Default BG/FG
Terminal.colors[256] = '#000000';
Terminal.colors[257] = '#f0f0f0';

Terminal._colors = Terminal.colors.slice();

Terminal.vcolors = (function() {
  var out = []
    , colors = Terminal.colors
    , i = 0
    , color;

  for (; i < 256; i++) {
    color = parseInt(colors[i].substring(1), 16);
    out.push([
      (color >> 16) & 0xff,
      (color >> 8) & 0xff,
      color & 0xff
    ]);
  }

  return out;
})();

/**
 * Options
 */

Terminal.defaults = {
  colors: Terminal.colors,
  convertEol: false,
  termName: 'xterm',
  geometry: [80, 24],
  cursorBlink: true,
  visualBell: false,
  popOnBell: false,
  scrollback: 1000,
  screenKeys: false,
  debug: false,
  useStyle: false
  // programFeatures: false,
  // focusKeys: false,
};

Terminal.options = {};

each(keys(Terminal.defaults), function(key) {
  Terminal[key] = Terminal.defaults[key];
  Terminal.options[key] = Terminal.defaults[key];
});

/**
 * Focused Terminal
 */

Terminal.focus = null;

Terminal.prototype.focus = function() {
  if (Terminal.focus === this) return;

  if (Terminal.focus) {
    Terminal.focus.blur();
  }

  if (this.sendFocus) this.send('\x1b[I');
  this.showCursor();

  // try {
  //   this.element.focus();
  // } catch (e) {
  //   ;
  // }

  // this.emit('focus');

  Terminal.focus = this;
};

Terminal.prototype.blur = function() {
  if (Terminal.focus !== this) return;

  this.cursorState = 0;
  this.refresh(this.y, this.y);
  if (this.sendFocus) this.send('\x1b[O');

  // try {
  //   this.element.blur();
  // } catch (e) {
  //   ;
  // }

  // this.emit('blur');

  Terminal.focus = null;
};

/**
 * Initialize global behavior
 */

Terminal.prototype.initGlobal = function() {
  var document = this.document;

  Terminal._boundDocs = Terminal._boundDocs || [];
  if (~indexOf(Terminal._boundDocs, document)) {
    return;
  }
  Terminal._boundDocs.push(document);

  Terminal.bindPaste(document);

  Terminal.bindKeys(document);

  Terminal.bindCopy(document);

  if (this.isIpad || this.isIphone) {
    Terminal.fixIpad(document);
  }

  if (this.useStyle) {
    Terminal.insertStyle(document, this.colors[256], this.colors[257]);
  }
};

/**
 * Bind to paste event
 */

Terminal.bindPaste = function(document) {
  // This seems to work well for ctrl-V and middle-click,
  // even without the contentEditable workaround.
  var window = document.defaultView;
  on(window, 'paste', function(ev) {
    var term = Terminal.focus;
    if (!term) return;
    if (ev.clipboardData) {
      term.send(ev.clipboardData.getData('text/plain'));
    } else if (term.context.clipboardData) {
      term.send(term.context.clipboardData.getData('Text'));
    }
    // Not necessary. Do it anyway for good measure.
    term.element.contentEditable = 'inherit';
    return cancel(ev);
  });
};

/**
 * Global Events for key handling
 */

Terminal.bindKeys = function(document) {
  // We should only need to check `target === body` below,
  // but we can check everything for good measure.
  on(document, 'keydown', function(ev) {
    if (!Terminal.focus) return;
    var target = ev.target || ev.srcElement;
    if (!target) return;
    if (target === Terminal.focus.element
        || target === Terminal.focus.context
        || target === Terminal.focus.document
        || target === Terminal.focus.body
        || target === Terminal._textarea
        || target === Terminal.focus.parent) {
      return Terminal.focus.keyDown(ev);
    }
  }, true);

  on(document, 'keypress', function(ev) {
    if (!Terminal.focus) return;
    var target = ev.target || ev.srcElement;
    if (!target) return;
    if (target === Terminal.focus.element
        || target === Terminal.focus.context
        || target === Terminal.focus.document
        || target === Terminal.focus.body
        || target === Terminal._textarea
        || target === Terminal.focus.parent) {
      return Terminal.focus.keyPress(ev);
    }
  }, true);

  // If we click somewhere other than a
  // terminal, unfocus the terminal.
  on(document, 'mousedown', function(ev) {
    if (!Terminal.focus) return;

    var el = ev.target || ev.srcElement;
    if (!el) return;

    do {
      if (el === Terminal.focus.element) return;
    } while (el = el.parentNode);

    Terminal.focus.blur();
  });
};

/**
 * Copy Selection w/ Ctrl-C (Select Mode)
 */

Terminal.bindCopy = function(document) {
  var window = document.defaultView;

  // if (!('onbeforecopy' in document)) {
  //   // Copies to *only* the clipboard.
  //   on(window, 'copy', function fn(ev) {
  //     var term = Terminal.focus;
  //     if (!term) return;
  //     if (!term._selected) return;
  //     var text = term.grabText(
  //       term._selected.x1, term._selected.x2,
  //       term._selected.y1, term._selected.y2);
  //     term.emit('copy', text);
  //     ev.clipboardData.setData('text/plain', text);
  //   });
  //   return;
  // }

  // Copies to primary selection *and* clipboard.
  // NOTE: This may work better on capture phase,
  // or using the `beforecopy` event.
  on(window, 'copy', function(ev) {
    var term = Terminal.focus;
    if (!term) return;
    if (!term._selected) return;
    var textarea = term.getCopyTextarea();
    var text = term.grabText(
      term._selected.x1, term._selected.x2,
      term._selected.y1, term._selected.y2);
    term.emit('copy', text);
    textarea.focus();
    textarea.textContent = text;
    textarea.value = text;
    textarea.setSelectionRange(0, text.length);
    setTimeout(function() {
      term.element.focus();
      term.focus();
    }, 1);
  });
};

/**
 * Fix iPad - no idea if this works
 */

Terminal.fixIpad = function(document) {
  var textarea = document.createElement('textarea');
  textarea.style.position = 'absolute';
  textarea.style.left = '-32000px';
  textarea.style.top = '-32000px';
  textarea.style.width = '0px';
  textarea.style.height = '0px';
  textarea.style.opacity = '0';
  textarea.style.backgroundColor = 'transparent';
  textarea.style.borderStyle = 'none';
  textarea.style.outlineStyle = 'none';
  textarea.autocapitalize = 'none';
  textarea.autocorrect = 'off';

  document.getElementsByTagName('body')[0].appendChild(textarea);

  Terminal._textarea = textarea;

  setTimeout(function() {
    textarea.focus();
  }, 1000);
};

/**
 * Insert a default style
 */

Terminal.insertStyle = function(document, bg, fg) {
  var style = document.getElementById('term-style');
  if (style) return;

  var head = document.getElementsByTagName('head')[0];
  if (!head) return;

  var style = document.createElement('style');
  style.id = 'term-style';

  // textContent doesn't work well with IE for <style> elements.
  style.innerHTML = ''
    + '.terminal {\n'
    + '  float: left;\n'
    + '  border: ' + bg + ' solid 5px;\n'
    + '  font-family: "DejaVu Sans Mono", "Liberation Mono", monospace;\n'
    + '  font-size: 11px;\n'
    + '  color: ' + fg + ';\n'
    + '  background: ' + bg + ';\n'
    + '}\n'
    + '\n'
    + '.terminal-cursor {\n'
    + '  color: ' + bg + ';\n'
    + '  background: ' + fg + ';\n'
    + '}\n';

  // var out = '';
  // each(Terminal.colors, function(color, i) {
  //   if (i === 256) {
  //     out += '\n.term-bg-color-default { background-color: ' + color + '; }';
  //   }
  //   if (i === 257) {
  //     out += '\n.term-fg-color-default { color: ' + color + '; }';
  //   }
  //   out += '\n.term-bg-color-' + i + ' { background-color: ' + color + '; }';
  //   out += '\n.term-fg-color-' + i + ' { color: ' + color + '; }';
  // });
  // style.innerHTML += out + '\n';

  head.insertBefore(style, head.firstChild);
};

/**
 * Open Terminal
 */

Terminal.prototype.open = function(parent) {
  var self = this
    , i = 0
    , div;

  this.parent = parent || this.parent;

  if (!this.parent) {
    throw new Error('Terminal requires a parent element.');
  }

  // Grab global elements.
  this.context = this.parent.ownerDocument.defaultView;
  this.document = this.parent.ownerDocument;
  this.body = this.document.getElementsByTagName('body')[0];

  // Parse user-agent strings.
  if (this.context.navigator && this.context.navigator.userAgent) {
    this.isMac = !!~this.context.navigator.userAgent.indexOf('Mac');
    this.isIpad = !!~this.context.navigator.userAgent.indexOf('iPad');
    this.isIphone = !!~this.context.navigator.userAgent.indexOf('iPhone');
    this.isMSIE = !!~this.context.navigator.userAgent.indexOf('MSIE');
  }

  // Create our main terminal element.
  this.element = this.document.createElement('div');
  this.element.className = 'terminal';
  this.element.style.outline = 'none';
  this.element.setAttribute('tabindex', 0);
  this.element.style.backgroundColor = this.colors[256];
  this.element.style.color = this.colors[257];

  // Create the lines for our terminal.
  this.children = [];
  for (; i < this.rows; i++) {
    div = this.document.createElement('div');
    this.element.appendChild(div);
    this.children.push(div);
  }
  this.parent.appendChild(this.element);

  // Draw the screen.
  this.refresh(0, this.rows - 1);

  // Initialize global actions that
  // need to be taken on the document.
  this.initGlobal();

  // Ensure there is a Terminal.focus.
  this.focus();

  // Start blinking the cursor.
  this.startBlink();

  // Bind to DOM events related
  // to focus and paste behavior.
  on(this.element, 'focus', function() {
    self.focus();
    if (self.isIpad || self.isIphone) {
      Terminal._textarea.focus();
    }
  });

  // This causes slightly funky behavior.
  // on(this.element, 'blur', function() {
  //   self.blur();
  // });

  on(this.element, 'mousedown', function() {
    self.focus();
  });

  // Clickable paste workaround, using contentEditable.
  // This probably shouldn't work,
  // ... but it does. Firefox's paste
  // event seems to only work for textareas?
  on(this.element, 'mousedown', function(ev) {
    var button = ev.button != null
      ? +ev.button
      : ev.which != null
        ? ev.which - 1
        : null;

    // Does IE9 do this?
    if (self.isMSIE) {
      button = button === 1 ? 0 : button === 4 ? 1 : button;
    }

    if (button !== 2) return;

    self.element.contentEditable = 'true';
    setTimeout(function() {
      self.element.contentEditable = 'inherit'; // 'false';
    }, 1);
  }, true);

  // Listen for mouse events and translate
  // them into terminal mouse protocols.
  this.bindMouse();

  // Figure out whether boldness affects
  // the character width of monospace fonts.
  if (Terminal.brokenBold == null) {
    Terminal.brokenBold = isBoldBroken(this.document);
  }

  // this.emit('open');

  // This can be useful for pasting,
  // as well as the iPad fix.
  setTimeout(function() {
    self.element.focus();
  }, 100);
};

// XTerm mouse events
// http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#Mouse%20Tracking
// To better understand these
// the xterm code is very helpful:
// Relevant files:
//   button.c, charproc.c, misc.c
// Relevant functions in xterm/button.c:
//   BtnCode, EmitButtonCode, EditorButton, SendMousePosition
Terminal.prototype.bindMouse = function() {
  var el = this.element
    , self = this
    , pressed = 32;

  var wheelEvent = 'onmousewheel' in this.context
    ? 'mousewheel'
    : 'DOMMouseScroll';

  // mouseup, mousedown, mousewheel
  // left click: ^[[M 3<^[[M#3<
  // mousewheel up: ^[[M`3>
  function sendButton(ev) {
    var button
      , pos;

    // get the xterm-style button
    button = getButton(ev);

    // get mouse coordinates
    pos = getCoords(ev);
    if (!pos) return;

    sendEvent(button, pos);

    switch (ev.type) {
      case 'mousedown':
        pressed = button;
        break;
      case 'mouseup':
        // keep it at the left
        // button, just in case.
        pressed = 32;
        break;
      case wheelEvent:
        // nothing. don't
        // interfere with
        // `pressed`.
        break;
    }
  }

  // motion example of a left click:
  // ^[[M 3<^[[M@4<^[[M@5<^[[M@6<^[[M@7<^[[M#7<
  function sendMove(ev) {
    var button = pressed
      , pos;

    pos = getCoords(ev);
    if (!pos) return;

    // buttons marked as motions
    // are incremented by 32
    button += 32;

    sendEvent(button, pos);
  }

  // encode button and
  // position to characters
  function encode(data, ch) {
    if (!self.utfMouse) {
      if (ch === 255) return data.push(0);
      if (ch > 127) ch = 127;
      data.push(ch);
    } else {
      if (ch === 2047) return data.push(0);
      if (ch < 127) {
        data.push(ch);
      } else {
        if (ch > 2047) ch = 2047;
        data.push(0xC0 | (ch >> 6));
        data.push(0x80 | (ch & 0x3F));
      }
    }
  }

  // send a mouse event:
  // regular/utf8: ^[[M Cb Cx Cy
  // urxvt: ^[[ Cb ; Cx ; Cy M
  // sgr: ^[[ Cb ; Cx ; Cy M/m
  // vt300: ^[[ 24(1/3/5)~ [ Cx , Cy ] \r
  // locator: CSI P e ; P b ; P r ; P c ; P p & w
  function sendEvent(button, pos) {
    // self.emit('mouse', {
    //   x: pos.x - 32,
    //   y: pos.x - 32,
    //   button: button
    // });

    if (self.vt300Mouse) {
      // NOTE: Unstable.
      // http://www.vt100.net/docs/vt3xx-gp/chapter15.html
      button &= 3;
      pos.x -= 32;
      pos.y -= 32;
      var data = '\x1b[24';
      if (button === 0) data += '1';
      else if (button === 1) data += '3';
      else if (button === 2) data += '5';
      else if (button === 3) return;
      else data += '0';
      data += '~[' + pos.x + ',' + pos.y + ']\r';
      self.send(data);
      return;
    }

    if (self.decLocator) {
      // NOTE: Unstable.
      button &= 3;
      pos.x -= 32;
      pos.y -= 32;
      if (button === 0) button = 2;
      else if (button === 1) button = 4;
      else if (button === 2) button = 6;
      else if (button === 3) button = 3;
      self.send('\x1b['
        + button
        + ';'
        + (button === 3 ? 4 : 0)
        + ';'
        + pos.y
        + ';'
        + pos.x
        + ';'
        + (pos.page || 0)
        + '&w');
      return;
    }

    if (self.urxvtMouse) {
      pos.x -= 32;
      pos.y -= 32;
      pos.x++;
      pos.y++;
      self.send('\x1b[' + button + ';' + pos.x + ';' + pos.y + 'M');
      return;
    }

    if (self.sgrMouse) {
      pos.x -= 32;
      pos.y -= 32;
      self.send('\x1b[<'
        + ((button & 3) === 3 ? button & ~3 : button)
        + ';'
        + pos.x
        + ';'
        + pos.y
        + ((button & 3) === 3 ? 'm' : 'M'));
      return;
    }

    var data = [];

    encode(data, button);
    encode(data, pos.x);
    encode(data, pos.y);

    self.send('\x1b[M' + String.fromCharCode.apply(String, data));
  }

  function getButton(ev) {
    var button
      , shift
      , meta
      , ctrl
      , mod;

    // two low bits:
    // 0 = left
    // 1 = middle
    // 2 = right
    // 3 = release
    // wheel up/down:
    // 1, and 2 - with 64 added
    switch (ev.type) {
      case 'mousedown':
        button = ev.button != null
          ? +ev.button
          : ev.which != null
            ? ev.which - 1
            : null;

        if (self.isMSIE) {
          button = button === 1 ? 0 : button === 4 ? 1 : button;
        }
        break;
      case 'mouseup':
        button = 3;
        break;
      case 'DOMMouseScroll':
        button = ev.detail < 0
          ? 64
          : 65;
        break;
      case 'mousewheel':
        button = ev.wheelDeltaY > 0
          ? 64
          : 65;
        break;
    }

    // next three bits are the modifiers:
    // 4 = shift, 8 = meta, 16 = control
    shift = ev.shiftKey ? 4 : 0;
    meta = ev.metaKey ? 8 : 0;
    ctrl = ev.ctrlKey ? 16 : 0;
    mod = shift | meta | ctrl;

    // no mods
    if (self.vt200Mouse) {
      // ctrl only
      mod &= ctrl;
    } else if (!self.normalMouse) {
      mod = 0;
    }

    // increment to SP
    button = (32 + (mod << 2)) + button;

    return button;
  }

  // mouse coordinates measured in cols/rows
  function getCoords(ev) {
    var x, y, w, h, el;

    // ignore browsers without pageX for now
    if (ev.pageX == null) return;

    x = ev.pageX;
    y = ev.pageY;
    el = self.element;

    // should probably check offsetParent
    // but this is more portable
    while (el && el !== self.document.documentElement) {
      x -= el.offsetLeft;
      y -= el.offsetTop;
      el = 'offsetParent' in el
        ? el.offsetParent
        : el.parentNode;
    }

    // convert to cols/rows
    w = self.element.clientWidth;
    h = self.element.clientHeight;
    x = Math.round((x / w) * self.cols);
    y = Math.round((y / h) * self.rows);

    // be sure to avoid sending
    // bad positions to the program
    if (x < 0) x = 0;
    if (x > self.cols) x = self.cols;
    if (y < 0) y = 0;
    if (y > self.rows) y = self.rows;

    // xterm sends raw bytes and
    // starts at 32 (SP) for each.
    x += 32;
    y += 32;

    return {
      x: x,
      y: y,
      type: ev.type === wheelEvent
        ? 'mousewheel'
        : ev.type
    };
  }

  on(el, 'mousedown', function(ev) {
    if (!self.mouseEvents) return;

    // send the button
    sendButton(ev);

    // ensure focus
    self.focus();

    // fix for odd bug
    //if (self.vt200Mouse && !self.normalMouse) {
    if (self.vt200Mouse) {
      sendButton({ __proto__: ev, type: 'mouseup' });
      return cancel(ev);
    }

    // bind events
    if (self.normalMouse) on(self.document, 'mousemove', sendMove);

    // x10 compatibility mode can't send button releases
    if (!self.x10Mouse) {
      on(self.document, 'mouseup', function up(ev) {
        sendButton(ev);
        if (self.normalMouse) off(self.document, 'mousemove', sendMove);
        off(self.document, 'mouseup', up);
        return cancel(ev);
      });
    }

    return cancel(ev);
  });

  //if (self.normalMouse) {
  //  on(self.document, 'mousemove', sendMove);
  //}

  on(el, wheelEvent, function(ev) {
    if (!self.mouseEvents) return;
    if (self.x10Mouse
        || self.vt300Mouse
        || self.decLocator) return;
    sendButton(ev);
    return cancel(ev);
  });

  // allow mousewheel scrolling in
  // the shell for example
  on(el, wheelEvent, function(ev) {
    if (self.mouseEvents) return;
    if (self.applicationKeypad) return;
    if (ev.type === 'DOMMouseScroll') {
      self.scrollDisp(ev.detail < 0 ? -5 : 5);
    } else {
      self.scrollDisp(ev.wheelDeltaY > 0 ? -5 : 5);
    }
    return cancel(ev);
  });
};

/**
 * Destroy Terminal
 */

Terminal.prototype.destroy = function() {
  this.readable = false;
  this.writable = false;
  this._events = {};
  this.handler = function() {};
  this.write = function() {};
  if (this.element.parentNode) {
    this.element.parentNode.removeChild(this.element);
  }
  //this.emit('close');
};

/**
 * Rendering Engine
 */

// In the screen buffer, each character
// is stored as a an array with a character
// and a 32-bit integer.
// First value: a utf-16 character.
// Second value:
// Next 9 bits: background color (0-511).
// Next 9 bits: foreground color (0-511).
// Next 14 bits: a mask for misc. flags:
//   1=bold, 2=underline, 4=blink, 8=inverse, 16=invisible

Terminal.prototype.refresh = function(start, end) {
  var x
    , y
    , i
    , line
    , out
    , ch
    , width
    , data
    , attr
    , bg
    , fg
    , flags
    , row
    , parent;

  if (end - start >= this.rows / 2) {
    parent = this.element.parentNode;
    if (parent) parent.removeChild(this.element);
  }

  width = this.cols;
  y = start;

  if (end >= this.lines.length) {
    this.log('`end` is too large. Most likely a bad CSR.');
    end = this.lines.length - 1;
  }

  for (; y <= end; y++) {
    row = y + this.ydisp;

    line = this.lines[row];
    out = '';

    if (y === this.y
        && this.cursorState
        && (this.ydisp === this.ybase || this.selectMode)
        && !this.cursorHidden) {
      x = this.x;
    } else {
      x = -1;
    }

    attr = this.defAttr;
    i = 0;

    for (; i < width; i++) {
      data = line[i][0];
      ch = line[i][1];

      if (i === x) data = -1;

      if (data !== attr) {
        if (attr !== this.defAttr) {
          out += '</span>';
        }
        if (data !== this.defAttr) {
          if (data === -1) {
            out += '<span class="reverse-video terminal-cursor">';
          } else {
            out += '<span style="';

            bg = data & 0x1ff;
            fg = (data >> 9) & 0x1ff;
            flags = data >> 18;

            // bold
            if (flags & 1) {
              if (!Terminal.brokenBold) {
                out += 'font-weight:bold;';
              }
              // See: XTerm*boldColors
              if (fg < 8) fg += 8;
            }

            // underline
            if (flags & 2) {
              out += 'text-decoration:underline;';
            }

            // blink
            if (flags & 4) {
              if (flags & 2) {
                out = out.slice(0, -1);
                out += ' blink;';
              } else {
                out += 'text-decoration:blink;';
              }
            }

            // inverse
            if (flags & 8) {
              bg = (data >> 9) & 0x1ff;
              fg = data & 0x1ff;
              // Should inverse just be before the
              // above boldColors effect instead?
              if ((flags & 1) && fg < 8) fg += 8;
            }

            // invisible
            if (flags & 16) {
              out += 'visibility:hidden;';
            }

            // out += '" class="'
            //   + 'term-bg-color-' + bg
            //   + ' '
            //   + 'term-fg-color-' + fg
            //   + '">';

            if (bg !== 256) {
              out += 'background-color:'
                + this.colors[bg]
                + ';';
            }

            if (fg !== 257) {
              out += 'color:'
                + this.colors[fg]
                + ';';
            }

            out += '">';
          }
        }
      }

      switch (ch) {
        case '&':
          out += '&amp;';
          break;
        case '<':
          out += '&lt;';
          break;
        case '>':
          out += '&gt;';
          break;
        default:
          if (ch <= ' ') {
            out += '&nbsp;';
          } else {
            if (isWide(ch)) i++;
            out += ch;
          }
          break;
      }

      attr = data;
    }

    if (attr !== this.defAttr) {
      out += '</span>';
    }

    this.children[y].innerHTML = out;
  }

  if (parent) parent.appendChild(this.element);
};

Terminal.prototype._cursorBlink = function() {
  if (Terminal.focus !== this) return;
  this.cursorState ^= 1;
  this.refresh(this.y, this.y);
};

Terminal.prototype.showCursor = function() {
  if (!this.cursorState) {
    this.cursorState = 1;
    this.refresh(this.y, this.y);
  } else {
    // Temporarily disabled:
    // this.refreshBlink();
  }
};

Terminal.prototype.startBlink = function() {
  if (!this.cursorBlink) return;
  var self = this;
  this._blinker = function() {
    self._cursorBlink();
  };
  this._blink = setInterval(this._blinker, 500);
};

Terminal.prototype.refreshBlink = function() {
  if (!this.cursorBlink) return;
  clearInterval(this._blink);
  this._blink = setInterval(this._blinker, 500);
};

Terminal.prototype.scroll = function() {
  var row;

  if (++this.ybase === this.scrollback) {
    this.ybase = this.ybase / 2 | 0;
    this.lines = this.lines.slice(-(this.ybase + this.rows) + 1);
  }

  this.ydisp = this.ybase;

  // last line
  row = this.ybase + this.rows - 1;

  // subtract the bottom scroll region
  row -= this.rows - 1 - this.scrollBottom;

  if (row === this.lines.length) {
    // potential optimization:
    // pushing is faster than splicing
    // when they amount to the same
    // behavior.
    this.lines.push(this.blankLine());
  } else {
    // add our new line
    this.lines.splice(row, 0, this.blankLine());
  }

  if (this.scrollTop !== 0) {
    if (this.ybase !== 0) {
      this.ybase--;
      this.ydisp = this.ybase;
    }
    this.lines.splice(this.ybase + this.scrollTop, 1);
  }

  // this.maxRange();
  this.updateRange(this.scrollTop);
  this.updateRange(this.scrollBottom);
};

Terminal.prototype.scrollDisp = function(disp) {
  this.ydisp += disp;

  if (this.ydisp > this.ybase) {
    this.ydisp = this.ybase;
  } else if (this.ydisp < 0) {
    this.ydisp = 0;
  }

  this.refresh(0, this.rows - 1);
};

Terminal.prototype.write = function(data) {
  var l = data.length
    , i = 0
    , j
    , cs
    , ch;

  this.refreshStart = this.y;
  this.refreshEnd = this.y;

  if (this.ybase !== this.ydisp) {
    this.ydisp = this.ybase;
    this.maxRange();
  }

  // this.log(JSON.stringify(data.replace(/\x1b/g, '^[')));

  for (; i < l; i++) {
    ch = data[i];
    switch (this.state) {
      case normal:
        switch (ch) {
          // '\0'
          // case '\0':
          // case '\200':
          //   break;

          // '\a'
          case '\x07':
            this.bell();
            break;

          // '\n', '\v', '\f'
          case '\n':
          case '\x0b':
          case '\x0c':
            if (this.convertEol) {
              this.x = 0;
            }
            // TODO: Implement eat_newline_glitch.
            // if (this.realX >= this.cols) break;
            // this.realX = 0;
            this.y++;
            if (this.y > this.scrollBottom) {
              this.y--;
              this.scroll();
            }
            break;

          // '\r'
          case '\r':
            this.x = 0;
            break;

          // '\b'
          case '\x08':
            if (this.x > 0) {
              this.x--;
            }
            break;

          // '\t'
          case '\t':
            this.x = this.nextStop();
            break;

          // shift out
          case '\x0e':
            this.setgLevel(1);
            break;

          // shift in
          case '\x0f':
            this.setgLevel(0);
            break;

          // '\e'
          case '\x1b':
            this.state = escaped;
            break;

          default:
            // ' '
            if (ch >= ' ') {
              if (this.charset && this.charset[ch]) {
                ch = this.charset[ch];
              }

              if (this.x >= this.cols) {
                this.x = 0;
                this.y++;
                if (this.y > this.scrollBottom) {
                  this.y--;
                  this.scroll();
                }
              }

              this.lines[this.y + this.ybase][this.x] = [this.curAttr, ch];
              this.x++;
              this.updateRange(this.y);

              if (isWide(ch)) {
                j = this.y + this.ybase;
                if (this.cols < 2 || this.x >= this.cols) {
                  this.lines[j][this.x - 1] = [this.curAttr, ' '];
                  break;
                }
                this.lines[j][this.x] = [this.curAttr, ' '];
                this.x++;
              }
            }
            break;
        }
        break;
      case escaped:
        switch (ch) {
          // ESC [ Control Sequence Introducer ( CSI is 0x9b).
          case '[':
            this.params = [];
            this.currentParam = 0;
            this.state = csi;
            break;

          // ESC ] Operating System Command ( OSC is 0x9d).
          case ']':
            this.params = [];
            this.currentParam = 0;
            this.state = osc;
            break;

          // ESC P Device Control String ( DCS is 0x90).
          case 'P':
            this.params = [];
            this.currentParam = 0;
            this.state = dcs;
            break;

          // ESC _ Application Program Command ( APC is 0x9f).
          case '_':
            this.state = ignore;
            break;

          // ESC ^ Privacy Message ( PM is 0x9e).
          case '^':
            this.state = ignore;
            break;

          // ESC c Full Reset (RIS).
          case 'c':
            this.reset();
            break;

          // ESC E Next Line ( NEL is 0x85).
          // ESC D Index ( IND is 0x84).
          case 'E':
            this.x = 0;
            ;
          case 'D':
            this.index();
            break;

          // ESC M Reverse Index ( RI is 0x8d).
          case 'M':
            this.reverseIndex();
            break;

          // ESC % Select default/utf-8 character set.
          // @ = default, G = utf-8
          case '%':
            //this.charset = null;
            this.setgLevel(0);
            this.setgCharset(0, Terminal.charsets.US);
            this.state = normal;
            i++;
            break;

          // ESC (,),*,+,-,. Designate G0-G2 Character Set.
          case '(': // <-- this seems to get all the attention
          case ')':
          case '*':
          case '+':
          case '-':
          case '.':
            switch (ch) {
              case '(':
                this.gcharset = 0;
                break;
              case ')':
                this.gcharset = 1;
                break;
              case '*':
                this.gcharset = 2;
                break;
              case '+':
                this.gcharset = 3;
                break;
              case '-':
                this.gcharset = 1;
                break;
              case '.':
                this.gcharset = 2;
                break;
            }
            this.state = charset;
            break;

          // Designate G3 Character Set (VT300).
          // A = ISO Latin-1 Supplemental.
          // Not implemented.
          case '/':
            this.gcharset = 3;
            this.state = charset;
            i--;
            break;

          // ESC N
          // Single Shift Select of G2 Character Set
          // ( SS2 is 0x8e). This affects next character only.
          case 'N':
            break;
          // ESC O
          // Single Shift Select of G3 Character Set
          // ( SS3 is 0x8f). This affects next character only.
          case 'O':
            break;
          // ESC n
          // Invoke the G2 Character Set as GL (LS2).
          case 'n':
            this.setgLevel(2);
            break;
          // ESC o
          // Invoke the G3 Character Set as GL (LS3).
          case 'o':
            this.setgLevel(3);
            break;
          // ESC |
          // Invoke the G3 Character Set as GR (LS3R).
          case '|':
            this.setgLevel(3);
            break;
          // ESC }
          // Invoke the G2 Character Set as GR (LS2R).
          case '}':
            this.setgLevel(2);
            break;
          // ESC ~
          // Invoke the G1 Character Set as GR (LS1R).
          case '~':
            this.setgLevel(1);
            break;

          // ESC 7 Save Cursor (DECSC).
          case '7':
            this.saveCursor();
            this.state = normal;
            break;

          // ESC 8 Restore Cursor (DECRC).
          case '8':
            this.restoreCursor();
            this.state = normal;
            break;

          // ESC # 3 DEC line height/width
          case '#':
            this.state = normal;
            i++;
            break;

          // ESC H Tab Set (HTS is 0x88).
          case 'H':
            this.tabSet();
            break;

          // ESC = Application Keypad (DECPAM).
          case '=':
            this.log('Serial port requested application keypad.');
            this.applicationKeypad = true;
            this.state = normal;
            break;

          // ESC > Normal Keypad (DECPNM).
          case '>':
            this.log('Switching back to normal keypad.');
            this.applicationKeypad = false;
            this.state = normal;
            break;

          default:
            this.state = normal;
            this.error('Unknown ESC control: %s.', ch);
            break;
        }
        break;

      case charset:
        switch (ch) {
          case '0': // DEC Special Character and Line Drawing Set.
            cs = Terminal.charsets.SCLD;
            break;
          case 'A': // UK
            cs = Terminal.charsets.UK;
            break;
          case 'B': // United States (USASCII).
            cs = Terminal.charsets.US;
            break;
          case '4': // Dutch
            cs = Terminal.charsets.Dutch;
            break;
          case 'C': // Finnish
          case '5':
            cs = Terminal.charsets.Finnish;
            break;
          case 'R': // French
            cs = Terminal.charsets.French;
            break;
          case 'Q': // FrenchCanadian
            cs = Terminal.charsets.FrenchCanadian;
            break;
          case 'K': // German
            cs = Terminal.charsets.German;
            break;
          case 'Y': // Italian
            cs = Terminal.charsets.Italian;
            break;
          case 'E': // NorwegianDanish
          case '6':
            cs = Terminal.charsets.NorwegianDanish;
            break;
          case 'Z': // Spanish
            cs = Terminal.charsets.Spanish;
            break;
          case 'H': // Swedish
          case '7':
            cs = Terminal.charsets.Swedish;
            break;
          case '=': // Swiss
            cs = Terminal.charsets.Swiss;
            break;
          case '/': // ISOLatin (actually /A)
            cs = Terminal.charsets.ISOLatin;
            i++;
            break;
          default: // Default
            cs = Terminal.charsets.US;
            break;
        }
        this.setgCharset(this.gcharset, cs);
        this.gcharset = null;
        this.state = normal;
        break;

      case osc:
        // OSC Ps ; Pt ST
        // OSC Ps ; Pt BEL
        //   Set Text Parameters.
        if (ch === '\x1b' || ch === '\x07') {
          if (ch === '\x1b') i++;

          this.params.push(this.currentParam);

          switch (this.params[0]) {
            case 0:
            case 1:
            case 2:
              if (this.params[1]) {
                this.title = this.params[1];
                this.handleTitle(this.title);
              }
              break;
            case 3:
              // set X property
              break;
            case 4:
            case 5:
              // change dynamic colors
              break;
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
              // change dynamic ui colors
              break;
            case 46:
              // change log file
              break;
            case 50:
              // dynamic font
              break;
            case 51:
              // emacs shell
              break;
            case 52:
              // manipulate selection data
              break;
            case 104:
            case 105:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
              // reset colors
              break;
          }

          this.params = [];
          this.currentParam = 0;
          this.state = normal;
        } else {
          if (!this.params.length) {
            if (ch >= '0' && ch <= '9') {
              this.currentParam =
                this.currentParam * 10 + ch.charCodeAt(0) - 48;
            } else if (ch === ';') {
              this.params.push(this.currentParam);
              this.currentParam = '';
            }
          } else {
            this.currentParam += ch;
          }
        }
        break;

      case csi:
        // '?', '>', '!'
        if (ch === '?' || ch === '>' || ch === '!') {
          this.prefix = ch;
          break;
        }

        // 0 - 9
        if (ch >= '0' && ch <= '9') {
          this.currentParam = this.currentParam * 10 + ch.charCodeAt(0) - 48;
          break;
        }

        // '$', '"', ' ', '\''
        if (ch === '$' || ch === '"' || ch === ' ' || ch === '\'') {
          this.postfix = ch;
          break;
        }

        this.params.push(this.currentParam);
        this.currentParam = 0;

        // ';'
        if (ch === ';') break;

        this.state = normal;

        switch (ch) {
          // CSI Ps A
          // Cursor Up Ps Times (default = 1) (CUU).
          case 'A':
            this.cursorUp(this.params);
            break;

          // CSI Ps B
          // Cursor Down Ps Times (default = 1) (CUD).
          case 'B':
            this.cursorDown(this.params);
            break;

          // CSI Ps C
          // Cursor Forward Ps Times (default = 1) (CUF).
          case 'C':
            this.cursorForward(this.params);
            break;

          // CSI Ps D
          // Cursor Backward Ps Times (default = 1) (CUB).
          case 'D':
            this.cursorBackward(this.params);
            break;

          // CSI Ps ; Ps H
          // Cursor Position [row;column] (default = [1,1]) (CUP).
          case 'H':
            this.cursorPos(this.params);
            break;

          // CSI Ps J  Erase in Display (ED).
          case 'J':
            this.eraseInDisplay(this.params);
            break;

          // CSI Ps K  Erase in Line (EL).
          case 'K':
            this.eraseInLine(this.params);
            break;

          // CSI Pm m  Character Attributes (SGR).
          case 'm':
            if (!this.prefix) {
              this.charAttributes(this.params);
            }
            break;

          // CSI Ps n  Device Status Report (DSR).
          case 'n':
            if (!this.prefix) {
              this.deviceStatus(this.params);
            }
            break;

          /**
           * Additions
           */

          // CSI Ps @
          // Insert Ps (Blank) Character(s) (default = 1) (ICH).
          case '@':
            this.insertChars(this.params);
            break;

          // CSI Ps E
          // Cursor Next Line Ps Times (default = 1) (CNL).
          case 'E':
            this.cursorNextLine(this.params);
            break;

          // CSI Ps F
          // Cursor Preceding Line Ps Times (default = 1) (CNL).
          case 'F':
            this.cursorPrecedingLine(this.params);
            break;

          // CSI Ps G
          // Cursor Character Absolute  [column] (default = [row,1]) (CHA).
          case 'G':
            this.cursorCharAbsolute(this.params);
            break;

          // CSI Ps L
          // Insert Ps Line(s) (default = 1) (IL).
          case 'L':
            this.insertLines(this.params);
            break;

          // CSI Ps M
          // Delete Ps Line(s) (default = 1) (DL).
          case 'M':
            this.deleteLines(this.params);
            break;

          // CSI Ps P
          // Delete Ps Character(s) (default = 1) (DCH).
          case 'P':
            this.deleteChars(this.params);
            break;

          // CSI Ps X
          // Erase Ps Character(s) (default = 1) (ECH).
          case 'X':
            this.eraseChars(this.params);
            break;

          // CSI Pm `  Character Position Absolute
          //   [column] (default = [row,1]) (HPA).
          case '`':
            this.charPosAbsolute(this.params);
            break;

          // 141 61 a * HPR -
          // Horizontal Position Relative
          case 'a':
            this.HPositionRelative(this.params);
            break;

          // CSI P s c
          // Send Device Attributes (Primary DA).
          // CSI > P s c
          // Send Device Attributes (Secondary DA)
          case 'c':
            this.sendDeviceAttributes(this.params);
            break;

          // CSI Pm d
          // Line Position Absolute  [row] (default = [1,column]) (VPA).
          case 'd':
            this.linePosAbsolute(this.params);
            break;

          // 145 65 e * VPR - Vertical Position Relative
          case 'e':
            this.VPositionRelative(this.params);
            break;

          // CSI Ps ; Ps f
          //   Horizontal and Vertical Position [row;column] (default =
          //   [1,1]) (HVP).
          case 'f':
            this.HVPosition(this.params);
            break;

          // CSI Pm h  Set Mode (SM).
          // CSI ? Pm h - mouse escape codes, cursor escape codes
          case 'h':
            this.setMode(this.params);
            break;

          // CSI Pm l  Reset Mode (RM).
          // CSI ? Pm l
          case 'l':
            this.resetMode(this.params);
            break;

          // CSI Ps ; Ps r
          //   Set Scrolling Region [top;bottom] (default = full size of win-
          //   dow) (DECSTBM).
          // CSI ? Pm r
          case 'r':
            this.setScrollRegion(this.params);
            break;

          // CSI s
          //   Save cursor (ANSI.SYS).
          case 's':
            this.saveCursor(this.params);
            break;

          // CSI u
          //   Restore cursor (ANSI.SYS).
          case 'u':
            this.restoreCursor(this.params);
            break;

          /**
           * Lesser Used
           */

          // CSI Ps I
          // Cursor Forward Tabulation Ps tab stops (default = 1) (CHT).
          case 'I':
            this.cursorForwardTab(this.params);
            break;

          // CSI Ps S  Scroll up Ps lines (default = 1) (SU).
          case 'S':
            this.scrollUp(this.params);
            break;

          // CSI Ps T  Scroll down Ps lines (default = 1) (SD).
          // CSI Ps ; Ps ; Ps ; Ps ; Ps T
          // CSI > Ps; Ps T
          case 'T':
            // if (this.prefix === '>') {
            //   this.resetTitleModes(this.params);
            //   break;
            // }
            // if (this.params.length > 2) {
            //   this.initMouseTracking(this.params);
            //   break;
            // }
            if (this.params.length < 2 && !this.prefix) {
              this.scrollDown(this.params);
            }
            break;

          // CSI Ps Z
          // Cursor Backward Tabulation Ps tab stops (default = 1) (CBT).
          case 'Z':
            this.cursorBackwardTab(this.params);
            break;

          // CSI Ps b  Repeat the preceding graphic character Ps times (REP).
          case 'b':
            this.repeatPrecedingCharacter(this.params);
            break;

          // CSI Ps g  Tab Clear (TBC).
          case 'g':
            this.tabClear(this.params);
            break;

          // CSI Pm i  Media Copy (MC).
          // CSI ? Pm i
          // case 'i':
          //   this.mediaCopy(this.params);
          //   break;

          // CSI Pm m  Character Attributes (SGR).
          // CSI > Ps; Ps m
          // case 'm': // duplicate
          //   if (this.prefix === '>') {
          //     this.setResources(this.params);
          //   } else {
          //     this.charAttributes(this.params);
          //   }
          //   break;

          // CSI Ps n  Device Status Report (DSR).
          // CSI > Ps n
          // case 'n': // duplicate
          //   if (this.prefix === '>') {
          //     this.disableModifiers(this.params);
          //   } else {
          //     this.deviceStatus(this.params);
          //   }
          //   break;

          // CSI > Ps p  Set pointer mode.
          // CSI ! p   Soft terminal reset (DECSTR).
          // CSI Ps$ p
          //   Request ANSI mode (DECRQM).
          // CSI ? Ps$ p
          //   Request DEC private mode (DECRQM).
          // CSI Ps ; Ps " p
          case 'p':
            switch (this.prefix) {
              // case '>':
              //   this.setPointerMode(this.params);
              //   break;
              case '!':
                this.softReset(this.params);
                break;
              // case '?':
              //   if (this.postfix === '$') {
              //     this.requestPrivateMode(this.params);
              //   }
              //   break;
              // default:
              //   if (this.postfix === '"') {
              //     this.setConformanceLevel(this.params);
              //   } else if (this.postfix === '$') {
              //     this.requestAnsiMode(this.params);
              //   }
              //   break;
            }
            break;

          // CSI Ps q  Load LEDs (DECLL).
          // CSI Ps SP q
          // CSI Ps " q
          // case 'q':
          //   if (this.postfix === ' ') {
          //     this.setCursorStyle(this.params);
          //     break;
          //   }
          //   if (this.postfix === '"') {
          //     this.setCharProtectionAttr(this.params);
          //     break;
          //   }
          //   this.loadLEDs(this.params);
          //   break;

          // CSI Ps ; Ps r
          //   Set Scrolling Region [top;bottom] (default = full size of win-
          //   dow) (DECSTBM).
          // CSI ? Pm r
          // CSI Pt; Pl; Pb; Pr; Ps$ r
          // case 'r': // duplicate
          //   if (this.prefix === '?') {
          //     this.restorePrivateValues(this.params);
          //   } else if (this.postfix === '$') {
          //     this.setAttrInRectangle(this.params);
          //   } else {
          //     this.setScrollRegion(this.params);
          //   }
          //   break;

          // CSI s     Save cursor (ANSI.SYS).
          // CSI ? Pm s
          // case 's': // duplicate
          //   if (this.prefix === '?') {
          //     this.savePrivateValues(this.params);
          //   } else {
          //     this.saveCursor(this.params);
          //   }
          //   break;

          // CSI Ps ; Ps ; Ps t
          // CSI Pt; Pl; Pb; Pr; Ps$ t
          // CSI > Ps; Ps t
          // CSI Ps SP t
          // case 't':
          //   if (this.postfix === '$') {
          //     this.reverseAttrInRectangle(this.params);
          //   } else if (this.postfix === ' ') {
          //     this.setWarningBellVolume(this.params);
          //   } else {
          //     if (this.prefix === '>') {
          //       this.setTitleModeFeature(this.params);
          //     } else {
          //       this.manipulateWindow(this.params);
          //     }
          //   }
          //   break;

          // CSI u     Restore cursor (ANSI.SYS).
          // CSI Ps SP u
          // case 'u': // duplicate
          //   if (this.postfix === ' ') {
          //     this.setMarginBellVolume(this.params);
          //   } else {
          //     this.restoreCursor(this.params);
          //   }
          //   break;

          // CSI Pt; Pl; Pb; Pr; Pp; Pt; Pl; Pp$ v
          // case 'v':
          //   if (this.postfix === '$') {
          //     this.copyRectagle(this.params);
          //   }
          //   break;

          // CSI Pt ; Pl ; Pb ; Pr ' w
          // case 'w':
          //   if (this.postfix === '\'') {
          //     this.enableFilterRectangle(this.params);
          //   }
          //   break;

          // CSI Ps x  Request Terminal Parameters (DECREQTPARM).
          // CSI Ps x  Select Attribute Change Extent (DECSACE).
          // CSI Pc; Pt; Pl; Pb; Pr$ x
          // case 'x':
          //   if (this.postfix === '$') {
          //     this.fillRectangle(this.params);
          //   } else {
          //     this.requestParameters(this.params);
          //     //this.__(this.params);
          //   }
          //   break;

          // CSI Ps ; Pu ' z
          // CSI Pt; Pl; Pb; Pr$ z
          // case 'z':
          //   if (this.postfix === '\'') {
          //     this.enableLocatorReporting(this.params);
          //   } else if (this.postfix === '$') {
          //     this.eraseRectangle(this.params);
          //   }
          //   break;

          // CSI Pm ' {
          // CSI Pt; Pl; Pb; Pr$ {
          // case '{':
          //   if (this.postfix === '\'') {
          //     this.setLocatorEvents(this.params);
          //   } else if (this.postfix === '$') {
          //     this.selectiveEraseRectangle(this.params);
          //   }
          //   break;

          // CSI Ps ' |
          // case '|':
          //   if (this.postfix === '\'') {
          //     this.requestLocatorPosition(this.params);
          //   }
          //   break;

          // CSI P m SP }
          // Insert P s Column(s) (default = 1) (DECIC), VT420 and up.
          // case '}':
          //   if (this.postfix === ' ') {
          //     this.insertColumns(this.params);
          //   }
          //   break;

          // CSI P m SP ~
          // Delete P s Column(s) (default = 1) (DECDC), VT420 and up
          // case '~':
          //   if (this.postfix === ' ') {
          //     this.deleteColumns(this.params);
          //   }
          //   break;

          default:
            this.error('Unknown CSI code: %s.', ch);
            break;
        }

        this.prefix = '';
        this.postfix = '';
        break;

      case dcs:
        if (ch === '\x1b' || ch === '\x07') {
          if (ch === '\x1b') i++;

          switch (this.prefix) {
            // User-Defined Keys (DECUDK).
            case '':
              break;

            // Request Status String (DECRQSS).
            // test: echo -e '\eP$q"p\e\\'
            case '$q':
              var pt = this.currentParam
                , valid = false;

              switch (pt) {
                // DECSCA
                case '"q':
                  pt = '0"q';
                  break;

                // DECSCL
                case '"p':
                  pt = '61"p';
                  break;

                // DECSTBM
                case 'r':
                  pt = ''
                    + (this.scrollTop + 1)
                    + ';'
                    + (this.scrollBottom + 1)
                    + 'r';
                  break;

                // SGR
                case 'm':
                  pt = '0m';
                  break;

                default:
                  this.error('Unknown DCS Pt: %s.', pt);
                  pt = '';
                  break;
              }

              this.send('\x1bP' + +valid + '$r' + pt + '\x1b\\');
              break;

            // Set Termcap/Terminfo Data (xterm, experimental).
            case '+p':
              break;

            // Request Termcap/Terminfo String (xterm, experimental)
            // Regular xterm does not even respond to this sequence.
            // This can cause a small glitch in vim.
            // test: echo -ne '\eP+q6b64\e\\'
            case '+q':
              var pt = this.currentParam
                , valid = false;

              this.send('\x1bP' + +valid + '+r' + pt + '\x1b\\');
              break;

            default:
              this.error('Unknown DCS prefix: %s.', this.prefix);
              break;
          }

          this.currentParam = 0;
          this.prefix = '';
          this.state = normal;
        } else if (!this.currentParam) {
          if (!this.prefix && ch !== '$' && ch !== '+') {
            this.currentParam = ch;
          } else if (this.prefix.length === 2) {
            this.currentParam = ch;
          } else {
            this.prefix += ch;
          }
        } else {
          this.currentParam += ch;
        }
        break;

      case ignore:
        // For PM and APC.
        if (ch === '\x1b' || ch === '\x07') {
          if (ch === '\x1b') i++;
          this.state = normal;
        }
        break;
    }
  }

  this.updateRange(this.y);
  this.refresh(this.refreshStart, this.refreshEnd);
};

Terminal.prototype.writeln = function(data) {
  this.write(data + '\r\n');
};

// Key Resources:
// https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent
Terminal.prototype.keyDown = function(ev) {
  var self = this
    , key;

  switch (ev.keyCode) {
    // backspace
    case 8:
      if (ev.shiftKey) {
        key = '\x08'; // ^H
        break;
      }
      key = '\x7f'; // ^?
      break;
    // tab
    case 9:
      if (ev.shiftKey) {
        key = '\x1b[Z';
        break;
      }
      key = '\t';
      break;
    // return/enter
    case 13:
      key = '\r';
      break;
    // escape
    case 27:
      key = '\x1b';
      break;
    // left-arrow
    case 37:
      if (this.applicationCursor) {
        key = '\x1bOD'; // SS3 as ^[O for 7-bit
        //key = '\x8fD'; // SS3 as 0x8f for 8-bit
        break;
      }
      key = '\x1b[D';
      break;
    // right-arrow
    case 39:
      if (this.applicationCursor) {
        key = '\x1bOC';
        break;
      }
      key = '\x1b[C';
      break;
    // up-arrow
    case 38:
      if (this.applicationCursor) {
        key = '\x1bOA';
        break;
      }
      if (ev.ctrlKey) {
        this.scrollDisp(-1);
        return cancel(ev);
      } else {
        key = '\x1b[A';
      }
      break;
    // down-arrow
    case 40:
      if (this.applicationCursor) {
        key = '\x1bOB';
        break;
      }
      if (ev.ctrlKey) {
        this.scrollDisp(1);
        return cancel(ev);
      } else {
        key = '\x1b[B';
      }
      break;
    // delete
    case 46:
      key = '\x1b[3~';
      break;
    // insert
    case 45:
      key = '\x1b[2~';
      break;
    // home
    case 36:
      if (this.applicationKeypad) {
        key = '\x1bOH';
        break;
      }
      key = '\x1bOH';
      break;
    // end
    case 35:
      if (this.applicationKeypad) {
        key = '\x1bOF';
        break;
      }
      key = '\x1bOF';
      break;
    // page up
    case 33:
      if (ev.shiftKey) {
        this.scrollDisp(-(this.rows - 1));
        return cancel(ev);
      } else {
        key = '\x1b[5~';
      }
      break;
    // page down
    case 34:
      if (ev.shiftKey) {
        this.scrollDisp(this.rows - 1);
        return cancel(ev);
      } else {
        key = '\x1b[6~';
      }
      break;
    // F1
    case 112:
      key = '\x1bOP';
      break;
    // F2
    case 113:
      key = '\x1bOQ';
      break;
    // F3
    case 114:
      key = '\x1bOR';
      break;
    // F4
    case 115:
      key = '\x1bOS';
      break;
    // F5
    case 116:
      key = '\x1b[15~';
      break;
    // F6
    case 117:
      key = '\x1b[17~';
      break;
    // F7
    case 118:
      key = '\x1b[18~';
      break;
    // F8
    case 119:
      key = '\x1b[19~';
      break;
    // F9
    case 120:
      key = '\x1b[20~';
      break;
    // F10
    case 121:
      key = '\x1b[21~';
      break;
    // F11
    case 122:
      key = '\x1b[23~';
      break;
    // F12
    case 123:
      key = '\x1b[24~';
      break;
    default:
      // a-z and space
      if (ev.ctrlKey) {
        if (ev.keyCode >= 65 && ev.keyCode <= 90) {
          // Ctrl-A
          if (this.screenKeys) {
            if (!this.prefixMode && !this.selectMode && ev.keyCode === 65) {
              this.enterPrefix();
              return cancel(ev);
            }
          }
          // Ctrl-V
          if (this.prefixMode && ev.keyCode === 86) {
            this.leavePrefix();
            return;
          }
          // Ctrl-C
          if ((this.prefixMode || this.selectMode) && ev.keyCode === 67) {
            if (this.visualMode) {
              setTimeout(function() {
                self.leaveVisual();
              }, 1);
            }
            return;
          }
          key = String.fromCharCode(ev.keyCode - 64);
        } else if (ev.keyCode === 32) {
          // NUL
          key = String.fromCharCode(0);
        } else if (ev.keyCode >= 51 && ev.keyCode <= 55) {
          // escape, file sep, group sep, record sep, unit sep
          key = String.fromCharCode(ev.keyCode - 51 + 27);
        } else if (ev.keyCode === 56) {
          // delete
          key = String.fromCharCode(127);
        } else if (ev.keyCode === 219) {
          // ^[ - escape
          key = String.fromCharCode(27);
        } else if (ev.keyCode === 221) {
          // ^] - group sep
          key = String.fromCharCode(29);
        }
      } else if ((!this.isMac && ev.altKey) || (this.isMac && ev.metaKey)) {
        if (ev.keyCode >= 65 && ev.keyCode <= 90) {
          key = '\x1b' + String.fromCharCode(ev.keyCode + 32);
        } else if (ev.keyCode === 192) {
          key = '\x1b`';
        } else if (ev.keyCode >= 48 && ev.keyCode <= 57) {
          key = '\x1b' + (ev.keyCode - 48);
        }
      }
      break;
  }

  if (!key) return true;

  if (this.prefixMode) {
    this.leavePrefix();
    return cancel(ev);
  }

  if (this.selectMode) {
    this.keySelect(ev, key);
    return cancel(ev);
  }

  this.emit('keydown', ev);
  this.emit('key', key, ev);

  this.showCursor();
  this.handler(key);

  return cancel(ev);
};

Terminal.prototype.setgLevel = function(g) {
  this.glevel = g;
  this.charset = this.charsets[g];
};

Terminal.prototype.setgCharset = function(g, charset) {
  this.charsets[g] = charset;
  if (this.glevel === g) {
    this.charset = charset;
  }
};

Terminal.prototype.keyPress = function(ev) {
  var key;

  cancel(ev);

  if (ev.charCode) {
    key = ev.charCode;
  } else if (ev.which == null) {
    key = ev.keyCode;
  } else if (ev.which !== 0 && ev.charCode !== 0) {
    key = ev.which;
  } else {
    return false;
  }

  if (!key || ev.ctrlKey || ev.altKey || ev.metaKey) return false;

  key = String.fromCharCode(key);

  if (this.prefixMode) {
    this.leavePrefix();
    this.keyPrefix(ev, key);
    return false;
  }

  if (this.selectMode) {
    this.keySelect(ev, key);
    return false;
  }

  this.emit('keypress', key, ev);
  this.emit('key', key, ev);

  this.showCursor();
  this.handler(key);

  return false;
};

Terminal.prototype.send = function(data) {
  var self = this;

  if (!this.queue) {
    setTimeout(function() {
      self.handler(self.queue);
      self.queue = '';
    }, 1);
  }

  this.queue += data;
};

Terminal.prototype.bell = function() {
  if (!this.visualBell) return;
  var self = this;
  this.element.style.borderColor = 'white';
  setTimeout(function() {
    self.element.style.borderColor = '';
  }, 10);
  if (this.popOnBell) this.focus();
};

Terminal.prototype.log = function() {
  if (!this.debug) return;
  if (!this.context.console || !this.context.console.log) return;
  var args = Array.prototype.slice.call(arguments);
  this.context.console.log.apply(this.context.console, args);
};

Terminal.prototype.error = function() {
  if (!this.debug) return;
  if (!this.context.console || !this.context.console.error) return;
  var args = Array.prototype.slice.call(arguments);
  this.context.console.error.apply(this.context.console, args);
};

Terminal.prototype.resize = function(x, y) {
  var line
    , el
    , i
    , j
    , ch;

  if (x < 1) x = 1;
  if (y < 1) y = 1;

  // resize cols
  j = this.cols;
  if (j < x) {
    ch = [this.defAttr, ' ']; // does xterm use the default attr?
    i = this.lines.length;
    while (i--) {
      while (this.lines[i].length < x) {
        this.lines[i].push(ch);
      }
    }
  } else if (j > x) {
    i = this.lines.length;
    while (i--) {
      while (this.lines[i].length > x) {
        this.lines[i].pop();
      }
    }
  }
  this.setupStops(j);
  this.cols = x;

  // resize rows
  j = this.rows;
  if (j < y) {
    el = this.element;
    while (j++ < y) {
      if (this.lines.length < y + this.ybase) {
        this.lines.push(this.blankLine());
      }
      if (this.children.length < y) {
        line = this.document.createElement('div');
        el.appendChild(line);
        this.children.push(line);
      }
    }
  } else if (j > y) {
    while (j-- > y) {
      if (this.lines.length > y + this.ybase) {
        this.lines.pop();
      }
      if (this.children.length > y) {
        el = this.children.pop();
        if (!el) continue;
        el.parentNode.removeChild(el);
      }
    }
  }
  this.rows = y;

  // make sure the cursor stays on screen
  if (this.y >= y) this.y = y - 1;
  if (this.x >= x) this.x = x - 1;

  this.scrollTop = 0;
  this.scrollBottom = y - 1;

  this.refresh(0, this.rows - 1);

  // it's a real nightmare trying
  // to resize the original
  // screen buffer. just set it
  // to null for now.
  this.normal = null;
};

Terminal.prototype.updateRange = function(y) {
  if (y < this.refreshStart) this.refreshStart = y;
  if (y > this.refreshEnd) this.refreshEnd = y;
  // if (y > this.refreshEnd) {
  //   this.refreshEnd = y;
  //   if (y > this.rows - 1) {
  //     this.refreshEnd = this.rows - 1;
  //   }
  // }
};

Terminal.prototype.maxRange = function() {
  this.refreshStart = 0;
  this.refreshEnd = this.rows - 1;
};

Terminal.prototype.setupStops = function(i) {
  if (i != null) {
    if (!this.tabs[i]) {
      i = this.prevStop(i);
    }
  } else {
    this.tabs = {};
    i = 0;
  }

  for (; i < this.cols; i += 8) {
    this.tabs[i] = true;
  }
};

Terminal.prototype.prevStop = function(x) {
  if (x == null) x = this.x;
  while (!this.tabs[--x] && x > 0);
  return x >= this.cols
    ? this.cols - 1
    : x < 0 ? 0 : x;
};

Terminal.prototype.nextStop = function(x) {
  if (x == null) x = this.x;
  while (!this.tabs[++x] && x < this.cols);
  return x >= this.cols
    ? this.cols - 1
    : x < 0 ? 0 : x;
};

Terminal.prototype.eraseRight = function(x, y) {
  var line = this.lines[this.ybase + y]
    , ch = [this.eraseAttr(), ' ']; // xterm


  for (; x < this.cols; x++) {
    line[x] = ch;
  }

  this.updateRange(y);
};

Terminal.prototype.eraseLeft = function(x, y) {
  var line = this.lines[this.ybase + y]
    , ch = [this.eraseAttr(), ' ']; // xterm

  x++;
  while (x--) line[x] = ch;

  this.updateRange(y);
};

Terminal.prototype.eraseLine = function(y) {
  this.eraseRight(0, y);
};

Terminal.prototype.blankLine = function(cur) {
  var attr = cur
    ? this.eraseAttr()
    : this.defAttr;

  var ch = [attr, ' ']
    , line = []
    , i = 0;

  for (; i < this.cols; i++) {
    line[i] = ch;
  }

  return line;
};

Terminal.prototype.ch = function(cur) {
  return cur
    ? [this.eraseAttr(), ' ']
    : [this.defAttr, ' '];
};

Terminal.prototype.is = function(term) {
  var name = this.termName;
  return (name + '').indexOf(term) === 0;
};

Terminal.prototype.handler = function(data) {
  this.emit('data', data);
};

Terminal.prototype.handleTitle = function(title) {
  this.emit('title', title);
};

/**
 * ESC
 */

// ESC D Index (IND is 0x84).
Terminal.prototype.index = function() {
  this.y++;
  if (this.y > this.scrollBottom) {
    this.y--;
    this.scroll();
  }
  this.state = normal;
};

// ESC M Reverse Index (RI is 0x8d).
Terminal.prototype.reverseIndex = function() {
  var j;
  this.y--;
  if (this.y < this.scrollTop) {
    this.y++;
    // possibly move the code below to term.reverseScroll();
    // test: echo -ne '\e[1;1H\e[44m\eM\e[0m'
    // blankLine(true) is xterm/linux behavior
    this.lines.splice(this.y + this.ybase, 0, this.blankLine(true));
    j = this.rows - 1 - this.scrollBottom;
    this.lines.splice(this.rows - 1 + this.ybase - j + 1, 1);
    // this.maxRange();
    this.updateRange(this.scrollTop);
    this.updateRange(this.scrollBottom);
  }
  this.state = normal;
};

// ESC c Full Reset (RIS).
Terminal.prototype.reset = function() {
  this.options.rows = this.rows;
  this.options.cols = this.cols;
  Terminal.call(this, this.options);
  this.refresh(0, this.rows - 1);
};

// ESC H Tab Set (HTS is 0x88).
Terminal.prototype.tabSet = function() {
  this.tabs[this.x] = true;
  this.state = normal;
};

/**
 * CSI
 */

// CSI Ps A
// Cursor Up Ps Times (default = 1) (CUU).
Terminal.prototype.cursorUp = function(params) {
  var param = params[0];
  if (param < 1) param = 1;
  this.y -= param;
  if (this.y < 0) this.y = 0;
};

// CSI Ps B
// Cursor Down Ps Times (default = 1) (CUD).
Terminal.prototype.cursorDown = function(params) {
  var param = params[0];
  if (param < 1) param = 1;
  this.y += param;
  if (this.y >= this.rows) {
    this.y = this.rows - 1;
  }
};

// CSI Ps C
// Cursor Forward Ps Times (default = 1) (CUF).
Terminal.prototype.cursorForward = function(params) {
  var param = params[0];
  if (param < 1) param = 1;
  this.x += param;
  if (this.x >= this.cols) {
    this.x = this.cols - 1;
  }
};

// CSI Ps D
// Cursor Backward Ps Times (default = 1) (CUB).
Terminal.prototype.cursorBackward = function(params) {
  var param = params[0];
  if (param < 1) param = 1;
  this.x -= param;
  if (this.x < 0) this.x = 0;
};

// CSI Ps ; Ps H
// Cursor Position [row;column] (default = [1,1]) (CUP).
Terminal.prototype.cursorPos = function(params) {
  var row, col;

  row = params[0] - 1;

  if (params.length >= 2) {
    col = params[1] - 1;
  } else {
    col = 0;
  }

  if (row < 0) {
    row = 0;
  } else if (row >= this.rows) {
    row = this.rows - 1;
  }

  if (col < 0) {
    col = 0;
  } else if (col >= this.cols) {
    col = this.cols - 1;
  }

  this.x = col;
  this.y = row;
};

// CSI Ps J  Erase in Display (ED).
//     Ps = 0  -> Erase Below (default).
//     Ps = 1  -> Erase Above.
//     Ps = 2  -> Erase All.
//     Ps = 3  -> Erase Saved Lines (xterm).
// CSI ? Ps J
//   Erase in Display (DECSED).
//     Ps = 0  -> Selective Erase Below (default).
//     Ps = 1  -> Selective Erase Above.
//     Ps = 2  -> Selective Erase All.
Terminal.prototype.eraseInDisplay = function(params) {
  var j;
  switch (params[0]) {
    case 0:
      this.eraseRight(this.x, this.y);
      j = this.y + 1;
      for (; j < this.rows; j++) {
        this.eraseLine(j);
      }
      break;
    case 1:
      this.eraseLeft(this.x, this.y);
      j = this.y;
      while (j--) {
        this.eraseLine(j);
      }
      break;
    case 2:
      j = this.rows;
      while (j--) this.eraseLine(j);
      break;
    case 3:
      ; // no saved lines
      break;
  }
};

// CSI Ps K  Erase in Line (EL).
//     Ps = 0  -> Erase to Right (default).
//     Ps = 1  -> Erase to Left.
//     Ps = 2  -> Erase All.
// CSI ? Ps K
//   Erase in Line (DECSEL).
//     Ps = 0  -> Selective Erase to Right (default).
//     Ps = 1  -> Selective Erase to Left.
//     Ps = 2  -> Selective Erase All.
Terminal.prototype.eraseInLine = function(params) {
  switch (params[0]) {
    case 0:
      this.eraseRight(this.x, this.y);
      break;
    case 1:
      this.eraseLeft(this.x, this.y);
      break;
    case 2:
      this.eraseLine(this.y);
      break;
  }
};

// CSI Pm m  Character Attributes (SGR).
//     Ps = 0  -> Normal (default).
//     Ps = 1  -> Bold.
//     Ps = 4  -> Underlined.
//     Ps = 5  -> Blink (appears as Bold).
//     Ps = 7  -> Inverse.
//     Ps = 8  -> Invisible, i.e., hidden (VT300).
//     Ps = 2 2  -> Normal (neither bold nor faint).
//     Ps = 2 4  -> Not underlined.
//     Ps = 2 5  -> Steady (not blinking).
//     Ps = 2 7  -> Positive (not inverse).
//     Ps = 2 8  -> Visible, i.e., not hidden (VT300).
//     Ps = 3 0  -> Set foreground color to Black.
//     Ps = 3 1  -> Set foreground color to Red.
//     Ps = 3 2  -> Set foreground color to Green.
//     Ps = 3 3  -> Set foreground color to Yellow.
//     Ps = 3 4  -> Set foreground color to Blue.
//     Ps = 3 5  -> Set foreground color to Magenta.
//     Ps = 3 6  -> Set foreground color to Cyan.
//     Ps = 3 7  -> Set foreground color to White.
//     Ps = 3 9  -> Set foreground color to default (original).
//     Ps = 4 0  -> Set background color to Black.
//     Ps = 4 1  -> Set background color to Red.
//     Ps = 4 2  -> Set background color to Green.
//     Ps = 4 3  -> Set background color to Yellow.
//     Ps = 4 4  -> Set background color to Blue.
//     Ps = 4 5  -> Set background color to Magenta.
//     Ps = 4 6  -> Set background color to Cyan.
//     Ps = 4 7  -> Set background color to White.
//     Ps = 4 9  -> Set background color to default (original).

//   If 16-color support is compiled, the following apply.  Assume
//   that xterm's resources are set so that the ISO color codes are
//   the first 8 of a set of 16.  Then the aixterm colors are the
//   bright versions of the ISO colors:
//     Ps = 9 0  -> Set foreground color to Black.
//     Ps = 9 1  -> Set foreground color to Red.
//     Ps = 9 2  -> Set foreground color to Green.
//     Ps = 9 3  -> Set foreground color to Yellow.
//     Ps = 9 4  -> Set foreground color to Blue.
//     Ps = 9 5  -> Set foreground color to Magenta.
//     Ps = 9 6  -> Set foreground color to Cyan.
//     Ps = 9 7  -> Set foreground color to White.
//     Ps = 1 0 0  -> Set background color to Black.
//     Ps = 1 0 1  -> Set background color to Red.
//     Ps = 1 0 2  -> Set background color to Green.
//     Ps = 1 0 3  -> Set background color to Yellow.
//     Ps = 1 0 4  -> Set background color to Blue.
//     Ps = 1 0 5  -> Set background color to Magenta.
//     Ps = 1 0 6  -> Set background color to Cyan.
//     Ps = 1 0 7  -> Set background color to White.

//   If xterm is compiled with the 16-color support disabled, it
//   supports the following, from rxvt:
//     Ps = 1 0 0  -> Set foreground and background color to
//     default.

//   If 88- or 256-color support is compiled, the following apply.
//     Ps = 3 8  ; 5  ; Ps -> Set foreground color to the second
//     Ps.
//     Ps = 4 8  ; 5  ; Ps -> Set background color to the second
//     Ps.
Terminal.prototype.charAttributes = function(params) {
  // Optimize a single SGR0.
  if (params.length === 1 && params[0] === 0) {
    this.curAttr = this.defAttr;
    return;
  }

  var l = params.length
    , i = 0
    , flags = this.curAttr >> 18
    , fg = (this.curAttr >> 9) & 0x1ff
    , bg = this.curAttr & 0x1ff
    , p;

  for (; i < l; i++) {
    p = params[i];
    if (p >= 30 && p <= 37) {
      // fg color 8
      fg = p - 30;
    } else if (p >= 40 && p <= 47) {
      // bg color 8
      bg = p - 40;
    } else if (p >= 90 && p <= 97) {
      // fg color 16
      p += 8;
      fg = p - 90;
    } else if (p >= 100 && p <= 107) {
      // bg color 16
      p += 8;
      bg = p - 100;
    } else if (p === 0) {
      // default
      flags = this.defAttr >> 18;
      fg = (this.defAttr >> 9) & 0x1ff;
      bg = this.defAttr & 0x1ff;
      // flags = 0;
      // fg = 0x1ff;
      // bg = 0x1ff;
    } else if (p === 1) {
      // bold text
      flags |= 1;
    } else if (p === 4) {
      // underlined text
      flags |= 2;
    } else if (p === 5) {
      // blink
      flags |= 4;
    } else if (p === 7) {
      // inverse and positive
      // test with: echo -e '\e[31m\e[42mhello\e[7mworld\e[27mhi\e[m'
      flags |= 8;
    } else if (p === 8) {
      // invisible
      flags |= 16;
    } else if (p === 22) {
      // not bold
      flags &= ~1;
    } else if (p === 24) {
      // not underlined
      flags &= ~2;
    } else if (p === 25) {
      // not blink
      flags &= ~4;
    } else if (p === 27) {
      // not inverse
      flags &= ~8;
    } else if (p === 28) {
      // not invisible
      flags &= ~16;
    } else if (p === 39) {
      // reset fg
      fg = (this.defAttr >> 9) & 0x1ff;
    } else if (p === 49) {
      // reset bg
      bg = this.defAttr & 0x1ff;
    } else if (p === 38) {
      // fg color 256
      if (params[i + 1] === 2) {
        i += 2;
        fg = matchColor(
          params[i] & 0xff,
          params[i + 1] & 0xff,
          params[i + 2] & 0xff);
        if (fg === -1) fg = 0x1ff;
        i += 2;
      } else if (params[i + 1] === 5) {
        i += 2;
        p = params[i] & 0xff;
        fg = p;
      }
    } else if (p === 48) {
      // bg color 256
      if (params[i + 1] === 2) {
        i += 2;
        bg = matchColor(
          params[i] & 0xff,
          params[i + 1] & 0xff,
          params[i + 2] & 0xff);
        if (bg === -1) bg = 0x1ff;
        i += 2;
      } else if (params[i + 1] === 5) {
        i += 2;
        p = params[i] & 0xff;
        bg = p;
      }
    } else if (p === 100) {
      // reset fg/bg
      fg = (this.defAttr >> 9) & 0x1ff;
      bg = this.defAttr & 0x1ff;
    } else {
      this.error('Unknown SGR attribute: %d.', p);
    }
  }

  this.curAttr = (flags << 18) | (fg << 9) | bg;
};

// CSI Ps n  Device Status Report (DSR).
//     Ps = 5  -> Status Report.  Result (``OK'') is
//   CSI 0 n
//     Ps = 6  -> Report Cursor Position (CPR) [row;column].
//   Result is
//   CSI r ; c R
// CSI ? Ps n
//   Device Status Report (DSR, DEC-specific).
//     Ps = 6  -> Report Cursor Position (CPR) [row;column] as CSI
//     ? r ; c R (assumes page is zero).
//     Ps = 1 5  -> Report Printer status as CSI ? 1 0  n  (ready).
//     or CSI ? 1 1  n  (not ready).
//     Ps = 2 5  -> Report UDK status as CSI ? 2 0  n  (unlocked)
//     or CSI ? 2 1  n  (locked).
//     Ps = 2 6  -> Report Keyboard status as
//   CSI ? 2 7  ;  1  ;  0  ;  0  n  (North American).
//   The last two parameters apply to VT400 & up, and denote key-
//   board ready and LK01 respectively.
//     Ps = 5 3  -> Report Locator status as
//   CSI ? 5 3  n  Locator available, if compiled-in, or
//   CSI ? 5 0  n  No Locator, if not.
Terminal.prototype.deviceStatus = function(params) {
  if (!this.prefix) {
    switch (params[0]) {
      case 5:
        // status report
        this.send('\x1b[0n');
        break;
      case 6:
        // cursor position
        this.send('\x1b['
          + (this.y + 1)
          + ';'
          + (this.x + 1)
          + 'R');
        break;
    }
  } else if (this.prefix === '?') {
    // modern xterm doesnt seem to
    // respond to any of these except ?6, 6, and 5
    switch (params[0]) {
      case 6:
        // cursor position
        this.send('\x1b[?'
          + (this.y + 1)
          + ';'
          + (this.x + 1)
          + 'R');
        break;
      case 15:
        // no printer
        // this.send('\x1b[?11n');
        break;
      case 25:
        // dont support user defined keys
        // this.send('\x1b[?21n');
        break;
      case 26:
        // north american keyboard
        // this.send('\x1b[?27;1;0;0n');
        break;
      case 53:
        // no dec locator/mouse
        // this.send('\x1b[?50n');
        break;
    }
  }
};

/**
 * Additions
 */

// CSI Ps @
// Insert Ps (Blank) Character(s) (default = 1) (ICH).
Terminal.prototype.insertChars = function(params) {
  var param, row, j, ch;

  param = params[0];
  if (param < 1) param = 1;

  row = this.y + this.ybase;
  j = this.x;
  ch = [this.eraseAttr(), ' ']; // xterm

  while (param-- && j < this.cols) {
    this.lines[row].splice(j++, 0, ch);
    this.lines[row].pop();
  }
};

// CSI Ps E
// Cursor Next Line Ps Times (default = 1) (CNL).
// same as CSI Ps B ?
Terminal.prototype.cursorNextLine = function(params) {
  var param = params[0];
  if (param < 1) param = 1;
  this.y += param;
  if (this.y >= this.rows) {
    this.y = this.rows - 1;
  }
  this.x = 0;
};

// CSI Ps F
// Cursor Preceding Line Ps Times (default = 1) (CNL).
// reuse CSI Ps A ?
Terminal.prototype.cursorPrecedingLine = function(params) {
  var param = params[0];
  if (param < 1) param = 1;
  this.y -= param;
  if (this.y < 0) this.y = 0;
  this.x = 0;
};

// CSI Ps G
// Cursor Character Absolute  [column] (default = [row,1]) (CHA).
Terminal.prototype.cursorCharAbsolute = function(params) {
  var param = params[0];
  if (param < 1) param = 1;
  this.x = param - 1;
};

// CSI Ps L
// Insert Ps Line(s) (default = 1) (IL).
Terminal.prototype.insertLines = function(params) {
  var param, row, j;

  param = params[0];
  if (param < 1) param = 1;
  row = this.y + this.ybase;

  j = this.rows - 1 - this.scrollBottom;
  j = this.rows - 1 + this.ybase - j + 1;

  while (param--) {
    // test: echo -e '\e[44m\e[1L\e[0m'
    // blankLine(true) - xterm/linux behavior
    this.lines.splice(row, 0, this.blankLine(true));
    this.lines.splice(j, 1);
  }

  // this.maxRange();
  this.updateRange(this.y);
  this.updateRange(this.scrollBottom);
};

// CSI Ps M
// Delete Ps Line(s) (default = 1) (DL).
Terminal.prototype.deleteLines = function(params) {
  var param, row, j;

  param = params[0];
  if (param < 1) param = 1;
  row = this.y + this.ybase;

  j = this.rows - 1 - this.scrollBottom;
  j = this.rows - 1 + this.ybase - j;

  while (param--) {
    // test: echo -e '\e[44m\e[1M\e[0m'
    // blankLine(true) - xterm/linux behavior
    this.lines.splice(j + 1, 0, this.blankLine(true));
    this.lines.splice(row, 1);
  }

  // this.maxRange();
  this.updateRange(this.y);
  this.updateRange(this.scrollBottom);
};

// CSI Ps P
// Delete Ps Character(s) (default = 1) (DCH).
Terminal.prototype.deleteChars = function(params) {
  var param, row, ch;

  param = params[0];
  if (param < 1) param = 1;

  row = this.y + this.ybase;
  ch = [this.eraseAttr(), ' ']; // xterm

  while (param--) {
    this.lines[row].splice(this.x, 1);
    this.lines[row].push(ch);
  }
};

// CSI Ps X
// Erase Ps Character(s) (default = 1) (ECH).
Terminal.prototype.eraseChars = function(params) {
  var param, row, j, ch;

  param = params[0];
  if (param < 1) param = 1;

  row = this.y + this.ybase;
  j = this.x;
  ch = [this.eraseAttr(), ' ']; // xterm

  while (param-- && j < this.cols) {
    this.lines[row][j++] = ch;
  }
};

// CSI Pm `  Character Position Absolute
//   [column] (default = [row,1]) (HPA).
Terminal.prototype.charPosAbsolute = function(params) {
  var param = params[0];
  if (param < 1) param = 1;
  this.x = param - 1;
  if (this.x >= this.cols) {
    this.x = this.cols - 1;
  }
};

// 141 61 a * HPR -
// Horizontal Position Relative
// reuse CSI Ps C ?
Terminal.prototype.HPositionRelative = function(params) {
  var param = params[0];
  if (param < 1) param = 1;
  this.x += param;
  if (this.x >= this.cols) {
    this.x = this.cols - 1;
  }
};

// CSI Ps c  Send Device Attributes (Primary DA).
//     Ps = 0  or omitted -> request attributes from terminal.  The
//     response depends on the decTerminalID resource setting.
//     -> CSI ? 1 ; 2 c  (``VT100 with Advanced Video Option'')
//     -> CSI ? 1 ; 0 c  (``VT101 with No Options'')
//     -> CSI ? 6 c  (``VT102'')
//     -> CSI ? 6 0 ; 1 ; 2 ; 6 ; 8 ; 9 ; 1 5 ; c  (``VT220'')
//   The VT100-style response parameters do not mean anything by
//   themselves.  VT220 parameters do, telling the host what fea-
//   tures the terminal supports:
//     Ps = 1  -> 132-columns.
//     Ps = 2  -> Printer.
//     Ps = 6  -> Selective erase.
//     Ps = 8  -> User-defined keys.
//     Ps = 9  -> National replacement character sets.
//     Ps = 1 5  -> Technical characters.
//     Ps = 2 2  -> ANSI color, e.g., VT525.
//     Ps = 2 9  -> ANSI text locator (i.e., DEC Locator mode).
// CSI > Ps c
//   Send Device Attributes (Secondary DA).
//     Ps = 0  or omitted -> request the terminal's identification
//     code.  The response depends on the decTerminalID resource set-
//     ting.  It should apply only to VT220 and up, but xterm extends
//     this to VT100.
//     -> CSI  > Pp ; Pv ; Pc c
//   where Pp denotes the terminal type
//     Pp = 0  -> ``VT100''.
//     Pp = 1  -> ``VT220''.
//   and Pv is the firmware version (for xterm, this was originally
//   the XFree86 patch number, starting with 95).  In a DEC termi-
//   nal, Pc indicates the ROM cartridge registration number and is
//   always zero.
// More information:
//   xterm/charproc.c - line 2012, for more information.
//   vim responds with ^[[?0c or ^[[?1c after the terminal's response (?)
Terminal.prototype.sendDeviceAttributes = function(params) {
  if (params[0] > 0) return;

  if (!this.prefix) {
    if (this.is('xterm')
        || this.is('rxvt-unicode')
        || this.is('screen')) {
      this.send('\x1b[?1;2c');
    } else if (this.is('linux')) {
      this.send('\x1b[?6c');
    }
  } else if (this.prefix === '>') {
    // xterm and urxvt
    // seem to spit this
    // out around ~370 times (?).
    if (this.is('xterm')) {
      this.send('\x1b[>0;276;0c');
    } else if (this.is('rxvt-unicode')) {
      this.send('\x1b[>85;95;0c');
    } else if (this.is('linux')) {
      // not supported by linux console.
      // linux console echoes parameters.
      this.send(params[0] + 'c');
    } else if (this.is('screen')) {
      this.send('\x1b[>83;40003;0c');
    }
  }
};

// CSI Pm d
// Line Position Absolute  [row] (default = [1,column]) (VPA).
Terminal.prototype.linePosAbsolute = function(params) {
  var param = params[0];
  if (param < 1) param = 1;
  this.y = param - 1;
  if (this.y >= this.rows) {
    this.y = this.rows - 1;
  }
};

// 145 65 e * VPR - Vertical Position Relative
// reuse CSI Ps B ?
Terminal.prototype.VPositionRelative = function(params) {
  var param = params[0];
  if (param < 1) param = 1;
  this.y += param;
  if (this.y >= this.rows) {
    this.y = this.rows - 1;
  }
};

// CSI Ps ; Ps f
//   Horizontal and Vertical Position [row;column] (default =
//   [1,1]) (HVP).
Terminal.prototype.HVPosition = function(params) {
  if (params[0] < 1) params[0] = 1;
  if (params[1] < 1) params[1] = 1;

  this.y = params[0] - 1;
  if (this.y >= this.rows) {
    this.y = this.rows - 1;
  }

  this.x = params[1] - 1;
  if (this.x >= this.cols) {
    this.x = this.cols - 1;
  }
};

// CSI Pm h  Set Mode (SM).
//     Ps = 2  -> Keyboard Action Mode (AM).
//     Ps = 4  -> Insert Mode (IRM).
//     Ps = 1 2  -> Send/receive (SRM).
//     Ps = 2 0  -> Automatic Newline (LNM).
// CSI ? Pm h
//   DEC Private Mode Set (DECSET).
//     Ps = 1  -> Application Cursor Keys (DECCKM).
//     Ps = 2  -> Designate USASCII for character sets G0-G3
//     (DECANM), and set VT100 mode.
//     Ps = 3  -> 132 Column Mode (DECCOLM).
//     Ps = 4  -> Smooth (Slow) Scroll (DECSCLM).
//     Ps = 5  -> Reverse Video (DECSCNM).
//     Ps = 6  -> Origin Mode (DECOM).
//     Ps = 7  -> Wraparound Mode (DECAWM).
//     Ps = 8  -> Auto-repeat Keys (DECARM).
//     Ps = 9  -> Send Mouse X & Y on button press.  See the sec-
//     tion Mouse Tracking.
//     Ps = 1 0  -> Show toolbar (rxvt).
//     Ps = 1 2  -> Start Blinking Cursor (att610).
//     Ps = 1 8  -> Print form feed (DECPFF).
//     Ps = 1 9  -> Set print extent to full screen (DECPEX).
//     Ps = 2 5  -> Show Cursor (DECTCEM).
//     Ps = 3 0  -> Show scrollbar (rxvt).
//     Ps = 3 5  -> Enable font-shifting functions (rxvt).
//     Ps = 3 8  -> Enter Tektronix Mode (DECTEK).
//     Ps = 4 0  -> Allow 80 -> 132 Mode.
//     Ps = 4 1  -> more(1) fix (see curses resource).
//     Ps = 4 2  -> Enable Nation Replacement Character sets (DECN-
//     RCM).
//     Ps = 4 4  -> Turn On Margin Bell.
//     Ps = 4 5  -> Reverse-wraparound Mode.
//     Ps = 4 6  -> Start Logging.  This is normally disabled by a
//     compile-time option.
//     Ps = 4 7  -> Use Alternate Screen Buffer.  (This may be dis-
//     abled by the titeInhibit resource).
//     Ps = 6 6  -> Application keypad (DECNKM).
//     Ps = 6 7  -> Backarrow key sends backspace (DECBKM).
//     Ps = 1 0 0 0  -> Send Mouse X & Y on button press and
//     release.  See the section Mouse Tracking.
//     Ps = 1 0 0 1  -> Use Hilite Mouse Tracking.
//     Ps = 1 0 0 2  -> Use Cell Motion Mouse Tracking.
//     Ps = 1 0 0 3  -> Use All Motion Mouse Tracking.
//     Ps = 1 0 0 4  -> Send FocusIn/FocusOut events.
//     Ps = 1 0 0 5  -> Enable Extended Mouse Mode.
//     Ps = 1 0 1 0  -> Scroll to bottom on tty output (rxvt).
//     Ps = 1 0 1 1  -> Scroll to bottom on key press (rxvt).
//     Ps = 1 0 3 4  -> Interpret "meta" key, sets eighth bit.
//     (enables the eightBitInput resource).
//     Ps = 1 0 3 5  -> Enable special modifiers for Alt and Num-
//     Lock keys.  (This enables the numLock resource).
//     Ps = 1 0 3 6  -> Send ESC   when Meta modifies a key.  (This
//     enables the metaSendsEscape resource).
//     Ps = 1 0 3 7  -> Send DEL from the editing-keypad Delete
//     key.
//     Ps = 1 0 3 9  -> Send ESC  when Alt modifies a key.  (This
//     enables the altSendsEscape resource).
//     Ps = 1 0 4 0  -> Keep selection even if not highlighted.
//     (This enables the keepSelection resource).
//     Ps = 1 0 4 1  -> Use the CLIPBOARD selection.  (This enables
//     the selectToClipboard resource).
//     Ps = 1 0 4 2  -> Enable Urgency window manager hint when
//     Control-G is received.  (This enables the bellIsUrgent
//     resource).
//     Ps = 1 0 4 3  -> Enable raising of the window when Control-G
//     is received.  (enables the popOnBell resource).
//     Ps = 1 0 4 7  -> Use Alternate Screen Buffer.  (This may be
//     disabled by the titeInhibit resource).
//     Ps = 1 0 4 8  -> Save cursor as in DECSC.  (This may be dis-
//     abled by the titeInhibit resource).
//     Ps = 1 0 4 9  -> Save cursor as in DECSC and use Alternate
//     Screen Buffer, clearing it first.  (This may be disabled by
//     the titeInhibit resource).  This combines the effects of the 1
//     0 4 7  and 1 0 4 8  modes.  Use this with terminfo-based
//     applications rather than the 4 7  mode.
//     Ps = 1 0 5 0  -> Set terminfo/termcap function-key mode.
//     Ps = 1 0 5 1  -> Set Sun function-key mode.
//     Ps = 1 0 5 2  -> Set HP function-key mode.
//     Ps = 1 0 5 3  -> Set SCO function-key mode.
//     Ps = 1 0 6 0  -> Set legacy keyboard emulation (X11R6).
//     Ps = 1 0 6 1  -> Set VT220 keyboard emulation.
//     Ps = 2 0 0 4  -> Set bracketed paste mode.
// Modes:
//   http://vt100.net/docs/vt220-rm/chapter4.html
Terminal.prototype.setMode = function(params) {
  if (typeof params === 'object') {
    var l = params.length
      , i = 0;

    for (; i < l; i++) {
      this.setMode(params[i]);
    }

    return;
  }

  if (!this.prefix) {
    switch (params) {
      case 4:
        this.insertMode = true;
        break;
      case 20:
        //this.convertEol = true;
        break;
    }
  } else if (this.prefix === '?') {
    switch (params) {
      case 1:
        this.applicationCursor = true;
        break;
      case 2:
        this.setgCharset(0, Terminal.charsets.US);
        this.setgCharset(1, Terminal.charsets.US);
        this.setgCharset(2, Terminal.charsets.US);
        this.setgCharset(3, Terminal.charsets.US);
        // set VT100 mode here
        break;
      case 3: // 132 col mode
        this.savedCols = this.cols;
        this.resize(132, this.rows);
        break;
      case 6:
        this.originMode = true;
        break;
      case 7:
        this.wraparoundMode = true;
        break;
      case 12:
        // this.cursorBlink = true;
        break;
      case 66:
        this.log('Serial port requested application keypad.');
        this.applicationKeypad = true;
        break;
      case 9: // X10 Mouse
        // no release, no motion, no wheel, no modifiers.
      case 1000: // vt200 mouse
        // no motion.
        // no modifiers, except control on the wheel.
      case 1002: // button event mouse
      case 1003: // any event mouse
        // any event - sends motion events,
        // even if there is no button held down.
        this.x10Mouse = params === 9;
        this.vt200Mouse = params === 1000;
        this.normalMouse = params > 1000;
        this.mouseEvents = true;
        this.element.style.cursor = 'default';
        this.log('Binding to mouse events.');
        break;
      case 1004: // send focusin/focusout events
        // focusin: ^[[I
        // focusout: ^[[O
        this.sendFocus = true;
        break;
      case 1005: // utf8 ext mode mouse
        this.utfMouse = true;
        // for wide terminals
        // simply encodes large values as utf8 characters
        break;
      case 1006: // sgr ext mode mouse
        this.sgrMouse = true;
        // for wide terminals
        // does not add 32 to fields
        // press: ^[[<b;x;yM
        // release: ^[[<b;x;ym
        break;
      case 1015: // urxvt ext mode mouse
        this.urxvtMouse = true;
        // for wide terminals
        // numbers for fields
        // press: ^[[b;x;yM
        // motion: ^[[b;x;yT
        break;
      case 25: // show cursor
        this.cursorHidden = false;
        break;
      case 1049: // alt screen buffer cursor
        //this.saveCursor();
        ; // FALL-THROUGH
      case 47: // alt screen buffer
      case 1047: // alt screen buffer
        if (!this.normal) {
          var normal = {
            lines: this.lines,
            ybase: this.ybase,
            ydisp: this.ydisp,
            x: this.x,
            y: this.y,
            scrollTop: this.scrollTop,
            scrollBottom: this.scrollBottom,
            tabs: this.tabs
            // XXX save charset(s) here?
            // charset: this.charset,
            // glevel: this.glevel,
            // charsets: this.charsets
          };
          this.reset();
          this.normal = normal;
          this.showCursor();
        }
        break;
    }
  }
};

// CSI Pm l  Reset Mode (RM).
//     Ps = 2  -> Keyboard Action Mode (AM).
//     Ps = 4  -> Replace Mode (IRM).
//     Ps = 1 2  -> Send/receive (SRM).
//     Ps = 2 0  -> Normal Linefeed (LNM).
// CSI ? Pm l
//   DEC Private Mode Reset (DECRST).
//     Ps = 1  -> Normal Cursor Keys (DECCKM).
//     Ps = 2  -> Designate VT52 mode (DECANM).
//     Ps = 3  -> 80 Column Mode (DECCOLM).
//     Ps = 4  -> Jump (Fast) Scroll (DECSCLM).
//     Ps = 5  -> Normal Video (DECSCNM).
//     Ps = 6  -> Normal Cursor Mode (DECOM).
//     Ps = 7  -> No Wraparound Mode (DECAWM).
//     Ps = 8  -> No Auto-repeat Keys (DECARM).
//     Ps = 9  -> Don't send Mouse X & Y on button press.
//     Ps = 1 0  -> Hide toolbar (rxvt).
//     Ps = 1 2  -> Stop Blinking Cursor (att610).
//     Ps = 1 8  -> Don't print form feed (DECPFF).
//     Ps = 1 9  -> Limit print to scrolling region (DECPEX).
//     Ps = 2 5  -> Hide Cursor (DECTCEM).
//     Ps = 3 0  -> Don't show scrollbar (rxvt).
//     Ps = 3 5  -> Disable font-shifting functions (rxvt).
//     Ps = 4 0  -> Disallow 80 -> 132 Mode.
//     Ps = 4 1  -> No more(1) fix (see curses resource).
//     Ps = 4 2  -> Disable Nation Replacement Character sets (DEC-
//     NRCM).
//     Ps = 4 4  -> Turn Off Margin Bell.
//     Ps = 4 5  -> No Reverse-wraparound Mode.
//     Ps = 4 6  -> Stop Logging.  (This is normally disabled by a
//     compile-time option).
//     Ps = 4 7  -> Use Normal Screen Buffer.
//     Ps = 6 6  -> Numeric keypad (DECNKM).
//     Ps = 6 7  -> Backarrow key sends delete (DECBKM).
//     Ps = 1 0 0 0  -> Don't send Mouse X & Y on button press and
//     release.  See the section Mouse Tracking.
//     Ps = 1 0 0 1  -> Don't use Hilite Mouse Tracking.
//     Ps = 1 0 0 2  -> Don't use Cell Motion Mouse Tracking.
//     Ps = 1 0 0 3  -> Don't use All Motion Mouse Tracking.
//     Ps = 1 0 0 4  -> Don't send FocusIn/FocusOut events.
//     Ps = 1 0 0 5  -> Disable Extended Mouse Mode.
//     Ps = 1 0 1 0  -> Don't scroll to bottom on tty output
//     (rxvt).
//     Ps = 1 0 1 1  -> Don't scroll to bottom on key press (rxvt).
//     Ps = 1 0 3 4  -> Don't interpret "meta" key.  (This disables
//     the eightBitInput resource).
//     Ps = 1 0 3 5  -> Disable special modifiers for Alt and Num-
//     Lock keys.  (This disables the numLock resource).
//     Ps = 1 0 3 6  -> Don't send ESC  when Meta modifies a key.
//     (This disables the metaSendsEscape resource).
//     Ps = 1 0 3 7  -> Send VT220 Remove from the editing-keypad
//     Delete key.
//     Ps = 1 0 3 9  -> Don't send ESC  when Alt modifies a key.
//     (This disables the altSendsEscape resource).
//     Ps = 1 0 4 0  -> Do not keep selection when not highlighted.
//     (This disables the keepSelection resource).
//     Ps = 1 0 4 1  -> Use the PRIMARY selection.  (This disables
//     the selectToClipboard resource).
//     Ps = 1 0 4 2  -> Disable Urgency window manager hint when
//     Control-G is received.  (This disables the bellIsUrgent
//     resource).
//     Ps = 1 0 4 3  -> Disable raising of the window when Control-
//     G is received.  (This disables the popOnBell resource).
//     Ps = 1 0 4 7  -> Use Normal Screen Buffer, clearing screen
//     first if in the Alternate Screen.  (This may be disabled by
//     the titeInhibit resource).
//     Ps = 1 0 4 8  -> Restore cursor as in DECRC.  (This may be
//     disabled by the titeInhibit resource).
//     Ps = 1 0 4 9  -> Use Normal Screen Buffer and restore cursor
//     as in DECRC.  (This may be disabled by the titeInhibit
//     resource).  This combines the effects of the 1 0 4 7  and 1 0
//     4 8  modes.  Use this with terminfo-based applications rather
//     than the 4 7  mode.
//     Ps = 1 0 5 0  -> Reset terminfo/termcap function-key mode.
//     Ps = 1 0 5 1  -> Reset Sun function-key mode.
//     Ps = 1 0 5 2  -> Reset HP function-key mode.
//     Ps = 1 0 5 3  -> Reset SCO function-key mode.
//     Ps = 1 0 6 0  -> Reset legacy keyboard emulation (X11R6).
//     Ps = 1 0 6 1  -> Reset keyboard emulation to Sun/PC style.
//     Ps = 2 0 0 4  -> Reset bracketed paste mode.
Terminal.prototype.resetMode = function(params) {
  if (typeof params === 'object') {
    var l = params.length
      , i = 0;

    for (; i < l; i++) {
      this.resetMode(params[i]);
    }

    return;
  }

  if (!this.prefix) {
    switch (params) {
      case 4:
        this.insertMode = false;
        break;
      case 20:
        //this.convertEol = false;
        break;
    }
  } else if (this.prefix === '?') {
    switch (params) {
      case 1:
        this.applicationCursor = false;
        break;
      case 3:
        if (this.cols === 132 && this.savedCols) {
          this.resize(this.savedCols, this.rows);
        }
        delete this.savedCols;
        break;
      case 6:
        this.originMode = false;
        break;
      case 7:
        this.wraparoundMode = false;
        break;
      case 12:
        // this.cursorBlink = false;
        break;
      case 66:
        this.log('Switching back to normal keypad.');
        this.applicationKeypad = false;
        break;
      case 9: // X10 Mouse
      case 1000: // vt200 mouse
      case 1002: // button event mouse
      case 1003: // any event mouse
        this.x10Mouse = false;
        this.vt200Mouse = false;
        this.normalMouse = false;
        this.mouseEvents = false;
        this.element.style.cursor = '';
        break;
      case 1004: // send focusin/focusout events
        this.sendFocus = false;
        break;
      case 1005: // utf8 ext mode mouse
        this.utfMouse = false;
        break;
      case 1006: // sgr ext mode mouse
        this.sgrMouse = false;
        break;
      case 1015: // urxvt ext mode mouse
        this.urxvtMouse = false;
        break;
      case 25: // hide cursor
        this.cursorHidden = true;
        break;
      case 1049: // alt screen buffer cursor
        ; // FALL-THROUGH
      case 47: // normal screen buffer
      case 1047: // normal screen buffer - clearing it first
        if (this.normal) {
          this.lines = this.normal.lines;
          this.ybase = this.normal.ybase;
          this.ydisp = this.normal.ydisp;
          this.x = this.normal.x;
          this.y = this.normal.y;
          this.scrollTop = this.normal.scrollTop;
          this.scrollBottom = this.normal.scrollBottom;
          this.tabs = this.normal.tabs;
          this.normal = null;
          // if (params === 1049) {
          //   this.x = this.savedX;
          //   this.y = this.savedY;
          // }
          this.refresh(0, this.rows - 1);
          this.showCursor();
        }
        break;
    }
  }
};

// CSI Ps ; Ps r
//   Set Scrolling Region [top;bottom] (default = full size of win-
//   dow) (DECSTBM).
// CSI ? Pm r
Terminal.prototype.setScrollRegion = function(params) {
  if (this.prefix) return;
  this.scrollTop = (params[0] || 1) - 1;
  this.scrollBottom = (params[1] || this.rows) - 1;
  this.x = 0;
  this.y = 0;
};

// CSI s
//   Save cursor (ANSI.SYS).
Terminal.prototype.saveCursor = function(params) {
  this.savedX = this.x;
  this.savedY = this.y;
};

// CSI u
//   Restore cursor (ANSI.SYS).
Terminal.prototype.restoreCursor = function(params) {
  this.x = this.savedX || 0;
  this.y = this.savedY || 0;
};

/**
 * Lesser Used
 */

// CSI Ps I
//   Cursor Forward Tabulation Ps tab stops (default = 1) (CHT).
Terminal.prototype.cursorForwardTab = function(params) {
  var param = params[0] || 1;
  while (param--) {
    this.x = this.nextStop();
  }
};

// CSI Ps S  Scroll up Ps lines (default = 1) (SU).
Terminal.prototype.scrollUp = function(params) {
  var param = params[0] || 1;
  while (param--) {
    this.lines.splice(this.ybase + this.scrollTop, 1);
    this.lines.splice(this.ybase + this.scrollBottom, 0, this.blankLine());
  }
  // this.maxRange();
  this.updateRange(this.scrollTop);
  this.updateRange(this.scrollBottom);
};

// CSI Ps T  Scroll down Ps lines (default = 1) (SD).
Terminal.prototype.scrollDown = function(params) {
  var param = params[0] || 1;
  while (param--) {
    this.lines.splice(this.ybase + this.scrollBottom, 1);
    this.lines.splice(this.ybase + this.scrollTop, 0, this.blankLine());
  }
  // this.maxRange();
  this.updateRange(this.scrollTop);
  this.updateRange(this.scrollBottom);
};

// CSI Ps ; Ps ; Ps ; Ps ; Ps T
//   Initiate highlight mouse tracking.  Parameters are
//   [func;startx;starty;firstrow;lastrow].  See the section Mouse
//   Tracking.
Terminal.prototype.initMouseTracking = function(params) {
  // Relevant: DECSET 1001
};

// CSI > Ps; Ps T
//   Reset one or more features of the title modes to the default
//   value.  Normally, "reset" disables the feature.  It is possi-
//   ble to disable the ability to reset features by compiling a
//   different default for the title modes into xterm.
//     Ps = 0  -> Do not set window/icon labels using hexadecimal.
//     Ps = 1  -> Do not query window/icon labels using hexadeci-
//     mal.
//     Ps = 2  -> Do not set window/icon labels using UTF-8.
//     Ps = 3  -> Do not query window/icon labels using UTF-8.
//   (See discussion of "Title Modes").
Terminal.prototype.resetTitleModes = function(params) {
  ;
};

// CSI Ps Z  Cursor Backward Tabulation Ps tab stops (default = 1) (CBT).
Terminal.prototype.cursorBackwardTab = function(params) {
  var param = params[0] || 1;
  while (param--) {
    this.x = this.prevStop();
  }
};

// CSI Ps b  Repeat the preceding graphic character Ps times (REP).
Terminal.prototype.repeatPrecedingCharacter = function(params) {
  var param = params[0] || 1
    , line = this.lines[this.ybase + this.y]
    , ch = line[this.x - 1] || [this.defAttr, ' '];

  while (param--) line[this.x++] = ch;
};

// CSI Ps g  Tab Clear (TBC).
//     Ps = 0  -> Clear Current Column (default).
//     Ps = 3  -> Clear All.
// Potentially:
//   Ps = 2  -> Clear Stops on Line.
//   http://vt100.net/annarbor/aaa-ug/section6.html
Terminal.prototype.tabClear = function(params) {
  var param = params[0];
  if (param <= 0) {
    delete this.tabs[this.x];
  } else if (param === 3) {
    this.tabs = {};
  }
};

// CSI Pm i  Media Copy (MC).
//     Ps = 0  -> Print screen (default).
//     Ps = 4  -> Turn off printer controller mode.
//     Ps = 5  -> Turn on printer controller mode.
// CSI ? Pm i
//   Media Copy (MC, DEC-specific).
//     Ps = 1  -> Print line containing cursor.
//     Ps = 4  -> Turn off autoprint mode.
//     Ps = 5  -> Turn on autoprint mode.
//     Ps = 1  0  -> Print composed display, ignores DECPEX.
//     Ps = 1  1  -> Print all pages.
Terminal.prototype.mediaCopy = function(params) {
  ;
};

// CSI > Ps; Ps m
//   Set or reset resource-values used by xterm to decide whether
//   to construct escape sequences holding information about the
//   modifiers pressed with a given key.  The first parameter iden-
//   tifies the resource to set/reset.  The second parameter is the
//   value to assign to the resource.  If the second parameter is
//   omitted, the resource is reset to its initial value.
//     Ps = 1  -> modifyCursorKeys.
//     Ps = 2  -> modifyFunctionKeys.
//     Ps = 4  -> modifyOtherKeys.
//   If no parameters are given, all resources are reset to their
//   initial values.
Terminal.prototype.setResources = function(params) {
  ;
};

// CSI > Ps n
//   Disable modifiers which may be enabled via the CSI > Ps; Ps m
//   sequence.  This corresponds to a resource value of "-1", which
//   cannot be set with the other sequence.  The parameter identi-
//   fies the resource to be disabled:
//     Ps = 1  -> modifyCursorKeys.
//     Ps = 2  -> modifyFunctionKeys.
//     Ps = 4  -> modifyOtherKeys.
//   If the parameter is omitted, modifyFunctionKeys is disabled.
//   When modifyFunctionKeys is disabled, xterm uses the modifier
//   keys to make an extended sequence of functions rather than
//   adding a parameter to each function key to denote the modi-
//   fiers.
Terminal.prototype.disableModifiers = function(params) {
  ;
};

// CSI > Ps p
//   Set resource value pointerMode.  This is used by xterm to
//   decide whether to hide the pointer cursor as the user types.
//   Valid values for the parameter:
//     Ps = 0  -> never hide the pointer.
//     Ps = 1  -> hide if the mouse tracking mode is not enabled.
//     Ps = 2  -> always hide the pointer.  If no parameter is
//     given, xterm uses the default, which is 1 .
Terminal.prototype.setPointerMode = function(params) {
  ;
};

// CSI ! p   Soft terminal reset (DECSTR).
// http://vt100.net/docs/vt220-rm/table4-10.html
Terminal.prototype.softReset = function(params) {
  this.cursorHidden = false;
  this.insertMode = false;
  this.originMode = false;
  this.wraparoundMode = false; // autowrap
  this.applicationKeypad = false; // ?
  this.applicationCursor = false;
  this.scrollTop = 0;
  this.scrollBottom = this.rows - 1;
  this.curAttr = this.defAttr;
  this.x = this.y = 0; // ?
  this.charset = null;
  this.glevel = 0; // ??
  this.charsets = [null]; // ??
};

// CSI Ps$ p
//   Request ANSI mode (DECRQM).  For VT300 and up, reply is
//     CSI Ps; Pm$ y
//   where Ps is the mode number as in RM, and Pm is the mode
//   value:
//     0 - not recognized
//     1 - set
//     2 - reset
//     3 - permanently set
//     4 - permanently reset
Terminal.prototype.requestAnsiMode = function(params) {
  ;
};

// CSI ? Ps$ p
//   Request DEC private mode (DECRQM).  For VT300 and up, reply is
//     CSI ? Ps; Pm$ p
//   where Ps is the mode number as in DECSET, Pm is the mode value
//   as in the ANSI DECRQM.
Terminal.prototype.requestPrivateMode = function(params) {
  ;
};

// CSI Ps ; Ps " p
//   Set conformance level (DECSCL).  Valid values for the first
//   parameter:
//     Ps = 6 1  -> VT100.
//     Ps = 6 2  -> VT200.
//     Ps = 6 3  -> VT300.
//   Valid values for the second parameter:
//     Ps = 0  -> 8-bit controls.
//     Ps = 1  -> 7-bit controls (always set for VT100).
//     Ps = 2  -> 8-bit controls.
Terminal.prototype.setConformanceLevel = function(params) {
  ;
};

// CSI Ps q  Load LEDs (DECLL).
//     Ps = 0  -> Clear all LEDS (default).
//     Ps = 1  -> Light Num Lock.
//     Ps = 2  -> Light Caps Lock.
//     Ps = 3  -> Light Scroll Lock.
//     Ps = 2  1  -> Extinguish Num Lock.
//     Ps = 2  2  -> Extinguish Caps Lock.
//     Ps = 2  3  -> Extinguish Scroll Lock.
Terminal.prototype.loadLEDs = function(params) {
  ;
};

// CSI Ps SP q
//   Set cursor style (DECSCUSR, VT520).
//     Ps = 0  -> blinking block.
//     Ps = 1  -> blinking block (default).
//     Ps = 2  -> steady block.
//     Ps = 3  -> blinking underline.
//     Ps = 4  -> steady underline.
Terminal.prototype.setCursorStyle = function(params) {
  ;
};

// CSI Ps " q
//   Select character protection attribute (DECSCA).  Valid values
//   for the parameter:
//     Ps = 0  -> DECSED and DECSEL can erase (default).
//     Ps = 1  -> DECSED and DECSEL cannot erase.
//     Ps = 2  -> DECSED and DECSEL can erase.
Terminal.prototype.setCharProtectionAttr = function(params) {
  ;
};

// CSI ? Pm r
//   Restore DEC Private Mode Values.  The value of Ps previously
//   saved is restored.  Ps values are the same as for DECSET.
Terminal.prototype.restorePrivateValues = function(params) {
  ;
};

// CSI Pt; Pl; Pb; Pr; Ps$ r
//   Change Attributes in Rectangular Area (DECCARA), VT400 and up.
//     Pt; Pl; Pb; Pr denotes the rectangle.
//     Ps denotes the SGR attributes to change: 0, 1, 4, 5, 7.
// NOTE: xterm doesn't enable this code by default.
Terminal.prototype.setAttrInRectangle = function(params) {
  var t = params[0]
    , l = params[1]
    , b = params[2]
    , r = params[3]
    , attr = params[4];

  var line
    , i;

  for (; t < b + 1; t++) {
    line = this.lines[this.ybase + t];
    for (i = l; i < r; i++) {
      line[i] = [attr, line[i][1]];
    }
  }

  // this.maxRange();
  this.updateRange(params[0]);
  this.updateRange(params[2]);
};

// CSI ? Pm s
//   Save DEC Private Mode Values.  Ps values are the same as for
//   DECSET.
Terminal.prototype.savePrivateValues = function(params) {
  ;
};

// CSI Ps ; Ps ; Ps t
//   Window manipulation (from dtterm, as well as extensions).
//   These controls may be disabled using the allowWindowOps
//   resource.  Valid values for the first (and any additional
//   parameters) are:
//     Ps = 1  -> De-iconify window.
//     Ps = 2  -> Iconify window.
//     Ps = 3  ;  x ;  y -> Move window to [x, y].
//     Ps = 4  ;  height ;  width -> Resize the xterm window to
//     height and width in pixels.
//     Ps = 5  -> Raise the xterm window to the front of the stack-
//     ing order.
//     Ps = 6  -> Lower the xterm window to the bottom of the
//     stacking order.
//     Ps = 7  -> Refresh the xterm window.
//     Ps = 8  ;  height ;  width -> Resize the text area to
//     [height;width] in characters.
//     Ps = 9  ;  0  -> Restore maximized window.
//     Ps = 9  ;  1  -> Maximize window (i.e., resize to screen
//     size).
//     Ps = 1 0  ;  0  -> Undo full-screen mode.
//     Ps = 1 0  ;  1  -> Change to full-screen.
//     Ps = 1 1  -> Report xterm window state.  If the xterm window
//     is open (non-iconified), it returns CSI 1 t .  If the xterm
//     window is iconified, it returns CSI 2 t .
//     Ps = 1 3  -> Report xterm window position.  Result is CSI 3
//     ; x ; y t
//     Ps = 1 4  -> Report xterm window in pixels.  Result is CSI
//     4  ;  height ;  width t
//     Ps = 1 8  -> Report the size of the text area in characters.
//     Result is CSI  8  ;  height ;  width t
//     Ps = 1 9  -> Report the size of the screen in characters.
//     Result is CSI  9  ;  height ;  width t
//     Ps = 2 0  -> Report xterm window's icon label.  Result is
//     OSC  L  label ST
//     Ps = 2 1  -> Report xterm window's title.  Result is OSC  l
//     label ST
//     Ps = 2 2  ;  0  -> Save xterm icon and window title on
//     stack.
//     Ps = 2 2  ;  1  -> Save xterm icon title on stack.
//     Ps = 2 2  ;  2  -> Save xterm window title on stack.
//     Ps = 2 3  ;  0  -> Restore xterm icon and window title from
//     stack.
//     Ps = 2 3  ;  1  -> Restore xterm icon title from stack.
//     Ps = 2 3  ;  2  -> Restore xterm window title from stack.
//     Ps >= 2 4  -> Resize to Ps lines (DECSLPP).
Terminal.prototype.manipulateWindow = function(params) {
  ;
};

// CSI Pt; Pl; Pb; Pr; Ps$ t
//   Reverse Attributes in Rectangular Area (DECRARA), VT400 and
//   up.
//     Pt; Pl; Pb; Pr denotes the rectangle.
//     Ps denotes the attributes to reverse, i.e.,  1, 4, 5, 7.
// NOTE: xterm doesn't enable this code by default.
Terminal.prototype.reverseAttrInRectangle = function(params) {
  ;
};

// CSI > Ps; Ps t
//   Set one or more features of the title modes.  Each parameter
//   enables a single feature.
//     Ps = 0  -> Set window/icon labels using hexadecimal.
//     Ps = 1  -> Query window/icon labels using hexadecimal.
//     Ps = 2  -> Set window/icon labels using UTF-8.
//     Ps = 3  -> Query window/icon labels using UTF-8.  (See dis-
//     cussion of "Title Modes")
Terminal.prototype.setTitleModeFeature = function(params) {
  ;
};

// CSI Ps SP t
//   Set warning-bell volume (DECSWBV, VT520).
//     Ps = 0  or 1  -> off.
//     Ps = 2 , 3  or 4  -> low.
//     Ps = 5 , 6 , 7 , or 8  -> high.
Terminal.prototype.setWarningBellVolume = function(params) {
  ;
};

// CSI Ps SP u
//   Set margin-bell volume (DECSMBV, VT520).
//     Ps = 1  -> off.
//     Ps = 2 , 3  or 4  -> low.
//     Ps = 0 , 5 , 6 , 7 , or 8  -> high.
Terminal.prototype.setMarginBellVolume = function(params) {
  ;
};

// CSI Pt; Pl; Pb; Pr; Pp; Pt; Pl; Pp$ v
//   Copy Rectangular Area (DECCRA, VT400 and up).
//     Pt; Pl; Pb; Pr denotes the rectangle.
//     Pp denotes the source page.
//     Pt; Pl denotes the target location.
//     Pp denotes the target page.
// NOTE: xterm doesn't enable this code by default.
Terminal.prototype.copyRectangle = function(params) {
  ;
};

// CSI Pt ; Pl ; Pb ; Pr ' w
//   Enable Filter Rectangle (DECEFR), VT420 and up.
//   Parameters are [top;left;bottom;right].
//   Defines the coordinates of a filter rectangle and activates
//   it.  Anytime the locator is detected outside of the filter
//   rectangle, an outside rectangle event is generated and the
//   rectangle is disabled.  Filter rectangles are always treated
//   as "one-shot" events.  Any parameters that are omitted default
//   to the current locator position.  If all parameters are omit-
//   ted, any locator motion will be reported.  DECELR always can-
//   cels any prevous rectangle definition.
Terminal.prototype.enableFilterRectangle = function(params) {
  ;
};

// CSI Ps x  Request Terminal Parameters (DECREQTPARM).
//   if Ps is a "0" (default) or "1", and xterm is emulating VT100,
//   the control sequence elicits a response of the same form whose
//   parameters describe the terminal:
//     Ps -> the given Ps incremented by 2.
//     Pn = 1  <- no parity.
//     Pn = 1  <- eight bits.
//     Pn = 1  <- 2  8  transmit 38.4k baud.
//     Pn = 1  <- 2  8  receive 38.4k baud.
//     Pn = 1  <- clock multiplier.
//     Pn = 0  <- STP flags.
Terminal.prototype.requestParameters = function(params) {
  ;
};

// CSI Ps x  Select Attribute Change Extent (DECSACE).
//     Ps = 0  -> from start to end position, wrapped.
//     Ps = 1  -> from start to end position, wrapped.
//     Ps = 2  -> rectangle (exact).
Terminal.prototype.selectChangeExtent = function(params) {
  ;
};

// CSI Pc; Pt; Pl; Pb; Pr$ x
//   Fill Rectangular Area (DECFRA), VT420 and up.
//     Pc is the character to use.
//     Pt; Pl; Pb; Pr denotes the rectangle.
// NOTE: xterm doesn't enable this code by default.
Terminal.prototype.fillRectangle = function(params) {
  var ch = params[0]
    , t = params[1]
    , l = params[2]
    , b = params[3]
    , r = params[4];

  var line
    , i;

  for (; t < b + 1; t++) {
    line = this.lines[this.ybase + t];
    for (i = l; i < r; i++) {
      line[i] = [line[i][0], String.fromCharCode(ch)];
    }
  }

  // this.maxRange();
  this.updateRange(params[1]);
  this.updateRange(params[3]);
};

// CSI Ps ; Pu ' z
//   Enable Locator Reporting (DECELR).
//   Valid values for the first parameter:
//     Ps = 0  -> Locator disabled (default).
//     Ps = 1  -> Locator enabled.
//     Ps = 2  -> Locator enabled for one report, then disabled.
//   The second parameter specifies the coordinate unit for locator
//   reports.
//   Valid values for the second parameter:
//     Pu = 0  <- or omitted -> default to character cells.
//     Pu = 1  <- device physical pixels.
//     Pu = 2  <- character cells.
Terminal.prototype.enableLocatorReporting = function(params) {
  var val = params[0] > 0;
  //this.mouseEvents = val;
  //this.decLocator = val;
};

// CSI Pt; Pl; Pb; Pr$ z
//   Erase Rectangular Area (DECERA), VT400 and up.
//     Pt; Pl; Pb; Pr denotes the rectangle.
// NOTE: xterm doesn't enable this code by default.
Terminal.prototype.eraseRectangle = function(params) {
  var t = params[0]
    , l = params[1]
    , b = params[2]
    , r = params[3];

  var line
    , i
    , ch;

  ch = [this.eraseAttr(), ' ']; // xterm?

  for (; t < b + 1; t++) {
    line = this.lines[this.ybase + t];
    for (i = l; i < r; i++) {
      line[i] = ch;
    }
  }

  // this.maxRange();
  this.updateRange(params[0]);
  this.updateRange(params[2]);
};

// CSI Pm ' {
//   Select Locator Events (DECSLE).
//   Valid values for the first (and any additional parameters)
//   are:
//     Ps = 0  -> only respond to explicit host requests (DECRQLP).
//                (This is default).  It also cancels any filter
//   rectangle.
//     Ps = 1  -> report button down transitions.
//     Ps = 2  -> do not report button down transitions.
//     Ps = 3  -> report button up transitions.
//     Ps = 4  -> do not report button up transitions.
Terminal.prototype.setLocatorEvents = function(params) {
  ;
};

// CSI Pt; Pl; Pb; Pr$ {
//   Selective Erase Rectangular Area (DECSERA), VT400 and up.
//     Pt; Pl; Pb; Pr denotes the rectangle.
Terminal.prototype.selectiveEraseRectangle = function(params) {
  ;
};

// CSI Ps ' |
//   Request Locator Position (DECRQLP).
//   Valid values for the parameter are:
//     Ps = 0 , 1 or omitted -> transmit a single DECLRP locator
//     report.

//   If Locator Reporting has been enabled by a DECELR, xterm will
//   respond with a DECLRP Locator Report.  This report is also
//   generated on button up and down events if they have been
//   enabled with a DECSLE, or when the locator is detected outside
//   of a filter rectangle, if filter rectangles have been enabled
//   with a DECEFR.

//     -> CSI Pe ; Pb ; Pr ; Pc ; Pp &  w

//   Parameters are [event;button;row;column;page].
//   Valid values for the event:
//     Pe = 0  -> locator unavailable - no other parameters sent.
//     Pe = 1  -> request - xterm received a DECRQLP.
//     Pe = 2  -> left button down.
//     Pe = 3  -> left button up.
//     Pe = 4  -> middle button down.
//     Pe = 5  -> middle button up.
//     Pe = 6  -> right button down.
//     Pe = 7  -> right button up.
//     Pe = 8  -> M4 button down.
//     Pe = 9  -> M4 button up.
//     Pe = 1 0  -> locator outside filter rectangle.
//   ``button'' parameter is a bitmask indicating which buttons are
//     pressed:
//     Pb = 0  <- no buttons down.
//     Pb & 1  <- right button down.
//     Pb & 2  <- middle button down.
//     Pb & 4  <- left button down.
//     Pb & 8  <- M4 button down.
//   ``row'' and ``column'' parameters are the coordinates of the
//     locator position in the xterm window, encoded as ASCII deci-
//     mal.
//   The ``page'' parameter is not used by xterm, and will be omit-
//   ted.
Terminal.prototype.requestLocatorPosition = function(params) {
  ;
};

// CSI P m SP }
// Insert P s Column(s) (default = 1) (DECIC), VT420 and up.
// NOTE: xterm doesn't enable this code by default.
Terminal.prototype.insertColumns = function() {
  var param = params[0]
    , l = this.ybase + this.rows
    , ch = [this.eraseAttr(), ' '] // xterm?
    , i;

  while (param--) {
    for (i = this.ybase; i < l; i++) {
      this.lines[i].splice(this.x + 1, 0, ch);
      this.lines[i].pop();
    }
  }

  this.maxRange();
};

// CSI P m SP ~
// Delete P s Column(s) (default = 1) (DECDC), VT420 and up
// NOTE: xterm doesn't enable this code by default.
Terminal.prototype.deleteColumns = function() {
  var param = params[0]
    , l = this.ybase + this.rows
    , ch = [this.eraseAttr(), ' '] // xterm?
    , i;

  while (param--) {
    for (i = this.ybase; i < l; i++) {
      this.lines[i].splice(this.x, 1);
      this.lines[i].push(ch);
    }
  }

  this.maxRange();
};

/**
 * Prefix/Select/Visual/Search Modes
 */

Terminal.prototype.enterPrefix = function() {
  this.prefixMode = true;
};

Terminal.prototype.leavePrefix = function() {
  this.prefixMode = false;
};

Terminal.prototype.enterSelect = function() {
  this._real = {
    x: this.x,
    y: this.y,
    ydisp: this.ydisp,
    ybase: this.ybase,
    cursorHidden: this.cursorHidden,
    lines: this.copyBuffer(this.lines),
    write: this.write
  };
  this.write = function() {};
  this.selectMode = true;
  this.visualMode = false;
  this.cursorHidden = false;
  this.refresh(this.y, this.y);
};

Terminal.prototype.leaveSelect = function() {
  this.x = this._real.x;
  this.y = this._real.y;
  this.ydisp = this._real.ydisp;
  this.ybase = this._real.ybase;
  this.cursorHidden = this._real.cursorHidden;
  this.lines = this._real.lines;
  this.write = this._real.write;
  delete this._real;
  this.selectMode = false;
  this.visualMode = false;
  this.refresh(0, this.rows - 1);
};

Terminal.prototype.enterVisual = function() {
  this._real.preVisual = this.copyBuffer(this.lines);
  this.selectText(this.x, this.x, this.ydisp + this.y, this.ydisp + this.y);
  this.visualMode = true;
};

Terminal.prototype.leaveVisual = function() {
  this.lines = this._real.preVisual;
  delete this._real.preVisual;
  delete this._selected;
  this.visualMode = false;
  this.refresh(0, this.rows - 1);
};

Terminal.prototype.enterSearch = function(down) {
  this.entry = '';
  this.searchMode = true;
  this.searchDown = down;
  this._real.preSearch = this.copyBuffer(this.lines);
  this._real.preSearchX = this.x;
  this._real.preSearchY = this.y;

  var bottom = this.ydisp + this.rows - 1;
  for (var i = 0; i < this.entryPrefix.length; i++) {
    //this.lines[bottom][i][0] = (this.defAttr & ~0x1ff) | 4;
    //this.lines[bottom][i][1] = this.entryPrefix[i];
    this.lines[bottom][i] = [
      (this.defAttr & ~0x1ff) | 4,
      this.entryPrefix[i]
    ];
  }

  this.y = this.rows - 1;
  this.x = this.entryPrefix.length;

  this.refresh(this.rows - 1, this.rows - 1);
};

Terminal.prototype.leaveSearch = function() {
  this.searchMode = false;

  if (this._real.preSearch) {
    this.lines = this._real.preSearch;
    this.x = this._real.preSearchX;
    this.y = this._real.preSearchY;
    delete this._real.preSearch;
    delete this._real.preSearchX;
    delete this._real.preSearchY;
  }

  this.refresh(this.rows - 1, this.rows - 1);
};

Terminal.prototype.copyBuffer = function(lines) {
  var lines = lines || this.lines
    , out = [];

  for (var y = 0; y < lines.length; y++) {
    out[y] = [];
    for (var x = 0; x < lines[y].length; x++) {
      out[y][x] = [lines[y][x][0], lines[y][x][1]];
    }
  }

  return out;
};

Terminal.prototype.getCopyTextarea = function(text) {
  var textarea = this._copyTextarea
    , document = this.document;

  if (!textarea) {
    textarea = document.createElement('textarea');
    textarea.style.position = 'absolute';
    textarea.style.left = '-32000px';
    textarea.style.top = '-32000px';
    textarea.style.width = '0px';
    textarea.style.height = '0px';
    textarea.style.opacity = '0';
    textarea.style.backgroundColor = 'transparent';
    textarea.style.borderStyle = 'none';
    textarea.style.outlineStyle = 'none';

    document.getElementsByTagName('body')[0].appendChild(textarea);

    this._copyTextarea = textarea;
  }

  return textarea;
};

// NOTE: Only works for primary selection on X11.
// Non-X11 users should use Ctrl-C instead.
Terminal.prototype.copyText = function(text) {
  var self = this
    , textarea = this.getCopyTextarea();

  this.emit('copy', text);

  textarea.focus();
  textarea.textContent = text;
  textarea.value = text;
  textarea.setSelectionRange(0, text.length);

  setTimeout(function() {
    self.element.focus();
    self.focus();
  }, 1);
};

Terminal.prototype.selectText = function(x1, x2, y1, y2) {
  var ox1
    , ox2
    , oy1
    , oy2
    , tmp
    , x
    , y
    , xl
    , attr;

  if (this._selected) {
    ox1 = this._selected.x1;
    ox2 = this._selected.x2;
    oy1 = this._selected.y1;
    oy2 = this._selected.y2;

    if (oy2 < oy1) {
      tmp = ox2;
      ox2 = ox1;
      ox1 = tmp;
      tmp = oy2;
      oy2 = oy1;
      oy1 = tmp;
    }

    if (ox2 < ox1 && oy1 === oy2) {
      tmp = ox2;
      ox2 = ox1;
      ox1 = tmp;
    }

    for (y = oy1; y <= oy2; y++) {
      x = 0;
      xl = this.cols - 1;
      if (y === oy1) {
        x = ox1;
      }
      if (y === oy2) {
        xl = ox2;
      }
      for (; x <= xl; x++) {
        if (this.lines[y][x].old != null) {
          //this.lines[y][x][0] = this.lines[y][x].old;
          //delete this.lines[y][x].old;
          attr = this.lines[y][x].old;
          delete this.lines[y][x].old;
          this.lines[y][x] = [attr, this.lines[y][x][1]];
        }
      }
    }

    y1 = this._selected.y1;
    x1 = this._selected.x1;
  }

  y1 = Math.max(y1, 0);
  y1 = Math.min(y1, this.ydisp + this.rows - 1);

  y2 = Math.max(y2, 0);
  y2 = Math.min(y2, this.ydisp + this.rows - 1);

  this._selected = { x1: x1, x2: x2, y1: y1, y2: y2 };

  if (y2 < y1) {
    tmp = x2;
    x2 = x1;
    x1 = tmp;
    tmp = y2;
    y2 = y1;
    y1 = tmp;
  }

  if (x2 < x1 && y1 === y2) {
    tmp = x2;
    x2 = x1;
    x1 = tmp;
  }

  for (y = y1; y <= y2; y++) {
    x = 0;
    xl = this.cols - 1;
    if (y === y1) {
      x = x1;
    }
    if (y === y2) {
      xl = x2;
    }
    for (; x <= xl; x++) {
      //this.lines[y][x].old = this.lines[y][x][0];
      //this.lines[y][x][0] &= ~0x1ff;
      //this.lines[y][x][0] |= (0x1ff << 9) | 4;
      attr = this.lines[y][x][0];
      this.lines[y][x] = [
        (attr & ~0x1ff) | ((0x1ff << 9) | 4),
        this.lines[y][x][1]
      ];
      this.lines[y][x].old = attr;
    }
  }

  y1 = y1 - this.ydisp;
  y2 = y2 - this.ydisp;

  y1 = Math.max(y1, 0);
  y1 = Math.min(y1, this.rows - 1);

  y2 = Math.max(y2, 0);
  y2 = Math.min(y2, this.rows - 1);

  //this.refresh(y1, y2);
  this.refresh(0, this.rows - 1);
};

Terminal.prototype.grabText = function(x1, x2, y1, y2) {
  var out = ''
    , buf = ''
    , ch
    , x
    , y
    , xl
    , tmp;

  if (y2 < y1) {
    tmp = x2;
    x2 = x1;
    x1 = tmp;
    tmp = y2;
    y2 = y1;
    y1 = tmp;
  }

  if (x2 < x1 && y1 === y2) {
    tmp = x2;
    x2 = x1;
    x1 = tmp;
  }

  for (y = y1; y <= y2; y++) {
    x = 0;
    xl = this.cols - 1;
    if (y === y1) {
      x = x1;
    }
    if (y === y2) {
      xl = x2;
    }
    for (; x <= xl; x++) {
      ch = this.lines[y][x][1];
      if (ch === ' ') {
        buf += ch;
        continue;
      }
      if (buf) {
        out += buf;
        buf = '';
      }
      out += ch;
      if (isWide(ch)) x++;
    }
    buf = '';
    out += '\n';
  }

  // If we're not at the end of the
  // line, don't add a newline.
  for (x = x2, y = y2; x < this.cols; x++) {
    if (this.lines[y][x][1] !== ' ') {
      out = out.slice(0, -1);
      break;
    }
  }

  return out;
};

Terminal.prototype.keyPrefix = function(ev, key) {
  if (key === 'k' || key === '&') {
    this.destroy();
  } else if (key === 'p' || key === ']') {
    this.emit('request paste');
  } else if (key === 'c') {
    this.emit('request create');
  } else if (key >= '0' && key <= '9') {
    key = +key - 1;
    if (!~key) key = 9;
    this.emit('request term', key);
  } else if (key === 'n') {
    this.emit('request term next');
  } else if (key === 'P') {
    this.emit('request term previous');
  } else if (key === ':') {
    this.emit('request command mode');
  } else if (key === '[') {
    this.enterSelect();
  }
};

Terminal.prototype.keySelect = function(ev, key) {
  this.showCursor();

  if (this.searchMode || key === 'n' || key === 'N') {
    return this.keySearch(ev, key);
  }

  if (key === '\x04') { // ctrl-d
    var y = this.ydisp + this.y;
    if (this.ydisp === this.ybase) {
      // Mimic vim behavior
      this.y = Math.min(this.y + (this.rows - 1) / 2 | 0, this.rows - 1);
      this.refresh(0, this.rows - 1);
    } else {
      this.scrollDisp((this.rows - 1) / 2 | 0);
    }
    if (this.visualMode) {
      this.selectText(this.x, this.x, y, this.ydisp + this.y);
    }
    return;
  }

  if (key === '\x15') { // ctrl-u
    var y = this.ydisp + this.y;
    if (this.ydisp === 0) {
      // Mimic vim behavior
      this.y = Math.max(this.y - (this.rows - 1) / 2 | 0, 0);
      this.refresh(0, this.rows - 1);
    } else {
      this.scrollDisp(-(this.rows - 1) / 2 | 0);
    }
    if (this.visualMode) {
      this.selectText(this.x, this.x, y, this.ydisp + this.y);
    }
    return;
  }

  if (key === '\x06') { // ctrl-f
    var y = this.ydisp + this.y;
    this.scrollDisp(this.rows - 1);
    if (this.visualMode) {
      this.selectText(this.x, this.x, y, this.ydisp + this.y);
    }
    return;
  }

  if (key === '\x02') { // ctrl-b
    var y = this.ydisp + this.y;
    this.scrollDisp(-(this.rows - 1));
    if (this.visualMode) {
      this.selectText(this.x, this.x, y, this.ydisp + this.y);
    }
    return;
  }

  if (key === 'k' || key === '\x1b[A') {
    var y = this.ydisp + this.y;
    this.y--;
    if (this.y < 0) {
      this.y = 0;
      this.scrollDisp(-1);
    }
    if (this.visualMode) {
      this.selectText(this.x, this.x, y, this.ydisp + this.y);
    } else {
      this.refresh(this.y, this.y + 1);
    }
    return;
  }

  if (key === 'j' || key === '\x1b[B') {
    var y = this.ydisp + this.y;
    this.y++;
    if (this.y >= this.rows) {
      this.y = this.rows - 1;
      this.scrollDisp(1);
    }
    if (this.visualMode) {
      this.selectText(this.x, this.x, y, this.ydisp + this.y);
    } else {
      this.refresh(this.y - 1, this.y);
    }
    return;
  }

  if (key === 'h' || key === '\x1b[D') {
    var x = this.x;
    this.x--;
    if (this.x < 0) {
      this.x = 0;
    }
    if (this.visualMode) {
      this.selectText(x, this.x, this.ydisp + this.y, this.ydisp + this.y);
    } else {
      this.refresh(this.y, this.y);
    }
    return;
  }

  if (key === 'l' || key === '\x1b[C') {
    var x = this.x;
    this.x++;
    if (this.x >= this.cols) {
      this.x = this.cols - 1;
    }
    if (this.visualMode) {
      this.selectText(x, this.x, this.ydisp + this.y, this.ydisp + this.y);
    } else {
      this.refresh(this.y, this.y);
    }
    return;
  }

  if (key === 'v' || key === ' ') {
    if (!this.visualMode) {
      this.enterVisual();
    } else {
      this.leaveVisual();
    }
    return;
  }

  if (key === 'y') {
    if (this.visualMode) {
      var text = this.grabText(
        this._selected.x1, this._selected.x2,
        this._selected.y1, this._selected.y2);
      this.copyText(text);
      this.leaveVisual();
      // this.leaveSelect();
    }
    return;
  }

  if (key === 'q' || key === '\x1b') {
    if (this.visualMode) {
      this.leaveVisual();
    } else {
      this.leaveSelect();
    }
    return;
  }

  if (key === 'w' || key === 'W') {
    var ox = this.x;
    var oy = this.y;
    var oyd = this.ydisp;

    var x = this.x;
    var y = this.y;
    var yb = this.ydisp;
    var saw_space = false;

    for (;;) {
      var line = this.lines[yb + y];
      while (x < this.cols) {
        if (line[x][1] <= ' ') {
          saw_space = true;
        } else if (saw_space) {
          break;
        }
        x++;
      }
      if (x >= this.cols) x = this.cols - 1;
      if (x === this.cols - 1 && line[x][1] <= ' ') {
        x = 0;
        if (++y >= this.rows) {
          y--;
          if (++yb > this.ybase) {
            yb = this.ybase;
            x = this.x;
            break;
          }
        }
        continue;
      }
      break;
    }

    this.x = x, this.y = y;
    this.scrollDisp(-this.ydisp + yb);

    if (this.visualMode) {
      this.selectText(ox, this.x, oy + oyd, this.ydisp + this.y);
    }
    return;
  }

  if (key === 'b' || key === 'B') {
    var ox = this.x;
    var oy = this.y;
    var oyd = this.ydisp;

    var x = this.x;
    var y = this.y;
    var yb = this.ydisp;

    for (;;) {
      var line = this.lines[yb + y];
      var saw_space = x > 0 && line[x][1] > ' ' && line[x - 1][1] > ' ';
      while (x >= 0) {
        if (line[x][1] <= ' ') {
          if (saw_space && (x + 1 < this.cols && line[x + 1][1] > ' ')) {
            x++;
            break;
          } else {
            saw_space = true;
          }
        }
        x--;
      }
      if (x < 0) x = 0;
      if (x === 0 && (line[x][1] <= ' ' || !saw_space)) {
        x = this.cols - 1;
        if (--y < 0) {
          y++;
          if (--yb < 0) {
            yb++;
            x = 0;
            break;
          }
        }
        continue;
      }
      break;
    }

    this.x = x, this.y = y;
    this.scrollDisp(-this.ydisp + yb);

    if (this.visualMode) {
      this.selectText(ox, this.x, oy + oyd, this.ydisp + this.y);
    }
    return;
  }

  if (key === 'e' || key === 'E') {
    var x = this.x + 1;
    var y = this.y;
    var yb = this.ydisp;
    if (x >= this.cols) x--;

    for (;;) {
      var line = this.lines[yb + y];
      while (x < this.cols) {
        if (line[x][1] <= ' ') {
          x++;
        } else {
          break;
        }
      }
      while (x < this.cols) {
        if (line[x][1] <= ' ') {
          if (x - 1 >= 0 && line[x - 1][1] > ' ') {
            x--;
            break;
          }
        }
        x++;
      }
      if (x >= this.cols) x = this.cols - 1;
      if (x === this.cols - 1 && line[x][1] <= ' ') {
        x = 0;
        if (++y >= this.rows) {
          y--;
          if (++yb > this.ybase) {
            yb = this.ybase;
            break;
          }
        }
        continue;
      }
      break;
    }

    this.x = x, this.y = y;
    this.scrollDisp(-this.ydisp + yb);

    if (this.visualMode) {
      this.selectText(ox, this.x, oy + oyd, this.ydisp + this.y);
    }
    return;
  }

  if (key === '^' || key === '0') {
    var ox = this.x;

    if (key === '0') {
      this.x = 0;
    } else if (key === '^') {
      var line = this.lines[this.ydisp + this.y];
      var x = 0;
      while (x < this.cols) {
        if (line[x][1] > ' ') {
          break;
        }
        x++;
      }
      if (x >= this.cols) x = this.cols - 1;
      this.x = x;
    }

    if (this.visualMode) {
      this.selectText(ox, this.x, this.ydisp + this.y, this.ydisp + this.y);
    } else {
      this.refresh(this.y, this.y);
    }
    return;
  }

  if (key === '$') {
    var ox = this.x;
    var line = this.lines[this.ydisp + this.y];
    var x = this.cols - 1;
    while (x >= 0) {
      if (line[x][1] > ' ') {
        if (this.visualMode && x < this.cols - 1) x++;
        break;
      }
      x--;
    }
    if (x < 0) x = 0;
    this.x = x;
    if (this.visualMode) {
      this.selectText(ox, this.x, this.ydisp + this.y, this.ydisp + this.y);
    } else {
      this.refresh(this.y, this.y);
    }
    return;
  }

  if (key === 'g' || key === 'G') {
    var ox = this.x;
    var oy = this.y;
    var oyd = this.ydisp;
    if (key === 'g') {
      this.x = 0, this.y = 0;
      this.scrollDisp(-this.ydisp);
    } else if (key === 'G') {
      this.x = 0, this.y = this.rows - 1;
      this.scrollDisp(this.ybase);
    }
    if (this.visualMode) {
      this.selectText(ox, this.x, oy + oyd, this.ydisp + this.y);
    }
    return;
  }

  if (key === 'H' || key === 'M' || key === 'L') {
    var ox = this.x;
    var oy = this.y;
    if (key === 'H') {
      this.x = 0, this.y = 0;
    } else if (key === 'M') {
      this.x = 0, this.y = this.rows / 2 | 0;
    } else if (key === 'L') {
      this.x = 0, this.y = this.rows - 1;
    }
    if (this.visualMode) {
      this.selectText(ox, this.x, this.ydisp + oy, this.ydisp + this.y);
    } else {
      this.refresh(oy, oy);
      this.refresh(this.y, this.y);
    }
    return;
  }

  if (key === '{' || key === '}') {
    var ox = this.x;
    var oy = this.y;
    var oyd = this.ydisp;

    var line;
    var saw_full = false;
    var found = false;
    var first_is_space = -1;
    var y = this.y + (key === '{' ? -1 : 1);
    var yb = this.ydisp;
    var i;

    if (key === '{') {
      if (y < 0) {
        y++;
        if (yb > 0) yb--;
      }
    } else if (key === '}') {
      if (y >= this.rows) {
        y--;
        if (yb < this.ybase) yb++;
      }
    }

    for (;;) {
      line = this.lines[yb + y];

      for (i = 0; i < this.cols; i++) {
        if (line[i][1] > ' ') {
          if (first_is_space === -1) {
            first_is_space = 0;
          }
          saw_full = true;
          break;
        } else if (i === this.cols - 1) {
          if (first_is_space === -1) {
            first_is_space = 1;
          } else if (first_is_space === 0) {
            found = true;
          } else if (first_is_space === 1) {
            if (saw_full) found = true;
          }
          break;
        }
      }

      if (found) break;

      if (key === '{') {
        y--;
        if (y < 0) {
          y++;
          if (yb > 0) yb--;
          else break;
        }
      } else if (key === '}') {
        y++;
        if (y >= this.rows) {
          y--;
          if (yb < this.ybase) yb++;
          else break;
        }
      }
    }

    if (!found) {
      if (key === '{') {
        y = 0;
        yb = 0;
      } else if (key === '}') {
        y = this.rows - 1;
        yb = this.ybase;
      }
    }

    this.x = 0, this.y = y;
    this.scrollDisp(-this.ydisp + yb);

    if (this.visualMode) {
      this.selectText(ox, this.x, oy + oyd, this.ydisp + this.y);
    }
    return;
  }

  if (key === '/' || key === '?') {
    if (!this.visualMode) {
      this.enterSearch(key === '/');
    }
    return;
  }

  return false;
};

Terminal.prototype.keySearch = function(ev, key) {
  if (key === '\x1b') {
    this.leaveSearch();
    return;
  }

  if (key === '\r' || (!this.searchMode && (key === 'n' || key === 'N'))) {
    this.leaveSearch();

    var entry = this.entry;

    if (!entry) {
      this.refresh(0, this.rows - 1);
      return;
    }

    var ox = this.x;
    var oy = this.y;
    var oyd = this.ydisp;

    var line;
    var found = false;
    var wrapped = false;
    var x = this.x + 1;
    var y = this.ydisp + this.y;
    var yb, i;
    var up = key === 'N'
      ? this.searchDown
      : !this.searchDown;

    for (;;) {
      line = this.lines[y];

      while (x < this.cols) {
        for (i = 0; i < entry.length; i++) {
          if (x + i >= this.cols) break;
          if (line[x + i][1] !== entry[i]) {
            break;
          } else if (line[x + i][1] === entry[i] && i === entry.length - 1) {
            found = true;
            break;
          }
        }
        if (found) break;
        x += i + 1;
      }
      if (found) break;

      x = 0;

      if (!up) {
        y++;
        if (y > this.ybase + this.rows - 1) {
          if (wrapped) break;
          // this.setMessage('Search wrapped. Continuing at TOP.');
          wrapped = true;
          y = 0;
        }
      } else {
        y--;
        if (y < 0) {
          if (wrapped) break;
          // this.setMessage('Search wrapped. Continuing at BOTTOM.');
          wrapped = true;
          y = this.ybase + this.rows - 1;
        }
      }
    }

    if (found) {
      if (y - this.ybase < 0) {
        yb = y;
        y = 0;
        if (yb > this.ybase) {
          y = yb - this.ybase;
          yb = this.ybase;
        }
      } else {
        yb = this.ybase;
        y -= this.ybase;
      }

      this.x = x, this.y = y;
      this.scrollDisp(-this.ydisp + yb);

      if (this.visualMode) {
        this.selectText(ox, this.x, oy + oyd, this.ydisp + this.y);
      }
      return;
    }

    // this.setMessage("No matches found.");
    this.refresh(0, this.rows - 1);

    return;
  }

  if (key === '\b' || key === '\x7f') {
    if (this.entry.length === 0) return;
    var bottom = this.ydisp + this.rows - 1;
    this.entry = this.entry.slice(0, -1);
    var i = this.entryPrefix.length + this.entry.length;
    //this.lines[bottom][i][1] = ' ';
    this.lines[bottom][i] = [
      this.lines[bottom][i][0],
      ' '
    ];
    this.x--;
    this.refresh(this.rows - 1, this.rows - 1);
    this.refresh(this.y, this.y);
    return;
  }

  if (key.length === 1 && key >= ' ' && key <= '~') {
    var bottom = this.ydisp + this.rows - 1;
    this.entry += key;
    var i = this.entryPrefix.length + this.entry.length - 1;
    //this.lines[bottom][i][0] = (this.defAttr & ~0x1ff) | 4;
    //this.lines[bottom][i][1] = key;
    this.lines[bottom][i] = [
      (this.defAttr & ~0x1ff) | 4,
      key
    ];
    this.x++;
    this.refresh(this.rows - 1, this.rows - 1);
    this.refresh(this.y, this.y);
    return;
  }

  return false;
};

/**
 * Character Sets
 */

Terminal.charsets = {};

// DEC Special Character and Line Drawing Set.
// http://vt100.net/docs/vt102-ug/table5-13.html
// A lot of curses apps use this if they see TERM=xterm.
// testing: echo -e '\e(0a\e(B'
// The xterm output sometimes seems to conflict with the
// reference above. xterm seems in line with the reference
// when running vttest however.
// The table below now uses xterm's output from vttest.
Terminal.charsets.SCLD = { // (0
  '`': '\u25c6', // '◆'
  'a': '\u2592', // '▒'
  'b': '\u0009', // '\t'
  'c': '\u000c', // '\f'
  'd': '\u000d', // '\r'
  'e': '\u000a', // '\n'
  'f': '\u00b0', // '°'
  'g': '\u00b1', // '±'
  'h': '\u2424', // '\u2424' (NL)
  'i': '\u000b', // '\v'
  'j': '\u2518', // '┘'
  'k': '\u2510', // '┐'
  'l': '\u250c', // '┌'
  'm': '\u2514', // '└'
  'n': '\u253c', // '┼'
  'o': '\u23ba', // '⎺'
  'p': '\u23bb', // '⎻'
  'q': '\u2500', // '─'
  'r': '\u23bc', // '⎼'
  's': '\u23bd', // '⎽'
  't': '\u251c', // '├'
  'u': '\u2524', // '┤'
  'v': '\u2534', // '┴'
  'w': '\u252c', // '┬'
  'x': '\u2502', // '│'
  'y': '\u2264', // '≤'
  'z': '\u2265', // '≥'
  '{': '\u03c0', // 'π'
  '|': '\u2260', // '≠'
  '}': '\u00a3', // '£'
  '~': '\u00b7'  // '·'
};

Terminal.charsets.UK = null; // (A
Terminal.charsets.US = null; // (B (USASCII)
Terminal.charsets.Dutch = null; // (4
Terminal.charsets.Finnish = null; // (C or (5
Terminal.charsets.French = null; // (R
Terminal.charsets.FrenchCanadian = null; // (Q
Terminal.charsets.German = null; // (K
Terminal.charsets.Italian = null; // (Y
Terminal.charsets.NorwegianDanish = null; // (E or (6
Terminal.charsets.Spanish = null; // (Z
Terminal.charsets.Swedish = null; // (H or (7
Terminal.charsets.Swiss = null; // (=
Terminal.charsets.ISOLatin = null; // /A

/**
 * Helpers
 */

function on(el, type, handler, capture) {
  el.addEventListener(type, handler, capture || false);
}

function off(el, type, handler, capture) {
  el.removeEventListener(type, handler, capture || false);
}

function cancel(ev) {
  if (ev.preventDefault) ev.preventDefault();
  ev.returnValue = false;
  if (ev.stopPropagation) ev.stopPropagation();
  ev.cancelBubble = true;
  return false;
}

function inherits(child, parent) {
  function f() {
    this.constructor = child;
  }
  f.prototype = parent.prototype;
  child.prototype = new f;
}

// if bold is broken, we can't
// use it in the terminal.
function isBoldBroken(document) {
  var body = document.getElementsByTagName('body')[0];
  var el = document.createElement('span');
  el.innerHTML = 'hello world';
  body.appendChild(el);
  var w1 = el.scrollWidth;
  el.style.fontWeight = 'bold';
  var w2 = el.scrollWidth;
  body.removeChild(el);
  return w1 !== w2;
}

var String = this.String;
var setTimeout = this.setTimeout;
var setInterval = this.setInterval;

function indexOf(obj, el) {
  var i = obj.length;
  while (i--) {
    if (obj[i] === el) return i;
  }
  return -1;
}

function isWide(ch) {
  if (ch <= '\uff00') return false;
  return (ch >= '\uff01' && ch <= '\uffbe')
      || (ch >= '\uffc2' && ch <= '\uffc7')
      || (ch >= '\uffca' && ch <= '\uffcf')
      || (ch >= '\uffd2' && ch <= '\uffd7')
      || (ch >= '\uffda' && ch <= '\uffdc')
      || (ch >= '\uffe0' && ch <= '\uffe6')
      || (ch >= '\uffe8' && ch <= '\uffee');
}

function matchColor(r1, g1, b1) {
  var hash = (r1 << 16) | (g1 << 8) | b1;

  if (matchColor._cache[hash] != null) {
    return matchColor._cache[hash];
  }

  var ldiff = Infinity
    , li = -1
    , i = 0
    , c
    , r2
    , g2
    , b2
    , diff;

  for (; i < Terminal.vcolors.length; i++) {
    c = Terminal.vcolors[i];
    r2 = c[0];
    g2 = c[1];
    b2 = c[2];

    diff = matchColor.distance(r1, g1, b1, r2, g2, b2);

    if (diff === 0) {
      li = i;
      break;
    }

    if (diff < ldiff) {
      ldiff = diff;
      li = i;
    }
  }

  return matchColor._cache[hash] = li;
}

matchColor._cache = {};

// http://stackoverflow.com/questions/1633828
matchColor.distance = function(r1, g1, b1, r2, g2, b2) {
  return Math.pow(30 * (r1 - r2), 2)
    + Math.pow(59 * (g1 - g2), 2)
    + Math.pow(11 * (b1 - b2), 2);
};

function each(obj, iter, con) {
  if (obj.forEach) return obj.forEach(iter, con);
  for (var i = 0; i < obj.length; i++) {
    iter.call(con, obj[i], i, obj);
  }
}

function keys(obj) {
  if (Object.keys) return Object.keys(obj);
  var key, keys = [];
  for (key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      keys.push(key);
    }
  }
  return keys;
}

/**
 * Expose
 */

Terminal.EventEmitter = EventEmitter;
Terminal.inherits = inherits;
Terminal.on = on;
Terminal.off = off;
Terminal.cancel = cancel;

if (typeof module !== 'undefined') {
  module.exports = Terminal;
} else {
  this.Terminal = Terminal;
}

}).call(function() {
  return this || (typeof window !== 'undefined' ? window : global);
}());

define("term", function(){});

define('experiments/controllers/TerminalController',["../../reactive/EventBus", "term"], function($__0,$__1) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__1 || !$__1.__esModule)
    $__1 = {default: $__1};
  $__0;
  $__1;
  var TerminalController = function TerminalController($scope, $stateParams, $eventBus) {
    var $__2 = this;
    this.term = new Terminal({
      cols: 150,
      rows: 35,
      useStyle: true,
      screenKeys: true,
      cursorBlink: true
    });
    this.term.on('title', function(title) {
      document.title = title;
    });
    var divTerminal = document.getElementById('terminal');
    this.term.open(divTerminal);
    this.term.write('\x1b[31mWelcome to term.js!\x1b[m\r\n');
    this.term.on('data', (function(data) {
      $eventBus.publish(("/app/terminal/input/" + $stateParams.containerId), data);
    }));
    var onLogMessage = (function(log) {
      $__2.term.write(JSON.parse(log.body) + '\r\n');
    });
    var onLogError = (function(log) {
      $__2.term.write('\x1b[31m' + JSON.parse(log.body) + '\x1b[m\r\n');
    });
    var onKeyStroke = (function(log) {
      $__2.term.write(JSON.parse(log.body));
    });
    $eventBus.registerHandler('/topic/terminal/log', onLogMessage);
    $eventBus.registerHandler('/topic/terminal/error', onLogError);
    $eventBus.registerHandler(("/user/queue/terminal/input/" + $stateParams.containerId), onKeyStroke);
    $scope.$on('$destroy', (function() {
      $eventBus.unregisterHandler('/topic/terminal/log');
      $eventBus.unregisterHandler('/topic/terminal/error');
      $eventBus.unregisterHandler('/user/queue/terminal/input');
      $__2.term.destroy();
    }));
  };
  ($traceurRuntime.createClass)(TerminalController, {}, {});
  var $__default = TerminalController;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('experiments/services/PrimeGenerator',[], function() {
  
  
  var $__7 = $traceurRuntime.initGeneratorFunction(numbers),
      $__8 = $traceurRuntime.initGeneratorFunction(take),
      $__9 = $traceurRuntime.initGeneratorFunction(filter),
      $__10 = $traceurRuntime.initGeneratorFunction(primes);
  function numbers(start) {
    return $traceurRuntime.createGeneratorInstance(function($ctx) {
      while (true)
        switch ($ctx.state) {
          case 0:
            $ctx.state = (true) ? 1 : -2;
            break;
          case 1:
            $ctx.state = 2;
            return start++;
          case 2:
            $ctx.maybeThrow();
            $ctx.state = 0;
            break;
          default:
            return $ctx.end();
        }
    }, $__7, this);
  }
  function take(count, seq) {
    var i;
    return $traceurRuntime.createGeneratorInstance(function($ctx) {
      while (true)
        switch ($ctx.state) {
          case 0:
            i = 0;
            $ctx.state = 7;
            break;
          case 7:
            $ctx.state = (i < count) ? 1 : -2;
            break;
          case 4:
            i++;
            $ctx.state = 7;
            break;
          case 1:
            $ctx.state = 2;
            return seq.next().value;
          case 2:
            $ctx.maybeThrow();
            $ctx.state = 4;
            break;
          default:
            return $ctx.end();
        }
    }, $__8, this);
  }
  function filter(seq, prime) {
    var $__3,
        $__4,
        $__5,
        $__1,
        $__0,
        num,
        $__6;
    return $traceurRuntime.createGeneratorInstance(function($ctx) {
      while (true)
        switch ($ctx.state) {
          case 0:
            $__3 = true;
            $__4 = false;
            $__5 = undefined;
            $ctx.state = 25;
            break;
          case 25:
            $ctx.pushTry(11, 12);
            $ctx.state = 14;
            break;
          case 14:
            $__1 = void 0, $__0 = (seq)[$traceurRuntime.toProperty(Symbol.iterator)]();
            $ctx.state = 10;
            break;
          case 10:
            $ctx.state = (!($__3 = ($__1 = $__0.next()).done)) ? 6 : 8;
            break;
          case 4:
            $__3 = true;
            $ctx.state = 10;
            break;
          case 6:
            num = $__1.value;
            $ctx.state = 7;
            break;
          case 7:
            $ctx.state = (num % prime !== 0) ? 1 : 4;
            break;
          case 1:
            $ctx.state = 2;
            return num;
          case 2:
            $ctx.maybeThrow();
            $ctx.state = 4;
            break;
          case 8:
            $ctx.popTry();
            $ctx.state = 12;
            $ctx.finallyFallThrough = -2;
            break;
          case 11:
            $ctx.popTry();
            $ctx.maybeUncatchable();
            $__6 = $ctx.storedException;
            $ctx.state = 17;
            break;
          case 17:
            $__4 = true;
            $__5 = $__6;
            $ctx.state = 12;
            $ctx.finallyFallThrough = -2;
            break;
          case 12:
            $ctx.popTry();
            $ctx.state = 23;
            break;
          case 23:
            try {
              if (!$__3 && $__0.return != null) {
                $__0.return();
              }
            } finally {
              if ($__4) {
                throw $__5;
              }
            }
            $ctx.state = 21;
            break;
          case 21:
            $ctx.state = $ctx.finallyFallThrough;
            break;
          default:
            return $ctx.end();
        }
    }, $__9, this);
  }
  function primes() {
    var seq,
        prime;
    return $traceurRuntime.createGeneratorInstance(function($ctx) {
      while (true)
        switch ($ctx.state) {
          case 0:
            seq = numbers(2);
            $ctx.state = 11;
            break;
          case 11:
            $ctx.state = (true) ? 5 : -2;
            break;
          case 5:
            prime = seq.next().value;
            $ctx.state = 6;
            break;
          case 6:
            $ctx.state = 2;
            return prime;
          case 2:
            $ctx.maybeThrow();
            $ctx.state = 4;
            break;
          case 4:
            seq = filter(seq, prime);
            $ctx.state = 11;
            break;
          default:
            return $ctx.end();
        }
    }, $__10, this);
  }
  return {
    get take() {
      return take;
    },
    get primes() {
      return primes;
    },
    __esModule: true
  };
});

define('experiments/controllers/ExperimentController',["diary", "../services/PrimeGenerator"], function($__0,$__2) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__2 || !$__2.__esModule)
    $__2 = {default: $__2};
  var Diary = $__0.Diary;
  var $__3 = $__2,
      take = $__3.take,
      primes = $__3.primes;
  var ExperimentController = function ExperimentController($http, $q, $scope, EmailService, UserService, DrugRestangular) {
    var $__4 = this;
    this.logger = Diary.logger('ExperimentController');
    this.logger.info('in ExperimentController....');
    EmailService.content = 'Greeting !';
    $scope.user = {
      name: 'awesome user',
      dob: new Date(1984, 4, 15)
    };
    $scope.sendEmail = (function(recipient) {
      var p = $q.when(EmailService.send(recipient));
      p.then((function(body) {
        $scope.output = body;
      })).catch((function(err) {
        $scope.output = err;
      }));
    });
    $scope.test403 = (function() {
      DrugRestangular.all('drugs/test403').getList().then(function(data) {
        $scope.output = data;
      });
    });
    $scope.genPrime = (function() {
      var max = arguments[0] !== (void 0) ? arguments[0] : 10;
      $scope.output = '';
      var $__9 = true;
      var $__10 = false;
      var $__11 = undefined;
      try {
        for (var $__7 = void 0,
            $__6 = (take(max, primes()))[$traceurRuntime.toProperty(Symbol.iterator)](); !($__9 = ($__7 = $__6.next()).done); $__9 = true) {
          var prime = $__7.value;
          {
            $scope.output += ', ' + prime;
          }
        }
      } catch ($__12) {
        $__10 = true;
        $__11 = $__12;
      } finally {
        try {
          if (!$__9 && $__6.return != null) {
            $__6.return();
          }
        } finally {
          if ($__10) {
            throw $__11;
          }
        }
      }
    });
    $scope.currentUser = (function() {
      UserService.currentUser().then((function(user) {
        $scope.output = user;
      })).catch((function(err) {
        $__4.logger.error(err);
        $scope.output = err;
      }));
    });
    $scope.clearUser = function() {
      UserService.clear();
    };
  };
  ($traceurRuntime.createClass)(ExperimentController, {}, {});
  var $__default = ExperimentController;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('experiments/controllers/ElementsController',[], function() {
  
  var ElementsController = function ElementsController($scope) {
    var $__0 = this;
    console.info('in ElementsController....');
    $scope.news = [{
      news: 'news1',
      breaking: false
    }, {
      news: 'news2',
      breaking: true
    }, {
      news: 'news3',
      breaking: false
    }, {
      news: 'news4',
      breaking: false
    }, {
      news: 'news5',
      breaking: true
    }, {
      news: 'news6',
      breaking: false
    }, {
      news: 'news7',
      breaking: false
    }];
    $scope.supportsWebComponents = (function() {
      console.log('test:', $__0.supportsTemplate(), $__0.supportsImports(), $__0.supportsCustomElements());
      if ($__0.supportsTemplate() && $__0.supportsImports() && $__0.supportsCustomElements()) {
        return 3;
      } else if ($__0.supportsTemplate() && $__0.supportsImports()) {
        return 2;
      } else if ($__0.supportsTemplate()) {
        return 1;
      } else {
        return 0;
      }
    });
  };
  ($traceurRuntime.createClass)(ElementsController, {
    supportsTemplate: function() {
      return 'content' in document.createElement('template');
    },
    supportsImports: function() {
      return 'import' in document.createElement('link');
    },
    supportsCustomElements: function() {
      return 'registerElement' in document;
    }
  }, {});
  var $__default = ElementsController;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('experiments/controllers/GrowlTranslateDemoController',["diary"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var Diary = $__0.Diary;
  var GrowlTranslateDemoController = function GrowlTranslateDemoController($scope, growl, $translate, AuthorizationService) {
    var $__2 = this;
    this.logger = Diary.logger('GrowlTranslateDemoController');
    $scope.setLang = function(langKey) {
      $translate.use(langKey);
    };
    $scope.addTranslatedMessage = (function() {
      growl.success('LOGIN_SUCCESS');
      growl.error('LOGOUT_SUCCESS');
      growl.warning('Override global <strong>ttl</strong> setting', {ttl: 10000});
    });
    $scope.addErrorMessage = (function() {
      growl.error('This adds a error message');
    });
    $scope.addWarnMessage = (function() {
      growl.warning("This adds a warn message", {title: 'Warning!'});
    });
    $scope.addInfoMessage = (function() {
      growl.info("This adds a info message with title", {title: 'Info!'});
      AuthorizationService.isAuthorized1(['ROLE_USER']).then((function(isAuthz) {
        $__2.logger.info(("User has ROLE_USER role? " + isAuthz));
      }));
    });
    $scope.addSuccessMessage = (function() {
      growl.success('This adds a success message');
    });
  };
  ($traceurRuntime.createClass)(GrowlTranslateDemoController, {}, {});
  var $__default = GrowlTranslateDemoController;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('experiments/controllers/IoTController',["http://api.pinocc.io/pinoccio.js"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var pinoccio = $__0.default;
  var IoTController = function IoTController($scope, growl) {
    var $__2 = this;
    var api = pinoccioAPI('7c36027c5769eb9c659828958ed126bb');
    var syncStream = api.sync({stale: 1});
    syncStream.on('data', (function(data) {
      console.log('data', data);
      growl.info(("type: " + data.type + ", scout: " + data.scout + ", value: " + data.value), {
        title: data.type,
        ttl: 10000
      });
      if (data.type === 'temp' && data.troop === '1' && data.scout === '4') {
        $scope.$apply((function() {
          $__2.temp = data.value.c;
        }));
      }
      if (data.type === 'announce' && data.troop === '1' && data.scout === '4') {
        growl.error(data.value.report[1], {
          title: data.type,
          ttl: 40000
        });
      }
    }));
  };
  ($traceurRuntime.createClass)(IoTController, {}, {});
  var $__default = IoTController;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('reactive/Observable',[], function() {
  
  var generator = Symbol();
  var onDone = Symbol();
  var DecoratedGenerator = function DecoratedGenerator(_generator, _onDone) {
    this[generator] = _generator;
    this[onDone] = _onDone;
  };
  ($traceurRuntime.createClass)(DecoratedGenerator, {
    next: function(value) {
      var result = this[generator].next(value);
      if (result !== undefined && result.done) {
        this[onDone].call(this);
      }
      return result;
    },
    throw: function(error) {
      this[onDone].call(this);
      return this[generator].throw(error);
    },
    return: function(value) {
      this[onDone].call(this);
      return this[generator].return(value);
    }
  }, {});
  var Observable = function Observable(observe) {
    this[Symbol.observer] = observe;
  };
  var $Observable = Observable;
  ($traceurRuntime.createClass)(Observable, {}, {fromEvent: function(element, type) {
      return new $Observable(function(generator) {
        var decoratedGenerator = new DecoratedGenerator(generator, (function() {
          return element.removeEventListener(type, handler);
        }));
        var handler = (function(event) {
          return decoratedGenerator.next(event);
        });
        element.addEventListener(type, handler);
        return decoratedGenerator;
      });
    }});
  var $__default = Observable;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('experiments/controllers/AsyncController',["../../reactive/Observable"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var Observable = $__0.default;
  var AsyncController = function AsyncController($scope) {
    var $__4 = $traceurRuntime.initAsyncGeneratorFunction(coordinates);
    var $__2 = this;
    function coordinates() {
      return $traceurRuntime.createAsyncGeneratorInstance(function($__5) {
        var $__7;
        return $traceurRuntime.asyncWrap(function($ctx) {
          while (true)
            switch ($ctx.state) {
              case 0:
                $__7 = (void 0);
                $ctx.state = 11;
                break;
              case 11:
                Promise.resolve($traceurRuntime.observeForEach(Observable.fromEvent(window, 'mousemove')[$traceurRuntime.toProperty(Symbol.observer)].bind(Observable.fromEvent(window, 'mousemove')), function($__8) {
                  var $__6,
                      event;
                  return $traceurRuntime.asyncWrap(function($ctx) {
                    while (true)
                      switch ($ctx.state) {
                        case 0:
                          $__6 = this;
                          try {
                            event = $__8;
                            $__5.yield({
                              x: event.clientX,
                              y: event.clientY
                            });
                          } catch (e) {
                            $__6.throw(e);
                          }
                          $ctx.state = -2;
                          break;
                        default:
                          return $ctx.end();
                      }
                  }, this);
                })).then($ctx.createCallback(2), $ctx.errback);
                return ;
              case 2:
                switch ($__7) {
                  case (void 0):
                    $ctx.state = 9;
                    break;
                  default:
                    $ctx.state = 5;
                    break;
                }
                break;
              case 6:
                $ctx.state = -2;
                break;
              case 5:
                $ctx.returnValue = $__7.v;
                $ctx.state = 6;
                break;
              case 9:
                $ctx.state = (false) ? 0 : -2;
                break;
              default:
                return $ctx.end();
            }
        }, this);
      }, $__4);
    }
    ((function() {
      var $__7;
      return $traceurRuntime.asyncWrap(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $__7 = (void 0);
              $ctx.state = 11;
              break;
            case 11:
              Promise.resolve($traceurRuntime.observeForEach(coordinates()[$traceurRuntime.toProperty(Symbol.observer)].bind(coordinates()), function($__8) {
                var $__6,
                    $__9,
                    x,
                    y;
                return $traceurRuntime.asyncWrap(function($ctx) {
                  while (true)
                    switch ($ctx.state) {
                      case 0:
                        $__6 = this;
                        try {
                          $__9 = $__8, x = $__9.x, y = $__9.y;
                          $scope.$apply((function() {
                            $__2.move = {
                              x: x,
                              y: y
                            };
                          }));
                        } catch (e) {
                          $__6.throw(e);
                        }
                        $ctx.state = -2;
                        break;
                      default:
                        return $ctx.end();
                    }
                }, this);
              })).then($ctx.createCallback(2), $ctx.errback);
              return ;
            case 2:
              switch ($__7) {
                case (void 0):
                  $ctx.state = 9;
                  break;
                default:
                  $ctx.state = 5;
                  break;
              }
              break;
            case 6:
              $ctx.state = -2;
              break;
            case 5:
              $ctx.returnValue = $__7.v;
              $ctx.state = 6;
              break;
            case 9:
              $ctx.state = (false) ? 0 : -2;
              break;
            default:
              return $ctx.end();
          }
      }, this);
    }))();
  };
  ($traceurRuntime.createClass)(AsyncController, {}, {});
  var $__default = AsyncController;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('experiments/elements/myElement/MyElement',["../../../common/utils/util", "diary"], function($__0,$__2) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__2 || !$__2.__esModule)
    $__2 = {default: $__2};
  var $__1 = $__0,
      loadDOMFromString = $__1.loadDOMFromString,
      loadDOMFromLink = $__1.loadDOMFromLink;
  var Diary = $__2.Diary;
  var _count = Symbol('count', true);
  var _max = Symbol('max', true);
  var MyElement = function MyElement() {
    $traceurRuntime.superConstructor($MyElement).apply(this, arguments);
  };
  var $MyElement = MyElement;
  ($traceurRuntime.createClass)(MyElement, {
    createdCallback: function() {
      var max = arguments[0] !== (void 0) ? arguments[0] : 10;
      var startCount = arguments[1] !== (void 0) ? arguments[1] : 0;
      var $__4 = this;
      this.logger = Diary.logger('MyElement');
      this.max = this.getAttribute('max') || max;
      this[_count] = this.getAttribute('startCount') || startCount;
      this.innerHTML = ("Using StartCount:<b>" + this[_count] + "</b> and Max: <b>" + this[_max] + "</b><br/>");
      this.addEventListener('click', (function(e) {
        $__4[_count]++;
        $__4.logger.info(("_count: " + $__4[_count]));
      }));
      this.addEventListener('dblclick', (function(e) {
        $__4.logger.info(("isMax: " + $__4.isMax));
      }));
      var root = this.createShadowRoot();
      var templatePromise = loadDOMFromLink('experiments/elements/myElement/my-element.tpl.html');
      templatePromise.then((function(importedDoc) {
        var myElementTemplate = importedDoc.querySelector('#my-element-template');
        {
          var clone = myElementTemplate.content.cloneNode(true);
          var model = {
            'Twitter': '@jdcravens',
            'Facebook': 'jesse.cravens',
            'LinkedIn': 'jessecravens',
            'Github': 'jessecravens'
          };
          myElementTemplate.model = model;
          root.appendChild(clone);
        }
      })).catch(console.log.bind(console));
    },
    get isMax() {
      return this[_count] > this[_max];
    },
    set max(value) {
      if (value < 0) {
        throw new Error('Max must be non-negative.');
      }
      this[_max] = value;
    },
    doStuff: function() {}
  }, {}, HTMLElement);
  var $__default = MyElement;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('experiments/elements/customButton/CustomButton',[], function() {
  
  var CustomButtonPrototype = Object.create(HTMLButtonElement.prototype);
  CustomButtonPrototype.createdCallback = function() {
    
    this.textContent = 'I am a custom button!';
  };
  var $__default = {
    prototype: CustomButtonPrototype,
    extends: 'button'
  };
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('experiments/elements/myNews/MyNews',["../../../common/utils/util"], function($__0) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  var $__1 = $__0,
      loadDOMFromString = $__1.loadDOMFromString,
      loadDOMFromLink = $__1.loadDOMFromLink;
  var MyNews = function MyNews() {
    $traceurRuntime.superConstructor($MyNews).apply(this, arguments);
  };
  var $MyNews = MyNews;
  ($traceurRuntime.createClass)(MyNews, {createdCallback: function() {
      var root = this.createShadowRoot();
      var templatePromise = loadDOMFromLink('experiments/elements/myNews/my-news.tpl.html');
      templatePromise.then((function(template) {
        var t = template.querySelector('#t');
        root.appendChild(t.content.cloneNode(true));
        var ticker = root.querySelector('#ticker');
        ticker.pseudo = 'x-ticker';
        var s = ticker.createShadowRoot();
        var u = template.querySelector('#u');
        s.appendChild(u.content.cloneNode(true));
      }));
    }}, {}, HTMLElement);
  var $__default = MyNews;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('experiments/elements/highlighter',[], function() {
  
  
  function highlighter($animate, $timeout) {
    return {
      restrict: 'A',
      link: function(scope, element, attrs) {
        scope.$watch(attrs.highlighter, function(nv, ov) {
          if (nv !== ov) {
            var add = nv > ov ? attrs.upClass : attrs.downClass;
            var remove = nv > ov ? attrs.downClass : attrs.upClass;
            element.removeClass(remove);
            $timeout(function() {
              element.addClass(add);
            }, 1000);
          }
        });
      }
    };
  }
  var $__default = highlighter;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('experiments/index',["./routes", "./services/EmailService", "./controllers/TodoController", "./controllers/MessagingController", "./controllers/TerminalController", "./controllers/ExperimentController", "./controllers/ElementsController", "./controllers/GrowlTranslateDemoController", "./controllers/IoTController", "./controllers/AsyncController", "./elements/myElement/MyElement", "./elements/customButton/CustomButton", "./elements/myNews/MyNews", "./elements/highlighter"], function($__0,$__2,$__4,$__6,$__8,$__10,$__12,$__14,$__16,$__18,$__20,$__22,$__24,$__26) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__2 || !$__2.__esModule)
    $__2 = {default: $__2};
  if (!$__4 || !$__4.__esModule)
    $__4 = {default: $__4};
  if (!$__6 || !$__6.__esModule)
    $__6 = {default: $__6};
  if (!$__8 || !$__8.__esModule)
    $__8 = {default: $__8};
  if (!$__10 || !$__10.__esModule)
    $__10 = {default: $__10};
  if (!$__12 || !$__12.__esModule)
    $__12 = {default: $__12};
  if (!$__14 || !$__14.__esModule)
    $__14 = {default: $__14};
  if (!$__16 || !$__16.__esModule)
    $__16 = {default: $__16};
  if (!$__18 || !$__18.__esModule)
    $__18 = {default: $__18};
  if (!$__20 || !$__20.__esModule)
    $__20 = {default: $__20};
  if (!$__22 || !$__22.__esModule)
    $__22 = {default: $__22};
  if (!$__24 || !$__24.__esModule)
    $__24 = {default: $__24};
  if (!$__26 || !$__26.__esModule)
    $__26 = {default: $__26};
  var routes = $__0.default;
  var EmailService = $__2.default;
  var TodoController = $__4.default;
  var MessagingController = $__6.default;
  var TerminalController = $__8.default;
  var ExperimentController = $__10.default;
  var ElementsController = $__12.default;
  var GrowlTranslateDemoController = $__14.default;
  var IoTController = $__16.default;
  var AsyncController = $__18.default;
  var MyElement = $__20.default;
  var CustomButton = $__22.default;
  var MyNews = $__24.default;
  var highlighter = $__26.default;
  var moduleName = 'spaApp.experiments';
  var experimentsModule = angular.module(moduleName, []);
  experimentsModule.service('EmailService', EmailService);
  experimentsModule.directive('highlighter', highlighter);
  experimentsModule.controller('TodoController', TodoController);
  experimentsModule.controller('MessagingController', MessagingController);
  experimentsModule.controller('TerminalController', TerminalController);
  experimentsModule.controller('ExperimentController', ExperimentController);
  experimentsModule.controller('ElementsController', ElementsController);
  experimentsModule.controller('GrowlTranslateDemoController', GrowlTranslateDemoController);
  experimentsModule.controller('IoTController', IoTController);
  experimentsModule.controller('AsyncController', AsyncController);
  experimentsModule.config(routes);
  if ('registerElement' in document) {
    document.registerElement('my-element', MyElement);
    document.registerElement('custom-button', CustomButton);
    document.registerElement('my-news', MyNews);
  }
  var $__default = moduleName;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

/**
 * @license AngularJS v1.4.0-build.3851+sha.ec27ce7
 * (c) 2010-2015 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {



/**
 * @ngdoc object
 * @name angular.mock
 * @description
 *
 * Namespace from 'angular-mocks.js' which contains testing related code.
 */
angular.mock = {};

/**
 * ! This is a private undocumented service !
 *
 * @name $browser
 *
 * @description
 * This service is a mock implementation of {@link ng.$browser}. It provides fake
 * implementation for commonly used browser apis that are hard to test, e.g. setTimeout, xhr,
 * cookies, etc...
 *
 * The api of this service is the same as that of the real {@link ng.$browser $browser}, except
 * that there are several helper methods available which can be used in tests.
 */
angular.mock.$BrowserProvider = function() {
  this.$get = function() {
    return new angular.mock.$Browser();
  };
};

angular.mock.$Browser = function() {
  var self = this;

  this.isMock = true;
  self.$$url = "http://server/";
  self.$$lastUrl = self.$$url; // used by url polling fn
  self.pollFns = [];

  // TODO(vojta): remove this temporary api
  self.$$completeOutstandingRequest = angular.noop;
  self.$$incOutstandingRequestCount = angular.noop;


  // register url polling fn

  self.onUrlChange = function(listener) {
    self.pollFns.push(
      function() {
        if (self.$$lastUrl !== self.$$url || self.$$state !== self.$$lastState) {
          self.$$lastUrl = self.$$url;
          self.$$lastState = self.$$state;
          listener(self.$$url, self.$$state);
        }
      }
    );

    return listener;
  };

  self.$$checkUrlChange = angular.noop;

  self.cookieHash = {};
  self.lastCookieHash = {};
  self.deferredFns = [];
  self.deferredNextId = 0;

  self.defer = function(fn, delay) {
    delay = delay || 0;
    self.deferredFns.push({time:(self.defer.now + delay), fn:fn, id: self.deferredNextId});
    self.deferredFns.sort(function(a, b) { return a.time - b.time;});
    return self.deferredNextId++;
  };


  /**
   * @name $browser#defer.now
   *
   * @description
   * Current milliseconds mock time.
   */
  self.defer.now = 0;


  self.defer.cancel = function(deferId) {
    var fnIndex;

    angular.forEach(self.deferredFns, function(fn, index) {
      if (fn.id === deferId) fnIndex = index;
    });

    if (fnIndex !== undefined) {
      self.deferredFns.splice(fnIndex, 1);
      return true;
    }

    return false;
  };


  /**
   * @name $browser#defer.flush
   *
   * @description
   * Flushes all pending requests and executes the defer callbacks.
   *
   * @param {number=} number of milliseconds to flush. See {@link #defer.now}
   */
  self.defer.flush = function(delay) {
    if (angular.isDefined(delay)) {
      self.defer.now += delay;
    } else {
      if (self.deferredFns.length) {
        self.defer.now = self.deferredFns[self.deferredFns.length - 1].time;
      } else {
        throw new Error('No deferred tasks to be flushed');
      }
    }

    while (self.deferredFns.length && self.deferredFns[0].time <= self.defer.now) {
      self.deferredFns.shift().fn();
    }
  };

  self.$$baseHref = '/';
  self.baseHref = function() {
    return this.$$baseHref;
  };
};
angular.mock.$Browser.prototype = {

/**
  * @name $browser#poll
  *
  * @description
  * run all fns in pollFns
  */
  poll: function poll() {
    angular.forEach(this.pollFns, function(pollFn) {
      pollFn();
    });
  },

  addPollFn: function(pollFn) {
    this.pollFns.push(pollFn);
    return pollFn;
  },

  url: function(url, replace, state) {
    if (angular.isUndefined(state)) {
      state = null;
    }
    if (url) {
      this.$$url = url;
      // Native pushState serializes & copies the object; simulate it.
      this.$$state = angular.copy(state);
      return this;
    }

    return this.$$url;
  },

  state: function() {
    return this.$$state;
  },

  cookies:  function(name, value) {
    if (name) {
      if (angular.isUndefined(value)) {
        delete this.cookieHash[name];
      } else {
        if (angular.isString(value) &&       //strings only
            value.length <= 4096) {          //strict cookie storage limits
          this.cookieHash[name] = value;
        }
      }
    } else {
      if (!angular.equals(this.cookieHash, this.lastCookieHash)) {
        this.lastCookieHash = angular.copy(this.cookieHash);
        this.cookieHash = angular.copy(this.cookieHash);
      }
      return this.cookieHash;
    }
  },

  notifyWhenNoOutstandingRequests: function(fn) {
    fn();
  }
};


/**
 * @ngdoc provider
 * @name $exceptionHandlerProvider
 *
 * @description
 * Configures the mock implementation of {@link ng.$exceptionHandler} to rethrow or to log errors
 * passed to the `$exceptionHandler`.
 */

/**
 * @ngdoc service
 * @name $exceptionHandler
 *
 * @description
 * Mock implementation of {@link ng.$exceptionHandler} that rethrows or logs errors passed
 * to it. See {@link ngMock.$exceptionHandlerProvider $exceptionHandlerProvider} for configuration
 * information.
 *
 *
 * ```js
 *   describe('$exceptionHandlerProvider', function() {
 *
 *     it('should capture log messages and exceptions', function() {
 *
 *       module(function($exceptionHandlerProvider) {
 *         $exceptionHandlerProvider.mode('log');
 *       });
 *
 *       inject(function($log, $exceptionHandler, $timeout) {
 *         $timeout(function() { $log.log(1); });
 *         $timeout(function() { $log.log(2); throw 'banana peel'; });
 *         $timeout(function() { $log.log(3); });
 *         expect($exceptionHandler.errors).toEqual([]);
 *         expect($log.assertEmpty());
 *         $timeout.flush();
 *         expect($exceptionHandler.errors).toEqual(['banana peel']);
 *         expect($log.log.logs).toEqual([[1], [2], [3]]);
 *       });
 *     });
 *   });
 * ```
 */

angular.mock.$ExceptionHandlerProvider = function() {
  var handler;

  /**
   * @ngdoc method
   * @name $exceptionHandlerProvider#mode
   *
   * @description
   * Sets the logging mode.
   *
   * @param {string} mode Mode of operation, defaults to `rethrow`.
   *
   *   - `log`: Sometimes it is desirable to test that an error is thrown, for this case the `log`
   *            mode stores an array of errors in `$exceptionHandler.errors`, to allow later
   *            assertion of them. See {@link ngMock.$log#assertEmpty assertEmpty()} and
   *            {@link ngMock.$log#reset reset()}
   *   - `rethrow`: If any errors are passed to the handler in tests, it typically means that there
   *                is a bug in the application or test, so this mock will make these tests fail.
   *                For any implementations that expect exceptions to be thrown, the `rethrow` mode
   *                will also maintain a log of thrown errors.
   */
  this.mode = function(mode) {

    switch (mode) {
      case 'log':
      case 'rethrow':
        var errors = [];
        handler = function(e) {
          if (arguments.length == 1) {
            errors.push(e);
          } else {
            errors.push([].slice.call(arguments, 0));
          }
          if (mode === "rethrow") {
            throw e;
          }
        };
        handler.errors = errors;
        break;
      default:
        throw new Error("Unknown mode '" + mode + "', only 'log'/'rethrow' modes are allowed!");
    }
  };

  this.$get = function() {
    return handler;
  };

  this.mode('rethrow');
};


/**
 * @ngdoc service
 * @name $log
 *
 * @description
 * Mock implementation of {@link ng.$log} that gathers all logged messages in arrays
 * (one array per logging level). These arrays are exposed as `logs` property of each of the
 * level-specific log function, e.g. for level `error` the array is exposed as `$log.error.logs`.
 *
 */
angular.mock.$LogProvider = function() {
  var debug = true;

  function concat(array1, array2, index) {
    return array1.concat(Array.prototype.slice.call(array2, index));
  }

  this.debugEnabled = function(flag) {
    if (angular.isDefined(flag)) {
      debug = flag;
      return this;
    } else {
      return debug;
    }
  };

  this.$get = function() {
    var $log = {
      log: function() { $log.log.logs.push(concat([], arguments, 0)); },
      warn: function() { $log.warn.logs.push(concat([], arguments, 0)); },
      info: function() { $log.info.logs.push(concat([], arguments, 0)); },
      error: function() { $log.error.logs.push(concat([], arguments, 0)); },
      debug: function() {
        if (debug) {
          $log.debug.logs.push(concat([], arguments, 0));
        }
      }
    };

    /**
     * @ngdoc method
     * @name $log#reset
     *
     * @description
     * Reset all of the logging arrays to empty.
     */
    $log.reset = function() {
      /**
       * @ngdoc property
       * @name $log#log.logs
       *
       * @description
       * Array of messages logged using {@link ng.$log#log `log()`}.
       *
       * @example
       * ```js
       * $log.log('Some Log');
       * var first = $log.log.logs.unshift();
       * ```
       */
      $log.log.logs = [];
      /**
       * @ngdoc property
       * @name $log#info.logs
       *
       * @description
       * Array of messages logged using {@link ng.$log#info `info()`}.
       *
       * @example
       * ```js
       * $log.info('Some Info');
       * var first = $log.info.logs.unshift();
       * ```
       */
      $log.info.logs = [];
      /**
       * @ngdoc property
       * @name $log#warn.logs
       *
       * @description
       * Array of messages logged using {@link ng.$log#warn `warn()`}.
       *
       * @example
       * ```js
       * $log.warn('Some Warning');
       * var first = $log.warn.logs.unshift();
       * ```
       */
      $log.warn.logs = [];
      /**
       * @ngdoc property
       * @name $log#error.logs
       *
       * @description
       * Array of messages logged using {@link ng.$log#error `error()`}.
       *
       * @example
       * ```js
       * $log.error('Some Error');
       * var first = $log.error.logs.unshift();
       * ```
       */
      $log.error.logs = [];
        /**
       * @ngdoc property
       * @name $log#debug.logs
       *
       * @description
       * Array of messages logged using {@link ng.$log#debug `debug()`}.
       *
       * @example
       * ```js
       * $log.debug('Some Error');
       * var first = $log.debug.logs.unshift();
       * ```
       */
      $log.debug.logs = [];
    };

    /**
     * @ngdoc method
     * @name $log#assertEmpty
     *
     * @description
     * Assert that all of the logging methods have no logged messages. If any messages are present,
     * an exception is thrown.
     */
    $log.assertEmpty = function() {
      var errors = [];
      angular.forEach(['error', 'warn', 'info', 'log', 'debug'], function(logLevel) {
        angular.forEach($log[logLevel].logs, function(log) {
          angular.forEach(log, function(logItem) {
            errors.push('MOCK $log (' + logLevel + '): ' + String(logItem) + '\n' +
                        (logItem.stack || ''));
          });
        });
      });
      if (errors.length) {
        errors.unshift("Expected $log to be empty! Either a message was logged unexpectedly, or " +
          "an expected log message was not checked and removed:");
        errors.push('');
        throw new Error(errors.join('\n---------\n'));
      }
    };

    $log.reset();
    return $log;
  };
};


/**
 * @ngdoc service
 * @name $interval
 *
 * @description
 * Mock implementation of the $interval service.
 *
 * Use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
 * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
 * time.
 *
 * @param {function()} fn A function that should be called repeatedly.
 * @param {number} delay Number of milliseconds between each function call.
 * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
 *   indefinitely.
 * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
 *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
 * @returns {promise} A promise which will be notified on each iteration.
 */
angular.mock.$IntervalProvider = function() {
  this.$get = ['$browser', '$rootScope', '$q', '$$q',
       function($browser,   $rootScope,   $q,   $$q) {
    var repeatFns = [],
        nextRepeatId = 0,
        now = 0;

    var $interval = function(fn, delay, count, invokeApply) {
      var iteration = 0,
          skipApply = (angular.isDefined(invokeApply) && !invokeApply),
          deferred = (skipApply ? $$q : $q).defer(),
          promise = deferred.promise;

      count = (angular.isDefined(count)) ? count : 0;
      promise.then(null, null, fn);

      promise.$$intervalId = nextRepeatId;

      function tick() {
        deferred.notify(iteration++);

        if (count > 0 && iteration >= count) {
          var fnIndex;
          deferred.resolve(iteration);

          angular.forEach(repeatFns, function(fn, index) {
            if (fn.id === promise.$$intervalId) fnIndex = index;
          });

          if (fnIndex !== undefined) {
            repeatFns.splice(fnIndex, 1);
          }
        }

        if (skipApply) {
          $browser.defer.flush();
        } else {
          $rootScope.$apply();
        }
      }

      repeatFns.push({
        nextTime:(now + delay),
        delay: delay,
        fn: tick,
        id: nextRepeatId,
        deferred: deferred
      });
      repeatFns.sort(function(a, b) { return a.nextTime - b.nextTime;});

      nextRepeatId++;
      return promise;
    };
    /**
     * @ngdoc method
     * @name $interval#cancel
     *
     * @description
     * Cancels a task associated with the `promise`.
     *
     * @param {promise} promise A promise from calling the `$interval` function.
     * @returns {boolean} Returns `true` if the task was successfully cancelled.
     */
    $interval.cancel = function(promise) {
      if (!promise) return false;
      var fnIndex;

      angular.forEach(repeatFns, function(fn, index) {
        if (fn.id === promise.$$intervalId) fnIndex = index;
      });

      if (fnIndex !== undefined) {
        repeatFns[fnIndex].deferred.reject('canceled');
        repeatFns.splice(fnIndex, 1);
        return true;
      }

      return false;
    };

    /**
     * @ngdoc method
     * @name $interval#flush
     * @description
     *
     * Runs interval tasks scheduled to be run in the next `millis` milliseconds.
     *
     * @param {number=} millis maximum timeout amount to flush up until.
     *
     * @return {number} The amount of time moved forward.
     */
    $interval.flush = function(millis) {
      now += millis;
      while (repeatFns.length && repeatFns[0].nextTime <= now) {
        var task = repeatFns[0];
        task.fn();
        task.nextTime += task.delay;
        repeatFns.sort(function(a, b) { return a.nextTime - b.nextTime;});
      }
      return millis;
    };

    return $interval;
  }];
};


/* jshint -W101 */
/* The R_ISO8061_STR regex is never going to fit into the 100 char limit!
 * This directive should go inside the anonymous function but a bug in JSHint means that it would
 * not be enacted early enough to prevent the warning.
 */
var R_ISO8061_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?:\:?(\d\d)(?:\:?(\d\d)(?:\.(\d{3}))?)?)?(Z|([+-])(\d\d):?(\d\d)))?$/;

function jsonStringToDate(string) {
  var match;
  if (match = string.match(R_ISO8061_STR)) {
    var date = new Date(0),
        tzHour = 0,
        tzMin  = 0;
    if (match[9]) {
      tzHour = toInt(match[9] + match[10]);
      tzMin = toInt(match[9] + match[11]);
    }
    date.setUTCFullYear(toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
    date.setUTCHours(toInt(match[4] || 0) - tzHour,
                     toInt(match[5] || 0) - tzMin,
                     toInt(match[6] || 0),
                     toInt(match[7] || 0));
    return date;
  }
  return string;
}

function toInt(str) {
  return parseInt(str, 10);
}

function padNumber(num, digits, trim) {
  var neg = '';
  if (num < 0) {
    neg =  '-';
    num = -num;
  }
  num = '' + num;
  while (num.length < digits) num = '0' + num;
  if (trim) {
    num = num.substr(num.length - digits);
  }
  return neg + num;
}


/**
 * @ngdoc type
 * @name angular.mock.TzDate
 * @description
 *
 * *NOTE*: this is not an injectable instance, just a globally available mock class of `Date`.
 *
 * Mock of the Date type which has its timezone specified via constructor arg.
 *
 * The main purpose is to create Date-like instances with timezone fixed to the specified timezone
 * offset, so that we can test code that depends on local timezone settings without dependency on
 * the time zone settings of the machine where the code is running.
 *
 * @param {number} offset Offset of the *desired* timezone in hours (fractions will be honored)
 * @param {(number|string)} timestamp Timestamp representing the desired time in *UTC*
 *
 * @example
 * !!!! WARNING !!!!!
 * This is not a complete Date object so only methods that were implemented can be called safely.
 * To make matters worse, TzDate instances inherit stuff from Date via a prototype.
 *
 * We do our best to intercept calls to "unimplemented" methods, but since the list of methods is
 * incomplete we might be missing some non-standard methods. This can result in errors like:
 * "Date.prototype.foo called on incompatible Object".
 *
 * ```js
 * var newYearInBratislava = new TzDate(-1, '2009-12-31T23:00:00Z');
 * newYearInBratislava.getTimezoneOffset() => -60;
 * newYearInBratislava.getFullYear() => 2010;
 * newYearInBratislava.getMonth() => 0;
 * newYearInBratislava.getDate() => 1;
 * newYearInBratislava.getHours() => 0;
 * newYearInBratislava.getMinutes() => 0;
 * newYearInBratislava.getSeconds() => 0;
 * ```
 *
 */
angular.mock.TzDate = function(offset, timestamp) {
  var self = new Date(0);
  if (angular.isString(timestamp)) {
    var tsStr = timestamp;

    self.origDate = jsonStringToDate(timestamp);

    timestamp = self.origDate.getTime();
    if (isNaN(timestamp)) {
      throw {
        name: "Illegal Argument",
        message: "Arg '" + tsStr + "' passed into TzDate constructor is not a valid date string"
      };
    }
  } else {
    self.origDate = new Date(timestamp);
  }

  var localOffset = new Date(timestamp).getTimezoneOffset();
  self.offsetDiff = localOffset * 60 * 1000 - offset * 1000 * 60 * 60;
  self.date = new Date(timestamp + self.offsetDiff);

  self.getTime = function() {
    return self.date.getTime() - self.offsetDiff;
  };

  self.toLocaleDateString = function() {
    return self.date.toLocaleDateString();
  };

  self.getFullYear = function() {
    return self.date.getFullYear();
  };

  self.getMonth = function() {
    return self.date.getMonth();
  };

  self.getDate = function() {
    return self.date.getDate();
  };

  self.getHours = function() {
    return self.date.getHours();
  };

  self.getMinutes = function() {
    return self.date.getMinutes();
  };

  self.getSeconds = function() {
    return self.date.getSeconds();
  };

  self.getMilliseconds = function() {
    return self.date.getMilliseconds();
  };

  self.getTimezoneOffset = function() {
    return offset * 60;
  };

  self.getUTCFullYear = function() {
    return self.origDate.getUTCFullYear();
  };

  self.getUTCMonth = function() {
    return self.origDate.getUTCMonth();
  };

  self.getUTCDate = function() {
    return self.origDate.getUTCDate();
  };

  self.getUTCHours = function() {
    return self.origDate.getUTCHours();
  };

  self.getUTCMinutes = function() {
    return self.origDate.getUTCMinutes();
  };

  self.getUTCSeconds = function() {
    return self.origDate.getUTCSeconds();
  };

  self.getUTCMilliseconds = function() {
    return self.origDate.getUTCMilliseconds();
  };

  self.getDay = function() {
    return self.date.getDay();
  };

  // provide this method only on browsers that already have it
  if (self.toISOString) {
    self.toISOString = function() {
      return padNumber(self.origDate.getUTCFullYear(), 4) + '-' +
            padNumber(self.origDate.getUTCMonth() + 1, 2) + '-' +
            padNumber(self.origDate.getUTCDate(), 2) + 'T' +
            padNumber(self.origDate.getUTCHours(), 2) + ':' +
            padNumber(self.origDate.getUTCMinutes(), 2) + ':' +
            padNumber(self.origDate.getUTCSeconds(), 2) + '.' +
            padNumber(self.origDate.getUTCMilliseconds(), 3) + 'Z';
    };
  }

  //hide all methods not implemented in this mock that the Date prototype exposes
  var unimplementedMethods = ['getUTCDay',
      'getYear', 'setDate', 'setFullYear', 'setHours', 'setMilliseconds',
      'setMinutes', 'setMonth', 'setSeconds', 'setTime', 'setUTCDate', 'setUTCFullYear',
      'setUTCHours', 'setUTCMilliseconds', 'setUTCMinutes', 'setUTCMonth', 'setUTCSeconds',
      'setYear', 'toDateString', 'toGMTString', 'toJSON', 'toLocaleFormat', 'toLocaleString',
      'toLocaleTimeString', 'toSource', 'toString', 'toTimeString', 'toUTCString', 'valueOf'];

  angular.forEach(unimplementedMethods, function(methodName) {
    self[methodName] = function() {
      throw new Error("Method '" + methodName + "' is not implemented in the TzDate mock");
    };
  });

  return self;
};

//make "tzDateInstance instanceof Date" return true
angular.mock.TzDate.prototype = Date.prototype;
/* jshint +W101 */

angular.mock.animate = angular.module('ngAnimateMock', ['ng'])

  .config(['$provide', function($provide) {

    var reflowQueue = [];
    $provide.value('$$animateReflow', function(fn) {
      var index = reflowQueue.length;
      reflowQueue.push(fn);
      return function cancel() {
        reflowQueue.splice(index, 1);
      };
    });

    $provide.decorator('$animate', ['$delegate', '$$asyncCallback', '$timeout', '$browser',
                            function($delegate,   $$asyncCallback,   $timeout,   $browser) {
      var animate = {
        queue: [],
        cancel: $delegate.cancel,
        enabled: $delegate.enabled,
        triggerCallbackEvents: function() {
          $$asyncCallback.flush();
        },
        triggerCallbackPromise: function() {
          $timeout.flush(0);
        },
        triggerCallbacks: function() {
          this.triggerCallbackEvents();
          this.triggerCallbackPromise();
        },
        triggerReflow: function() {
          angular.forEach(reflowQueue, function(fn) {
            fn();
          });
          reflowQueue = [];
        }
      };

      angular.forEach(
        ['animate','enter','leave','move','addClass','removeClass','setClass'], function(method) {
        animate[method] = function() {
          animate.queue.push({
            event: method,
            element: arguments[0],
            options: arguments[arguments.length - 1],
            args: arguments
          });
          return $delegate[method].apply($delegate, arguments);
        };
      });

      return animate;
    }]);

  }]);


/**
 * @ngdoc function
 * @name angular.mock.dump
 * @description
 *
 * *NOTE*: this is not an injectable instance, just a globally available function.
 *
 * Method for serializing common angular objects (scope, elements, etc..) into strings, useful for
 * debugging.
 *
 * This method is also available on window, where it can be used to display objects on debug
 * console.
 *
 * @param {*} object - any object to turn into string.
 * @return {string} a serialized string of the argument
 */
angular.mock.dump = function(object) {
  return serialize(object);

  function serialize(object) {
    var out;

    if (angular.isElement(object)) {
      object = angular.element(object);
      out = angular.element('<div></div>');
      angular.forEach(object, function(element) {
        out.append(angular.element(element).clone());
      });
      out = out.html();
    } else if (angular.isArray(object)) {
      out = [];
      angular.forEach(object, function(o) {
        out.push(serialize(o));
      });
      out = '[ ' + out.join(', ') + ' ]';
    } else if (angular.isObject(object)) {
      if (angular.isFunction(object.$eval) && angular.isFunction(object.$apply)) {
        out = serializeScope(object);
      } else if (object instanceof Error) {
        out = object.stack || ('' + object.name + ': ' + object.message);
      } else {
        // TODO(i): this prevents methods being logged,
        // we should have a better way to serialize objects
        out = angular.toJson(object, true);
      }
    } else {
      out = String(object);
    }

    return out;
  }

  function serializeScope(scope, offset) {
    offset = offset ||  '  ';
    var log = [offset + 'Scope(' + scope.$id + '): {'];
    for (var key in scope) {
      if (Object.prototype.hasOwnProperty.call(scope, key) && !key.match(/^(\$|this)/)) {
        log.push('  ' + key + ': ' + angular.toJson(scope[key]));
      }
    }
    var child = scope.$$childHead;
    while (child) {
      log.push(serializeScope(child, offset + '  '));
      child = child.$$nextSibling;
    }
    log.push('}');
    return log.join('\n' + offset);
  }
};

/**
 * @ngdoc service
 * @name $httpBackend
 * @description
 * Fake HTTP backend implementation suitable for unit testing applications that use the
 * {@link ng.$http $http service}.
 *
 * *Note*: For fake HTTP backend implementation suitable for end-to-end testing or backend-less
 * development please see {@link ngMockE2E.$httpBackend e2e $httpBackend mock}.
 *
 * During unit testing, we want our unit tests to run quickly and have no external dependencies so
 * we don’t want to send [XHR](https://developer.mozilla.org/en/xmlhttprequest) or
 * [JSONP](http://en.wikipedia.org/wiki/JSONP) requests to a real server. All we really need is
 * to verify whether a certain request has been sent or not, or alternatively just let the
 * application make requests, respond with pre-trained responses and assert that the end result is
 * what we expect it to be.
 *
 * This mock implementation can be used to respond with static or dynamic responses via the
 * `expect` and `when` apis and their shortcuts (`expectGET`, `whenPOST`, etc).
 *
 * When an Angular application needs some data from a server, it calls the $http service, which
 * sends the request to a real server using $httpBackend service. With dependency injection, it is
 * easy to inject $httpBackend mock (which has the same API as $httpBackend) and use it to verify
 * the requests and respond with some testing data without sending a request to a real server.
 *
 * There are two ways to specify what test data should be returned as http responses by the mock
 * backend when the code under test makes http requests:
 *
 * - `$httpBackend.expect` - specifies a request expectation
 * - `$httpBackend.when` - specifies a backend definition
 *
 *
 * # Request Expectations vs Backend Definitions
 *
 * Request expectations provide a way to make assertions about requests made by the application and
 * to define responses for those requests. The test will fail if the expected requests are not made
 * or they are made in the wrong order.
 *
 * Backend definitions allow you to define a fake backend for your application which doesn't assert
 * if a particular request was made or not, it just returns a trained response if a request is made.
 * The test will pass whether or not the request gets made during testing.
 *
 *
 * <table class="table">
 *   <tr><th width="220px"></th><th>Request expectations</th><th>Backend definitions</th></tr>
 *   <tr>
 *     <th>Syntax</th>
 *     <td>.expect(...).respond(...)</td>
 *     <td>.when(...).respond(...)</td>
 *   </tr>
 *   <tr>
 *     <th>Typical usage</th>
 *     <td>strict unit tests</td>
 *     <td>loose (black-box) unit testing</td>
 *   </tr>
 *   <tr>
 *     <th>Fulfills multiple requests</th>
 *     <td>NO</td>
 *     <td>YES</td>
 *   </tr>
 *   <tr>
 *     <th>Order of requests matters</th>
 *     <td>YES</td>
 *     <td>NO</td>
 *   </tr>
 *   <tr>
 *     <th>Request required</th>
 *     <td>YES</td>
 *     <td>NO</td>
 *   </tr>
 *   <tr>
 *     <th>Response required</th>
 *     <td>optional (see below)</td>
 *     <td>YES</td>
 *   </tr>
 * </table>
 *
 * In cases where both backend definitions and request expectations are specified during unit
 * testing, the request expectations are evaluated first.
 *
 * If a request expectation has no response specified, the algorithm will search your backend
 * definitions for an appropriate response.
 *
 * If a request didn't match any expectation or if the expectation doesn't have the response
 * defined, the backend definitions are evaluated in sequential order to see if any of them match
 * the request. The response from the first matched definition is returned.
 *
 *
 * # Flushing HTTP requests
 *
 * The $httpBackend used in production always responds to requests asynchronously. If we preserved
 * this behavior in unit testing, we'd have to create async unit tests, which are hard to write,
 * to follow and to maintain. But neither can the testing mock respond synchronously; that would
 * change the execution of the code under test. For this reason, the mock $httpBackend has a
 * `flush()` method, which allows the test to explicitly flush pending requests. This preserves
 * the async api of the backend, while allowing the test to execute synchronously.
 *
 *
 * # Unit testing with mock $httpBackend
 * The following code shows how to setup and use the mock backend when unit testing a controller.
 * First we create the controller under test:
 *
  ```js
  // The module code
  angular
    .module('MyApp', [])
    .controller('MyController', MyController);

  // The controller code
  function MyController($scope, $http) {
    var authToken;

    $http.get('/auth.py').success(function(data, status, headers) {
      authToken = headers('A-Token');
      $scope.user = data;
    });

    $scope.saveMessage = function(message) {
      var headers = { 'Authorization': authToken };
      $scope.status = 'Saving...';

      $http.post('/add-msg.py', message, { headers: headers } ).success(function(response) {
        $scope.status = '';
      }).error(function() {
        $scope.status = 'ERROR!';
      });
    };
  }
  ```
 *
 * Now we setup the mock backend and create the test specs:
 *
  ```js
    // testing controller
    describe('MyController', function() {
       var $httpBackend, $rootScope, createController, authRequestHandler;

       // Set up the module
       beforeEach(module('MyApp'));

       beforeEach(inject(function($injector) {
         // Set up the mock http service responses
         $httpBackend = $injector.get('$httpBackend');
         // backend definition common for all tests
         authRequestHandler = $httpBackend.when('GET', '/auth.py')
                                .respond({userId: 'userX'}, {'A-Token': 'xxx'});

         // Get hold of a scope (i.e. the root scope)
         $rootScope = $injector.get('$rootScope');
         // The $controller service is used to create instances of controllers
         var $controller = $injector.get('$controller');

         createController = function() {
           return $controller('MyController', {'$scope' : $rootScope });
         };
       }));


       afterEach(function() {
         $httpBackend.verifyNoOutstandingExpectation();
         $httpBackend.verifyNoOutstandingRequest();
       });


       it('should fetch authentication token', function() {
         $httpBackend.expectGET('/auth.py');
         var controller = createController();
         $httpBackend.flush();
       });


       it('should fail authentication', function() {

         // Notice how you can change the response even after it was set
         authRequestHandler.respond(401, '');

         $httpBackend.expectGET('/auth.py');
         var controller = createController();
         $httpBackend.flush();
         expect($rootScope.status).toBe('Failed...');
       });


       it('should send msg to server', function() {
         var controller = createController();
         $httpBackend.flush();

         // now you don’t care about the authentication, but
         // the controller will still send the request and
         // $httpBackend will respond without you having to
         // specify the expectation and response for this request

         $httpBackend.expectPOST('/add-msg.py', 'message content').respond(201, '');
         $rootScope.saveMessage('message content');
         expect($rootScope.status).toBe('Saving...');
         $httpBackend.flush();
         expect($rootScope.status).toBe('');
       });


       it('should send auth header', function() {
         var controller = createController();
         $httpBackend.flush();

         $httpBackend.expectPOST('/add-msg.py', undefined, function(headers) {
           // check if the header was send, if it wasn't the expectation won't
           // match the request and the test will fail
           return headers['Authorization'] == 'xxx';
         }).respond(201, '');

         $rootScope.saveMessage('whatever');
         $httpBackend.flush();
       });
    });
   ```
 */
angular.mock.$HttpBackendProvider = function() {
  this.$get = ['$rootScope', '$timeout', createHttpBackendMock];
};

/**
 * General factory function for $httpBackend mock.
 * Returns instance for unit testing (when no arguments specified):
 *   - passing through is disabled
 *   - auto flushing is disabled
 *
 * Returns instance for e2e testing (when `$delegate` and `$browser` specified):
 *   - passing through (delegating request to real backend) is enabled
 *   - auto flushing is enabled
 *
 * @param {Object=} $delegate Real $httpBackend instance (allow passing through if specified)
 * @param {Object=} $browser Auto-flushing enabled if specified
 * @return {Object} Instance of $httpBackend mock
 */
function createHttpBackendMock($rootScope, $timeout, $delegate, $browser) {
  var definitions = [],
      expectations = [],
      responses = [],
      responsesPush = angular.bind(responses, responses.push),
      copy = angular.copy;

  function createResponse(status, data, headers, statusText) {
    if (angular.isFunction(status)) return status;

    return function() {
      return angular.isNumber(status)
          ? [status, data, headers, statusText]
          : [200, status, data, headers];
    };
  }

  // TODO(vojta): change params to: method, url, data, headers, callback
  function $httpBackend(method, url, data, callback, headers, timeout, withCredentials) {
    var xhr = new MockXhr(),
        expectation = expectations[0],
        wasExpected = false;

    function prettyPrint(data) {
      return (angular.isString(data) || angular.isFunction(data) || data instanceof RegExp)
          ? data
          : angular.toJson(data);
    }

    function wrapResponse(wrapped) {
      if (!$browser && timeout) {
        timeout.then ? timeout.then(handleTimeout) : $timeout(handleTimeout, timeout);
      }

      return handleResponse;

      function handleResponse() {
        var response = wrapped.response(method, url, data, headers);
        xhr.$$respHeaders = response[2];
        callback(copy(response[0]), copy(response[1]), xhr.getAllResponseHeaders(),
                 copy(response[3] || ''));
      }

      function handleTimeout() {
        for (var i = 0, ii = responses.length; i < ii; i++) {
          if (responses[i] === handleResponse) {
            responses.splice(i, 1);
            callback(-1, undefined, '');
            break;
          }
        }
      }
    }

    if (expectation && expectation.match(method, url)) {
      if (!expectation.matchData(data)) {
        throw new Error('Expected ' + expectation + ' with different data\n' +
            'EXPECTED: ' + prettyPrint(expectation.data) + '\nGOT:      ' + data);
      }

      if (!expectation.matchHeaders(headers)) {
        throw new Error('Expected ' + expectation + ' with different headers\n' +
                        'EXPECTED: ' + prettyPrint(expectation.headers) + '\nGOT:      ' +
                        prettyPrint(headers));
      }

      expectations.shift();

      if (expectation.response) {
        responses.push(wrapResponse(expectation));
        return;
      }
      wasExpected = true;
    }

    var i = -1, definition;
    while ((definition = definitions[++i])) {
      if (definition.match(method, url, data, headers || {})) {
        if (definition.response) {
          // if $browser specified, we do auto flush all requests
          ($browser ? $browser.defer : responsesPush)(wrapResponse(definition));
        } else if (definition.passThrough) {
          $delegate(method, url, data, callback, headers, timeout, withCredentials);
        } else throw new Error('No response defined !');
        return;
      }
    }
    throw wasExpected ?
        new Error('No response defined !') :
        new Error('Unexpected request: ' + method + ' ' + url + '\n' +
                  (expectation ? 'Expected ' + expectation : 'No more request expected'));
  }

  /**
   * @ngdoc method
   * @name $httpBackend#when
   * @description
   * Creates a new backend definition.
   *
   * @param {string} method HTTP method.
   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
   *   and returns true if the url matches the current definition.
   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives
   *   data string and returns true if the data is as expected.
   * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header
   *   object and returns true if the headers match the current definition.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   *   request is handled. You can save this object for later use and invoke `respond` again in
   *   order to change how a matched request is handled.
   *
   *  - respond –
   *      `{function([status,] data[, headers, statusText])
   *      | function(function(method, url, data, headers)}`
   *    – The respond method takes a set of static data to be returned or a function that can
   *    return an array containing response status (number), response data (string), response
   *    headers (Object), and the text for the status (string). The respond method returns the
   *    `requestHandler` object for possible overrides.
   */
  $httpBackend.when = function(method, url, data, headers) {
    var definition = new MockHttpExpectation(method, url, data, headers),
        chain = {
          respond: function(status, data, headers, statusText) {
            definition.passThrough = undefined;
            definition.response = createResponse(status, data, headers, statusText);
            return chain;
          }
        };

    if ($browser) {
      chain.passThrough = function() {
        definition.response = undefined;
        definition.passThrough = true;
        return chain;
      };
    }

    definitions.push(definition);
    return chain;
  };

  /**
   * @ngdoc method
   * @name $httpBackend#whenGET
   * @description
   * Creates a new backend definition for GET requests. For more info see `when()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
   *   and returns true if the url matches the current definition.
   * @param {(Object|function(Object))=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   * request is handled. You can save this object for later use and invoke `respond` again in
   * order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#whenHEAD
   * @description
   * Creates a new backend definition for HEAD requests. For more info see `when()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
   *   and returns true if the url matches the current definition.
   * @param {(Object|function(Object))=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   * request is handled. You can save this object for later use and invoke `respond` again in
   * order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#whenDELETE
   * @description
   * Creates a new backend definition for DELETE requests. For more info see `when()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
   *   and returns true if the url matches the current definition.
   * @param {(Object|function(Object))=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   * request is handled. You can save this object for later use and invoke `respond` again in
   * order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#whenPOST
   * @description
   * Creates a new backend definition for POST requests. For more info see `when()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
   *   and returns true if the url matches the current definition.
   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives
   *   data string and returns true if the data is as expected.
   * @param {(Object|function(Object))=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   * request is handled. You can save this object for later use and invoke `respond` again in
   * order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#whenPUT
   * @description
   * Creates a new backend definition for PUT requests.  For more info see `when()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
   *   and returns true if the url matches the current definition.
   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives
   *   data string and returns true if the data is as expected.
   * @param {(Object|function(Object))=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   * request is handled. You can save this object for later use and invoke `respond` again in
   * order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#whenJSONP
   * @description
   * Creates a new backend definition for JSONP requests. For more info see `when()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
   *   and returns true if the url matches the current definition.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   * request is handled. You can save this object for later use and invoke `respond` again in
   * order to change how a matched request is handled.
   */
  createShortMethods('when');


  /**
   * @ngdoc method
   * @name $httpBackend#expect
   * @description
   * Creates a new request expectation.
   *
   * @param {string} method HTTP method.
   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
   *   and returns true if the url matches the current definition.
   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that
   *  receives data string and returns true if the data is as expected, or Object if request body
   *  is in JSON format.
   * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header
   *   object and returns true if the headers match the current expectation.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   *  request is handled. You can save this object for later use and invoke `respond` again in
   *  order to change how a matched request is handled.
   *
   *  - respond –
   *    `{function([status,] data[, headers, statusText])
   *    | function(function(method, url, data, headers)}`
   *    – The respond method takes a set of static data to be returned or a function that can
   *    return an array containing response status (number), response data (string), response
   *    headers (Object), and the text for the status (string). The respond method returns the
   *    `requestHandler` object for possible overrides.
   */
  $httpBackend.expect = function(method, url, data, headers) {
    var expectation = new MockHttpExpectation(method, url, data, headers),
        chain = {
          respond: function(status, data, headers, statusText) {
            expectation.response = createResponse(status, data, headers, statusText);
            return chain;
          }
        };

    expectations.push(expectation);
    return chain;
  };


  /**
   * @ngdoc method
   * @name $httpBackend#expectGET
   * @description
   * Creates a new request expectation for GET requests. For more info see `expect()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
   *   and returns true if the url matches the current definition.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   * request is handled. You can save this object for later use and invoke `respond` again in
   * order to change how a matched request is handled. See #expect for more info.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectHEAD
   * @description
   * Creates a new request expectation for HEAD requests. For more info see `expect()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
   *   and returns true if the url matches the current definition.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   *   request is handled. You can save this object for later use and invoke `respond` again in
   *   order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectDELETE
   * @description
   * Creates a new request expectation for DELETE requests. For more info see `expect()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
   *   and returns true if the url matches the current definition.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   *   request is handled. You can save this object for later use and invoke `respond` again in
   *   order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectPOST
   * @description
   * Creates a new request expectation for POST requests. For more info see `expect()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
   *   and returns true if the url matches the current definition.
   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that
   *  receives data string and returns true if the data is as expected, or Object if request body
   *  is in JSON format.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   *   request is handled. You can save this object for later use and invoke `respond` again in
   *   order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectPUT
   * @description
   * Creates a new request expectation for PUT requests. For more info see `expect()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
   *   and returns true if the url matches the current definition.
   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that
   *  receives data string and returns true if the data is as expected, or Object if request body
   *  is in JSON format.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   *   request is handled. You can save this object for later use and invoke `respond` again in
   *   order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectPATCH
   * @description
   * Creates a new request expectation for PATCH requests. For more info see `expect()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
   *   and returns true if the url matches the current definition.
   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that
   *  receives data string and returns true if the data is as expected, or Object if request body
   *  is in JSON format.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   *   request is handled. You can save this object for later use and invoke `respond` again in
   *   order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectJSONP
   * @description
   * Creates a new request expectation for JSONP requests. For more info see `expect()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives an url
   *   and returns true if the url matches the current definition.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   *   request is handled. You can save this object for later use and invoke `respond` again in
   *   order to change how a matched request is handled.
   */
  createShortMethods('expect');


  /**
   * @ngdoc method
   * @name $httpBackend#flush
   * @description
   * Flushes all pending requests using the trained responses.
   *
   * @param {number=} count Number of responses to flush (in the order they arrived). If undefined,
   *   all pending requests will be flushed. If there are no pending requests when the flush method
   *   is called an exception is thrown (as this typically a sign of programming error).
   */
  $httpBackend.flush = function(count, digest) {
    if (digest !== false) $rootScope.$digest();
    if (!responses.length) throw new Error('No pending request to flush !');

    if (angular.isDefined(count) && count !== null) {
      while (count--) {
        if (!responses.length) throw new Error('No more pending request to flush !');
        responses.shift()();
      }
    } else {
      while (responses.length) {
        responses.shift()();
      }
    }
    $httpBackend.verifyNoOutstandingExpectation(digest);
  };


  /**
   * @ngdoc method
   * @name $httpBackend#verifyNoOutstandingExpectation
   * @description
   * Verifies that all of the requests defined via the `expect` api were made. If any of the
   * requests were not made, verifyNoOutstandingExpectation throws an exception.
   *
   * Typically, you would call this method following each test case that asserts requests using an
   * "afterEach" clause.
   *
   * ```js
   *   afterEach($httpBackend.verifyNoOutstandingExpectation);
   * ```
   */
  $httpBackend.verifyNoOutstandingExpectation = function(digest) {
    if (digest !== false) $rootScope.$digest();
    if (expectations.length) {
      throw new Error('Unsatisfied requests: ' + expectations.join(', '));
    }
  };


  /**
   * @ngdoc method
   * @name $httpBackend#verifyNoOutstandingRequest
   * @description
   * Verifies that there are no outstanding requests that need to be flushed.
   *
   * Typically, you would call this method following each test case that asserts requests using an
   * "afterEach" clause.
   *
   * ```js
   *   afterEach($httpBackend.verifyNoOutstandingRequest);
   * ```
   */
  $httpBackend.verifyNoOutstandingRequest = function() {
    if (responses.length) {
      throw new Error('Unflushed requests: ' + responses.length);
    }
  };


  /**
   * @ngdoc method
   * @name $httpBackend#resetExpectations
   * @description
   * Resets all request expectations, but preserves all backend definitions. Typically, you would
   * call resetExpectations during a multiple-phase test when you want to reuse the same instance of
   * $httpBackend mock.
   */
  $httpBackend.resetExpectations = function() {
    expectations.length = 0;
    responses.length = 0;
  };

  return $httpBackend;


  function createShortMethods(prefix) {
    angular.forEach(['GET', 'DELETE', 'JSONP', 'HEAD'], function(method) {
     $httpBackend[prefix + method] = function(url, headers) {
       return $httpBackend[prefix](method, url, undefined, headers);
     };
    });

    angular.forEach(['PUT', 'POST', 'PATCH'], function(method) {
      $httpBackend[prefix + method] = function(url, data, headers) {
        return $httpBackend[prefix](method, url, data, headers);
      };
    });
  }
}

function MockHttpExpectation(method, url, data, headers) {

  this.data = data;
  this.headers = headers;

  this.match = function(m, u, d, h) {
    if (method != m) return false;
    if (!this.matchUrl(u)) return false;
    if (angular.isDefined(d) && !this.matchData(d)) return false;
    if (angular.isDefined(h) && !this.matchHeaders(h)) return false;
    return true;
  };

  this.matchUrl = function(u) {
    if (!url) return true;
    if (angular.isFunction(url.test)) return url.test(u);
    if (angular.isFunction(url)) return url(u);
    return url == u;
  };

  this.matchHeaders = function(h) {
    if (angular.isUndefined(headers)) return true;
    if (angular.isFunction(headers)) return headers(h);
    return angular.equals(headers, h);
  };

  this.matchData = function(d) {
    if (angular.isUndefined(data)) return true;
    if (data && angular.isFunction(data.test)) return data.test(d);
    if (data && angular.isFunction(data)) return data(d);
    if (data && !angular.isString(data)) {
      return angular.equals(angular.fromJson(angular.toJson(data)), angular.fromJson(d));
    }
    return data == d;
  };

  this.toString = function() {
    return method + ' ' + url;
  };
}

function createMockXhr() {
  return new MockXhr();
}

function MockXhr() {

  // hack for testing $http, $httpBackend
  MockXhr.$$lastInstance = this;

  this.open = function(method, url, async) {
    this.$$method = method;
    this.$$url = url;
    this.$$async = async;
    this.$$reqHeaders = {};
    this.$$respHeaders = {};
  };

  this.send = function(data) {
    this.$$data = data;
  };

  this.setRequestHeader = function(key, value) {
    this.$$reqHeaders[key] = value;
  };

  this.getResponseHeader = function(name) {
    // the lookup must be case insensitive,
    // that's why we try two quick lookups first and full scan last
    var header = this.$$respHeaders[name];
    if (header) return header;

    name = angular.lowercase(name);
    header = this.$$respHeaders[name];
    if (header) return header;

    header = undefined;
    angular.forEach(this.$$respHeaders, function(headerVal, headerName) {
      if (!header && angular.lowercase(headerName) == name) header = headerVal;
    });
    return header;
  };

  this.getAllResponseHeaders = function() {
    var lines = [];

    angular.forEach(this.$$respHeaders, function(value, key) {
      lines.push(key + ': ' + value);
    });
    return lines.join('\n');
  };

  this.abort = angular.noop;
}


/**
 * @ngdoc service
 * @name $timeout
 * @description
 *
 * This service is just a simple decorator for {@link ng.$timeout $timeout} service
 * that adds a "flush" and "verifyNoPendingTasks" methods.
 */

angular.mock.$TimeoutDecorator = ['$delegate', '$browser', function($delegate, $browser) {

  /**
   * @ngdoc method
   * @name $timeout#flush
   * @description
   *
   * Flushes the queue of pending tasks.
   *
   * @param {number=} delay maximum timeout amount to flush up until
   */
  $delegate.flush = function(delay) {
    $browser.defer.flush(delay);
  };

  /**
   * @ngdoc method
   * @name $timeout#verifyNoPendingTasks
   * @description
   *
   * Verifies that there are no pending tasks that need to be flushed.
   */
  $delegate.verifyNoPendingTasks = function() {
    if ($browser.deferredFns.length) {
      throw new Error('Deferred tasks to flush (' + $browser.deferredFns.length + '): ' +
          formatPendingTasksAsString($browser.deferredFns));
    }
  };

  function formatPendingTasksAsString(tasks) {
    var result = [];
    angular.forEach(tasks, function(task) {
      result.push('{id: ' + task.id + ', ' + 'time: ' + task.time + '}');
    });

    return result.join(', ');
  }

  return $delegate;
}];

angular.mock.$RAFDecorator = ['$delegate', function($delegate) {
  var queue = [];
  var rafFn = function(fn) {
    var index = queue.length;
    queue.push(fn);
    return function() {
      queue.splice(index, 1);
    };
  };

  rafFn.supported = $delegate.supported;

  rafFn.flush = function() {
    if (queue.length === 0) {
      throw new Error('No rAF callbacks present');
    }

    var length = queue.length;
    for (var i = 0; i < length; i++) {
      queue[i]();
    }

    queue = [];
  };

  return rafFn;
}];

angular.mock.$AsyncCallbackDecorator = ['$delegate', function($delegate) {
  var callbacks = [];
  var addFn = function(fn) {
    callbacks.push(fn);
  };
  addFn.flush = function() {
    angular.forEach(callbacks, function(fn) {
      fn();
    });
    callbacks = [];
  };
  return addFn;
}];

/**
 *
 */
angular.mock.$RootElementProvider = function() {
  this.$get = function() {
    return angular.element('<div ng-app></div>');
  };
};

/**
 * @ngdoc module
 * @name ngMock
 * @packageName angular-mocks
 * @description
 *
 * # ngMock
 *
 * The `ngMock` module provides support to inject and mock Angular services into unit tests.
 * In addition, ngMock also extends various core ng services such that they can be
 * inspected and controlled in a synchronous manner within test code.
 *
 *
 * <div doc-module-components="ngMock"></div>
 *
 */
angular.module('ngMock', ['ng']).provider({
  $browser: angular.mock.$BrowserProvider,
  $exceptionHandler: angular.mock.$ExceptionHandlerProvider,
  $log: angular.mock.$LogProvider,
  $interval: angular.mock.$IntervalProvider,
  $httpBackend: angular.mock.$HttpBackendProvider,
  $rootElement: angular.mock.$RootElementProvider
}).config(['$provide', function($provide) {
  $provide.decorator('$timeout', angular.mock.$TimeoutDecorator);
  $provide.decorator('$$rAF', angular.mock.$RAFDecorator);
  $provide.decorator('$$asyncCallback', angular.mock.$AsyncCallbackDecorator);
  $provide.decorator('$rootScope', angular.mock.$RootScopeDecorator);
}]);

/**
 * @ngdoc module
 * @name ngMockE2E
 * @module ngMockE2E
 * @packageName angular-mocks
 * @description
 *
 * The `ngMockE2E` is an angular module which contains mocks suitable for end-to-end testing.
 * Currently there is only one mock present in this module -
 * the {@link ngMockE2E.$httpBackend e2e $httpBackend} mock.
 */
angular.module('ngMockE2E', ['ng']).config(['$provide', function($provide) {
  $provide.decorator('$httpBackend', angular.mock.e2e.$httpBackendDecorator);
}]);

/**
 * @ngdoc service
 * @name $httpBackend
 * @module ngMockE2E
 * @description
 * Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of
 * applications that use the {@link ng.$http $http service}.
 *
 * *Note*: For fake http backend implementation suitable for unit testing please see
 * {@link ngMock.$httpBackend unit-testing $httpBackend mock}.
 *
 * This implementation can be used to respond with static or dynamic responses via the `when` api
 * and its shortcuts (`whenGET`, `whenPOST`, etc) and optionally pass through requests to the
 * real $httpBackend for specific requests (e.g. to interact with certain remote apis or to fetch
 * templates from a webserver).
 *
 * As opposed to unit-testing, in an end-to-end testing scenario or in scenario when an application
 * is being developed with the real backend api replaced with a mock, it is often desirable for
 * certain category of requests to bypass the mock and issue a real http request (e.g. to fetch
 * templates or static files from the webserver). To configure the backend with this behavior
 * use the `passThrough` request handler of `when` instead of `respond`.
 *
 * Additionally, we don't want to manually have to flush mocked out requests like we do during unit
 * testing. For this reason the e2e $httpBackend flushes mocked out requests
 * automatically, closely simulating the behavior of the XMLHttpRequest object.
 *
 * To setup the application to run with this http backend, you have to create a module that depends
 * on the `ngMockE2E` and your application modules and defines the fake backend:
 *
 * ```js
 *   myAppDev = angular.module('myAppDev', ['myApp', 'ngMockE2E']);
 *   myAppDev.run(function($httpBackend) {
 *     phones = [{name: 'phone1'}, {name: 'phone2'}];
 *
 *     // returns the current list of phones
 *     $httpBackend.whenGET('/phones').respond(phones);
 *
 *     // adds a new phone to the phones array
 *     $httpBackend.whenPOST('/phones').respond(function(method, url, data) {
 *       var phone = angular.fromJson(data);
 *       phones.push(phone);
 *       return [200, phone, {}];
 *     });
 *     $httpBackend.whenGET(/^\/templates\//).passThrough();
 *     //...
 *   });
 * ```
 *
 * Afterwards, bootstrap your app with this new module.
 */

/**
 * @ngdoc method
 * @name $httpBackend#when
 * @module ngMockE2E
 * @description
 * Creates a new backend definition.
 *
 * @param {string} method HTTP method.
 * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
 *   and returns true if the url matches the current definition.
 * @param {(string|RegExp)=} data HTTP request body.
 * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header
 *   object and returns true if the headers match the current definition.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 *
 *  - respond –
 *    `{function([status,] data[, headers, statusText])
 *    | function(function(method, url, data, headers)}`
 *    – The respond method takes a set of static data to be returned or a function that can return
 *    an array containing response status (number), response data (string), response headers
 *    (Object), and the text for the status (string).
 *  - passThrough – `{function()}` – Any request matching a backend definition with
 *    `passThrough` handler will be passed through to the real backend (an XHR request will be made
 *    to the server.)
 *  - Both methods return the `requestHandler` object for possible overrides.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenGET
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for GET requests. For more info see `when()`.
 *
 * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
 *   and returns true if the url matches the current definition.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenHEAD
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for HEAD requests. For more info see `when()`.
 *
 * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
 *   and returns true if the url matches the current definition.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenDELETE
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for DELETE requests. For more info see `when()`.
 *
 * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
 *   and returns true if the url matches the current definition.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenPOST
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for POST requests. For more info see `when()`.
 *
 * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
 *   and returns true if the url matches the current definition.
 * @param {(string|RegExp)=} data HTTP request body.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenPUT
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for PUT requests.  For more info see `when()`.
 *
 * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
 *   and returns true if the url matches the current definition.
 * @param {(string|RegExp)=} data HTTP request body.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenPATCH
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for PATCH requests.  For more info see `when()`.
 *
 * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
 *   and returns true if the url matches the current definition.
 * @param {(string|RegExp)=} data HTTP request body.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenJSONP
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for JSONP requests. For more info see `when()`.
 *
 * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
 *   and returns true if the url matches the current definition.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 */
angular.mock.e2e = {};
angular.mock.e2e.$httpBackendDecorator =
  ['$rootScope', '$timeout', '$delegate', '$browser', createHttpBackendMock];


/**
 * @ngdoc type
 * @name $rootScope.Scope
 * @module ngMock
 * @description
 * {@link ng.$rootScope.Scope Scope} type decorated with helper methods useful for testing. These
 * methods are automatically available on any {@link ng.$rootScope.Scope Scope} instance when
 * `ngMock` module is loaded.
 *
 * In addition to all the regular `Scope` methods, the following helper methods are available:
 */
angular.mock.$RootScopeDecorator = ['$delegate', function($delegate) {

  var $rootScopePrototype = Object.getPrototypeOf($delegate);

  $rootScopePrototype.$countChildScopes = countChildScopes;
  $rootScopePrototype.$countWatchers = countWatchers;

  return $delegate;

  // ------------------------------------------------------------------------------------------ //

  /**
   * @ngdoc method
   * @name $rootScope.Scope#$countChildScopes
   * @module ngMock
   * @description
   * Counts all the direct and indirect child scopes of the current scope.
   *
   * The current scope is excluded from the count. The count includes all isolate child scopes.
   *
   * @returns {number} Total number of child scopes.
   */
  function countChildScopes() {
    // jshint validthis: true
    var count = 0; // exclude the current scope
    var pendingChildHeads = [this.$$childHead];
    var currentScope;

    while (pendingChildHeads.length) {
      currentScope = pendingChildHeads.shift();

      while (currentScope) {
        count += 1;
        pendingChildHeads.push(currentScope.$$childHead);
        currentScope = currentScope.$$nextSibling;
      }
    }

    return count;
  }


  /**
   * @ngdoc method
   * @name $rootScope.Scope#$countWatchers
   * @module ngMock
   * @description
   * Counts all the watchers of direct and indirect child scopes of the current scope.
   *
   * The watchers of the current scope are included in the count and so are all the watchers of
   * isolate child scopes.
   *
   * @returns {number} Total number of watchers.
   */
  function countWatchers() {
    // jshint validthis: true
    var count = this.$$watchers ? this.$$watchers.length : 0; // include the current scope
    var pendingChildHeads = [this.$$childHead];
    var currentScope;

    while (pendingChildHeads.length) {
      currentScope = pendingChildHeads.shift();

      while (currentScope) {
        count += currentScope.$$watchers ? currentScope.$$watchers.length : 0;
        pendingChildHeads.push(currentScope.$$childHead);
        currentScope = currentScope.$$nextSibling;
      }
    }

    return count;
  }
}];


if (window.jasmine || window.mocha) {

  var currentSpec = null,
      annotatedFunctions = [],
      isSpecRunning = function() {
        return !!currentSpec;
      };

  angular.mock.$$annotate = angular.injector.$$annotate;
  angular.injector.$$annotate = function(fn) {
    if (typeof fn === 'function' && !fn.$inject) {
      annotatedFunctions.push(fn);
    }
    return angular.mock.$$annotate.apply(this, arguments);
  };


  (window.beforeEach || window.setup)(function() {
    annotatedFunctions = [];
    currentSpec = this;
  });

  (window.afterEach || window.teardown)(function() {
    var injector = currentSpec.$injector;

    annotatedFunctions.forEach(function(fn) {
      delete fn.$inject;
    });

    angular.forEach(currentSpec.$modules, function(module) {
      if (module && module.$$hashKey) {
        module.$$hashKey = undefined;
      }
    });

    currentSpec.$injector = null;
    currentSpec.$modules = null;
    currentSpec = null;

    if (injector) {
      injector.get('$rootElement').off();
      injector.get('$browser').pollFns.length = 0;
    }

    // clean up jquery's fragment cache
    angular.forEach(angular.element.fragments, function(val, key) {
      delete angular.element.fragments[key];
    });

    MockXhr.$$lastInstance = null;

    angular.forEach(angular.callbacks, function(val, key) {
      delete angular.callbacks[key];
    });
    angular.callbacks.counter = 0;
  });

  /**
   * @ngdoc function
   * @name angular.mock.module
   * @description
   *
   * *NOTE*: This function is also published on window for easy access.<br>
   * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha
   *
   * This function registers a module configuration code. It collects the configuration information
   * which will be used when the injector is created by {@link angular.mock.inject inject}.
   *
   * See {@link angular.mock.inject inject} for usage example
   *
   * @param {...(string|Function|Object)} fns any number of modules which are represented as string
   *        aliases or as anonymous module initialization functions. The modules are used to
   *        configure the injector. The 'ng' and 'ngMock' modules are automatically loaded. If an
   *        object literal is passed they will be registered as values in the module, the key being
   *        the module name and the value being what is returned.
   */
  window.module = angular.mock.module = function() {
    var moduleFns = Array.prototype.slice.call(arguments, 0);
    return isSpecRunning() ? workFn() : workFn;
    /////////////////////
    function workFn() {
      if (currentSpec.$injector) {
        throw new Error('Injector already created, can not register a module!');
      } else {
        var modules = currentSpec.$modules || (currentSpec.$modules = []);
        angular.forEach(moduleFns, function(module) {
          if (angular.isObject(module) && !angular.isArray(module)) {
            modules.push(function($provide) {
              angular.forEach(module, function(value, key) {
                $provide.value(key, value);
              });
            });
          } else {
            modules.push(module);
          }
        });
      }
    }
  };

  /**
   * @ngdoc function
   * @name angular.mock.inject
   * @description
   *
   * *NOTE*: This function is also published on window for easy access.<br>
   * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha
   *
   * The inject function wraps a function into an injectable function. The inject() creates new
   * instance of {@link auto.$injector $injector} per test, which is then used for
   * resolving references.
   *
   *
   * ## Resolving References (Underscore Wrapping)
   * Often, we would like to inject a reference once, in a `beforeEach()` block and reuse this
   * in multiple `it()` clauses. To be able to do this we must assign the reference to a variable
   * that is declared in the scope of the `describe()` block. Since we would, most likely, want
   * the variable to have the same name of the reference we have a problem, since the parameter
   * to the `inject()` function would hide the outer variable.
   *
   * To help with this, the injected parameters can, optionally, be enclosed with underscores.
   * These are ignored by the injector when the reference name is resolved.
   *
   * For example, the parameter `_myService_` would be resolved as the reference `myService`.
   * Since it is available in the function body as _myService_, we can then assign it to a variable
   * defined in an outer scope.
   *
   * ```
   * // Defined out reference variable outside
   * var myService;
   *
   * // Wrap the parameter in underscores
   * beforeEach( inject( function(_myService_){
   *   myService = _myService_;
   * }));
   *
   * // Use myService in a series of tests.
   * it('makes use of myService', function() {
   *   myService.doStuff();
   * });
   *
   * ```
   *
   * See also {@link angular.mock.module angular.mock.module}
   *
   * ## Example
   * Example of what a typical jasmine tests looks like with the inject method.
   * ```js
   *
   *   angular.module('myApplicationModule', [])
   *       .value('mode', 'app')
   *       .value('version', 'v1.0.1');
   *
   *
   *   describe('MyApp', function() {
   *
   *     // You need to load modules that you want to test,
   *     // it loads only the "ng" module by default.
   *     beforeEach(module('myApplicationModule'));
   *
   *
   *     // inject() is used to inject arguments of all given functions
   *     it('should provide a version', inject(function(mode, version) {
   *       expect(version).toEqual('v1.0.1');
   *       expect(mode).toEqual('app');
   *     }));
   *
   *
   *     // The inject and module method can also be used inside of the it or beforeEach
   *     it('should override a version and test the new version is injected', function() {
   *       // module() takes functions or strings (module aliases)
   *       module(function($provide) {
   *         $provide.value('version', 'overridden'); // override version here
   *       });
   *
   *       inject(function(version) {
   *         expect(version).toEqual('overridden');
   *       });
   *     });
   *   });
   *
   * ```
   *
   * @param {...Function} fns any number of functions which will be injected using the injector.
   */



  var ErrorAddingDeclarationLocationStack = function(e, errorForStack) {
    this.message = e.message;
    this.name = e.name;
    if (e.line) this.line = e.line;
    if (e.sourceId) this.sourceId = e.sourceId;
    if (e.stack && errorForStack)
      this.stack = e.stack + '\n' + errorForStack.stack;
    if (e.stackArray) this.stackArray = e.stackArray;
  };
  ErrorAddingDeclarationLocationStack.prototype.toString = Error.prototype.toString;

  window.inject = angular.mock.inject = function() {
    var blockFns = Array.prototype.slice.call(arguments, 0);
    var errorForStack = new Error('Declaration Location');
    return isSpecRunning() ? workFn.call(currentSpec) : workFn;
    /////////////////////
    function workFn() {
      var modules = currentSpec.$modules || [];
      var strictDi = !!currentSpec.$injectorStrict;
      modules.unshift('ngMock');
      modules.unshift('ng');
      var injector = currentSpec.$injector;
      if (!injector) {
        if (strictDi) {
          // If strictDi is enabled, annotate the providerInjector blocks
          angular.forEach(modules, function(moduleFn) {
            if (typeof moduleFn === "function") {
              angular.injector.$$annotate(moduleFn);
            }
          });
        }
        injector = currentSpec.$injector = angular.injector(modules, strictDi);
        currentSpec.$injectorStrict = strictDi;
      }
      for (var i = 0, ii = blockFns.length; i < ii; i++) {
        if (currentSpec.$injectorStrict) {
          // If the injector is strict / strictDi, and the spec wants to inject using automatic
          // annotation, then annotate the function here.
          injector.annotate(blockFns[i]);
        }
        try {
          /* jshint -W040 *//* Jasmine explicitly provides a `this` object when calling functions */
          injector.invoke(blockFns[i] || angular.noop, this);
          /* jshint +W040 */
        } catch (e) {
          if (e.stack && errorForStack) {
            throw new ErrorAddingDeclarationLocationStack(e, errorForStack);
          }
          throw e;
        } finally {
          errorForStack = null;
        }
      }
    }
  };


  angular.mock.inject.strictDi = function(value) {
    value = arguments.length ? !!value : true;
    return isSpecRunning() ? workFn() : workFn;

    function workFn() {
      if (value !== currentSpec.$injectorStrict) {
        if (currentSpec.$injector) {
          throw new Error('Injector already created, can not modify strict annotations');
        } else {
          currentSpec.$injectorStrict = value;
        }
      }
    }
  };
}


})(window, window.angular);

define("angular-mocks", function(){});

/**
 * @license RequireJS text 2.0.14 Copyright (c) 2010-2014, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/requirejs/text for details
 */
/*jslint regexp: true */
/*global require, XMLHttpRequest, ActiveXObject,
  define, window, process, Packages,
  java, location, Components, FileUtils */

define('text',['module'], function (module) {
    

    var text, fs, Cc, Ci, xpcIsWindows,
        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],
        xmlRegExp = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,
        bodyRegExp = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,
        hasLocation = typeof location !== 'undefined' && location.href,
        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\:/, ''),
        defaultHostName = hasLocation && location.hostname,
        defaultPort = hasLocation && (location.port || undefined),
        buildMap = {},
        masterConfig = (module.config && module.config()) || {};

    text = {
        version: '2.0.14',

        strip: function (content) {
            //Strips <?xml ...?> declarations so that external SVG and XML
            //documents can be added to a document without worry. Also, if the string
            //is an HTML document, only the part inside the body tag is returned.
            if (content) {
                content = content.replace(xmlRegExp, "");
                var matches = content.match(bodyRegExp);
                if (matches) {
                    content = matches[1];
                }
            } else {
                content = "";
            }
            return content;
        },

        jsEscape: function (content) {
            return content.replace(/(['\\])/g, '\\$1')
                .replace(/[\f]/g, "\\f")
                .replace(/[\b]/g, "\\b")
                .replace(/[\n]/g, "\\n")
                .replace(/[\t]/g, "\\t")
                .replace(/[\r]/g, "\\r")
                .replace(/[\u2028]/g, "\\u2028")
                .replace(/[\u2029]/g, "\\u2029");
        },

        createXhr: masterConfig.createXhr || function () {
            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.
            var xhr, i, progId;
            if (typeof XMLHttpRequest !== "undefined") {
                return new XMLHttpRequest();
            } else if (typeof ActiveXObject !== "undefined") {
                for (i = 0; i < 3; i += 1) {
                    progId = progIds[i];
                    try {
                        xhr = new ActiveXObject(progId);
                    } catch (e) {}

                    if (xhr) {
                        progIds = [progId];  // so faster next time
                        break;
                    }
                }
            }

            return xhr;
        },

        /**
         * Parses a resource name into its component parts. Resource names
         * look like: module/name.ext!strip, where the !strip part is
         * optional.
         * @param {String} name the resource name
         * @returns {Object} with properties "moduleName", "ext" and "strip"
         * where strip is a boolean.
         */
        parseName: function (name) {
            var modName, ext, temp,
                strip = false,
                index = name.lastIndexOf("."),
                isRelative = name.indexOf('./') === 0 ||
                             name.indexOf('../') === 0;

            if (index !== -1 && (!isRelative || index > 1)) {
                modName = name.substring(0, index);
                ext = name.substring(index + 1);
            } else {
                modName = name;
            }

            temp = ext || modName;
            index = temp.indexOf("!");
            if (index !== -1) {
                //Pull off the strip arg.
                strip = temp.substring(index + 1) === "strip";
                temp = temp.substring(0, index);
                if (ext) {
                    ext = temp;
                } else {
                    modName = temp;
                }
            }

            return {
                moduleName: modName,
                ext: ext,
                strip: strip
            };
        },

        xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/,

        /**
         * Is an URL on another domain. Only works for browser use, returns
         * false in non-browser environments. Only used to know if an
         * optimized .js version of a text resource should be loaded
         * instead.
         * @param {String} url
         * @returns Boolean
         */
        useXhr: function (url, protocol, hostname, port) {
            var uProtocol, uHostName, uPort,
                match = text.xdRegExp.exec(url);
            if (!match) {
                return true;
            }
            uProtocol = match[2];
            uHostName = match[3];

            uHostName = uHostName.split(':');
            uPort = uHostName[1];
            uHostName = uHostName[0];

            return (!uProtocol || uProtocol === protocol) &&
                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&
                   ((!uPort && !uHostName) || uPort === port);
        },

        finishLoad: function (name, strip, content, onLoad) {
            content = strip ? text.strip(content) : content;
            if (masterConfig.isBuild) {
                buildMap[name] = content;
            }
            onLoad(content);
        },

        load: function (name, req, onLoad, config) {
            //Name has format: some.module.filext!strip
            //The strip part is optional.
            //if strip is present, then that means only get the string contents
            //inside a body tag in an HTML string. For XML/SVG content it means
            //removing the <?xml ...?> declarations so the content can be inserted
            //into the current doc without problems.

            // Do not bother with the work if a build and text will
            // not be inlined.
            if (config && config.isBuild && !config.inlineText) {
                onLoad();
                return;
            }

            masterConfig.isBuild = config && config.isBuild;

            var parsed = text.parseName(name),
                nonStripName = parsed.moduleName +
                    (parsed.ext ? '.' + parsed.ext : ''),
                url = req.toUrl(nonStripName),
                useXhr = (masterConfig.useXhr) ||
                         text.useXhr;

            // Do not load if it is an empty: url
            if (url.indexOf('empty:') === 0) {
                onLoad();
                return;
            }

            //Load the text. Use XHR if possible and in a browser.
            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
                text.get(url, function (content) {
                    text.finishLoad(name, parsed.strip, content, onLoad);
                }, function (err) {
                    if (onLoad.error) {
                        onLoad.error(err);
                    }
                });
            } else {
                //Need to fetch the resource across domains. Assume
                //the resource has been optimized into a JS module. Fetch
                //by the module name + extension, but do not include the
                //!strip part to avoid file system issues.
                req([nonStripName], function (content) {
                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,
                                    parsed.strip, content, onLoad);
                });
            }
        },

        write: function (pluginName, moduleName, write, config) {
            if (buildMap.hasOwnProperty(moduleName)) {
                var content = text.jsEscape(buildMap[moduleName]);
                write.asModule(pluginName + "!" + moduleName,
                               "define(function () { return '" +
                                   content +
                               "';});\n");
            }
        },

        writeFile: function (pluginName, moduleName, req, write, config) {
            var parsed = text.parseName(moduleName),
                extPart = parsed.ext ? '.' + parsed.ext : '',
                nonStripName = parsed.moduleName + extPart,
                //Use a '.js' file name so that it indicates it is a
                //script that can be loaded across domains.
                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';

            //Leverage own load() method to load plugin value, but only
            //write out values that do not have the strip argument,
            //to avoid any potential issues with ! in file names.
            text.load(nonStripName, req, function (value) {
                //Use own write() method to construct full module value.
                //But need to create shell that translates writeFile's
                //write() to the right interface.
                var textWrite = function (contents) {
                    return write(fileName, contents);
                };
                textWrite.asModule = function (moduleName, contents) {
                    return write.asModule(moduleName, fileName, contents);
                };

                text.write(pluginName, nonStripName, textWrite, config);
            }, config);
        }
    };

    if (masterConfig.env === 'node' || (!masterConfig.env &&
            typeof process !== "undefined" &&
            process.versions &&
            !!process.versions.node &&
            !process.versions['node-webkit'] &&
            !process.versions['atom-shell'])) {
        //Using special require.nodeRequire, something added by r.js.
        fs = require.nodeRequire('fs');

        text.get = function (url, callback, errback) {
            try {
                var file = fs.readFileSync(url, 'utf8');
                //Remove BOM (Byte Mark Order) from utf8 files if it is there.
                if (file[0] === '\uFEFF') {
                    file = file.substring(1);
                }
                callback(file);
            } catch (e) {
                if (errback) {
                    errback(e);
                }
            }
        };
    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&
            text.createXhr())) {
        text.get = function (url, callback, errback, headers) {
            var xhr = text.createXhr(), header;
            xhr.open('GET', url, true);

            //Allow plugins direct access to xhr headers
            if (headers) {
                for (header in headers) {
                    if (headers.hasOwnProperty(header)) {
                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);
                    }
                }
            }

            //Allow overrides specified in config
            if (masterConfig.onXhr) {
                masterConfig.onXhr(xhr, url);
            }

            xhr.onreadystatechange = function (evt) {
                var status, err;
                //Do not explicitly handle errors, those should be
                //visible via console output in the browser.
                if (xhr.readyState === 4) {
                    status = xhr.status || 0;
                    if (status > 399 && status < 600) {
                        //An http 4xx or 5xx error. Signal an error.
                        err = new Error(url + ' HTTP status: ' + status);
                        err.xhr = xhr;
                        if (errback) {
                            errback(err);
                        }
                    } else {
                        callback(xhr.responseText);
                    }

                    if (masterConfig.onXhrComplete) {
                        masterConfig.onXhrComplete(xhr, url);
                    }
                }
            };
            xhr.send(null);
        };
    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&
            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {
        //Why Java, why is this so awkward?
        text.get = function (url, callback) {
            var stringBuffer, line,
                encoding = "utf-8",
                file = new java.io.File(url),
                lineSeparator = java.lang.System.getProperty("line.separator"),
                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),
                content = '';
            try {
                stringBuffer = new java.lang.StringBuffer();
                line = input.readLine();

                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324
                // http://www.unicode.org/faq/utf_bom.html

                // Note that when we use utf-8, the BOM should appear as "EF BB BF", but it doesn't due to this bug in the JDK:
                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058
                if (line && line.length() && line.charAt(0) === 0xfeff) {
                    // Eat the BOM, since we've already found the encoding on this file,
                    // and we plan to concatenating this buffer with others; the BOM should
                    // only appear at the top of a file.
                    line = line.substring(1);
                }

                if (line !== null) {
                    stringBuffer.append(line);
                }

                while ((line = input.readLine()) !== null) {
                    stringBuffer.append(lineSeparator);
                    stringBuffer.append(line);
                }
                //Make sure we return a JavaScript string and not a Java string.
                content = String(stringBuffer.toString()); //String
            } finally {
                input.close();
            }
            callback(content);
        };
    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&
            typeof Components !== 'undefined' && Components.classes &&
            Components.interfaces)) {
        //Avert your gaze!
        Cc = Components.classes;
        Ci = Components.interfaces;
        Components.utils['import']('resource://gre/modules/FileUtils.jsm');
        xpcIsWindows = ('@mozilla.org/windows-registry-key;1' in Cc);

        text.get = function (url, callback) {
            var inStream, convertStream, fileObj,
                readData = {};

            if (xpcIsWindows) {
                url = url.replace(/\//g, '\\');
            }

            fileObj = new FileUtils.File(url);

            //XPCOM, you so crazy
            try {
                inStream = Cc['@mozilla.org/network/file-input-stream;1']
                           .createInstance(Ci.nsIFileInputStream);
                inStream.init(fileObj, 1, 0, false);

                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']
                                .createInstance(Ci.nsIConverterInputStream);
                convertStream.init(inStream, "utf-8", inStream.available(),
                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);

                convertStream.readString(inStream.available(), readData);
                convertStream.close();
                inStream.close();
                callback(readData.value);
            } catch (e) {
                throw new Error((fileObj && fileObj.path || '') + ': ' + e);
            }
        };
    }
    return text;
});


define('text!../test/fixtures/user/sumo_profile.json',[],function () { return '{\n    "accountNonExpired": true,\n    "accountNonLocked": true,\n    "authorities": [\n        {\n            "authority": "ROLE_SUPER_ADMIN",\n            "class": "org.springframework.security.core.authority.SimpleGrantedAuthority"\n        },\n        {\n            "authority": "ROLE_USER",\n            "class": "org.springframework.security.core.authority.SimpleGrantedAuthority"\n        }\n    ],\n    "credentialsNonExpired": true,\n    "departmentNumber": "NO_DEP",\n    "displayName": "Chintha, Sumanth",\n    "email": "sumo@demo.com",\n    "enabled": true,\n    "id": 1,\n    "ldapAuth": false,\n    "postalCode": "55555",\n    "title": "IT Consultant",\n    "uid": "sumo",\n    "username": "sumo"\n}';});


define('text!../test/fixtures/user/businessadmin_profile.json',[],function () { return '{\n    "accountNonExpired": true,\n    "accountNonLocked": true,\n    "authorities": [\n        {\n            "authority": "ROLE_BUSINESS_ADMIN",\n            "class": "org.springframework.security.core.authority.SimpleGrantedAuthority"\n        },\n        {\n            "authority": "ROLE_USER",\n            "class": "org.springframework.security.core.authority.SimpleGrantedAuthority"\n        }\n    ],\n    "credentialsNonExpired": true,\n    "departmentNumber": "NO_DEP",\n    "displayName": "Chintha, Sumanth",\n    "email": "sumo@demo.com",\n    "enabled": true,\n    "id": 2,\n    "ldapAuth": false,\n    "postalCode": "55555",\n    "title": "Business User",\n    "uid": "businessadmin",\n    "username": "businessadmin"\n}';});


define('text!../test/fixtures/user/itadmin_profile.json',[],function () { return '{\n    "accountNonExpired": true,\n    "accountNonLocked": true,\n    "authorities": [\n        {\n            "authority": "ROLE_IT_ADMIN",\n            "class": "org.springframework.security.core.authority.SimpleGrantedAuthority"\n        },\n        {\n            "authority": "ROLE_USER",\n            "class": "org.springframework.security.core.authority.SimpleGrantedAuthority"\n        }\n    ],\n    "credentialsNonExpired": true,\n    "departmentNumber": "NO_DEP",\n    "displayName": "Chintha, Sumanth",\n    "email": "sumo@demo.com",\n    "enabled": true,\n    "id": 4,\n    "ldapAuth": false,\n    "postalCode": "55555",\n    "title": "IT Admin",\n    "uid": "itadmin",\n    "username": "itadmin"\n}';});


define('text!../test/fixtures/user/dataadmin_profile.json',[],function () { return '{\n    "accountNonExpired": true,\n    "accountNonLocked": true,\n    "authorities": [\n        {\n            "authority": "ROLE_DATA_ADMIN",\n            "class": "org.springframework.security.core.authority.SimpleGrantedAuthority"\n        },\n        {\n            "authority": "ROLE_USER",\n            "class": "org.springframework.security.core.authority.SimpleGrantedAuthority"\n        }\n    ],\n    "credentialsNonExpired": true,\n    "departmentNumber": "NO_DEP",\n    "displayName": "Data, Sumanth",\n    "email": "sumo@demo.com",\n    "enabled": true,\n    "id": 4,\n    "ldapAuth": false,\n    "postalCode": "55555",\n    "title": "DATA Admin",\n    "uid": "dataadmin",\n    "username": "dataadmin"\n}';});


define('text!../test/fixtures/drug/drugs_0.json',[],function () { return '{"records": [\n    {\n        "id": 1,\n        "ndc": "000020803031",\n        "recordTypeA": {\n            "a017": "F10C406",\n            "a024": "6591C",\n            "a029": "0",\n            "a030": "01639607C",\n            "a039": "-IV 2",\n            "a044": "80808I",\n            "a050": "O",\n            "a051": "A",\n            "a052": "A0",\n            "a054": "0002-0803-03S",\n            "a067": null,\n            "a068": null,\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "B",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "ARVON",\n            "e042": null,\n            "e077": "0",\n            "e085": "035",\n            "e089": null,\n            "e091": null,\n            "e092": "O",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "D",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "5100085100110",\n            "g031": "P",\n            "g036": "ropoxyphene HCl Cap 65 MG                                  1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "AIPHARMA                     A",\n            "j047": "AIPHARMA D",\n            "j057": "ARVON       CAP 65MG",\n            "j082": "0",\n            "j088": "36090271",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0500000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000005000002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "05816",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 2,\n        "ndc": "000021200011",\n        "recordTypeA": {\n            "a017": "MYVID10",\n            "a024": "0002C",\n            "a029": "9",\n            "a030": "56103767",\n            "a039": "7",\n            "a044": "80000A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-1200-01R",\n            "a067": "5",\n            "a068": null,\n            "a069": null,\n            "a070": null,\n            "a071": "I",\n            "a072": "VL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "MYVID",\n            "e042": null,\n            "e077": "0",\n            "e085": "743",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "4352530002020",\n            "g031": "F",\n            "g036": "lorbetapir F 18 IV Soln 500-1900 MBq/ML (13.5-51 mCi/ML)   1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     A",\n            "j057": "MYVID       INJ",\n            "j082": "7",\n            "j088": "84410611",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLN0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "V",\n            "l073": "IAL      1",\n            "l083": "73709",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 3,\n        "ndc": "000021407011",\n        "recordTypeA": {\n            "a017": "Z33B100",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "07054253",\n            "a039": "2",\n            "a044": "40404A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-1407-01R",\n            "a067": null,\n            "a068": null,\n            "a069": null,\n            "a070": null,\n            "a071": "I",\n            "a072": "JL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "G",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "J",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UINIDINE GLUCONATE",\n            "e042": null,\n            "e077": "0",\n            "e085": "037",\n            "e089": null,\n            "e091": "Y",\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Q",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "5100030102005",\n            "g031": "Q",\n            "g036": "uinidine Gluconate Inj 80 MG/ML                            1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "3",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Q",\n            "j057": "UINIDINE GL INJ 80MG/ML",\n            "j082": "0",\n            "j088": "11700171",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLN0",\n            "l044": "0010000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000100002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "18268",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 4,\n        "ndc": "000021975901",\n        "recordTypeA": {\n            "a017": "U8YIG 0",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "00058220C",\n            "a039": "-III6",\n            "a044": "80800A",\n            "a050": "S",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-1975-90R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "T",\n            "a072": "DL",\n            "a074": "5",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "E",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "XIRON",\n            "e042": null,\n            "e077": "0",\n            "e085": "060",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "3100030002020",\n            "g031": "T",\n            "g036": "estosterone TD Soln 30 MG/ACT                              1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     A",\n            "j057": "XIRON       SOL 30MG/ACT",\n            "j082": "7",\n            "j088": "1863JY11",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLN0",\n            "l044": "0090000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000900002",\n            "l072": "P",\n            "l073": "UMP BTL  1",\n            "l083": "64564",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 5,\n        "ndc": "000023004751",\n        "recordTypeA": {\n            "a017": "A05Y840",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "56296787",\n            "a039": "2",\n            "a044": "81604A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-3004-75S",\n            "a067": "D",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "J",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "ROZAC WEEKLY",\n            "e042": null,\n            "e077": "0",\n            "e085": "339",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "P",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "8160040006530",\n            "g031": "F",\n            "g036": "luoxetine HCl Cap Delayed Release 90 MG                    1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     P",\n            "j057": "ROZAC WEEKL CAP 90MG",\n            "j082": "3",\n            "j088": "1274DC61",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "PDR0",\n            "l044": "0004000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000040002",\n            "l072": "D",\n            "l073": "ISP PACK 0",\n            "l083": "70129",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 6,\n        "ndc": "000023145301",\n        "recordTypeA": {\n            "a017": "N51B306",\n            "a024": "5726C",\n            "a029": "0",\n            "a030": "76963412",\n            "a039": "5",\n            "a044": "62812A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-3145-30S",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "T",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "XID",\n            "e042": null,\n            "e077": "0",\n            "e085": "462",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9200040000120",\n            "g031": "N",\n            "g036": "izatidine Cap 300 MG                                       1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "4",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ELIANT PHARM                 R",\n            "j047": "ELIANT PHA",\n            "j057": "XID         CAP 300MG",\n            "j082": "0",\n            "j088": "27170701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "R",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "02155",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 7,\n        "ndc": "000023227301",\n        "recordTypeA": {\n            "a017": "G601500",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "82248597",\n            "a039": "2",\n            "a044": "89200A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-3227-30R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "TRATTERA",\n            "e042": null,\n            "e077": "0",\n            "e085": "597",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "1354015100110",\n            "g031": "A",\n            "g036": "tomoxetine HCl Cap 10 MG (Base Equiv)                      1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     S",\n            "j057": "TRATTERA    CAP 10MG",\n            "j082": "3",\n            "j088": "64280701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "79754",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 8,\n        "ndc": "000023228301",\n        "recordTypeA": {\n            "a017": "G601520",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "82248597",\n            "a039": "2",\n            "a044": "89200A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-3228-30R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "TRATTERA",\n            "e042": null,\n            "e077": "0",\n            "e085": "597",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "1354015100125",\n            "g031": "A",\n            "g036": "tomoxetine HCl Cap 25 MG (Base Equiv)                      1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     S",\n            "j057": "TRATTERA    CAP 25MG",\n            "j082": "3",\n            "j088": "64300701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "79755",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 9,\n        "ndc": "000023229301",\n        "recordTypeA": {\n            "a017": "G601530",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "82248597",\n            "a039": "2",\n            "a044": "89200A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-3229-30R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "TRATTERA",\n            "e042": null,\n            "e077": "0",\n            "e085": "597",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "1354015100140",\n            "g031": "A",\n            "g036": "tomoxetine HCl Cap 40 MG (Base Equiv)                      1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     S",\n            "j057": "TRATTERA    CAP 40MG",\n            "j082": "3",\n            "j088": "64310701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "79756",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 10,\n        "ndc": "000023230301",\n        "recordTypeA": {\n            "a017": "RETYHT0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99983561",\n            "a039": "2",\n            "a044": "81604A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-3230-30S",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "C",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "F",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBYAX",\n            "e042": null,\n            "e077": "3",\n            "e085": "917",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "2995002500110",\n            "g031": "O",\n            "g036": "lanzapine-Fluoxetine HCl Cap 3-25 MG                       1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     S",\n            "j057": "YMBYAX      CAP 3-25MG",\n            "j082": "5",\n            "j088": "49140701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    1",\n            "l083": "29137",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 11,\n        "ndc": "000023231011",\n        "recordTypeA": {\n            "a017": "4R23RW0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99983561",\n            "a039": "2",\n            "a044": "81604I",\n            "a050": "O",\n            "a051": "N",\n            "a052": "A0",\n            "a054": "0002-3231-01S",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "3",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBYAX",\n            "e042": null,\n            "e077": "3",\n            "e085": "917",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "2995002500120",\n            "g031": "O",\n            "g036": "lanzapine-Fluoxetine HCl Cap 6-25 MG                       1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     S",\n            "j057": "YMBYAX      CAP 6-25MG",\n            "j082": "3",\n            "j088": "9441JVS1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "B",\n            "l073": "LISTER   0",\n            "l083": "85477",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 12,\n        "ndc": "000023231301",\n        "recordTypeA": {\n            "a017": "BJKFJK0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99983561",\n            "a039": "2",\n            "a044": "81604A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-3231-30S",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "C",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "J",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBYAX",\n            "e042": null,\n            "e077": "3",\n            "e085": "917",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "2995002500120",\n            "g031": "O",\n            "g036": "lanzapine-Fluoxetine HCl Cap 6-25 MG                       1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     S",\n            "j057": "YMBYAX      CAP 6-25MG",\n            "j082": "3",\n            "j088": "94410701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "85477",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 13,\n        "ndc": "000023231331",\n        "recordTypeA": {\n            "a017": "KLVKLV0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99983561",\n            "a039": "2",\n            "a044": "81604I",\n            "a050": "O",\n            "a051": "N",\n            "a052": "A0",\n            "a054": "0002-3231-33S",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "J",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBYAX",\n            "e042": null,\n            "e077": "3",\n            "e085": "917",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "2995002500120",\n            "g031": "O",\n            "g036": "lanzapine-Fluoxetine HCl Cap 6-25 MG                       1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     S",\n            "j057": "YMBYAX      CAP 6-25MG",\n            "j082": "3",\n            "j088": "94410281",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0100000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000001000002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "85477",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 14,\n        "ndc": "000023232011",\n        "recordTypeA": {\n            "a017": "4RW2R50",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99983561",\n            "a039": "2",\n            "a044": "81604I",\n            "a050": "O",\n            "a051": "N",\n            "a052": "A0",\n            "a054": "0002-3232-01S",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "W",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBYAX",\n            "e042": null,\n            "e077": "3",\n            "e085": "917",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "2995002500140",\n            "g031": "O",\n            "g036": "lanzapine-Fluoxetine HCl Cap 12-25 MG                      1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     S",\n            "j057": "YMBYAX      CAP 12-25MG",\n            "j082": "3",\n            "j088": "9443JVS1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "B",\n            "l073": "LISTER   0",\n            "l083": "85479",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 15,\n        "ndc": "000023232301",\n        "recordTypeA": {\n            "a017": "KJKJXJ0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99983561",\n            "a039": "2",\n            "a044": "81604A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-3232-30S",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "C",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "J",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBYAX",\n            "e042": null,\n            "e077": "3",\n            "e085": "917",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "2995002500140",\n            "g031": "O",\n            "g036": "lanzapine-Fluoxetine HCl Cap 12-25 MG                      1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     S",\n            "j057": "YMBYAX      CAP 12-25MG",\n            "j082": "3",\n            "j088": "94430701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "85479",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 16,\n        "ndc": "000023232331",\n        "recordTypeA": {\n            "a017": "JK;;PC0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99983561",\n            "a039": "2",\n            "a044": "81604I",\n            "a050": "O",\n            "a051": "N",\n            "a052": "A0",\n            "a054": "0002-3232-33S",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "K",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBYAX",\n            "e042": null,\n            "e077": "3",\n            "e085": "917",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "2995002500140",\n            "g031": "O",\n            "g036": "lanzapine-Fluoxetine HCl Cap 12-25 MG                      1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     S",\n            "j057": "YMBYAX      CAP 12-25MG",\n            "j082": "3",\n            "j088": "94430281",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0100000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000001000002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "85479",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 17,\n        "ndc": "000023233011",\n        "recordTypeA": {\n            "a017": "4R4R540",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99983561",\n            "a039": "2",\n            "a044": "81604I",\n            "a050": "O",\n            "a051": "N",\n            "a052": "A0",\n            "a054": "0002-3233-01S",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "W",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBYAX",\n            "e042": null,\n            "e077": "3",\n            "e085": "917",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "2995002500125",\n            "g031": "O",\n            "g036": "lanzapine-Fluoxetine HCl Cap 6-50 MG                       1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     S",\n            "j057": "YMBYAX      CAP 6-50MG",\n            "j082": "3",\n            "j088": "9442JVS1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "B",\n            "l073": "LISTER   0",\n            "l083": "85478",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 18,\n        "ndc": "000023233301",\n        "recordTypeA": {\n            "a017": "KLBVJK0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99983561",\n            "a039": "2",\n            "a044": "81604A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-3233-30S",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "C",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "N",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBYAX",\n            "e042": null,\n            "e077": "3",\n            "e085": "917",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "2995002500125",\n            "g031": "O",\n            "g036": "lanzapine-Fluoxetine HCl Cap 6-50 MG                       1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     S",\n            "j057": "YMBYAX      CAP 6-50MG",\n            "j082": "3",\n            "j088": "94420701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "85478",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 19,\n        "ndc": "000023233331",\n        "recordTypeA": {\n            "a017": "L;B;GK0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99983561",\n            "a039": "2",\n            "a044": "81604I",\n            "a050": "O",\n            "a051": "N",\n            "a052": "A0",\n            "a054": "0002-3233-33S",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "G",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBYAX",\n            "e042": null,\n            "e077": "3",\n            "e085": "917",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "2995002500125",\n            "g031": "O",\n            "g036": "lanzapine-Fluoxetine HCl Cap 6-50 MG                       1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     S",\n            "j057": "YMBYAX      CAP 6-50MG",\n            "j082": "3",\n            "j088": "94420281",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0100000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000001000002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "85478",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 20,\n        "ndc": "000023234011",\n        "recordTypeA": {\n            "a017": "R234R50",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99983561",\n            "a039": "2",\n            "a044": "81604A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-3234-01S",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "C",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "4",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBYAX",\n            "e042": null,\n            "e077": "3",\n            "e085": "917",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "2995002500145",\n            "g031": "O",\n            "g036": "lanzapine-Fluoxetine HCl Cap 12-50 MG                      1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     S",\n            "j057": "YMBYAX      CAP 12-50MG",\n            "j082": "3",\n            "j088": "9444JVS1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "B",\n            "l073": "LISTER   0",\n            "l083": "85480",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 21,\n        "ndc": "000023234301",\n        "recordTypeA": {\n            "a017": "VGFJPF0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99983561",\n            "a039": "2",\n            "a044": "81604A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-3234-30S",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "C",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "J",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBYAX",\n            "e042": null,\n            "e077": "3",\n            "e085": "917",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "2995002500145",\n            "g031": "O",\n            "g036": "lanzapine-Fluoxetine HCl Cap 12-50 MG                      1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     S",\n            "j057": "YMBYAX      CAP 12-50MG",\n            "j082": "3",\n            "j088": "94440701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "85480",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 22,\n        "ndc": "000023234331",\n        "recordTypeA": {\n            "a017": "L;CVVB0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99983561",\n            "a039": "2",\n            "a044": "81604A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-3234-33S",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "C",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "M",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBYAX",\n            "e042": null,\n            "e077": "3",\n            "e085": "917",\n            "e089": null,\n            "e091": "Y",\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "2995002500145",\n            "g031": "O",\n            "g036": "lanzapine-Fluoxetine HCl Cap 12-50 MG                      1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     S",\n            "j057": "YMBYAX      CAP 12-50MG",\n            "j082": "3",\n            "j088": "94440281",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0100000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000001000002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "85480",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 23,\n        "ndc": "000023235601",\n        "recordTypeA": {\n            "a017": "XCASDW0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "36434349",\n            "a039": "2",\n            "a044": "81604A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-3235-60R",\n            "a067": "D",\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "5",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBALTA",\n            "e042": null,\n            "e077": "0",\n            "e085": "609",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "8180025106720",\n            "g031": "D",\n            "g036": "uloxetine HCl Enteric Coated Pellets Cap 20 MG             1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     C",\n            "j057": "YMBALTA     CAP 20MG",\n            "j082": "4",\n            "j088": "14640491",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "PEP0",\n            "l044": "0060000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000600002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "88908",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 24,\n        "ndc": "000023237011",\n        "recordTypeA": {\n            "a017": "TILHAS0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "36434349",\n            "a039": "2",\n            "a044": "81604I",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-3237-01R",\n            "a067": "D",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Q",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBALTA",\n            "e042": null,\n            "e077": "0",\n            "e085": "609",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "8180025106750",\n            "g031": "D",\n            "g036": "uloxetine HCl Enteric Coated Pellets Cap 60 MG             1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     C",\n            "j057": "YMBALTA     CAP 60MG",\n            "j082": "4",\n            "j088": "1466JVS1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "PEP0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "B",\n            "l073": "LISTER   0",\n            "l083": "88909",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 25,\n        "ndc": "000023237041",\n        "recordTypeA": {\n            "a017": "JHKYKH0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "36434349",\n            "a039": "2",\n            "a044": "81604I",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-3237-04R",\n            "a067": "D",\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "K",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBALTA",\n            "e042": null,\n            "e077": "0",\n            "e085": "609",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "8180025106750",\n            "g031": "D",\n            "g036": "uloxetine HCl Enteric Coated Pellets Cap 60 MG             1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     C",\n            "j057": "YMBALTA     CAP 60MG",\n            "j082": "4",\n            "j088": "14660041",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "PEP0",\n            "l044": "1000000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000010000002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "88909",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 26,\n        "ndc": "000023237301",\n        "recordTypeA": {\n            "a017": "DFVNGB0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "36434349",\n            "a039": "2",\n            "a044": "81604I",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-3237-30R",\n            "a067": "D",\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBALTA",\n            "e042": null,\n            "e077": "0",\n            "e085": "609",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "8180025106750",\n            "g031": "D",\n            "g036": "uloxetine HCl Enteric Coated Pellets Cap 60 MG             1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     C",\n            "j057": "YMBALTA     CAP 60MG",\n            "j082": "4",\n            "j088": "14660701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "PEP0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "88909",\n            "l089": "0",\n            "l091": "4N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 27,\n        "ndc": "000023237331",\n        "recordTypeA": {\n            "a017": "HNNJJM0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "36434349",\n            "a039": "2",\n            "a044": "81604I",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-3237-33R",\n            "a067": "D",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBALTA",\n            "e042": null,\n            "e077": "0",\n            "e085": "609",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "8180025106750",\n            "g031": "D",\n            "g036": "uloxetine HCl Enteric Coated Pellets Cap 60 MG             1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     C",\n            "j057": "YMBALTA     CAP 60MG",\n            "j082": "4",\n            "j088": "14660281",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "PEP0",\n            "l044": "0100000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000001000002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "88909",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 28,\n        "ndc": "000023238301",\n        "recordTypeA": {\n            "a017": "G601540",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "82248597",\n            "a039": "2",\n            "a044": "89200A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-3238-30R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "TRATTERA",\n            "e042": null,\n            "e077": "0",\n            "e085": "597",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "1354015100118",\n            "g031": "A",\n            "g036": "tomoxetine HCl Cap 18 MG (Base Equiv)                      1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     S",\n            "j057": "TRATTERA    CAP 18MG",\n            "j082": "3",\n            "j088": "64290701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "79757",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 29,\n        "ndc": "000023239301",\n        "recordTypeA": {\n            "a017": "G601550",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "82248597",\n            "a039": "2",\n            "a044": "89200A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-3239-30R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "TRATTERA",\n            "e042": null,\n            "e077": "0",\n            "e085": "597",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "1354015100160",\n            "g031": "A",\n            "g036": "tomoxetine HCl Cap 60 MG (Base Equiv)                      1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     S",\n            "j057": "TRATTERA    CAP 60MG",\n            "j082": "3",\n            "j088": "64320701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "79758",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 30,\n        "ndc": "000023240011",\n        "recordTypeA": {\n            "a017": "DRTYFU0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "36434349",\n            "a039": "2",\n            "a044": "81604A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-3240-01R",\n            "a067": "D",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "1",\n            "a075": "2",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "T",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBALTA",\n            "e042": null,\n            "e077": "0",\n            "e085": "609",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "8180025106730",\n            "g031": "D",\n            "g036": "uloxetine HCl Enteric Coated Pellets Cap 30 MG             1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     C",\n            "j057": "YMBALTA     CAP 30MG",\n            "j082": "4",\n            "j088": "1465JVS1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "PEP0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "B",\n            "l073": "LISTER   0",\n            "l083": "88910",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 31,\n        "ndc": "000023240301",\n        "recordTypeA": {\n            "a017": "RTTYYU0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "36434349",\n            "a039": "2",\n            "a044": "81604A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-3240-30R",\n            "a067": "D",\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "1",\n            "a075": "2",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "R",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBALTA",\n            "e042": null,\n            "e077": "0",\n            "e085": "609",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "8180025106730",\n            "g031": "D",\n            "g036": "uloxetine HCl Enteric Coated Pellets Cap 30 MG             1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     C",\n            "j057": "YMBALTA     CAP 30MG",\n            "j082": "4",\n            "j088": "14650701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "PEP0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "88910",\n            "l089": "9",\n            "l091": "0N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 32,\n        "ndc": "000023240331",\n        "recordTypeA": {\n            "a017": "LIIDDR0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "36434349",\n            "a039": "2",\n            "a044": "81604A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-3240-33R",\n            "a067": "D",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "1",\n            "a075": "2",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBALTA",\n            "e042": null,\n            "e077": "0",\n            "e085": "609",\n            "e089": null,\n            "e091": "Y",\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "8180025106730",\n            "g031": "D",\n            "g036": "uloxetine HCl Enteric Coated Pellets Cap 30 MG             1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     C",\n            "j057": "YMBALTA     CAP 30MG",\n            "j082": "4",\n            "j088": "14650281",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "PEP0",\n            "l044": "0100000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000001000002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "88910",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 33,\n        "ndc": "000023240901",\n        "recordTypeA": {\n            "a017": "WED2  0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "36434349",\n            "a039": "2",\n            "a044": "81604A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-3240-90R",\n            "a067": "D",\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "1",\n            "a075": "2",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Q",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBALTA",\n            "e042": null,\n            "e077": "0",\n            "e085": "609",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "8180025106730",\n            "g031": "D",\n            "g036": "uloxetine HCl Enteric Coated Pellets Cap 30 MG             1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     C",\n            "j057": "YMBALTA     CAP 30MG",\n            "j082": "4",\n            "j088": "14659661",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "PEP0",\n            "l044": "0090000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000900002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "889103",\n            "l089": "0",\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 34,\n        "ndc": "000023250301",\n        "recordTypeA": {\n            "a017": "G6TTYF0",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "82248597",\n            "a039": "2",\n            "a044": "89200A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-3250-30R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "J",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "TRATTERA",\n            "e042": null,\n            "e077": "0",\n            "e085": "597",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "1354015100170",\n            "g031": "A",\n            "g036": "tomoxetine HCl Cap 80 MG (Base Equiv)                      1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     S",\n            "j057": "TRATTERA    CAP 80MG",\n            "j082": "4",\n            "j088": "91280701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    1",\n            "l083": "00375",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 35,\n        "ndc": "000023251301",\n        "recordTypeA": {\n            "a017": "F3E45T0",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "82248597",\n            "a039": "2",\n            "a044": "89200A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-3251-30R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "D",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "TRATTERA",\n            "e042": null,\n            "e077": "0",\n            "e085": "597",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "1354015100180",\n            "g031": "A",\n            "g036": "tomoxetine HCl Cap 100 MG (Base Equiv)                     1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     S",\n            "j057": "TRATTERA    CAP 100MG",\n            "j082": "4",\n            "j088": "91290701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    1",\n            "l083": "00376",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 36,\n        "ndc": "000023270011",\n        "recordTypeA": {\n            "a017": "WOIAMB0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "36434349",\n            "a039": "2",\n            "a044": "81604A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-3270-01R",\n            "a067": "D",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "1",\n            "a075": "1",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "P",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBALTA",\n            "e042": null,\n            "e077": "0",\n            "e085": "609",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "8180025106750",\n            "g031": "D",\n            "g036": "uloxetine HCl Enteric Coated Pellets Cap 60 MG             1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     C",\n            "j057": "YMBALTA     CAP 60MG",\n            "j082": "4",\n            "j088": "1466JVS1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "PEP0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "B",\n            "l073": "LISTER   0",\n            "l083": "88909",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 37,\n        "ndc": "000023270041",\n        "recordTypeA": {\n            "a017": "TKUYFR0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "36434349",\n            "a039": "2",\n            "a044": "81604A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-3270-04R",\n            "a067": "D",\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "1",\n            "a075": "1",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "G",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBALTA",\n            "e042": null,\n            "e077": "0",\n            "e085": "609",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "8180025106750",\n            "g031": "D",\n            "g036": "uloxetine HCl Enteric Coated Pellets Cap 60 MG             1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     C",\n            "j057": "YMBALTA     CAP 60MG",\n            "j082": "4",\n            "j088": "14660041",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "PEP0",\n            "l044": "1000000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000010000002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "889093",\n            "l089": "0",\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 38,\n        "ndc": "000023270301",\n        "recordTypeA": {\n            "a017": "FJYTHF0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "36434349",\n            "a039": "2",\n            "a044": "81604A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-3270-30R",\n            "a067": "D",\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "1",\n            "a075": "1",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "G",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBALTA",\n            "e042": null,\n            "e077": "0",\n            "e085": "609",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "8180025106750",\n            "g031": "D",\n            "g036": "uloxetine HCl Enteric Coated Pellets Cap 60 MG             1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     C",\n            "j057": "YMBALTA     CAP 60MG",\n            "j082": "4",\n            "j088": "14660701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "PEP0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "88909",\n            "l089": "0",\n            "l091": "4N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 39,\n        "ndc": "000023270331",\n        "recordTypeA": {\n            "a017": "WRHEA 0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "36434349",\n            "a039": "2",\n            "a044": "81604A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-3270-33R",\n            "a067": "D",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "1",\n            "a075": "1",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YMBALTA",\n            "e042": null,\n            "e077": "0",\n            "e085": "609",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "8180025106750",\n            "g031": "D",\n            "g036": "uloxetine HCl Enteric Coated Pellets Cap 60 MG             1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     C",\n            "j057": "YMBALTA     CAP 60MG",\n            "j082": "4",\n            "j088": "14660281",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "PEP0",\n            "l044": "0100000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000001000002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "88909",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 40,\n        "ndc": "000024112011",\n        "recordTypeA": {\n            "a017": "UTTFDY0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608I",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4112-01S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Y",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000305",\n            "g031": "O",\n            "g036": "lanzapine Tab 2.5 MG                                       1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 2.5MG   Z",\n            "j082": "YPR251",\n            "j088": "8717JVS1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "B",\n            "l073": "LISTER   0",\n            "l083": "50838",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 41,\n        "ndc": "000024112041",\n        "recordTypeA": {\n            "a017": "F55X800",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608I",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4112-04S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000305",\n            "g031": "O",\n            "g036": "lanzapine Tab 2.5 MG                                       1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 2.5MG   Z",\n            "j082": "YPR251",\n            "j088": "87170041",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "1000000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000010000002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "508383",\n            "l089": "0",\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 42,\n        "ndc": "000024112301",\n        "recordTypeA": {\n            "a017": "DLJERI0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4112-30S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "F",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000305",\n            "g031": "O",\n            "g036": "lanzapine Tab 2.5 MG                                       1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 2.5MG   Z",\n            "j082": "YPR251",\n            "j088": "87170701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "50838",\n            "l089": "0",\n            "l091": "4N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 43,\n        "ndc": "000024112331",\n        "recordTypeA": {\n            "a017": "F55X850",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608I",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4112-33S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000305",\n            "g031": "O",\n            "g036": "lanzapine Tab 2.5 MG                                       1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 2.5MG   Z",\n            "j082": "YPR251",\n            "j088": "87170281",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0100000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000001000002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "50838",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 44,\n        "ndc": "000024115011",\n        "recordTypeA": {\n            "a017": "3R43430",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608I",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4115-01S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "W",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000310",\n            "g031": "O",\n            "g036": "lanzapine Tab 5 MG                                         1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 5MG     Z",\n            "j082": "YPR5 1",\n            "j088": "6508JVS1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "B",\n            "l073": "LISTER   0",\n            "l083": "45683",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 45,\n        "ndc": "000024115041",\n        "recordTypeA": {\n            "a017": "F55X900",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608I",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4115-04S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000310",\n            "g031": "O",\n            "g036": "lanzapine Tab 5 MG                                         1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 5MG     Z",\n            "j082": "YPR5 1",\n            "j088": "65080041",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "1000000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000010000002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "456833",\n            "l089": "0",\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 46,\n        "ndc": "000024115301",\n        "recordTypeA": {\n            "a017": "SKLJEI0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4115-30S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "D",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000310",\n            "g031": "O",\n            "g036": "lanzapine Tab 5 MG                                         1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 5MG     Z",\n            "j082": "YPR5 1",\n            "j088": "65080701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "45683",\n            "l089": "0",\n            "l091": "4N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 47,\n        "ndc": "000024115331",\n        "recordTypeA": {\n            "a017": "D13T530",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608I",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4115-33S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000310",\n            "g031": "O",\n            "g036": "lanzapine Tab 5 MG                                         1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 5MG     Z",\n            "j082": "YPR5 1",\n            "j088": "65080281",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0100000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000001000002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "45683",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 48,\n        "ndc": "000024116011",\n        "recordTypeA": {\n            "a017": "Y3T34T0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608I",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4116-01S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "G",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000315",\n            "g031": "O",\n            "g036": "lanzapine Tab 7.5 MG                                       1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 7.5MG   Z",\n            "j082": "YPR751",\n            "j088": "6510JVS1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "B",\n            "l073": "LISTER   0",\n            "l083": "45684",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 49,\n        "ndc": "000024116041",\n        "recordTypeA": {\n            "a017": "G667060",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4116-04S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000315",\n            "g031": "O",\n            "g036": "lanzapine Tab 7.5 MG                                       1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 7.5MG   Z",\n            "j082": "YPR751",\n            "j088": "65100041",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "1000000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000010000002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "456846",\n            "l089": "0",\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 50,\n        "ndc": "000024116301",\n        "recordTypeA": {\n            "a017": "GFTYHF0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4116-30S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000315",\n            "g031": "O",\n            "g036": "lanzapine Tab 7.5 MG                                       1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 7.5MG   Z",\n            "j082": "YPR751",\n            "j088": "65100701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "45684",\n            "l089": "6",\n            "l091": "0N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 51,\n        "ndc": "000024116331",\n        "recordTypeA": {\n            "a017": "D13T600",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608I",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4116-33S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000315",\n            "g031": "O",\n            "g036": "lanzapine Tab 7.5 MG                                       1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 7.5MG   Z",\n            "j082": "YPR751",\n            "j088": "65100281",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0100000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000001000002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "45684",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 52,\n        "ndc": "000024117011",\n        "recordTypeA": {\n            "a017": "YUIUYO0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608I",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4117-01S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "F",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000320",\n            "g031": "O",\n            "g036": "lanzapine Tab 10 MG                                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 10MG    Z",\n            "j082": "YPR101",\n            "j088": "6512JVS1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "B",\n            "l073": "LISTER   0",\n            "l083": "45686",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 53,\n        "ndc": "000024117041",\n        "recordTypeA": {\n            "a017": "F55X950",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4117-04S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000320",\n            "g031": "O",\n            "g036": "lanzapine Tab 10 MG                                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 10MG    Z",\n            "j082": "YPR101",\n            "j088": "65120041",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "1000000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000010000002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "456866",\n            "l089": "0",\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 54,\n        "ndc": "000024117301",\n        "recordTypeA": {\n            "a017": "SFKLJD0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4117-30S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "D",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000320",\n            "g031": "O",\n            "g036": "lanzapine Tab 10 MG                                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 10MG    Z",\n            "j082": "YPR101",\n            "j088": "65120701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "45686",\n            "l089": "6",\n            "l091": "0N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 55,\n        "ndc": "000024117331",\n        "recordTypeA": {\n            "a017": "D13T700",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608I",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4117-33S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000320",\n            "g031": "O",\n            "g036": "lanzapine Tab 10 MG                                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 10MG    Z",\n            "j082": "YPR101",\n            "j088": "65120281",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0100000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000001000002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "45686",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 56,\n        "ndc": "000024165021",\n        "recordTypeA": {\n            "a017": "E36T000",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "82640048",\n            "a039": "6",\n            "a044": "81612A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-4165-02R",\n            "a067": null,\n            "a068": "X",\n            "a069": "U",\n            "a070": "U",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "1",\n            "a075": "3",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "VISTA",\n            "e042": null,\n            "e077": "0",\n            "e085": "590",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "0053060100320",\n            "g031": "R",\n            "g036": "aloxifene HCl Tab 60 MG                                    1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "3",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     E",\n            "j057": "VISTA       TAB 60MG    E",\n            "j082": "VIS602",\n            "j088": "26470011",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0100000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000001000002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "541333",\n            "l089": "40",\n            "l091": "7N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 57,\n        "ndc": "000024165071",\n        "recordTypeA": {\n            "a017": "E72L250",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "82640048",\n            "a039": "6",\n            "a044": "81612A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-4165-07R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "1",\n            "a075": "3",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "VISTA",\n            "e042": null,\n            "e077": "0",\n            "e085": "590",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "0053060100320",\n            "g031": "R",\n            "g036": "aloxifene HCl Tab 60 MG                                    1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "3",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     E",\n            "j057": "VISTA       TAB 60MG    E",\n            "j082": "VIS602",\n            "j088": "2647AM21",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "2000000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000020000002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "541330",\n            "l089": "2",\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 58,\n        "ndc": "000024165301",\n        "recordTypeA": {\n            "a017": "E35T900",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "82640048",\n            "a039": "6",\n            "a044": "81612A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-4165-30R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "1",\n            "a075": "3",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "VISTA",\n            "e042": null,\n            "e077": "0",\n            "e085": "590",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "0053060100320",\n            "g031": "R",\n            "g036": "aloxifene HCl Tab 60 MG                                    1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "3",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     E",\n            "j057": "VISTA       TAB 60MG    E",\n            "j082": "VIS602",\n            "j088": "26470401",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "54133",\n            "l089": "3",\n            "l091": "4N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 59,\n        "ndc": "000024165341",\n        "recordTypeA": {\n            "a017": "YURYIT0",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "82640048",\n            "a039": "6",\n            "a044": "81612I",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-4165-34R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "1",\n            "a075": "3",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "T",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "VISTA",\n            "e042": null,\n            "e077": "0",\n            "e085": "590",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "0053060100320",\n            "g031": "R",\n            "g036": "aloxifene HCl Tab 60 MG                                    1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "3",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     E",\n            "j057": "VISTA       TAB 60MG    E",\n            "j082": "VIS602",\n            "j088": "26470331",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "541333",\n            "l089": "00",\n            "l091": "2N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 60,\n        "ndc": "000024165791",\n        "recordTypeA": {\n            "a017": "EEVISB0",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "82640048",\n            "a039": "6",\n            "a044": "81612I",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-4165-79R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "1",\n            "a075": "3",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "VISTA",\n            "e042": null,\n            "e077": "0",\n            "e085": "590",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "0053060100320",\n            "g031": "R",\n            "g036": "aloxifene HCl Tab 60 MG                                    1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "3",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     E",\n            "j057": "VISTA       TAB 60MG    E",\n            "j082": "VIS602",\n            "j088": "26473291",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0015000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000150002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "54133",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 61,\n        "ndc": "000024415011",\n        "recordTypeA": {\n            "a017": "R2R4RR0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4415-01S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "4",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000330",\n            "g031": "O",\n            "g036": "lanzapine Tab 15 MG                                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 15MG",\n            "j082": "2",\n            "j088": "6884JVS1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "B",\n            "l073": "LISTER   0",\n            "l083": "62905",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 62,\n        "ndc": "000024415041",\n        "recordTypeA": {\n            "a017": "F55X980",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4415-04S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000330",\n            "g031": "O",\n            "g036": "lanzapine Tab 15 MG                                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 15MG",\n            "j082": "2",\n            "j088": "68840041",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "1000000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000010000002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "629056",\n            "l089": "0",\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 63,\n        "ndc": "000024415301",\n        "recordTypeA": {\n            "a017": "E28L950",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4415-30S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000330",\n            "g031": "O",\n            "g036": "lanzapine Tab 15 MG                                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 15MG",\n            "j082": "2",\n            "j088": "68840701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "62905",\n            "l089": "6",\n            "l091": "0N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 64,\n        "ndc": "000024415331",\n        "recordTypeA": {\n            "a017": "E63L400",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4415-33S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": null,\n            "e091": "Y",\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000330",\n            "g031": "O",\n            "g036": "lanzapine Tab 15 MG                                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 15MG",\n            "j082": "2",\n            "j088": "68840281",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0100000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000001000002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "629056",\n            "l089": "00",\n            "l091": "4N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 65,\n        "ndc": "000024420011",\n        "recordTypeA": {\n            "a017": "35T34T0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608I",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4420-01S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000340",\n            "g031": "O",\n            "g036": "lanzapine Tab 20 MG                                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 20MG    Z",\n            "j082": "YPR203",\n            "j088": "0819JVS1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "B",\n            "l073": "LISTER   0",\n            "l083": "68877",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 66,\n        "ndc": "000024420041",\n        "recordTypeA": {\n            "a017": "G044650",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4420-04S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000340",\n            "g031": "O",\n            "g036": "lanzapine Tab 20 MG                                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 20MG    Z",\n            "j082": "YPR203",\n            "j088": "08190041",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "1000000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000010000002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "688776",\n            "l089": "0",\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 67,\n        "ndc": "000024420301",\n        "recordTypeA": {\n            "a017": "FDEUHE0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4420-30S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000340",\n            "g031": "O",\n            "g036": "lanzapine Tab 20 MG                                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 20MG    Z",\n            "j082": "YPR203",\n            "j088": "08190701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "68877",\n            "l089": "6",\n            "l091": "0N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 68,\n        "ndc": "000024420331",\n        "recordTypeA": {\n            "a017": "G044660",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608I",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4420-33S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060000340",\n            "g031": "O",\n            "g036": "lanzapine Tab 20 MG                                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      TAB 20MG    Z",\n            "j082": "YPR203",\n            "j088": "08190281",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0100000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000001000002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "688776",\n            "l089": "00",\n            "l091": "4N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 69,\n        "ndc": "000024453011",\n        "recordTypeA": {\n            "a017": "G061610",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4453-01S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA ZYDIS",\n            "e042": null,\n            "e077": "6",\n            "e085": "595",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060007210",\n            "g031": "O",\n            "g036": "lanzapine Orally Disintegrating Tab 5 MG                   1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA ZYDI TAB 5MG     Z",\n            "j082": "YPZDS2",\n            "j088": "9025G531",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "BDP0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "P",\n            "l073": "ACKAGE   0",\n            "l083": "67326",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 70,\n        "ndc": "000024453851",\n        "recordTypeA": {\n            "a017": "F38X800",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4453-85S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA ZYDIS",\n            "e042": null,\n            "e077": "6",\n            "e085": "595",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060007210",\n            "g031": "O",\n            "g036": "lanzapine Orally Disintegrating Tab 5 MG                   1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA ZYDI TAB 5MG     Z",\n            "j082": "YPZDS2",\n            "j088": "90250331",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "BDP0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "67326",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 71,\n        "ndc": "000024454011",\n        "recordTypeA": {\n            "a017": "G061620",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4454-01S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA ZYDIS",\n            "e042": null,\n            "e077": "6",\n            "e085": "595",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060007220",\n            "g031": "O",\n            "g036": "lanzapine Orally Disintegrating Tab 10 MG                  1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA ZYDI TAB 10MG    Z",\n            "j082": "YZY102",\n            "j088": "9026JX21",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "BDP0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "B",\n            "l073": "LISTER   0",\n            "l083": "67327",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 72,\n        "ndc": "000024454851",\n        "recordTypeA": {\n            "a017": "F38X850",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4454-85S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA ZYDIS",\n            "e042": null,\n            "e077": "6",\n            "e085": "595",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060007220",\n            "g031": "O",\n            "g036": "lanzapine Orally Disintegrating Tab 10 MG                  1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA ZYDI TAB 10MG    Z",\n            "j082": "YZY102",\n            "j088": "90260331",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "BDP0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "67327",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 73,\n        "ndc": "000024455011",\n        "recordTypeA": {\n            "a017": "G061640",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4455-01S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA ZYDIS",\n            "e042": null,\n            "e077": "6",\n            "e085": "595",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060007230",\n            "g031": "O",\n            "g036": "lanzapine Orally Disintegrating Tab 15 MG                  1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA ZYDI TAB 15MG",\n            "j082": "2",\n            "j088": "9027JX21",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "BDP0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "B",\n            "l073": "LISTER   0",\n            "l083": "73657",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 74,\n        "ndc": "000024455851",\n        "recordTypeA": {\n            "a017": "G047040",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4455-85S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA ZYDIS",\n            "e042": null,\n            "e077": "6",\n            "e085": "595",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060007230",\n            "g031": "O",\n            "g036": "lanzapine Orally Disintegrating Tab 15 MG                  1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA ZYDI TAB 15MG",\n            "j082": "2",\n            "j088": "90270331",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "BDP0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "73657",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 75,\n        "ndc": "000024456011",\n        "recordTypeA": {\n            "a017": "G061630",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4456-01S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA ZYDIS",\n            "e042": null,\n            "e077": "6",\n            "e085": "595",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060007240",\n            "g031": "O",\n            "g036": "lanzapine Orally Disintegrating Tab 20 MG                  1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA ZYDI TAB 20MG",\n            "j082": "2",\n            "j088": "9028JX21",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "BDP0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "B",\n            "l073": "LISTER   0",\n            "l083": "73658",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 76,\n        "ndc": "000024456851",\n        "recordTypeA": {\n            "a017": "G047770",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0002-4456-85S",\n            "a067": "P",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA ZYDIS",\n            "e042": null,\n            "e077": "6",\n            "e085": "595",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060007240",\n            "g031": "O",\n            "g036": "lanzapine Orally Disintegrating Tab 20 MG                  1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA ZYDI TAB 20MG",\n            "j082": "2",\n            "j088": "90280331",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "BDP0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "73658",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 77,\n        "ndc": "000024462101",\n        "recordTypeA": {\n            "a017": "DFAWPE0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "71596295",\n            "a039": "2",\n            "a044": "41212I",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-4462-10R",\n            "a067": "V",\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "5",\n            "a075": "5",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "IALIS",\n            "e042": null,\n            "e077": "0",\n            "e085": "583",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "0304080000305",\n            "g031": "T",\n            "g036": "adalafil Tab 5 MG                                          1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "4",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     C",\n            "j057": "IALIS       TAB 5MG",\n            "j082": "3",\n            "j088": "9181A211",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0010000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000100002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "85041",\n            "l089": "3",\n            "l091": "4N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 78,\n        "ndc": "000024462301",\n        "recordTypeA": {\n            "a017": "FJVKLK0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "71596295",\n            "a039": "2",\n            "a044": "41212A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-4462-30R",\n            "a067": "V",\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "5",\n            "a075": "5",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "D",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "IALIS",\n            "e042": null,\n            "e077": "0",\n            "e085": "583",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "0304080000305",\n            "g031": "T",\n            "g036": "adalafil Tab 5 MG                                          1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "4",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     C",\n            "j057": "IALIS       TAB 5MG",\n            "j082": "3",\n            "j088": "91810701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "85041",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 79,\n        "ndc": "000024462341",\n        "recordTypeA": {\n            "a017": "J9UOHK0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "71596295",\n            "a039": "2",\n            "a044": "41212A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-4462-34R",\n            "a067": "V",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "5",\n            "a075": "5",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "IALIS",\n            "e042": null,\n            "e077": "0",\n            "e085": "583",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "0304080000305",\n            "g031": "T",\n            "g036": "adalafil Tab 5 MG                                          1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "4",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     C",\n            "j057": "IALIS       TAB 5MG",\n            "j082": "3",\n            "j088": "91810331",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "85041",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 80,\n        "ndc": "000024462791",\n        "recordTypeA": {\n            "a017": "IABL5M0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "71596295",\n            "a039": "2",\n            "a044": "41212A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-4462-79R",\n            "a067": "V",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "5",\n            "a075": "5",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "IALIS",\n            "e042": null,\n            "e077": "0",\n            "e085": "583",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "0304080000305",\n            "g031": "T",\n            "g036": "adalafil Tab 5 MG                                          1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "4",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     C",\n            "j057": "IALIS       TAB 5MG",\n            "j082": "3",\n            "j088": "91813291",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0015000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000150002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "85041",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 81,\n        "ndc": "000024463301",\n        "recordTypeA": {\n            "a017": "JKJDFG0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "71596295",\n            "a039": "2",\n            "a044": "41212A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-4463-30R",\n            "a067": "V",\n            "a068": null,\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "D",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "IALIS",\n            "e042": null,\n            "e077": "0",\n            "e085": "583",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "0304080000310",\n            "g031": "T",\n            "g036": "adalafil Tab 10 MG                                         1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "4",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     C",\n            "j057": "IALIS       TAB 10MG",\n            "j082": "3",\n            "j088": "91820701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "85040",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 82,\n        "ndc": "000024464301",\n        "recordTypeA": {\n            "a017": "KFJLKD0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "71596295",\n            "a039": "2",\n            "a044": "41212A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-4464-30R",\n            "a067": "V",\n            "a068": null,\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "2",\n            "a075": "2",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "J",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "IALIS",\n            "e042": null,\n            "e077": "0",\n            "e085": "583",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "0304080000320",\n            "g031": "T",\n            "g036": "adalafil Tab 20 MG                                         1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "4",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     C",\n            "j057": "IALIS       TAB 20MG",\n            "j082": "3",\n            "j088": "81300701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "85039",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 83,\n        "ndc": "000024465341",\n        "recordTypeA": {\n            "a017": "MJO9UO0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "71596295",\n            "a039": "2",\n            "a044": "41212A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-4465-34R",\n            "a067": "V",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "N",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "IALIS",\n            "e042": null,\n            "e077": "0",\n            "e085": "583",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "0304080000302",\n            "g031": "T",\n            "g036": "adalafil Tab 2.5 MG                                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "4",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     C",\n            "j057": "IALIS       TAB 2.5MG",\n            "j082": "5",\n            "j088": "73730331",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OX       1",\n            "l083": "33138",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 84,\n        "ndc": "000024465791",\n        "recordTypeA": {\n            "a017": "IABL250",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "71596295",\n            "a039": "2",\n            "a044": "41212A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-4465-79R",\n            "a067": "V",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "IALIS",\n            "e042": null,\n            "e077": "0",\n            "e085": "583",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "0304080000302",\n            "g031": "T",\n            "g036": "adalafil Tab 2.5 MG                                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "4",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     C",\n            "j057": "IALIS       TAB 2.5MG",\n            "j082": "5",\n            "j088": "73733291",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0015000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000150002",\n            "l072": "B",\n            "l073": "OX       1",\n            "l083": "33138",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 85,\n        "ndc": "000024759011",\n        "recordTypeA": {\n            "a017": "9R8TER0",\n            "a024": "0002C",\n            "a029": "3",\n            "a030": "89574190",\n            "a039": "2",\n            "a044": "01218I",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-4759-01R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "FFIENT",\n            "e042": null,\n            "e077": "0",\n            "e085": "727",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "5158060100330",\n            "g031": "P",\n            "g036": "rasugrel HCl Tab 10 MG (Base Equiv)                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "8",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     E",\n            "j057": "FFIENT      TAB 10MG",\n            "j082": "6",\n            "j088": "3961JVS1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "B",\n            "l073": "LISTER   1",\n            "l083": "44548",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 86,\n        "ndc": "000024759301",\n        "recordTypeA": {\n            "a017": "CSDFWR0",\n            "a024": "0002C",\n            "a029": "3",\n            "a030": "89574190",\n            "a039": "2",\n            "a044": "01218I",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-4759-30R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "FFIENT",\n            "e042": null,\n            "e077": "0",\n            "e085": "727",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "5158060100330",\n            "g031": "P",\n            "g036": "rasugrel HCl Tab 10 MG (Base Equiv)                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "8",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     E",\n            "j057": "FFIENT      TAB 10MG",\n            "j082": "6",\n            "j088": "39610701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    1",\n            "l083": "44548",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 87,\n        "ndc": "000024759771",\n        "recordTypeA": {\n            "a017": "SFCFDQ0",\n            "a024": "0002C",\n            "a029": "3",\n            "a030": "89574190",\n            "a039": "2",\n            "a044": "01218I",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-4759-77R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "FFIENT",\n            "e042": null,\n            "e077": "0",\n            "e085": "727",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "5158060100330",\n            "g031": "P",\n            "g036": "rasugrel HCl Tab 10 MG (Base Equiv)                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "8",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     E",\n            "j057": "FFIENT      TAB 10MG",\n            "j082": "6",\n            "j088": "3961BQ81",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0090000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000900002",\n            "l072": "B",\n            "l073": "OX       1",\n            "l083": "44548",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 88,\n        "ndc": "000024760301",\n        "recordTypeA": {\n            "a017": "DFER3R0",\n            "a024": "0002C",\n            "a029": "3",\n            "a030": "89574190",\n            "a039": "2",\n            "a044": "01218I",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-4760-30R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "F",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "FFIENT",\n            "e042": null,\n            "e077": "0",\n            "e085": "727",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "5158060100320",\n            "g031": "P",\n            "g036": "rasugrel HCl Tab 5 MG (Base Equiv)                         1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "8",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     E",\n            "j057": "FFIENT      TAB 5MG",\n            "j082": "6",\n            "j088": "39600701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    1",\n            "l083": "44547",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 89,\n        "ndc": "000024760761",\n        "recordTypeA": {\n            "a017": "UIHJIO0",\n            "a024": "0002C",\n            "a029": "3",\n            "a030": "89574190",\n            "a039": "2",\n            "a044": "01218I",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-4760-76R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "O",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "FFIENT",\n            "e042": null,\n            "e077": "0",\n            "e085": "727",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "5158060100320",\n            "g031": "P",\n            "g036": "rasugrel HCl Tab 5 MG (Base Equiv)                         1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "8",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     E",\n            "j057": "FFIENT      TAB 5MG",\n            "j082": "6",\n            "j088": "3960U231",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0007000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000070002",\n            "l072": "B",\n            "l073": "OTTLE    1",\n            "l083": "44547",\n            "l089": "3",\n            "l091": "0N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 90,\n        "ndc": "000024770901",\n        "recordTypeA": {\n            "a017": "FGVFWE0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "47526327",\n            "a039": "2",\n            "a044": "40608I",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-4770-90R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "D",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "IVALO",\n            "e042": null,\n            "e077": "0",\n            "e085": "456",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9400058100320",\n            "g031": "P",\n            "g036": "itavastatin Calcium Tab 1 MG (Base Equiv)                  1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "3",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     L",\n            "j057": "IVALO       TAB 1MG",\n            "j082": "6",\n            "j088": "43209661",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0090000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000900002",\n            "l072": "B",\n            "l073": "OTTLE    1",\n            "l083": "53466",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 91,\n        "ndc": "000024771901",\n        "recordTypeA": {\n            "a017": "FVGVSC0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "47526327",\n            "a039": "2",\n            "a044": "40608I",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-4771-90R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "D",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "IVALO",\n            "e042": null,\n            "e077": "0",\n            "e085": "456",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9400058100330",\n            "g031": "P",\n            "g036": "itavastatin Calcium Tab 2 MG (Base Equiv)                  1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "3",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     L",\n            "j057": "IVALO       TAB 2MG",\n            "j082": "6",\n            "j088": "43219661",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0090000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000900002",\n            "l072": "B",\n            "l073": "OTTLE    1",\n            "l083": "53467",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 92,\n        "ndc": "000024772901",\n        "recordTypeA": {\n            "a017": "DFVVFF0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "47526327",\n            "a039": "2",\n            "a044": "40608I",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-4772-90R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "IVALO",\n            "e042": null,\n            "e077": "0",\n            "e085": "456",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9400058100340",\n            "g031": "P",\n            "g036": "itavastatin Calcium Tab 4 MG (Base Equiv)                  1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "3",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     L",\n            "j057": "IVALO       TAB 4MG",\n            "j082": "6",\n            "j088": "43229661",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0090000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000900002",\n            "l072": "B",\n            "l073": "OTTLE    1",\n            "l083": "53468",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 93,\n        "ndc": "000025121011",\n        "recordTypeA": {\n            "a017": "LGH3RG0",\n            "a024": "0002C",\n            "a029": "3",\n            "a030": "89574190",\n            "a039": "2",\n            "a044": "01218A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-5121-01R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Q",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "FFIENT",\n            "e042": null,\n            "e077": "0",\n            "e085": "727",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "5158060100320",\n            "g031": "P",\n            "g036": "rasugrel HCl Tab 5 MG (Base Equiv)                         1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "8",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     E",\n            "j057": "FFIENT      TAB 5MG",\n            "j082": "6",\n            "j088": "3960JVS1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "B",\n            "l073": "LISTER   1",\n            "l083": "44547",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 94,\n        "ndc": "000025121301",\n        "recordTypeA": {\n            "a017": "9A8FB70",\n            "a024": "0002C",\n            "a029": "3",\n            "a030": "89574190",\n            "a039": "2",\n            "a044": "01218A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-5121-30R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "O",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "FFIENT",\n            "e042": null,\n            "e077": "0",\n            "e085": "727",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "5158060100320",\n            "g031": "P",\n            "g036": "rasugrel HCl Tab 5 MG (Base Equiv)                         1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "8",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     E",\n            "j057": "FFIENT      TAB 5MG",\n            "j082": "6",\n            "j088": "39600701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    1",\n            "l083": "445475",\n            "l089": "2",\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 95,\n        "ndc": "000025121521",\n        "recordTypeA": {\n            "a017": "KLSJGK0",\n            "a024": "0002C",\n            "a029": "3",\n            "a030": "89574190",\n            "a039": "2",\n            "a044": "01218A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-5121-52R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "FFIENT",\n            "e042": null,\n            "e077": "0",\n            "e085": "727",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "5158060100320",\n            "g031": "P",\n            "g036": "rasugrel HCl Tab 5 MG (Base Equiv)                         1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "8",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     E",\n            "j057": "FFIENT      TAB 5MG",\n            "j082": "6",\n            "j088": "3960R371",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0024000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000240002",\n            "l072": "D",\n            "l073": "ISP PACK 1",\n            "l083": "44547",\n            "l089": "3",\n            "l091": "0N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 96,\n        "ndc": "000025123011",\n        "recordTypeA": {\n            "a017": "HJW4T50",\n            "a024": "0002C",\n            "a029": "3",\n            "a030": "89574190",\n            "a039": "2",\n            "a044": "01218A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-5123-01R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "3",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "6",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "FFIENT",\n            "e042": null,\n            "e077": "0",\n            "e085": "727",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "5158060100330",\n            "g031": "P",\n            "g036": "rasugrel HCl Tab 10 MG (Base Equiv)                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "8",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     E",\n            "j057": "FFIENT      TAB 10MG",\n            "j082": "6",\n            "j088": "3961JVS1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "B",\n            "l073": "LISTER   1",\n            "l083": "44548",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 97,\n        "ndc": "000025123301",\n        "recordTypeA": {\n            "a017": "9OSFBH0",\n            "a024": "0002C",\n            "a029": "3",\n            "a030": "89574190",\n            "a039": "2",\n            "a044": "01218A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-5123-30R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "3",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "FFIENT",\n            "e042": null,\n            "e077": "0",\n            "e085": "727",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "5158060100330",\n            "g031": "P",\n            "g036": "rasugrel HCl Tab 10 MG (Base Equiv)                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "8",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     E",\n            "j057": "FFIENT      TAB 10MG",\n            "j082": "6",\n            "j088": "39610701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    1",\n            "l083": "44548",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 98,\n        "ndc": "000025123771",\n        "recordTypeA": {\n            "a017": "9SZGNU0",\n            "a024": "0002C",\n            "a029": "3",\n            "a030": "89574190",\n            "a039": "2",\n            "a044": "01218A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-5123-77R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "3",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "P",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "FFIENT",\n            "e042": null,\n            "e077": "0",\n            "e085": "727",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "5158060100330",\n            "g031": "P",\n            "g036": "rasugrel HCl Tab 10 MG (Base Equiv)                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "8",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     E",\n            "j057": "FFIENT      TAB 10MG",\n            "j082": "6",\n            "j088": "3961BQ81",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0090000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000900002",\n            "l072": "B",\n            "l073": "OX       1",\n            "l083": "44548",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 99,\n        "ndc": "000027140011",\n        "recordTypeA": {\n            "a017": "C61I400",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "43653536",\n            "a039": "2",\n            "a044": "01218A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-7140-01R",\n            "a067": null,\n            "a068": null,\n            "a069": null,\n            "a070": null,\n            "a071": "I",\n            "a072": "VL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "EOPRO",\n            "e042": null,\n            "e077": "0",\n            "e085": "537",\n            "e089": null,\n            "e091": "Y",\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "R",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "5153010002010",\n            "g031": "A",\n            "g036": "bciximab IV Soln 2 MG/ML                                   1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "8",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     R",\n            "j057": "EOPRO       INJ 2MG/ML",\n            "j082": "1",\n            "j088": "39302491",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLN0",\n            "l044": "0005000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000050002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "38577",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 100,\n        "ndc": "000027335111",\n        "recordTypeA": {\n            "a017": "SYU89F0",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "12629015",\n            "a039": "6",\n            "a044": "83004A",\n            "a050": "P",\n            "a051": "B",\n            "a052": "X0",\n            "a054": "0002-7335-11R",\n            "a067": "G",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "I",\n            "a072": "JL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "5",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "D",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMATROPE COMBO PACK",\n            "e042": null,\n            "e077": "0",\n            "e085": "394",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "0100020002120",\n            "g031": "S",\n            "g036": "omatropin For Inj 5 MG                                     1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "3",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMATROPE    INJ 5MG",\n            "j082": "0",\n            "j088": "72280051",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLR0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "10041",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    }\n], "metadata": {\n    "total": 851,\n    "psize": 100,\n    "offset": "0"\n}}';});


define('text!../test/fixtures/drug/drugs_100.json',[],function () { return '{"records": [\n    {\n        "id": 101,\n        "ndc": "000027335161",\n        "recordTypeA": {\n            "a017": "C59B200",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "12629015",\n            "a039": "6",\n            "a044": "83004I",\n            "a050": "P",\n            "a051": "B",\n            "a052": "X0",\n            "a054": "0002-7335-16R",\n            "a067": "G",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "I",\n            "a072": "JL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "5",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "R",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMATROPE COMBO PACK",\n            "e042": null,\n            "e077": "0",\n            "e085": "394",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "0100020002120",\n            "g031": "S",\n            "g036": "omatropin For Inj 5 MG                                     1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "3",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMATROPE    INJ 5MG",\n            "j082": "0",\n            "j088": "72280931",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLR0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0006",\n            "l059": "0",\n            "l060": "000000060002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "10041",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 102,\n        "ndc": "000027349011",\n        "recordTypeA": {\n            "a017": "OSIDFG0",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "12629015",\n            "a039": "6",\n            "a044": "83004A",\n            "a050": "P",\n            "a051": "B",\n            "a052": "X0",\n            "a054": "0002-7349-01R",\n            "a067": "G",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "I",\n            "a072": "JL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "5",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "J",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMATROPE",\n            "e042": null,\n            "e077": "0",\n            "e085": "394",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "9",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "0100020002120",\n            "g031": "S",\n            "g036": "omatropin For Inj 5 MG                                     1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "3",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMATROPE    INJ 5MG",\n            "j082": "0",\n            "j088": "72280051",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLR0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "10041",\n            "l089": null,\n            "l091": "N",\n            "l093": "Y",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 103,\n        "ndc": "000027501011",\n        "recordTypeA": {\n            "a017": "D82Q200",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "22111039",\n            "a039": "1",\n            "a044": "00000A",\n            "a050": "P",\n            "a051": "A",\n            "a052": "P0",\n            "a054": "0002-7501-01S",\n            "a067": null,\n            "a068": null,\n            "a069": null,\n            "a070": "X",\n            "a071": "I",\n            "a072": "VL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "EMZAR",\n            "e042": null,\n            "e077": "0",\n            "e085": "232",\n            "e089": null,\n            "e091": "Y",\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "G",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "1300034102110",\n            "g031": "G",\n            "g036": "emcitabine HCl For Inj 200 MG                              1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     G",\n            "j057": "EMZAR       INJ 200MG",\n            "j082": "1",\n            "j088": "57060051",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLR0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "44177",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 104,\n        "ndc": "000027502011",\n        "recordTypeA": {\n            "a017": "D82Q300",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "22111039",\n            "a039": "1",\n            "a044": "00000A",\n            "a050": "P",\n            "a051": "A",\n            "a052": "P0",\n            "a054": "0002-7502-01S",\n            "a067": null,\n            "a068": null,\n            "a069": null,\n            "a070": "X",\n            "a071": "I",\n            "a072": "VL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "EMZAR",\n            "e042": null,\n            "e077": "0",\n            "e085": "232",\n            "e089": null,\n            "e091": "Y",\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "G",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "1300034102140",\n            "g031": "G",\n            "g036": "emcitabine HCl For Inj 1 GM                                1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     G",\n            "j057": "EMZAR       INJ 1GM",\n            "j082": "1",\n            "j088": "57080051",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLR0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "44178",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 105,\n        "ndc": "000027510011",\n        "recordTypeA": {\n            "a017": "D59M200",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "33107649",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-7510-01R",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "1",\n            "a075": "3",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMALOG",\n            "e042": null,\n            "e077": "4",\n            "e085": "924",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104005002020",\n            "g031": "I",\n            "g036": "nsulin Lispro (Human) Inj 100 Unit/ML                      1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMALOG      INJ 100/ML  H",\n            "j082": "ULALG1",\n            "j088": "59793671",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLN0",\n            "l044": "0010000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000100002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "448661",\n            "l089": "7",\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 106,\n        "ndc": "000027510171",\n        "recordTypeA": {\n            "a017": "HIGHGY0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "33107649",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-7510-17R",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "1",\n            "a075": "3",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "U",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMALOG",\n            "e042": null,\n            "e077": "4",\n            "e085": "924",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104005002020",\n            "g031": "I",\n            "g036": "nsulin Lispro (Human) Inj 100 Unit/ML                      1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMALOG      INJ 100/ML  H",\n            "j082": "ULALG1",\n            "j088": "5979S551",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLN0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000030002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "44866",\n            "l089": "0",\n            "l091": "1N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 107,\n        "ndc": "000027511011",\n        "recordTypeA": {\n            "a017": "F62X300",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99991775",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-7511-01R",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMALOG MIX 75/25",\n            "e042": null,\n            "e077": "4",\n            "e085": "925",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104080001820",\n            "g031": "I",\n            "g036": "nsulin Lispro Prot & Lispro (Human) Inj 100 Unit/ML (75-25)1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMALOG MIX  SUS 75/25   H",\n            "j082": "UMA752",\n            "j088": "61873671",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0010000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000100002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "68834",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 108,\n        "ndc": "000027512011",\n        "recordTypeA": {\n            "a017": "SBFBAS0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99991775",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-7512-01R",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "B",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMALOG MIX 50/50",\n            "e042": null,\n            "e077": "4",\n            "e085": "925",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104080001840",\n            "g031": "I",\n            "g036": "nsulin Lispro Prot & Lispro (Human) Inj 100 Unit/ML (50-50)1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMALOG MIX  INJ 50/50",\n            "j082": "2",\n            "j088": "78553671",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0010000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000100002",\n            "l072": "V",\n            "l073": "IAL      1",\n            "l083": "23004",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 109,\n        "ndc": "000027516011",\n        "recordTypeA": {\n            "a017": "S73Y3B0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "33107649",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-7516-01R",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "I",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMALOG",\n            "e042": null,\n            "e077": "4",\n            "e085": "924",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104005002020",\n            "g031": "I",\n            "g036": "nsulin Lispro (Human) Inj 100 Unit/ML                      1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMALOG      INJ 100/ML  H",\n            "j082": "UMLGI1",\n            "j088": "5979ID61",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLN0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000030002",\n            "l072": "C",\n            "l073": "ARTRIDGE 0",\n            "l083": "44866",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 110,\n        "ndc": "000027516591",\n        "recordTypeA": {\n            "a017": "F33X600",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "33107649",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-7516-59R",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMALOG",\n            "e042": null,\n            "e077": "4",\n            "e085": "924",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104005002020",\n            "g031": "I",\n            "g036": "nsulin Lispro (Human) Inj 100 Unit/ML                      1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMALOG      INJ 100/ML  H",\n            "j082": "UMLGI1",\n            "j088": "5979EBR1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLN0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0005",\n            "l059": "0",\n            "l060": "000000150002",\n            "l072": "C",\n            "l073": "ARTRIDGE 0",\n            "l083": "44866",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 111,\n        "ndc": "000027559011",\n        "recordTypeA": {\n            "a017": "G047810",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99986184",\n            "a039": "9",\n            "a044": "29200I",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-7559-01R",\n            "a067": null,\n            "a068": null,\n            "a069": null,\n            "a070": "X",\n            "a071": "I",\n            "a072": "VL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "IGRIS",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "X",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "6604030102120",\n            "g031": "D",\n            "g036": "rotrecogin alfa (Activated) For IV Soln 5 MG               1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "1",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     X",\n            "j057": "IGRIS       INJ 5MG",\n            "j082": "3",\n            "j088": "34790051",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLR0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "74642",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 112,\n        "ndc": "000027561011",\n        "recordTypeA": {\n            "a017": "G047830",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99986184",\n            "a039": "9",\n            "a044": "29200I",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-7561-01R",\n            "a067": null,\n            "a068": null,\n            "a069": null,\n            "a070": "X",\n            "a071": "I",\n            "a072": "VL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "IGRIS",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "X",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "6604030102140",\n            "g031": "D",\n            "g036": "rotrecogin alfa (Activated) For IV Soln 20 MG              1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "1",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     X",\n            "j057": "IGRIS       INJ 20MG",\n            "j082": "3",\n            "j088": "34800051",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLR0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "74643",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 113,\n        "ndc": "000027597011",\n        "recordTypeA": {\n            "a017": "H5G4H50",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "32539061",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "P",\n            "a051": "A",\n            "a052": "P0",\n            "a054": "0002-7597-01S",\n            "a067": "P",\n            "a068": null,\n            "a069": null,\n            "a070": "X",\n            "a071": "I",\n            "a072": "ML",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "4",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA",\n            "e042": null,\n            "e077": "0",\n            "e085": "604",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060002120",\n            "g031": "O",\n            "g036": "lanzapine For IM Inj 10 MG                                 1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA      INJ 10MG",\n            "j082": "4",\n            "j088": "01290051",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLR0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "86753",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 114,\n        "ndc": "000027623011",\n        "recordTypeA": {\n            "a017": "JROWEI0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "50399238",\n            "a039": "1",\n            "a044": "00000A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-7623-01R",\n            "a067": null,\n            "a068": null,\n            "a069": null,\n            "a070": "X",\n            "a071": "I",\n            "a072": "VL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "LIMTA",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "1300053102120",\n            "g031": "P",\n            "g036": "emetrexed Disodium For IV Soln 500 MG (Base Equiv)         1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     A",\n            "j057": "LIMTA       INJ 500MG",\n            "j082": "3",\n            "j088": "97460051",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLR0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "85994",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 115,\n        "ndc": "000027635111",\n        "recordTypeA": {\n            "a017": "FWERFD0",\n            "a024": "0002C",\n            "a029": "2",\n            "a030": "21373188",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-7635-11R",\n            "a067": "P",\n            "a068": null,\n            "a069": null,\n            "a070": "X",\n            "a071": "I",\n            "a072": "ML",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA RELPREVV",\n            "e042": null,\n            "e077": "9",\n            "e085": "510",\n            "e089": null,\n            "e091": "Y",\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060101950",\n            "g031": "O",\n            "g036": "lanzapine Pamoate For Extended Rel IM Susp 210 MG (Base Eq)1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA RELP INJ 210MG",\n            "j082": "6",\n            "j088": "57210051",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USR0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "V",\n            "l073": "IAL      1",\n            "l083": "48822",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 116,\n        "ndc": "000027636111",\n        "recordTypeA": {\n            "a017": "DFSDVC0",\n            "a024": "0002C",\n            "a029": "2",\n            "a030": "21373188",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-7636-11R",\n            "a067": "P",\n            "a068": null,\n            "a069": null,\n            "a070": "X",\n            "a071": "I",\n            "a072": "ML",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA RELPREVV",\n            "e042": null,\n            "e077": "9",\n            "e085": "510",\n            "e089": null,\n            "e091": "Y",\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060101960",\n            "g031": "O",\n            "g036": "lanzapine Pamoate For Extended Rel IM Susp 300 MG (Base Eq)1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA RELP INJ 300MG",\n            "j082": "6",\n            "j088": "57220051",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USR0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "V",\n            "l073": "IAL      1",\n            "l083": "48825",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 117,\n        "ndc": "000027637111",\n        "recordTypeA": {\n            "a017": "FGERGW0",\n            "a024": "0002C",\n            "a029": "2",\n            "a030": "21373188",\n            "a039": "2",\n            "a044": "81608A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-7637-11R",\n            "a067": "P",\n            "a068": null,\n            "a069": null,\n            "a070": "X",\n            "a071": "I",\n            "a072": "ML",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "D",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YPREXA RELPREVV",\n            "e042": null,\n            "e077": "9",\n            "e085": "510",\n            "e089": null,\n            "e091": "Y",\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9157060101970",\n            "g031": "O",\n            "g036": "lanzapine Pamoate For Extended Rel IM Susp 405 MG (Base Eq)1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "5",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     Z",\n            "j057": "YPREXA RELP INJ 405MG",\n            "j082": "6",\n            "j088": "57230051",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USR0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "V",\n            "l073": "IAL      1",\n            "l083": "48826",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 118,\n        "ndc": "000027640011",\n        "recordTypeA": {\n            "a017": "ADFOIH0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "50399238",\n            "a039": "1",\n            "a044": "00000A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-7640-01R",\n            "a067": null,\n            "a068": null,\n            "a069": null,\n            "a070": "X",\n            "a071": "I",\n            "a072": "VL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "LIMTA",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": "Y",\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "1300053102110",\n            "g031": "P",\n            "g036": "emetrexed Disodium For IV Soln 100 MG (Base Equiv)         1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     A",\n            "j057": "LIMTA       INJ 100MG",\n            "j082": "5",\n            "j088": "70690051",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLR0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "V",\n            "l073": "IAL      1",\n            "l083": "32662",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 119,\n        "ndc": "000028031011",\n        "recordTypeA": {\n            "a017": "D19T050",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99990204",\n            "a039": "6",\n            "a044": "82212A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8031-01R",\n            "a067": null,\n            "a068": null,\n            "a069": null,\n            "a070": "X",\n            "a071": "I",\n            "a072": "JL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "LUCAGON EMERGENCY KIT",\n            "e042": null,\n            "e077": "0",\n            "e085": "282",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "G",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7300010106410",\n            "g031": "G",\n            "g036": "lucagon (rDNA) For Inj Kit 1 MG                            1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     G",\n            "j057": "LUCAGON     KIT 1MG     G",\n            "j082": "LUCA12",\n            "j088": "53723771",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "K",\n            "l040": "IT 0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "60052",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 120,\n        "ndc": "000028147011",\n        "recordTypeA": {\n            "a017": "DSKLJE0",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "12629015",\n            "a039": "6",\n            "a044": "83004A",\n            "a050": "P",\n            "a051": "B",\n            "a052": "X0",\n            "a054": "0002-8147-01R",\n            "a067": "G",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "I",\n            "a072": "JL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "5",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "F",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMATROPE",\n            "e042": null,\n            "e077": "0",\n            "e085": "394",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "0100020002125",\n            "g031": "S",\n            "g036": "omatropin For Inj 6 MG (18 Unit)                           1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "3",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMATROPE    INJ 6MG",\n            "j082": "1",\n            "j088": "4126GEB1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLR0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "C",\n            "l073": "ARTRIDGE 0",\n            "l083": "61195",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 121,\n        "ndc": "000028148011",\n        "recordTypeA": {\n            "a017": "FSIJLE0",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "12629015",\n            "a039": "6",\n            "a044": "83004A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8148-01R",\n            "a067": "G",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "I",\n            "a072": "JL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "D",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMATROPE",\n            "e042": null,\n            "e077": "0",\n            "e085": "394",\n            "e089": null,\n            "e091": "Y",\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "0100020002132",\n            "g031": "S",\n            "g036": "omatropin For Inj 12 MG (36 Unit)                          1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "3",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMATROPE    INJ 12MG",\n            "j082": "2",\n            "j088": "6036GEB1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLR0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "C",\n            "l073": "ARTRIDGE 0",\n            "l083": "61196",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 122,\n        "ndc": "000028149011",\n        "recordTypeA": {\n            "a017": "DEHJRL0",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "12629015",\n            "a039": "6",\n            "a044": "83004A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8149-01R",\n            "a067": "G",\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "I",\n            "a072": "JL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "F",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMATROPE",\n            "e042": null,\n            "e077": "0",\n            "e085": "394",\n            "e089": null,\n            "e091": "Y",\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "0100020002150",\n            "g031": "S",\n            "g036": "omatropin For Inj 24 MG                                    1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "3",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMATROPE    INJ 24MG",\n            "j082": "2",\n            "j088": "6329GEB1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLR0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "C",\n            "l073": "ARTRIDGE 0",\n            "l083": "61204",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 123,\n        "ndc": "000028215011",\n        "recordTypeA": {\n            "a017": "O62B200",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "11061680",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8215-01O",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "I",\n            "a072": "JL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "N",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMULIN R",\n            "e042": null,\n            "e077": "0",\n            "e085": "051",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104010002005",\n            "g031": "I",\n            "g036": "nsulin Regular (Human) Inj 100 Unit/ML                     1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMULIN R    INJ U-100   H",\n            "j082": "UMR  0",\n            "j088": "09063671",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLN0",\n            "l044": "0010000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000100002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "100551",\n            "l089": "7",\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 124,\n        "ndc": "000028215171",\n        "recordTypeA": {\n            "a017": "JIOOPI0",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "11061680",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8215-17O",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "I",\n            "a072": "JL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "P",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMULIN R",\n            "e042": null,\n            "e077": "0",\n            "e085": "051",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104010002005",\n            "g031": "I",\n            "g036": "nsulin Regular (Human) Inj 100 Unit/ML                     1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMULIN R    INJ U-100   H",\n            "j082": "UMR  0",\n            "j088": "0906S551",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLN0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000030002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "10055",\n            "l089": "0",\n            "l091": "1N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 125,\n        "ndc": "000028215911",\n        "recordTypeA": {\n            "a017": "90I0H 0",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "11061680",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8215-91O",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "I",\n            "a072": "JL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "-",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMULIN R",\n            "e042": null,\n            "e077": "0",\n            "e085": "051",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104010002005",\n            "g031": "I",\n            "g036": "nsulin Regular (Human) Inj 100 Unit/ML                     1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMULIN R    INJ U-100   H",\n            "j082": "UMR  0",\n            "j088": "09063671",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLN0",\n            "l044": "0010000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000100002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "10055",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 126,\n        "ndc": "000028315011",\n        "recordTypeA": {\n            "a017": "O62B100",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99999948",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8315-01O",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "N",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMULIN N",\n            "e042": null,\n            "e077": "0",\n            "e085": "522",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104020001805",\n            "g031": "I",\n            "g036": "nsulin Isophane (Human) Inj 100 Unit/ML                    1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMULIN N    INJ U-100   H",\n            "j082": "UMN  0",\n            "j088": "09073671",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0010000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000100002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "100541",\n            "l089": "7",\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 127,\n        "ndc": "000028315171",\n        "recordTypeA": {\n            "a017": "WDE1EE0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99999948",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8315-17O",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Q",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMULIN N",\n            "e042": null,\n            "e077": "0",\n            "e085": "522",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104020001805",\n            "g031": "I",\n            "g036": "nsulin Isophane (Human) Inj 100 Unit/ML                    1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMULIN N    INJ U-100   H",\n            "j082": "UMN  0",\n            "j088": "0907S551",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000030002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "10054",\n            "l089": "0",\n            "l091": "1N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 128,\n        "ndc": "000028315911",\n        "recordTypeA": {\n            "a017": "INONH 0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99999948",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8315-91O",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "O",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMULIN N",\n            "e042": null,\n            "e077": "0",\n            "e085": "522",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104020001805",\n            "g031": "I",\n            "g036": "nsulin Isophane (Human) Inj 100 Unit/ML                    1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMULIN N    INJ U-100   H",\n            "j082": "UMN  0",\n            "j088": "09073671",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0010000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000100002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "10054",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 129,\n        "ndc": "000028400011",\n        "recordTypeA": {\n            "a017": "THSDRT0",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "52232674",\n            "a039": "6",\n            "a044": "82400A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8400-01R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "3",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "ORTEO",\n            "e042": null,\n            "e077": "2",\n            "e085": "681",\n            "e089": null,\n            "e091": "Y",\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "F",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "0044070002020",\n            "g031": "T",\n            "g036": "eriparatide (Recombinant) Inj 600 MCG/2.4ML                1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "3",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     F",\n            "j057": "ORTEO       SOL 600/2.4",\n            "j082": "3",\n            "j088": "6408J7X1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLN0",\n            "l044": "0002400M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000024002",\n            "l072": "P",\n            "l073": "EN       1",\n            "l083": "38203",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 130,\n        "ndc": "000028501011",\n        "recordTypeA": {\n            "a017": "O62B250",\n            "a024": "0002C",\n            "a029": "0",\n            "a030": "11061680",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8501-01R",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "N",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMULIN R U-500 (CONCENTRA",\n            "e042": "TED)",\n            "e077": "0",\n            "e085": "051",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104010002015",\n            "g031": "I",\n            "g036": "nsulin Regular (Human) Inj 500 Unit/ML                     1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMULIN R    INJ U-500   H",\n            "j082": "UM5001",\n            "j088": "76093681",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLN0",\n            "l044": "0020000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000200002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "47754",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 131,\n        "ndc": "000028715011",\n        "recordTypeA": {\n            "a017": "O62A800",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99991744",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8715-01O",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "N",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMULIN 70/30",\n            "e042": null,\n            "e077": "1",\n            "e085": "412",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104090001810",\n            "g031": "I",\n            "g036": "nsulin Isophane & Regular (Human) Inj 100 Unit/ML (70-30)  1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMULIN      INJ 70/30   H",\n            "j082": "UM73 0",\n            "j088": "09103671",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0010000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000100002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "10051",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 132,\n        "ndc": "000028715171",\n        "recordTypeA": {\n            "a017": "F9WE780",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99991744",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8715-17O",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "J",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMULIN 70/30",\n            "e042": null,\n            "e077": "1",\n            "e085": "412",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104090001810",\n            "g031": "I",\n            "g036": "nsulin Isophane & Regular (Human) Inj 100 Unit/ML (70-30)  1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMULIN      INJ 70/30   H",\n            "j082": "UM73 0",\n            "j088": "0910S551",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000030002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "10051",\n            "l089": "9",\n            "l091": "1N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 133,\n        "ndc": "000028715911",\n        "recordTypeA": {\n            "a017": "UHUIBH0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99991744",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8715-91O",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "I",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMULIN 70/30",\n            "e042": null,\n            "e077": "1",\n            "e085": "412",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104090001810",\n            "g031": "I",\n            "g036": "nsulin Isophane & Regular (Human) Inj 100 Unit/ML (70-30)  1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMULIN      INJ 70/30   H",\n            "j082": "UM73 0",\n            "j088": "09103671",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0010000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000100002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "100511",\n            "l089": "7",\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 134,\n        "ndc": "000028725011",\n        "recordTypeA": {\n            "a017": "D59M120",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "33107649",\n            "a039": "6",\n            "a044": "82008I",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8725-01R",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMALOG PEN",\n            "e042": null,\n            "e077": "4",\n            "e085": "924",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104005002020",\n            "g031": "I",\n            "g036": "nsulin Lispro (Human) Inj 100 Unit/ML                      1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMALOG PEN  INJ 100/ML",\n            "j082": "1",\n            "j088": "5979J6V1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLN0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000030002",\n            "l072": "P",\n            "l073": "EN       0",\n            "l083": "58847",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 135,\n        "ndc": "000028725591",\n        "recordTypeA": {\n            "a017": "D59M170",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "33107649",\n            "a039": "6",\n            "a044": "82008I",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8725-59R",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMALOG PEN",\n            "e042": null,\n            "e077": "4",\n            "e085": "924",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104005002020",\n            "g031": "I",\n            "g036": "nsulin Lispro (Human) Inj 100 Unit/ML                      1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMALOG PEN  INJ 100/ML",\n            "j082": "1",\n            "j088": "5979J6W1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLN0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0005",\n            "l059": "0",\n            "l060": "000000150002",\n            "l072": "P",\n            "l073": "EN       0",\n            "l083": "58847",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 136,\n        "ndc": "000028730011",\n        "recordTypeA": {\n            "a017": "G046720",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99999948",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8730-01O",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMULIN N U-100 PEN",\n            "e042": null,\n            "e077": "0",\n            "e085": "522",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104020001805",\n            "g031": "I",\n            "g036": "nsulin Isophane (Human) Inj 100 Unit/ML                    1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMULIN N PN INJ U-100   H",\n            "j082": "UMLNP0",\n            "j088": "0907J6V1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000030002",\n            "l072": "P",\n            "l073": "EN       0",\n            "l083": "58846",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 137,\n        "ndc": "000028730591",\n        "recordTypeA": {\n            "a017": "O62B090",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99999948",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8730-59O",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "N",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMULIN N U-100 PEN",\n            "e042": null,\n            "e077": "0",\n            "e085": "522",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104020001805",\n            "g031": "I",\n            "g036": "nsulin Isophane (Human) Inj 100 Unit/ML                    1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMULIN N PN INJ U-100   H",\n            "j082": "UMLNP0",\n            "j088": "0907J6W1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0005",\n            "l059": "0",\n            "l060": "000000150002",\n            "l072": "P",\n            "l073": "EN       0",\n            "l083": "58846",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 138,\n        "ndc": "000028770011",\n        "recordTypeA": {\n            "a017": "H01Z120",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99991744",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8770-01O",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMULIN 70/30 PEN",\n            "e042": null,\n            "e077": "1",\n            "e085": "412",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104090001810",\n            "g031": "I",\n            "g036": "nsulin Isophane & Regular (Human) Inj 100 Unit/ML (70-30)  1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMULIN PEN  INJ 70/30   H",\n            "j082": "UM73P0",\n            "j088": "0910J6V1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000030002",\n            "l072": "P",\n            "l073": "EN       0",\n            "l083": "58845",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 139,\n        "ndc": "000028770591",\n        "recordTypeA": {\n            "a017": "O62A770",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99991744",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8770-59O",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "N",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMULIN 70/30 PEN",\n            "e042": null,\n            "e077": "1",\n            "e085": "412",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104090001810",\n            "g031": "I",\n            "g036": "nsulin Isophane & Regular (Human) Inj 100 Unit/ML (70-30)  1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMULIN PEN  INJ 70/30   H",\n            "j082": "UM73P0",\n            "j088": "0910J6W1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0005",\n            "l059": "0",\n            "l060": "000000150002",\n            "l072": "P",\n            "l073": "EN       0",\n            "l083": "58845",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 140,\n        "ndc": "000028793011",\n        "recordTypeA": {\n            "a017": "I373BH0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99991775",\n            "a039": "6",\n            "a044": "82008I",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8793-01R",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMALOG MIX 50/50 PEN",\n            "e042": null,\n            "e077": "4",\n            "e085": "925",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104080001840",\n            "g031": "I",\n            "g036": "nsulin Lispro Prot & Lispro (Human) Inj 100 Unit/ML (50-50)1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMALOG PEN  INJ 50/50",\n            "j082": "2",\n            "j088": "7855J6V1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000030002",\n            "l072": "P",\n            "l073": "EN       1",\n            "l083": "00014",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 141,\n        "ndc": "000028793591",\n        "recordTypeA": {\n            "a017": "DHER340",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99991775",\n            "a039": "6",\n            "a044": "82008I",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8793-59R",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "F",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMALOG MIX 50/50 PEN",\n            "e042": null,\n            "e077": "4",\n            "e085": "925",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104080001840",\n            "g031": "I",\n            "g036": "nsulin Lispro Prot & Lispro (Human) Inj 100 Unit/ML (50-50)1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMALOG PEN  INJ 50/50",\n            "j082": "2",\n            "j088": "7855J6W1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0005",\n            "l059": "0",\n            "l060": "000000150002",\n            "l072": "P",\n            "l073": "EN       1",\n            "l083": "00014",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 142,\n        "ndc": "000028794011",\n        "recordTypeA": {\n            "a017": "89373B0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99991775",\n            "a039": "6",\n            "a044": "82008I",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8794-01R",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMALOG MIX 75/25 PEN",\n            "e042": null,\n            "e077": "4",\n            "e085": "925",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104080001820",\n            "g031": "I",\n            "g036": "nsulin Lispro Prot & Lispro (Human) Inj 100 Unit/ML (75-25)1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMALOG PEN  INJ 75/25",\n            "j082": "2",\n            "j088": "6187J6V1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000030002",\n            "l072": "P",\n            "l073": "EN       0",\n            "l083": "81906",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 143,\n        "ndc": "000028794591",\n        "recordTypeA": {\n            "a017": "E31L450",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99991775",\n            "a039": "6",\n            "a044": "82008I",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8794-59R",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMALOG MIX 75/25 PEN",\n            "e042": null,\n            "e077": "4",\n            "e085": "925",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104080001820",\n            "g031": "I",\n            "g036": "nsulin Lispro Prot & Lispro (Human) Inj 100 Unit/ML (75-25)1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMALOG PEN  INJ 75/25",\n            "j082": "2",\n            "j088": "6187J6W1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0005",\n            "l059": "0",\n            "l060": "000000150002",\n            "l072": "P",\n            "l073": "EN       0",\n            "l083": "81906",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 144,\n        "ndc": "000028797011",\n        "recordTypeA": {\n            "a017": "S83U3N0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99991775",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8797-01R",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "5",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "I",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMALOG MIX 75/25 KWIKPEN",\n            "e042": null,\n            "e077": "4",\n            "e085": "925",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104080001820",\n            "g031": "I",\n            "g036": "nsulin Lispro Prot & Lispro (Human) Inj 100 Unit/ML (75-25)1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMALOG MIX  INJ 75/25KWP",\n            "j082": "2",\n            "j088": "6187J6V1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000030002",\n            "l072": "P",\n            "l073": "EN       1",\n            "l083": "32387",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 145,\n        "ndc": "000028797591",\n        "recordTypeA": {\n            "a017": "OIJOU90",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99991775",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8797-59R",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "5",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "J",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMALOG MIX 75/25 KWIKPEN",\n            "e042": null,\n            "e077": "4",\n            "e085": "925",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104080001820",\n            "g031": "I",\n            "g036": "nsulin Lispro Prot & Lispro (Human) Inj 100 Unit/ML (75-25)1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMALOG MIX  INJ 75/25KWP",\n            "j082": "2",\n            "j088": "6187J6W1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0005",\n            "l059": "0",\n            "l060": "000000150002",\n            "l072": "P",\n            "l073": "EN       1",\n            "l083": "32387",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 146,\n        "ndc": "000028798011",\n        "recordTypeA": {\n            "a017": "LS83BU0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99991775",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8798-01R",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "K",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMALOG MIX 50/50 KWIKPEN",\n            "e042": null,\n            "e077": "4",\n            "e085": "925",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104080001840",\n            "g031": "I",\n            "g036": "nsulin Lispro Prot & Lispro (Human) Inj 100 Unit/ML (50-50)1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMALOG MIX  INJ 50/50KWP",\n            "j082": "2",\n            "j088": "7855J6V1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000030002",\n            "l072": "P",\n            "l073": "EN       1",\n            "l083": "32388",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 147,\n        "ndc": "000028798591",\n        "recordTypeA": {\n            "a017": "DFERAS0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99991775",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8798-59R",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMALOG MIX 50/50 KWIKPEN",\n            "e042": null,\n            "e077": "4",\n            "e085": "925",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104080001840",\n            "g031": "I",\n            "g036": "nsulin Lispro Prot & Lispro (Human) Inj 100 Unit/ML (50-50)1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMALOG MIX  INJ 50/50KWP",\n            "j082": "2",\n            "j088": "7855J6W1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0005",\n            "l059": "0",\n            "l060": "000000150002",\n            "l072": "P",\n            "l073": "EN       1",\n            "l083": "32388",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 148,\n        "ndc": "000028799011",\n        "recordTypeA": {\n            "a017": "S73YUB0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "33107649",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8799-01R",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "1",\n            "a075": "5",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "I",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMALOG KWIKPEN",\n            "e042": null,\n            "e077": "4",\n            "e085": "924",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104005002020",\n            "g031": "I",\n            "g036": "nsulin Lispro (Human) Inj 100 Unit/ML                      1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMALOG KWIK INJ 100/ML",\n            "j082": "1",\n            "j088": "5979J6V1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLN0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000030002",\n            "l072": "P",\n            "l073": "EN       1",\n            "l083": "32386",\n            "l089": null,\n            "l091": "Y",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 149,\n        "ndc": "000028799591",\n        "recordTypeA": {\n            "a017": "FKLHTS0",\n            "a024": "0002C",\n            "a029": "1",\n            "a030": "33107649",\n            "a039": "6",\n            "a044": "82008A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-8799-59R",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "1",\n            "a075": "5",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "D",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMALOG KWIKPEN",\n            "e042": null,\n            "e077": "4",\n            "e085": "924",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104005002020",\n            "g031": "I",\n            "g036": "nsulin Lispro (Human) Inj 100 Unit/ML                      1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMALOG KWIK INJ 100/ML",\n            "j082": "1",\n            "j088": "5979J6W1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLN0",\n            "l044": "0003000M",\n            "l052": "L0",\n            "l054": "0005",\n            "l059": "0",\n            "l060": "000000150002",\n            "l072": "P",\n            "l073": "EN       1",\n            "l083": "32386",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 150,\n        "ndc": "000029515011",\n        "recordTypeA": {\n            "a017": "O62A700",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99991744",\n            "a039": "6",\n            "a044": "82008I",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-9515-01O",\n            "a067": "1",\n            "a068": "X",\n            "a069": null,\n            "a070": "U",\n            "a071": "S",\n            "a072": "CL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "C",\n            "a093": "R",\n            "a094": "C",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "N",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMULIN 50/50",\n            "e042": null,\n            "e077": "1",\n            "e085": "412",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7104090001820",\n            "g031": "I",\n            "g036": "nsulin Isophane & Regular (Human) Inj 100 Unit/ML (50-50)  1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMULIN      INJ 50/50",\n            "j082": "0",\n            "j088": "73783671",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0010000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000100002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "10050",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 151,\n        "ndc": "000029560011",\n        "recordTypeA": {\n            "a017": "UM6MGP0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000A",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-9560-01O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMATROPEN FOR 6MG",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "9",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7051050106300",\n            "g031": "*",\n            "g036": "Injection Device - Misc***                                 1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMATROPEN   MIS FOR 6MG",\n            "j082": "0",\n            "j088": "6991JGA1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "D",\n            "l040": "EVI0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000001000",\n            "l072": "P",\n            "l073": "EN       1",\n            "l083": "41859",\n            "l089": null,\n            "l091": "N",\n            "l093": "Y",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 152,\n        "ndc": "000029561011",\n        "recordTypeA": {\n            "a017": "UM12MG0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000A",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-9561-01O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMATROPEN FOR 12MG",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "9",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7051050106300",\n            "g031": "*",\n            "g036": "Injection Device - Misc***                                 1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMATROPEN   MIS FOR 12MG",\n            "j082": "0",\n            "j088": "6991JGA1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "D",\n            "l040": "EVI0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000001000",\n            "l072": "P",\n            "l073": "EN       1",\n            "l083": "41860",\n            "l089": null,\n            "l091": "N",\n            "l093": "Y",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 153,\n        "ndc": "000029562011",\n        "recordTypeA": {\n            "a017": "UM24MG0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000A",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-9562-01O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMATROPEN FOR 24MG",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "9",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7051050106300",\n            "g031": "*",\n            "g036": "Injection Device - Misc***                                 1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMATROPEN   MIS FOR 24MG",\n            "j082": "0",\n            "j088": "6991JGA1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "D",\n            "l040": "EVI0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000001000",\n            "l072": "P",\n            "l073": "EN       1",\n            "l083": "41861",\n            "l089": null,\n            "l091": "N",\n            "l093": "Y",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 154,\n        "ndc": "000029660011",\n        "recordTypeA": {\n            "a017": "ASLDFJ0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000A",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-9660-01R",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "F",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMAPEN MEMOIR",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7051050126220",\n            "g031": "I",\n            "g036": "njection Device for Insulin                                1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMAPEN      MIS MEMOIR",\n            "j082": "0",\n            "j088": "69905291",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "D",\n            "l040": "EVI0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000001000",\n            "l072": "B",\n            "l073": "OX       1",\n            "l083": "24272",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 155,\n        "ndc": "000029673011",\n        "recordTypeA": {\n            "a017": "UFUIGI0",\n            "a024": "0002P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000A",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0002-9673-01R",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Y",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UMAPEN LUXURA HD",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7051050126220",\n            "g031": "I",\n            "g036": "njection Device for Insulin                                1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ILLY                         L",\n            "j047": "ILLY     H",\n            "j057": "UMAPEN      MIS LUXURA",\n            "j082": "0",\n            "j088": "69905291",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "D",\n            "l040": "EVI0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000001000",\n            "l072": "B",\n            "l073": "OX       1",\n            "l083": "26253",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 156,\n        "ndc": "000030128301",\n        "recordTypeA": {\n            "a017": "WLKERJ9",\n            "a024": "9732C",\n            "a029": "0",\n            "a030": "08049658",\n            "a039": "9",\n            "a044": "60000A",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0128-30R",\n            "a067": "B",\n            "a068": null,\n            "a069": null,\n            "a070": null,\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "G",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "J",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "LASTIBASE",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "G",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "P",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "8600045004200",\n            "g031": "P",\n            "g036": "lastibase Ointment                                         1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "NTAPORT COMPANY              I",\n            "j047": "NTAPORT CP",\n            "j057": "LASTIBASE   OIN 50W",\n            "j082": "1",\n            "j088": "7940KHO1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "I",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "O",\n            "l040": "INT5",\n            "l044": "0000000G",\n            "l052": "M0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000500000002",\n            "l072": "D",\n            "l073": "RUM      0",\n            "l083": "49151",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 157,\n        "ndc": "000030128401",\n        "recordTypeA": {\n            "a017": "DKJFIO9",\n            "a024": "9732C",\n            "a029": "0",\n            "a030": "08049658",\n            "a039": "9",\n            "a044": "60000A",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0128-40R",\n            "a067": "B",\n            "a068": null,\n            "a069": null,\n            "a070": null,\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "G",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "L",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "LASTIBASE",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "G",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "P",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "8600045004200",\n            "g031": "P",\n            "g036": "lastibase Ointment                                         1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "NTAPORT COMPANY              I",\n            "j047": "NTAPORT CP",\n            "j057": "LASTIBASE   OIN 55W",\n            "j082": "1",\n            "j088": "7940KHO1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "I",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "O",\n            "l040": "INT5",\n            "l044": "0000000G",\n            "l052": "M0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000500000002",\n            "l072": "D",\n            "l073": "RUM      0",\n            "l083": "49151",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 158,\n        "ndc": "000030209291",\n        "recordTypeA": {\n            "a017": "Z45B109",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0209-29O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "ENTLE TOUCH SYSTEM",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "G",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7151000006400",\n            "g031": "*",\n            "g036": "Ostomy Supplies - Kit***                                   1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  G",\n            "j057": "ENTLE TOUCH KIT 45MM",\n            "j082": "0",\n            "j088": "9768A771",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "K",\n            "l040": "IT 0",\n            "l044": "0002000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000002000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "09181",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 159,\n        "ndc": "000030209301",\n        "recordTypeA": {\n            "a017": "Z45B209",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0209-30O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "ENTLE TOUCH SYSTEM",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "G",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7151000006400",\n            "g031": "*",\n            "g036": "Ostomy Supplies - Kit***                                   1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  G",\n            "j057": "ENTLE TOUCH KIT 70MM",\n            "j082": "0",\n            "j088": "9768A771",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "K",\n            "l040": "IT 0",\n            "l044": "0002000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000002000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "09181",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 160,\n        "ndc": "000030209311",\n        "recordTypeA": {\n            "a017": "Z45B309",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0209-31O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "ENTLE TOUCH SYSTEM",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "G",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7151000006400",\n            "g031": "*",\n            "g036": "Ostomy Supplies - Kit***                                   1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  G",\n            "j057": "ENTLE TOUCH KIT 45MM",\n            "j082": "0",\n            "j088": "9768A771",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "K",\n            "l040": "IT 0",\n            "l044": "0002000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000002000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "09181",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 161,\n        "ndc": "000030209321",\n        "recordTypeA": {\n            "a017": "Z45B409",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0209-32O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "ENTLE TOUCH SYSTEM",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "G",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7151000006400",\n            "g031": "*",\n            "g036": "Ostomy Supplies - Kit***                                   1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  G",\n            "j057": "ENTLE TOUCH KIT 70MM",\n            "j082": "0",\n            "j088": "9768A771",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "K",\n            "l040": "IT 0",\n            "l044": "0002000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000002000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "09181",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 162,\n        "ndc": "000030209331",\n        "recordTypeA": {\n            "a017": "Z45B509",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0209-33O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "ENTLE TOUCH SYSTEM",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "G",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7151000006400",\n            "g031": "*",\n            "g036": "Ostomy Supplies - Kit***                                   1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  G",\n            "j057": "ENTLE TOUCH KIT 70MM",\n            "j082": "0",\n            "j088": "9768A771",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "K",\n            "l040": "IT 0",\n            "l044": "0002000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000002000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "09181",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 163,\n        "ndc": "000030209341",\n        "recordTypeA": {\n            "a017": "Z45B609",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0209-34O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "ENTLE TOUCH SYSTEM",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "G",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7151000006400",\n            "g031": "*",\n            "g036": "Ostomy Supplies - Kit***                                   1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  G",\n            "j057": "ENTLE TOUCH KIT 100MM",\n            "j082": "0",\n            "j088": "9768A771",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "K",\n            "l040": "IT 0",\n            "l044": "0002000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000002000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "09181",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 164,\n        "ndc": "000030209351",\n        "recordTypeA": {\n            "a017": "Z45B709",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0209-35O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "ENTLE TOUCH SYSTEM",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "G",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7151000006400",\n            "g031": "*",\n            "g036": "Ostomy Supplies - Kit***                                   1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  G",\n            "j057": "ENTLE TOUCH KIT 45MM",\n            "j082": "0",\n            "j088": "97685291",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "K",\n            "l040": "IT 0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000001000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "09181",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 165,\n        "ndc": "000030209361",\n        "recordTypeA": {\n            "a017": "Z45B809",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0209-36O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "ENTLE TOUCH SYSTEM",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "G",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7151000006400",\n            "g031": "*",\n            "g036": "Ostomy Supplies - Kit***                                   1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  G",\n            "j057": "ENTLE TOUCH KIT 70MM",\n            "j082": "0",\n            "j088": "97685291",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "K",\n            "l040": "IT 0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000001000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "09181",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 166,\n        "ndc": "000030209381",\n        "recordTypeA": {\n            "a017": "Z45C109",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0209-38O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Z",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "ENTLE TOUCH SYSTEM",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "G",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7151000006400",\n            "g031": "*",\n            "g036": "Ostomy Supplies - Kit***                                   1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  G",\n            "j057": "ENTLE TOUCH KIT 70MM",\n            "j082": "0",\n            "j088": "97685291",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "K",\n            "l040": "IT 0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000001000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "09181",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 167,\n        "ndc": "000030248301",\n        "recordTypeA": {\n            "a017": "E20C201",\n            "a024": "0631C",\n            "a029": "0",\n            "a030": "03093354",\n            "a039": "8",\n            "a044": "40600I",\n            "a050": "L",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0248-30R",\n            "a067": null,\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "E",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "E",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "ALOG",\n            "e042": null,\n            "e077": "0",\n            "e085": "048",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "0550070004205",\n            "g031": "H",\n            "g036": "alcinonide Oint 0.1%                                       1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ANBAXY LABORATORIES          R",\n            "j047": "ANBAXY   H",\n            "j057": "ALOG        OIN 0.1%",\n            "j082": "0",\n            "j088": "56334281",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "R",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "O",\n            "l040": "INT0",\n            "l044": "0060000G",\n            "l052": "M0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000600002",\n            "l072": "T",\n            "l073": "UBE      0",\n            "l083": "096592",\n            "l089": "04",\n            "l091": "0N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 168,\n        "ndc": "000030293051",\n        "recordTypeA": {\n            "a017": "M90D209",\n            "a024": "9908C",\n            "a029": "0",\n            "a030": "00076255",\n            "a039": "6",\n            "a044": "80400A",\n            "a050": "P",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0003-0293-05R",\n            "a067": null,\n            "a068": null,\n            "a069": null,\n            "a070": null,\n            "a071": "I",\n            "a072": "JL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "ENALOG-40",\n            "e042": null,\n            "e077": "9",\n            "e085": "714",\n            "e089": null,\n            "e091": "Y",\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "K",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "2100050101810",\n            "g031": "T",\n            "g036": "riamcinolone Acetonide Inj Susp 40 MG/ML                   1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "-M SQUIBB U.S. (PRIMARY CARE)B",\n            "j047": "MS-PC    K",\n            "j057": "ENALOG-40   INJ 40MG/ML K",\n            "j082": "LG40 0",\n            "j088": "07332481",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "B",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0001000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "11451",\n            "l089": "2",\n            "l091": "0N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 169,\n        "ndc": "000030293201",\n        "recordTypeA": {\n            "a017": "M90D309",\n            "a024": "9908C",\n            "a029": "0",\n            "a030": "00076255",\n            "a039": "6",\n            "a044": "80400A",\n            "a050": "P",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0003-0293-20R",\n            "a067": null,\n            "a068": null,\n            "a069": null,\n            "a070": null,\n            "a071": "I",\n            "a072": "JL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "ENALOG-40",\n            "e042": null,\n            "e077": "9",\n            "e085": "714",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "K",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "2100050101810",\n            "g031": "T",\n            "g036": "riamcinolone Acetonide Inj Susp 40 MG/ML                   1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "-M SQUIBB U.S. (PRIMARY CARE)B",\n            "j047": "MS-PC    K",\n            "j057": "ENALOG-40   INJ 40MG/ML K",\n            "j082": "LG40 0",\n            "j088": "07332491",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "B",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0005000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000050002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "114510",\n            "l089": "52",\n            "l091": "8N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 170,\n        "ndc": "000030293281",\n        "recordTypeA": {\n            "a017": "M90D409",\n            "a024": "9908C",\n            "a029": "0",\n            "a030": "00076255",\n            "a039": "6",\n            "a044": "80400A",\n            "a050": "P",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0003-0293-28R",\n            "a067": null,\n            "a068": null,\n            "a069": null,\n            "a070": null,\n            "a071": "I",\n            "a072": "JL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "ENALOG-40",\n            "e042": null,\n            "e077": "9",\n            "e085": "714",\n            "e089": null,\n            "e091": "Y",\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "K",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "2100050101810",\n            "g031": "T",\n            "g036": "riamcinolone Acetonide Inj Susp 40 MG/ML                   1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "-M SQUIBB U.S. (PRIMARY CARE)B",\n            "j047": "MS-PC    K",\n            "j057": "ENALOG-40   INJ 40MG/ML K",\n            "j082": "LG40 0",\n            "j088": "07330171",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "B",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0010000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000100002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "114512",\n            "l089": "05",\n            "l091": "5N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 171,\n        "ndc": "000030371131",\n        "recordTypeA": {\n            "a017": "KSDF  9",\n            "a024": "9908C",\n            "a029": "7",\n            "a030": "06808379",\n            "a039": "9",\n            "a044": "24400A",\n            "a050": "P",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0371-13R",\n            "a067": "M",\n            "a068": null,\n            "a069": null,\n            "a070": "X",\n            "a071": "I",\n            "a072": "VL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "R",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "J",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "ULOJIX",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "N",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "9408020002120",\n            "g031": "B",\n            "g036": "elatacept For IV Infusion 250 MG                           1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "-M SQUIBB U.S. (PRIMARY CARE)B",\n            "j047": "MS-PC    N",\n            "j057": "ULOJIX      INJ 250MG",\n            "j082": "7",\n            "j088": "45800051",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "B",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "OLR0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000010002",\n            "l072": "V",\n            "l073": "IAL      1",\n            "l083": "67247",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 172,\n        "ndc": "000030494201",\n        "recordTypeA": {\n            "a017": "M90D109",\n            "a024": "9908C",\n            "a029": "0",\n            "a030": "00076255",\n            "a039": "6",\n            "a044": "80400A",\n            "a050": "P",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0003-0494-20R",\n            "a067": null,\n            "a068": null,\n            "a069": null,\n            "a070": null,\n            "a071": "I",\n            "a072": "JL",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "ENALOG-10",\n            "e042": null,\n            "e077": "9",\n            "e085": "714",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "K",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "2100050101805",\n            "g031": "T",\n            "g036": "riamcinolone Acetonide Inj Susp 10 MG/ML                   1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "-M SQUIBB U.S. (PRIMARY CARE)B",\n            "j047": "MS-PC    K",\n            "j057": "ENALOG-10   INJ 10MG/ML K",\n            "j082": "LG10 0",\n            "j088": "07322491",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "B",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "S",\n            "l040": "USP0",\n            "l044": "0005000M",\n            "l052": "L0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000050002",\n            "l072": "V",\n            "l073": "IAL      0",\n            "l083": "11450",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 173,\n        "ndc": "000030524111",\n        "recordTypeA": {\n            "a017": "YTSDFA9",\n            "a024": "9908C",\n            "a029": "3",\n            "a030": "02962498",\n            "a039": "1",\n            "a044": "00000A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0524-11R",\n            "a067": null,\n            "a068": null,\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "U",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "PRYCEL",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "1534020000350",\n            "g031": "D",\n            "g036": "asatinib Tab 70 MG                                         1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "-M SQUIBB U.S. (PRIMARY CARE)B",\n            "j047": "MS-PC    S",\n            "j057": "PRYCEL      TAB 70MG",\n            "j082": "5",\n            "j088": "06520491",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "B",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0060000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000600002",\n            "l072": "B",\n            "l073": "OTTLE    1",\n            "l083": "20504",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 174,\n        "ndc": "000030526201",\n        "recordTypeA": {\n            "a017": "V15B109",\n            "a024": "9908P",\n            "a029": "9",\n            "a030": "99999997",\n            "a039": "3",\n            "a044": "68824A",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0526-20O",\n            "a067": "5",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "V",\n            "a072": "IS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "J",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "ITRATEST PAPER",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "N",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "4100046006000",\n            "g031": "p",\n            "g036": "H Test                                                     1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "-M SQUIBB U.S. (PRIMARY CARE)B",\n            "j047": "MS-PC    N",\n            "j057": "ITRATEST    TES PAPER",\n            "j082": "0",\n            "j088": "6082I541",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "B",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "EST0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000001000",\n            "l072": "R",\n            "l073": "OLL      0",\n            "l083": "85486",\n            "l089": "5",\n            "l091": "0N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 175,\n        "ndc": "000030526501",\n        "recordTypeA": {\n            "a017": "V15B209",\n            "a024": "9908P",\n            "a029": "9",\n            "a030": "99999997",\n            "a039": "3",\n            "a044": "68824A",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0526-50O",\n            "a067": "5",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "V",\n            "a072": "IS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "J",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "ITRATEST PAPER",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "N",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "4100046006000",\n            "g031": "p",\n            "g036": "H Test                                                     1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "-M SQUIBB U.S. (PRIMARY CARE)B",\n            "j047": "MS-PC    N",\n            "j057": "ITRATEST    TES PAPER",\n            "j082": "0",\n            "j088": "6082I551",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "B",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "EST0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0004",\n            "l059": "0",\n            "l060": "00000004000",\n            "l072": "R",\n            "l073": "OLL      0",\n            "l083": "854862",\n            "l089": "0",\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 176,\n        "ndc": "000030527111",\n        "recordTypeA": {\n            "a017": "SMDFAI9",\n            "a024": "9908C",\n            "a029": "3",\n            "a030": "02962498",\n            "a039": "1",\n            "a044": "00000A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0527-11R",\n            "a067": null,\n            "a068": null,\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "K",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "PRYCEL",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "1534020000320",\n            "g031": "D",\n            "g036": "asatinib Tab 20 MG                                         1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "-M SQUIBB U.S. (PRIMARY CARE)B",\n            "j047": "MS-PC    S",\n            "j057": "PRYCEL      TAB 20MG",\n            "j082": "5",\n            "j088": "06500491",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "B",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0060000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000600002",\n            "l072": "B",\n            "l073": "OTTLE    1",\n            "l083": "20505",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 177,\n        "ndc": "000030528111",\n        "recordTypeA": {\n            "a017": "ODLFAS9",\n            "a024": "9908C",\n            "a029": "3",\n            "a030": "02962498",\n            "a039": "1",\n            "a044": "00000A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0528-11R",\n            "a067": null,\n            "a068": null,\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "PRYCEL",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "1534020000340",\n            "g031": "D",\n            "g036": "asatinib Tab 50 MG                                         1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "-M SQUIBB U.S. (PRIMARY CARE)B",\n            "j047": "MS-PC    S",\n            "j057": "PRYCEL      TAB 50MG",\n            "j082": "5",\n            "j088": "06510491",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "B",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0060000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000600002",\n            "l072": "B",\n            "l073": "OTTLE    1",\n            "l083": "20506",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 178,\n        "ndc": "000030830501",\n        "recordTypeA": {\n            "a017": "G30B109",\n            "a024": "9970C",\n            "a029": "0",\n            "a030": "00127071",\n            "a039": "1",\n            "a044": "00000A",\n            "a050": "O",\n            "a051": "A",\n            "a052": "B0",\n            "a054": "0003-0830-50S",\n            "a067": null,\n            "a068": null,\n            "a069": "U",\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "O",\n            "a089": "T",\n            "a090": "4",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "YDREA",\n            "e042": null,\n            "e077": "0",\n            "e085": "296",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "H",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "1700030000105",\n            "g031": "H",\n            "g036": "ydroxyurea Cap 500 MG                                      1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "-M SQUIBB ONCOLOGY/IMMUNOLOGYB",\n            "j047": "MS ONC/IMH",\n            "j057": "YDREA       CAP 500MG   H",\n            "j082": "YC5000",\n            "j088": "06290031",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "B",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "C",\n            "l040": "APS0",\n            "l044": "0100000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000001000002",\n            "l072": "B",\n            "l073": "OTTLE    0",\n            "l083": "10145",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 179,\n        "ndc": "000030852221",\n        "recordTypeA": {\n            "a017": "G897Y99",\n            "a024": "9908C",\n            "a029": "3",\n            "a030": "02962498",\n            "a039": "1",\n            "a044": "00000A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0852-22R",\n            "a067": null,\n            "a068": null,\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "Y",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "PRYCEL",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "1534020000360",\n            "g031": "D",\n            "g036": "asatinib Tab 100 MG                                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "-M SQUIBB U.S. (PRIMARY CARE)B",\n            "j047": "MS-PC    S",\n            "j057": "PRYCEL      TAB 100MG",\n            "j082": "5",\n            "j088": "93140701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "B",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    1",\n            "l083": "35944",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 180,\n        "ndc": "000030855221",\n        "recordTypeA": {\n            "a017": "IYGHUJ9",\n            "a024": "9908C",\n            "a029": "3",\n            "a030": "02962498",\n            "a039": "1",\n            "a044": "00000A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0855-22R",\n            "a067": null,\n            "a068": null,\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "U",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "PRYCEL",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "1534020000354",\n            "g031": "D",\n            "g036": "asatinib Tab 80 MG                                         1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "-M SQUIBB U.S. (PRIMARY CARE)B",\n            "j047": "MS-PC    S",\n            "j057": "PRYCEL      TAB 80MG",\n            "j082": "7",\n            "j088": "26230701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "B",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    1",\n            "l083": "63348",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 181,\n        "ndc": "000030857221",\n        "recordTypeA": {\n            "a017": "REFSDF9",\n            "a024": "9908C",\n            "a029": "3",\n            "a030": "02962498",\n            "a039": "1",\n            "a044": "00000A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0857-22R",\n            "a067": null,\n            "a068": null,\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "W",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "PRYCEL",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": "Y",\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "1534020000380",\n            "g031": "D",\n            "g036": "asatinib Tab 140 MG                                        1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "2",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "-M SQUIBB U.S. (PRIMARY CARE)B",\n            "j047": "MS-PC    S",\n            "j057": "PRYCEL      TAB 140MG",\n            "j082": "7",\n            "j088": "26240701",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "B",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0030000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000300002",\n            "l072": "B",\n            "l073": "OTTLE    1",\n            "l083": "63349",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 182,\n        "ndc": "000030893211",\n        "recordTypeA": {\n            "a017": "ASDFBB9",\n            "a024": "9908C",\n            "a029": "5",\n            "a030": "03612473",\n            "a039": "2",\n            "a044": "01204A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0893-21R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "O",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "LIQUIS",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "3370010000320",\n            "g031": "A",\n            "g036": "pixaban Tab 2.5 MG                                         1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "8",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "-M SQUIBB U.S. (PRIMARY CARE)B",\n            "j047": "MS-PC    E",\n            "j057": "LIQUIS      TAB 2.5MG",\n            "j082": "7",\n            "j088": "76200491",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "B",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0060000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000600002",\n            "l072": "B",\n            "l073": "OTTLE    1",\n            "l083": "71646",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 183,\n        "ndc": "000030893311",\n        "recordTypeA": {\n            "a017": "S;DLN 9",\n            "a024": "9908C",\n            "a029": "5",\n            "a030": "03612473",\n            "a039": "2",\n            "a044": "01204A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0893-31R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "LIQUIS",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "3370010000320",\n            "g031": "A",\n            "g036": "pixaban Tab 2.5 MG                                         1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "8",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "-M SQUIBB U.S. (PRIMARY CARE)B",\n            "j047": "MS-PC    E",\n            "j057": "LIQUIS      TAB 2.5MG",\n            "j082": "7",\n            "j088": "76200281",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "B",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0100000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000001000002",\n            "l072": "B",\n            "l073": "OX       1",\n            "l083": "71646",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 184,\n        "ndc": "000030894211",\n        "recordTypeA": {\n            "a017": "DFBUBA9",\n            "a024": "9908C",\n            "a029": "5",\n            "a030": "03612473",\n            "a039": "2",\n            "a044": "01204A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0894-21R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": null,\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "LIQUIS",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "3370010000330",\n            "g031": "A",\n            "g036": "pixaban Tab 5 MG                                           1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "8",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "-M SQUIBB U.S. (PRIMARY CARE)B",\n            "j047": "MS-PC    E",\n            "j057": "LIQUIS      TAB 5MG",\n            "j082": "8",\n            "j088": "19800491",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "B",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0060000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000000600002",\n            "l072": "B",\n            "l073": "OTTLE    1",\n            "l083": "77191",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 185,\n        "ndc": "000030894311",\n        "recordTypeA": {\n            "a017": "DF7UGB9",\n            "a024": "9908C",\n            "a029": "5",\n            "a030": "03612473",\n            "a039": "2",\n            "a044": "01204A",\n            "a050": "O",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-0894-31R",\n            "a067": null,\n            "a068": "X",\n            "a069": null,\n            "a070": "X",\n            "a071": "O",\n            "a072": "RS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "I",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "S",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "LIQUIS",\n            "e042": null,\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "E",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "3370010000330",\n            "g031": "A",\n            "g036": "pixaban Tab 5 MG                                           1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "8",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "-M SQUIBB U.S. (PRIMARY CARE)B",\n            "j047": "MS-PC    E",\n            "j057": "LIQUIS      TAB 5MG",\n            "j082": "8",\n            "j088": "19800281",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "B",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "T",\n            "l040": "ABS0",\n            "l044": "0100000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "000001000002",\n            "l072": "B",\n            "l073": "OX       1",\n            "l083": "77191",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 186,\n        "ndc": "000031253321",\n        "recordTypeA": {\n            "a017": "T37S849",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-1253-32O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": null,\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "J",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "CTIVE LIFE 1-PC DRAINABLE",\n            "e042": "POUCH/STOMAHESIVE/25MM",\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7151000006340",\n            "g031": "*",\n            "g036": "Ostomy Supplies - Pouch***                                 1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  D",\n            "j057": "RAIN POUCH  MIS 25MM",\n            "j082": "1",\n            "j088": "73645551",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "M",\n            "l040": "ISC0",\n            "l044": "0020000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000020000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "84837",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 187,\n        "ndc": "000031510111",\n        "recordTypeA": {\n            "a017": "N28Z669",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-1510-11O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UBIGRIP ELASTIC TUBULAR S",\n            "e042": "UPPORT/SIZE B/2-1/2\\"X40\\"/UD",\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "T",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7350000000000",\n            "g031": "*",\n            "g036": "Elastic Bandage & Supports**                               1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  T",\n            "j057": "UBIGRIP     MIS 2-1/2\\"UD",\n            "j082": "0",\n            "j088": "6437I431",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "M",\n            "l040": "ISC0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0012",\n            "l059": "0",\n            "l060": "00000012000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "66858",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 188,\n        "ndc": "000031510121",\n        "recordTypeA": {\n            "a017": "N28Z719",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-1510-12O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UBIGRIP ELASTIC TUBULAR S",\n            "e042": "UPPORT/SIZE C/2-3/4\\"X40\\"/UD",\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "T",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7350000000000",\n            "g031": "*",\n            "g036": "Elastic Bandage & Supports**                               1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  T",\n            "j057": "UBIGRIP     MIS 2-3/4\\"UD",\n            "j082": "0",\n            "j088": "6437I431",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "M",\n            "l040": "ISC0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0012",\n            "l059": "0",\n            "l060": "00000012000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "66858",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 189,\n        "ndc": "000031510131",\n        "recordTypeA": {\n            "a017": "N28Z769",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-1510-13O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UBIGRIP ELASTIC TUBULAR S",\n            "e042": "UPPORT/SIZE D/3\\"X40\\"/UD",\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "T",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7350000000000",\n            "g031": "*",\n            "g036": "Elastic Bandage & Supports**                               1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  T",\n            "j057": "UBIGRIP     MIS 3\\" UD",\n            "j082": "0",\n            "j088": "6437I431",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "M",\n            "l040": "ISC0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0012",\n            "l059": "0",\n            "l060": "00000012000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "66858",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 190,\n        "ndc": "000031510141",\n        "recordTypeA": {\n            "a017": "N28Z819",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-1510-14O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UBIGRIP ELASTIC TUBULAR S",\n            "e042": "UPPORT/SIZE E/3-1/2\\"X40\\"/UD",\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "T",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7350000000000",\n            "g031": "*",\n            "g036": "Elastic Bandage & Supports**                               1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  T",\n            "j057": "UBIGRIP     MIS 3-1/2\\"UD",\n            "j082": "0",\n            "j088": "6437I431",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "M",\n            "l040": "ISC0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0012",\n            "l059": "0",\n            "l060": "00000012000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "66858",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 191,\n        "ndc": "000031510151",\n        "recordTypeA": {\n            "a017": "N28Z869",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-1510-15O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UBIGRIP ELASTIC TUBULAR S",\n            "e042": "UPPORT/SIZE F/4\\"X40\\"/UD",\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "T",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7350000000000",\n            "g031": "*",\n            "g036": "Elastic Bandage & Supports**                               1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  T",\n            "j057": "UBIGRIP     MIS 4\\" UD",\n            "j082": "0",\n            "j088": "6437I431",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "M",\n            "l040": "ISC0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0012",\n            "l059": "0",\n            "l060": "00000012000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "66858",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 192,\n        "ndc": "000031514341",\n        "recordTypeA": {\n            "a017": "N27Z969",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-1514-34O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UBIGRIP ELASTIC TUBULAR S",\n            "e042": "UPPORT/SIZE E/3-1/2\\"",\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "T",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7350000000000",\n            "g031": "*",\n            "g036": "Elastic Bandage & Supports**                               1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  T",\n            "j057": "UBIGRIP     MIS 3-1/2\\"",\n            "j082": "0",\n            "j088": "64375291",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "M",\n            "l040": "ISC0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000001000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "66858",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 193,\n        "ndc": "000031514351",\n        "recordTypeA": {\n            "a017": "N27Z769",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-1514-35O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UBIGRIP ELASTIC TUBULAR S",\n            "e042": "UPPORT/SIZE A/1-1/2\\"",\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "T",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7350000000000",\n            "g031": "*",\n            "g036": "Elastic Bandage & Supports**                               1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  T",\n            "j057": "UBIGRIP     MIS 1-1/2\\"",\n            "j082": "0",\n            "j088": "64375291",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "M",\n            "l040": "ISC0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000001000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "66858",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 194,\n        "ndc": "000031514361",\n        "recordTypeA": {\n            "a017": "N27Z819",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-1514-36O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UBIGRIP ELASTIC TUBULAR S",\n            "e042": "UPPORT/SIZE B/2-1/2\\"",\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "T",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7350000000000",\n            "g031": "*",\n            "g036": "Elastic Bandage & Supports**                               1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  T",\n            "j057": "UBIGRIP     MIS 2-1/2\\"",\n            "j082": "0",\n            "j088": "64375291",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "M",\n            "l040": "ISC0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000001000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "66858",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 195,\n        "ndc": "000031514371",\n        "recordTypeA": {\n            "a017": "N27Z919",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-1514-37O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UBIGRIP ELASTIC TUBULAR S",\n            "e042": "UPPORT/SIZE D/3\\"",\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "T",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7350000000000",\n            "g031": "*",\n            "g036": "Elastic Bandage & Supports**                               1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  T",\n            "j057": "UBIGRIP     MIS 3\\"",\n            "j082": "0",\n            "j088": "64375291",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "M",\n            "l040": "ISC0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000001000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "66858",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 196,\n        "ndc": "000031514381",\n        "recordTypeA": {\n            "a017": "N28Z019",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-1514-38O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UBIGRIP ELASTIC TUBULAR S",\n            "e042": "UPPORT/SIZE F/4\\"",\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "T",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7350000000000",\n            "g031": "*",\n            "g036": "Elastic Bandage & Supports**                               1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  T",\n            "j057": "UBIGRIP     MIS 4\\"",\n            "j082": "0",\n            "j088": "64375291",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "M",\n            "l040": "ISC0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000001000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "66858",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 197,\n        "ndc": "000031514391",\n        "recordTypeA": {\n            "a017": "N28Z069",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-1514-39O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UBIGRIP ELASTIC TUBULAR S",\n            "e042": "UPPORT/SIZE G/4-1/2\\"",\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "T",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7350000000000",\n            "g031": "*",\n            "g036": "Elastic Bandage & Supports**                               1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  T",\n            "j057": "UBIGRIP     MIS 4-1/2\\"",\n            "j082": "0",\n            "j088": "64375291",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "M",\n            "l040": "ISC0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000001000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "66858",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 198,\n        "ndc": "000031514401",\n        "recordTypeA": {\n            "a017": "N28Z119",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-1514-40O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UBIGRIP ELASTIC TUBULAR S",\n            "e042": "UPPORT/SIZE J/6-3/4\\"",\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "T",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7350000000000",\n            "g031": "*",\n            "g036": "Elastic Bandage & Supports**                               1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  T",\n            "j057": "UBIGRIP     MIS 6-3/4\\"",\n            "j082": "0",\n            "j088": "64375291",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "M",\n            "l040": "ISC0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000001000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "66858",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 199,\n        "ndc": "000031514411",\n        "recordTypeA": {\n            "a017": "N28Z169",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-1514-41O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UBIGRIP ELASTIC TUBULAR S",\n            "e042": "UPPORT/SIZE K/8-1/4\\"",\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "T",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7350000000000",\n            "g031": "*",\n            "g036": "Elastic Bandage & Supports**                               1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  T",\n            "j057": "UBIGRIP     MIS 8-1/4\\"",\n            "j082": "0",\n            "j088": "64375291",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "M",\n            "l040": "ISC0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000001000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "66858",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    },\n    {\n        "id": 200,\n        "ndc": "000031514421",\n        "recordTypeA": {\n            "a017": "N28Z219",\n            "a024": "9983P",\n            "a029": "9",\n            "a030": "99999998",\n            "a039": "9",\n            "a044": "40000I",\n            "a050": "X",\n            "a051": "N",\n            "a052": "R0",\n            "a054": "0003-1514-42O",\n            "a067": "3",\n            "a068": null,\n            "a069": null,\n            "a070": "U",\n            "a071": "X",\n            "a072": "XS",\n            "a074": "0",\n            "a075": "0",\n            "a076": null,\n            "a077": null,\n            "a078": null,\n            "a079": "N",\n            "a089": "T",\n            "a090": "6",\n            "a091": "O",\n            "a092": "S",\n            "a093": "N",\n            "a094": "F",\n            "a095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "A",\n            "version": null\n        },\n        "recordTypeE": {\n            "e017": "UBIGRIP ELASTIC TUBULAR S",\n            "e042": "UPPORT/SIZE L/13\\"",\n            "e077": "0",\n            "e085": "000",\n            "e089": null,\n            "e091": null,\n            "e092": "B",\n            "e093": "1",\n            "e094": null,\n            "e095": "1",\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "T",\n            "version": null\n        },\n        "recordTypeG": {\n            "errors": {\n                "errors": []\n            },\n            "g017": "7350000000000",\n            "g031": "*",\n            "g036": "Elastic Bandage & Supports**                               1",\n            "id": null,\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "9",\n            "version": null\n        },\n        "recordTypeJ": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "j017": "ONVATEC                      C",\n            "j047": "ONVATEC  T",\n            "j057": "UBIGRIP     MIS 13\\"",\n            "j082": "0",\n            "j088": "64375291",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": "C",\n            "version": null\n        },\n        "recordTypeL": {\n            "errors": {\n                "errors": []\n            },\n            "id": null,\n            "l017": "M",\n            "l040": "ISC0",\n            "l044": "0001000E",\n            "l052": "A0",\n            "l054": "0001",\n            "l059": "0",\n            "l060": "00000001000",\n            "l072": "B",\n            "l073": "OX       0",\n            "l083": "66858",\n            "l089": null,\n            "l091": "N",\n            "l093": "N",\n            "l094": null,\n            "l095": "1",\n            "lastChangeDate": "13241",\n            "recordCode": 1,\n            "transactionCode": null,\n            "version": null\n        }\n    }\n], "metadata": {\n    "total": 851,\n    "psize": 100,\n    "offset": "100"\n}}';});


define('text!../test/fixtures/drug/drug_1.json',[],function () { return '{"id": 1, "ndc": "000020803031", "recordTypeA": {\n    "a017": "F10C406",\n    "a024": "6591C",\n    "a029": "0",\n    "a030": "01639607C",\n    "a039": "-IV 2",\n    "a044": "80808I",\n    "a050": "O",\n    "a051": "A",\n    "a052": "A0",\n    "a054": "0002-0803-03S",\n    "a067": null,\n    "a068": null,\n    "a069": null,\n    "a070": null,\n    "a071": "O",\n    "a072": "RS",\n    "a074": "0",\n    "a075": "0",\n    "a076": null,\n    "a077": null,\n    "a078": null,\n    "a079": "O",\n    "a089": "T",\n    "a090": "4",\n    "a091": "I",\n    "a092": "S",\n    "a093": "N",\n    "a094": "F",\n    "a095": "1",\n    "errors": {\n        "errors": []\n    },\n    "id": null,\n    "lastChangeDate": "13241",\n    "recordCode": 1,\n    "transactionCode": "B",\n    "version": null\n}, "recordTypeCs": [], "recordTypeE": {\n    "e017": "ARVON",\n    "e042": null,\n    "e077": "0",\n    "e085": "035",\n    "e089": null,\n    "e091": null,\n    "e092": "O",\n    "e093": "1",\n    "e094": null,\n    "e095": "1",\n    "errors": {\n        "errors": []\n    },\n    "id": null,\n    "lastChangeDate": "13241",\n    "recordCode": 1,\n    "transactionCode": "D",\n    "version": null\n}, "recordTypeG": {\n    "errors": {\n        "errors": []\n    },\n    "g017": "5100085100110",\n    "g031": "P",\n    "g036": "ropoxyphene HCl Cap 65 MG                                  1",\n    "id": null,\n    "lastChangeDate": "13241",\n    "recordCode": 1,\n    "transactionCode": "6",\n    "version": null\n}, "recordTypeJ": {\n    "errors": {\n        "errors": []\n    },\n    "id": null,\n    "j017": "AIPHARMA                     A",\n    "j047": "AIPHARMA D",\n    "j057": "ARVON       CAP 65MG",\n    "j082": "0",\n    "j088": "36090271",\n    "lastChangeDate": "13241",\n    "recordCode": 1,\n    "transactionCode": "A",\n    "version": null\n}, "recordTypeL": {\n    "errors": {\n        "errors": []\n    },\n    "id": null,\n    "l017": "C",\n    "l040": "APS0",\n    "l044": "0500000E",\n    "l052": "A0",\n    "l054": "0001",\n    "l059": "0",\n    "l060": "000005000002",\n    "l072": "B",\n    "l073": "OTTLE    0",\n    "l083": "05816",\n    "l089": null,\n    "l091": "N",\n    "l093": "N",\n    "l094": null,\n    "l095": "1",\n    "lastChangeDate": "13241",\n    "recordCode": 1,\n    "transactionCode": null,\n    "version": null\n}, "recordTypeM": {\n    "errors": {\n        "errors": []\n    },\n    "id": null,\n    "lastChangeDate": "13241",\n    "m017": "000006500000M",\n    "m030": "G         0",\n    "m041": "02",\n    "m043": "80808002",\n    "m051": "0101119",\n    "m059": "1",\n    "recordCode": 1,\n    "transactionCode": "0",\n    "version": null\n}, "recordTypePs": [\n    {\n        "class": "corg.sumo.apiapp.RecordTypeP",\n        "id": 1,\n        "drug": {\n            "_ref": "../..",\n            "class": "corg.sumo.apiapp.Drug"\n        },\n        "lastChangeDate": "13241",\n        "p017": "0",\n        "p018": "016396070",\n        "p027": "000006500000M",\n        "p040": "G         P",\n        "p051": "ROPOXYPHENE HYDROCHLORIDE              A",\n        "p091": null,\n        "p092": "1",\n        "recordCode": 1,\n        "transactionCode": "C"\n    }\n], "recordTypeQs": [\n    {\n        "class": "corg.sumo.apiapp.RecordTypeQ",\n        "id": 1,\n        "drug": {\n            "_ref": "../..",\n            "class": "corg.sumo.apiapp.Drug"\n        },\n        "lastChangeDate": "13241",\n        "q017": "0",\n        "q018": "0000263330",\n        "q028": "0000000526662",\n        "q041": "00312050",\n        "q049": "0000240480",\n        "q059": "0000000480962",\n        "q072": "0030404",\n        "q080": "1",\n        "recordCode": 1,\n        "transactionCode": null\n    },\n    {\n        "class": "corg.sumo.apiapp.RecordTypeQ",\n        "id": 2,\n        "drug": {\n            "_ref": "../..",\n            "class": "corg.sumo.apiapp.Drug"\n        },\n        "lastChangeDate": "13241",\n        "q017": "0",\n        "q018": "0000219620",\n        "q028": "0000000439242",\n        "q041": "00212070",\n        "q049": "0000209160",\n        "q059": "0000000418322",\n        "q072": "0020328",\n        "q080": "1",\n        "recordCode": 2,\n        "transactionCode": null\n    },\n    {\n        "class": "corg.sumo.apiapp.RecordTypeQ",\n        "id": 3,\n        "drug": {\n            "_ref": "../..",\n            "class": "corg.sumo.apiapp.Drug"\n        },\n        "lastChangeDate": "13241",\n        "q017": "0",\n        "q018": "0000190320",\n        "q028": "0000000380642",\n        "q041": "00011210",\n        "q049": "0000183000",\n        "q059": "0000000366002",\n        "q072": "0000512",\n        "q080": "1",\n        "recordCode": 3,\n        "transactionCode": null\n    }\n], "recordTypeRs": [\n    {\n        "class": "org.sumo.apiapp.RecordTypeR",\n        "id": 1,\n        "drug": {\n            "_ref": "../..",\n            "class": "org.sumo.apiapp.Drug"\n        },\n        "lastChangeDate": "13241",\n        "r017": "0",\n        "r018": "0000316000",\n        "r028": "0000000632002",\n        "r041": "00909260",\n        "r049": "0000329160",\n        "r059": "0000000658322",\n        "r072": "0031205",\n        "r080": "1",\n        "recordCode": 1,\n        "transactionCode": "K"\n    },\n    {\n        "class": "org.sumo.apiapp.RecordTypeR",\n        "id": 2,\n        "drug": {\n            "_ref": "../..",\n            "class": "org.sumo.apiapp.Drug"\n        },\n        "lastChangeDate": "13241",\n        "r017": "0",\n        "r018": "0000300600",\n        "r028": "0000000601202",\n        "r041": "00304040",\n        "r049": "0000274530",\n        "r059": "0000000549062",\n        "r072": "0021207",\n        "r080": "1",\n        "recordCode": 2,\n        "transactionCode": "K"\n    },\n    {\n        "class": "org.sumo.apiapp.RecordTypeR",\n        "id": 3,\n        "drug": {\n            "_ref": "../..",\n            "class": "org.sumo.apiapp.Drug"\n        },\n        "lastChangeDate": "13241",\n        "r017": "0",\n        "r018": "0000261450",\n        "r028": "0000000522902",\n        "r041": "00203280",\n        "r049": "0000228380",\n        "r059": "0000000456762",\n        "r072": "0001121",\n        "r080": "1",\n        "recordCode": 3,\n        "transactionCode": "K"\n    }\n], "recordTypeSs": [], "recordTypeTs": [\n    {\n        "class": "org.sumo.apiapp.RecordTypeT",\n        "id": 1,\n        "drug": {\n            "_ref": "../..",\n            "class": "org.sumo.apiapp.Drug"\n        },\n        "lastChangeDate": "13241",\n        "recordCode": 1,\n        "t017": "0",\n        "t018": "0000000000002",\n        "t031": "00101260",\n        "t039": "0000000135002",\n        "t052": "00012070",\n        "t060": "0000000000001",\n        "t073": "9990517",\n        "t081": "1",\n        "transactionCode": null\n    }\n]}';});


define('text!../test/fixtures/drug/drug_2.json',[],function () { return '{"id": 2, "ndc": "000021200011", "recordTypeA": {\n    "a017": "MYVID10",\n    "a024": "0002C",\n    "a029": "9",\n    "a030": "56103767",\n    "a039": "7",\n    "a044": "80000A",\n    "a050": "P",\n    "a051": "N",\n    "a052": "R0",\n    "a054": "0002-1200-01R",\n    "a067": "5",\n    "a068": null,\n    "a069": null,\n    "a070": null,\n    "a071": "I",\n    "a072": "VL",\n    "a074": "0",\n    "a075": "0",\n    "a076": null,\n    "a077": null,\n    "a078": null,\n    "a079": "N",\n    "a089": "T",\n    "a090": "6",\n    "a091": "I",\n    "a092": "S",\n    "a093": "N",\n    "a094": null,\n    "a095": "1",\n    "errors": {\n        "errors": []\n    },\n    "id": null,\n    "lastChangeDate": "13241",\n    "recordCode": 1,\n    "transactionCode": "A",\n    "version": null\n}, "recordTypeCs": [], "recordTypeE": {\n    "e017": "MYVID",\n    "e042": null,\n    "e077": "0",\n    "e085": "743",\n    "e089": null,\n    "e091": null,\n    "e092": "B",\n    "e093": "1",\n    "e094": null,\n    "e095": "1",\n    "errors": {\n        "errors": []\n    },\n    "id": null,\n    "lastChangeDate": "13241",\n    "recordCode": 1,\n    "transactionCode": "A",\n    "version": null\n}, "recordTypeG": {\n    "errors": {\n        "errors": []\n    },\n    "g017": "4352530002020",\n    "g031": "F",\n    "g036": "lorbetapir F 18 IV Soln 500-1900 MBq/ML (13.5-51 mCi/ML)   1",\n    "id": null,\n    "lastChangeDate": "13241",\n    "recordCode": 1,\n    "transactionCode": "9",\n    "version": null\n}, "recordTypeJ": {\n    "errors": {\n        "errors": []\n    },\n    "id": null,\n    "j017": "ILLY                         L",\n    "j047": "ILLY     A",\n    "j057": "MYVID       INJ",\n    "j082": "7",\n    "j088": "84410611",\n    "lastChangeDate": "13241",\n    "recordCode": 1,\n    "transactionCode": "L",\n    "version": null\n}, "recordTypeL": {\n    "errors": {\n        "errors": []\n    },\n    "id": null,\n    "l017": "S",\n    "l040": "OLN0",\n    "l044": "0001000E",\n    "l052": "A0",\n    "l054": "0001",\n    "l059": "0",\n    "l060": "000000010002",\n    "l072": "V",\n    "l073": "IAL      1",\n    "l083": "73709",\n    "l089": null,\n    "l091": "N",\n    "l093": "N",\n    "l094": null,\n    "l095": "1",\n    "lastChangeDate": "13241",\n    "recordCode": 1,\n    "transactionCode": null,\n    "version": null\n}, "recordTypeM": {\n    "errors": {\n        "errors": []\n    },\n    "id": null,\n    "lastChangeDate": "13241",\n    "m017": "000000000000",\n    "m030": "0",\n    "m041": "07",\n    "m043": "8000000",\n    "m051": null,\n    "m059": "1",\n    "recordCode": 1,\n    "transactionCode": "0",\n    "version": null\n}, "recordTypePs": [\n    {\n        "class": "org.sumo.apiapp.RecordTypeP",\n        "id": 2,\n        "drug": {\n            "_ref": "../..",\n            "class": "org.sumo.apiapp.Drug"\n        },\n        "lastChangeDate": "13241",\n        "p017": "9",\n        "p018": "561037670",\n        "p027": "000000000000",\n        "p040": "F",\n        "p051": "LORBETAPIR F 18                        A",\n        "p091": null,\n        "p092": "1",\n        "recordCode": 1,\n        "transactionCode": "C"\n    },\n    {\n        "class": "org.sumo.apiapp.RecordTypeP",\n        "id": 3,\n        "drug": {\n            "_ref": "../..",\n            "class": "org.sumo.apiapp.Drug"\n        },\n        "lastChangeDate": "13241",\n        "p017": "0",\n        "p018": "000641750",\n        "p027": "000000010000M",\n        "p040": "L/ML      A",\n        "p051": "LCOHOL, USP                            I",\n        "p091": null,\n        "p092": "1",\n        "recordCode": 2,\n        "transactionCode": "C"\n    }\n], "recordTypeQs": [\n    {\n        "class": "org.sumo.apiapp.RecordTypeQ",\n        "id": 4,\n        "drug": {\n            "_ref": "../..",\n            "class": "org.sumo.apiapp.Drug"\n        },\n        "lastChangeDate": "13241",\n        "q017": "0",\n        "q018": "0001600000",\n        "q028": "0001600000002",\n        "q041": "0120501",\n        "q049": null,\n        "q059": null,\n        "q072": null,\n        "q080": "1",\n        "recordCode": 1,\n        "transactionCode": null\n    }\n], "recordTypeRs": [\n    {\n        "class": "org.sumo.apiapp.RecordTypeR",\n        "id": 4,\n        "drug": {\n            "_ref": "../..",\n            "class": "org.sumo.apiapp.Drug"\n        },\n        "lastChangeDate": "13241",\n        "r017": "0",\n        "r018": "0001920000",\n        "r028": "0001920000002",\n        "r041": "0120501",\n        "r049": null,\n        "r059": null,\n        "r072": null,\n        "r080": "1",\n        "recordCode": 1,\n        "transactionCode": "L"\n    }\n], "recordTypeSs": [\n    {\n        "class": "org.sumo.apiapp.RecordTypeS",\n        "id": 1,\n        "drug": {\n            "_ref": "../..",\n            "class": "org.sumo.apiapp.Drug"\n        },\n        "lastChangeDate": "13241",\n        "recordCode": 1,\n        "s017": "0",\n        "s018": "0001600000",\n        "s028": "0001600000002",\n        "s041": "0120501",\n        "s049": null,\n        "s059": null,\n        "s072": null,\n        "s080": "1",\n        "transactionCode": null\n    }\n], "recordTypeTs": []}';});


define('text!../test/fixtures/drug/drug_3.json',[],function () { return '{"id": 3, "ndc": "000021407011", "recordTypeA": {\n    "a017": "Z33B100",\n    "a024": "0002C",\n    "a029": "0",\n    "a030": "07054253",\n    "a039": "2",\n    "a044": "40404A",\n    "a050": "P",\n    "a051": "N",\n    "a052": "R0",\n    "a054": "0002-1407-01R",\n    "a067": null,\n    "a068": null,\n    "a069": null,\n    "a070": null,\n    "a071": "I",\n    "a072": "JL",\n    "a074": "0",\n    "a075": "0",\n    "a076": null,\n    "a077": null,\n    "a078": null,\n    "a079": "N",\n    "a089": "G",\n    "a090": "6",\n    "a091": "I",\n    "a092": "S",\n    "a093": "R",\n    "a094": "F",\n    "a095": "1",\n    "errors": {\n        "errors": []\n    },\n    "id": null,\n    "lastChangeDate": "13241",\n    "recordCode": 1,\n    "transactionCode": "J",\n    "version": null\n}, "recordTypeCs": [], "recordTypeE": {\n    "e017": "UINIDINE GLUCONATE",\n    "e042": null,\n    "e077": "0",\n    "e085": "037",\n    "e089": null,\n    "e091": "Y",\n    "e092": "B",\n    "e093": "1",\n    "e094": null,\n    "e095": "1",\n    "errors": {\n        "errors": []\n    },\n    "id": null,\n    "lastChangeDate": "13241",\n    "recordCode": 1,\n    "transactionCode": "Q",\n    "version": null\n}, "recordTypeG": {\n    "errors": {\n        "errors": []\n    },\n    "g017": "5100030102005",\n    "g031": "Q",\n    "g036": "uinidine Gluconate Inj 80 MG/ML                            1",\n    "id": null,\n    "lastChangeDate": "13241",\n    "recordCode": 1,\n    "transactionCode": "3",\n    "version": null\n}, "recordTypeJ": {\n    "errors": {\n        "errors": []\n    },\n    "id": null,\n    "j017": "ILLY                         L",\n    "j047": "ILLY     Q",\n    "j057": "UINIDINE GL INJ 80MG/ML",\n    "j082": "0",\n    "j088": "11700171",\n    "lastChangeDate": "13241",\n    "recordCode": 1,\n    "transactionCode": "L",\n    "version": null\n}, "recordTypeL": {\n    "errors": {\n        "errors": []\n    },\n    "id": null,\n    "l017": "S",\n    "l040": "OLN0",\n    "l044": "0010000M",\n    "l052": "L0",\n    "l054": "0001",\n    "l059": "0",\n    "l060": "000000100002",\n    "l072": "V",\n    "l073": "IAL      0",\n    "l083": "18268",\n    "l089": null,\n    "l091": "N",\n    "l093": "N",\n    "l094": null,\n    "l095": "1",\n    "lastChangeDate": "13241",\n    "recordCode": 1,\n    "transactionCode": null,\n    "version": null\n}, "recordTypeM": {\n    "errors": {\n        "errors": []\n    },\n    "id": null,\n    "lastChangeDate": "13241",\n    "m017": "000008000000M",\n    "m030": "G/ML      0",\n    "m041": "02",\n    "m043": "4040404",\n    "m051": null,\n    "m059": "1",\n    "recordCode": 1,\n    "transactionCode": "0",\n    "version": null\n}, "recordTypePs": [\n    {\n        "class": "org.sumo.apiapp.RecordTypeP",\n        "id": 4,\n        "drug": {\n            "_ref": "../..",\n            "class": "org.sumo.apiapp.Drug"\n        },\n        "lastChangeDate": "13241",\n        "p017": "0",\n        "p018": "070542530",\n        "p027": "000008000000M",\n        "p040": "G/ML      Q",\n        "p051": "UINIDINE GLUCONATE                     A",\n        "p091": null,\n        "p092": "1",\n        "recordCode": 1,\n        "transactionCode": "C"\n    }\n], "recordTypeQs": [\n    {\n        "class": "org.sumo.apiapp.RecordTypeQ",\n        "id": 5,\n        "drug": {\n            "_ref": "../..",\n            "class": "org.sumo.apiapp.Drug"\n        },\n        "lastChangeDate": "13241",\n        "q017": "0",\n        "q018": "0000017970",\n        "q028": "0000001797002",\n        "q041": "00302040",\n        "q049": "0000017110",\n        "q059": "0000001711002",\n        "q072": "0011228",\n        "q080": "1",\n        "recordCode": 1,\n        "transactionCode": null\n    },\n    {\n        "class": "org.sumo.apiapp.RecordTypeQ",\n        "id": 6,\n        "drug": {\n            "_ref": "../..",\n            "class": "org.sumo.apiapp.Drug"\n        },\n        "lastChangeDate": "13241",\n        "q017": "0",\n        "q018": "0000015280",\n        "q028": "0000001528002",\n        "q041": "00011210",\n        "q049": "0000014150",\n        "q059": "0000001415001",\n        "q072": "9980107",\n        "q080": "1",\n        "recordCode": 2,\n        "transactionCode": null\n    },\n    {\n        "class": "org.sumo.apiapp.RecordTypeQ",\n        "id": 7,\n        "drug": {\n            "_ref": "../..",\n            "class": "org.sumo.apiapp.Drug"\n        },\n        "lastChangeDate": "13241",\n        "q017": "0",\n        "q018": "0000013670",\n        "q028": "0000001367001",\n        "q041": "99701080",\n        "q049": "0000012440",\n        "q059": "0000001244001",\n        "q072": "9960103",\n        "q080": "1",\n        "recordCode": 3,\n        "transactionCode": null\n    }\n], "recordTypeRs": [\n    {\n        "class": "org.sumo.apiapp.RecordTypeR",\n        "id": 5,\n        "drug": {\n            "_ref": "../..",\n            "class": "org.sumo.apiapp.Drug"\n        },\n        "lastChangeDate": "13241",\n        "r017": "0",\n        "r018": "0000021560",\n        "r028": "0000002156002",\n        "r041": "00909260",\n        "r049": "0000022460",\n        "r059": "0000002246002",\n        "r072": "0030204",\n        "r080": "1",\n        "recordCode": 1,\n        "transactionCode": "K"\n    },\n    {\n        "class": "org.sumo.apiapp.RecordTypeR",\n        "id": 6,\n        "drug": {\n            "_ref": "../..",\n            "class": "org.sumo.apiapp.Drug"\n        },\n        "lastChangeDate": "13241",\n        "r017": "0",\n        "r018": "0000020530",\n        "r028": "0000002053002",\n        "r041": "00112280",\n        "r049": "0000018340",\n        "r059": "0000001834002",\n        "r072": "0001121",\n        "r080": "1",\n        "recordCode": 2,\n        "transactionCode": "K"\n    },\n    {\n        "class": "org.sumo.apiapp.RecordTypeR",\n        "id": 7,\n        "drug": {\n            "_ref": "../..",\n            "class": "org.sumo.apiapp.Drug"\n        },\n        "lastChangeDate": "13241",\n        "r017": "0",\n        "r018": "0000016980",\n        "r028": "0000001698001",\n        "r041": "99801070",\n        "r049": "0000016410",\n        "r059": "0000001641001",\n        "r072": "9970108",\n        "r080": "1",\n        "recordCode": 3,\n        "transactionCode": "K"\n    }\n], "recordTypeSs": [], "recordTypeTs": []}';});


define('text!../test/fixtures/provider/providers_0.json',[],function () { return '{\n  "records": [\n    {\n      "id": "1740151",\n      "PROV_ID": "1740151",\n      "PROV_EFF_DT": "2006-07-21",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "O",\n      "LST_NM": "STANFORD UNIVERSITY MEDICAL CENTER",\n      "PROV_BTH_DT": "9999-12-31",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1174698468",\n      "MDCR_ID": "050441",\n      "PROV_ORIG_EFF_DT": "1997-12-16",\n      "addresses": [\n        {\n          "distance": "0",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "14",\n          "ADR_EFF_DT": "2000-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 44000 Dept 44774",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94144",\n          "LAT_NBR": "37.782936",\n          "LONG_NBR": "-122.464320",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4985850",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1.38751848636604",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "137",\n          "ADR_EFF_DT": "2011-07-05",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "500 Parnassus Ave Ste LEVEL1",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94143",\n          "LAT_NBR": "37.763059",\n          "LONG_NBR": "-122.460010",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3531660",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1.38845601288502",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "175",\n          "ADR_EFF_DT": "2012-01-23",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "401 Parnassus Ave",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94143",\n          "LAT_NBR": "37.763667",\n          "LONG_NBR": "-122.456750",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4767500",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1.39630630907051",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "189",\n          "ADR_EFF_DT": "2012-03-05",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "505 Parnassus Ave",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94143",\n          "LAT_NBR": "37.763248",\n          "LONG_NBR": "-122.458110",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3531079",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1.39630630907051",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "189",\n          "ADR_EFF_DT": "2012-03-05",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "505 Parnassus Ave",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94143",\n          "LAT_NBR": "37.763248",\n          "LONG_NBR": "-122.458110",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3538593",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1.84801913148212",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "188",\n          "ADR_EFF_DT": "2012-03-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2340 Clay St Ste 251",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94115",\n          "LAT_NBR": "37.791157",\n          "LONG_NBR": "-122.432100",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6001061",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.13931276657428",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "151",\n          "ADR_EFF_DT": "2010-08-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "929 Clay St Ste 503",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.793857",\n          "LONG_NBR": "-122.408490",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "9863215",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.66360668537443",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "224",\n          "ADR_EFF_DT": "2012-07-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1001 Potrero Ave",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.756045",\n          "LONG_NBR": "-122.406420",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2063166",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2003-07-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 60000 File 74432",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4985638",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2003-07-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 60000 File 74432",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4985743",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2003-07-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 60000 File 74432",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4986960",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2003-07-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 60000 File 74432",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "7234000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2003-07-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 60000 File 74432",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "800",\n          "TEL_NBR": "5493720",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2003-07-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74432 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "3209443",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2003-07-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74432 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4985638",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2003-07-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74432 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4986960",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2003-07-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74432 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4989111",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2003-07-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74432 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "7234000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2003-07-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74432 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "800",\n          "TEL_NBR": "5493720",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2003-07-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74432 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "800",\n          "TEL_NBR": "7569000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "139",\n          "ADR_EFF_DT": "2011-08-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74432 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4987200",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "139",\n          "ADR_EFF_DT": "2011-08-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74432 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "800",\n          "TEL_NBR": "5493720",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "146",\n          "ADR_EFF_DT": "2007-11-07",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74432",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4989111",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "155",\n          "ADR_EFF_DT": "2003-07-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74431 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4985638",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "155",\n          "ADR_EFF_DT": "2003-07-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74431 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4989111",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "014",\n          "SPCL_TYP_SML_DESC": "NS",\n          "SPCL_TYP_FULL_DESC": "NEUROLOGICAL SURGERY",\n          "HCFA_SPCL_TYP_CD": "1",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "1997-12-16",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-07-26",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "030",\n          "SPCL_TYP_SML_DESC": "R",\n          "SPCL_TYP_FULL_DESC": "RADIOLOGY",\n          "HCFA_SPCL_TYP_CD": "3",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2003-01-08",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "230",\n          "SPCL_TYP_SML_DESC": "OBG",\n          "SPCL_TYP_FULL_DESC": "OBSTETRICS AND GYNECOLOGY",\n          "HCFA_SPCL_TYP_CD": "1",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "1997-12-16",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "070",\n          "SPCL_TYP_SML_DESC": "PYG",\n          "SPCL_TYP_FULL_DESC": "CLINICAL PSYCHOLOGY",\n          "HCFA_SPCL_TYP_CD": "6",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "Y",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-08-27",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "338",\n          "SPCL_TYP_SML_DESC": "PHA",\n          "SPCL_TYP_FULL_DESC": "PHYSICIAN ASSISTANT",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2012-01-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "004",\n          "SPCL_TYP_SML_DESC": "OTO",\n          "SPCL_TYP_FULL_DESC": "OTOLARYNGOLOGY",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-08-28",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "095",\n          "SPCL_TYP_SML_DESC": "CDS",\n          "SPCL_TYP_FULL_DESC": "GENERAL VASCULAR SURGERY",\n          "HCFA_SPCL_TYP_CD": "7",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2011-04-29",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "037",\n          "SPCL_TYP_SML_DESC": "PD",\n          "SPCL_TYP_FULL_DESC": "PEDIATRICS",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "1997-12-16",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "015",\n          "SPCL_TYP_SML_DESC": "CRS",\n          "SPCL_TYP_FULL_DESC": "COLON AND RECTAL SURGERY",\n          "HCFA_SPCL_TYP_CD": "2",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2006-01-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "001",\n          "SPCL_TYP_SML_DESC": "GP",\n          "SPCL_TYP_FULL_DESC": "GENERAL PRACTICE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2003-08-07",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "026",\n          "SPCL_TYP_SML_DESC": "P",\n          "SPCL_TYP_FULL_DESC": "PSYCHIATRY",\n          "HCFA_SPCL_TYP_CD": "2",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "N",\n          "MHSA_IND": "Y",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "1997-12-16",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "002",\n          "SPCL_TYP_SML_DESC": "GS",\n          "SPCL_TYP_FULL_DESC": "SURGERY",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2011-04-29",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "509",\n          "SPCL_TYP_SML_DESC": "DD",\n          "SPCL_TYP_FULL_DESC": "DIGESTIVE DISEASES",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "C",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "1997-12-16",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "005",\n          "SPCL_TYP_SML_DESC": "AN",\n          "SPCL_TYP_FULL_DESC": "ANESTHESIOLOGY",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-12-22",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "018",\n          "SPCL_TYP_SML_DESC": "OPH",\n          "SPCL_TYP_FULL_DESC": "OPHTHALMOLOGY",\n          "HCFA_SPCL_TYP_CD": "1",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2011-04-29",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "073",\n          "SPCL_TYP_SML_DESC": "PT",\n          "SPCL_TYP_FULL_DESC": "PHYSICAL THERAPY",\n          "HCFA_SPCL_TYP_CD": "6",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2001-03-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "012",\n          "SPCL_TYP_SML_DESC": "C",\n          "SPCL_TYP_FULL_DESC": "CARDIOLOGY",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2009-01-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "008",\n          "SPCL_TYP_SML_DESC": "FP",\n          "SPCL_TYP_FULL_DESC": "FAMILY PRACTICE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "1997-12-16",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "034",\n          "SPCL_TYP_SML_DESC": "U",\n          "SPCL_TYP_FULL_DESC": "UROLOGY",\n          "HCFA_SPCL_TYP_CD": "3",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-03-23",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "275",\n          "SPCL_TYP_SML_DESC": "FPS",\n          "SPCL_TYP_FULL_DESC": "FAMILY PRACTICE SPECIALIST",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "1997-12-16",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "042",\n          "SPCL_TYP_SML_DESC": "EM",\n          "SPCL_TYP_FULL_DESC": "EMERGENCY MEDICINE",\n          "HCFA_SPCL_TYP_CD": "9",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "1997-12-16",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "033",\n          "SPCL_TYP_SML_DESC": "TCS",\n          "SPCL_TYP_FULL_DESC": "THORACIC CARDIOVASCULAR SURGERY",\n          "HCFA_SPCL_TYP_CD": "3",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2011-04-29",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2653776",\n      "PROV_ID": "2653776",\n      "PROV_EFF_DT": "2005-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "KWONG",\n      "FST_NM": "EVA",\n      "MDL_NM": "Y",\n      "PROV_BTH_DT": "1951-01-10",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1558432088",\n      "PROV_ORIG_EFF_DT": "2005-01-01",\n      "addresses": [\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2010-04-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2305198",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2010-04-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3988329",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2010-04-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "5201407",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2008-06-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3335777",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2008-06-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "5937696",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2008-06-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "9832573",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2008-06-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6632882",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "12",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3335777",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "12",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "5937696",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "12",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "9832573",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "12",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6632882",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2009-11-18",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3335777",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2009-11-18",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "5937696",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2009-11-18",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "9832573",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2009-11-18",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6632882",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "10.7781545578958",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2009-07-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "320 13th St Ste 107",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94612",\n          "LAT_NBR": "37.802549",\n          "LONG_NBR": "-122.268450",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3335777",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "10.7781545578958",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2009-07-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "320 13th St Ste 107",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94612",\n          "LAT_NBR": "37.802549",\n          "LONG_NBR": "-122.268450",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "9832523",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "10.7781545578958",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2009-07-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "320 13th St Ste 107",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94612",\n          "LAT_NBR": "37.802549",\n          "LONG_NBR": "-122.268450",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "9832573",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "10.7781545578958",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2009-07-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "320 13th St Ste 107",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94612",\n          "LAT_NBR": "37.802549",\n          "LONG_NBR": "-122.268450",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "4658380",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "10.7781545578958",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2009-12-19",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "320 13th St Ste 107",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94612",\n          "LAT_NBR": "37.802549",\n          "LONG_NBR": "-122.268450",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3335777",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "10.7781545578958",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2009-12-19",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "320 13th St Ste 107",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94612",\n          "LAT_NBR": "37.802549",\n          "LONG_NBR": "-122.268450",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "9832523",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "10.7781545578958",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2009-12-19",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "320 13th St Ste 107",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94612",\n          "LAT_NBR": "37.802549",\n          "LONG_NBR": "-122.268450",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "9832573",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "10.7781545578958",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2009-12-19",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "320 13th St Ste 107",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94612",\n          "LAT_NBR": "37.802549",\n          "LONG_NBR": "-122.268450",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "4658380",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.6298466103282",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2013-03-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1828 El Camino Real Ste 401",\n          "ADR_CTY_NM": "Burlingame",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94010",\n          "LAT_NBR": "37.595471",\n          "LONG_NBR": "-122.383640",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3335777",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.6298466103282",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2013-03-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1828 El Camino Real Ste 401",\n          "ADR_CTY_NM": "Burlingame",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94010",\n          "LAT_NBR": "37.595471",\n          "LONG_NBR": "-122.383640",\n          "TEL_AREA_CD": "888",\n          "TEL_NBR": "9060346",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2006-06-05",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2515741",\n      "PROV_ID": "2515741",\n      "PROV_EFF_DT": "2005-03-31",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "MATECKI",\n      "FST_NM": "AMY",\n      "MDL_NM": "L",\n      "PROV_BTH_DT": "1966-09-09",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1770571077",\n      "MDCR_ID": "00A807472",\n      "PROV_ORIG_EFF_DT": "2005-03-31",\n      "addresses": [\n        {\n          "distance": "11.9900444253409",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "16",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2001 Dwight Way",\n          "ADR_CTY_NM": "Berkeley",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94704",\n          "LAT_NBR": "37.863811",\n          "LONG_NBR": "-122.269690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2041591",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "11.9900444253409",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "16",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2001 Dwight Way",\n          "ADR_CTY_NM": "Berkeley",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94704",\n          "LAT_NBR": "37.863811",\n          "LONG_NBR": "-122.269690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2044711",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "11.9900444253409",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "16",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2001 Dwight Way",\n          "ADR_CTY_NM": "Berkeley",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94704",\n          "LAT_NBR": "37.863811",\n          "LONG_NBR": "-122.269690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2046440",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "11.9900444253409",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2005-03-31",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2001 Dwight Way",\n          "ADR_CTY_NM": "Berkeley",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94704",\n          "LAT_NBR": "37.863811",\n          "LONG_NBR": "-122.269690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2041591",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "11.9900444253409",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2005-03-31",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2001 Dwight Way",\n          "ADR_CTY_NM": "Berkeley",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94704",\n          "LAT_NBR": "37.863811",\n          "LONG_NBR": "-122.269690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2044711",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "11.9900444253409",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2005-03-31",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2001 Dwight Way",\n          "ADR_CTY_NM": "Berkeley",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94704",\n          "LAT_NBR": "37.863811",\n          "LONG_NBR": "-122.269690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2044771",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "11.9900444253409",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2005-03-31",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2001 Dwight Way",\n          "ADR_CTY_NM": "Berkeley",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94704",\n          "LAT_NBR": "37.863811",\n          "LONG_NBR": "-122.269690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2046402",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "11.9900444253409",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2005-03-31",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2001 Dwight Way",\n          "ADR_CTY_NM": "Berkeley",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94704",\n          "LAT_NBR": "37.863811",\n          "LONG_NBR": "-122.269690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2046440",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "11.9900444253409",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2005-03-31",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2001 Dwight Way",\n          "ADR_CTY_NM": "Berkeley",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94704",\n          "LAT_NBR": "37.863811",\n          "LONG_NBR": "-122.269690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "8480801",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.7147157187891",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2006-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2000 Vale Rd",\n          "ADR_CTY_NM": "San Pablo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94806",\n          "LAT_NBR": "37.954646",\n          "LONG_NBR": "-122.336550",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2041591",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.7147157187891",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2006-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2000 Vale Rd",\n          "ADR_CTY_NM": "San Pablo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94806",\n          "LAT_NBR": "37.954646",\n          "LONG_NBR": "-122.336550",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2046402",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.7147157187891",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2006-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2000 Vale Rd",\n          "ADR_CTY_NM": "San Pablo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94806",\n          "LAT_NBR": "37.954646",\n          "LONG_NBR": "-122.336550",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2046440",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.7147157187891",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2006-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2000 Vale Rd",\n          "ADR_CTY_NM": "San Pablo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94806",\n          "LAT_NBR": "37.954646",\n          "LONG_NBR": "-122.336550",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "8480801",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.7147157187891",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "14",\n          "ADR_EFF_DT": "2010-07-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2000 Vale Rd",\n          "ADR_CTY_NM": "San Pablo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94806",\n          "LAT_NBR": "37.954646",\n          "LONG_NBR": "-122.336550",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2041591",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.7147157187891",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "14",\n          "ADR_EFF_DT": "2010-07-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2000 Vale Rd",\n          "ADR_CTY_NM": "San Pablo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94806",\n          "LAT_NBR": "37.954646",\n          "LONG_NBR": "-122.336550",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2046440",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "18.9682211967126",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "15",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 1349",\n          "ADR_CTY_NM": "Martinez",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94553",\n          "LAT_NBR": "37.963038",\n          "LONG_NBR": "-122.200950",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2040801",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "18.9682211967126",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "15",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 1349",\n          "ADR_CTY_NM": "Martinez",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94553",\n          "LAT_NBR": "37.963038",\n          "LONG_NBR": "-122.200950",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2041591",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "18.9682211967126",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "15",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 1349",\n          "ADR_CTY_NM": "Martinez",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94553",\n          "LAT_NBR": "37.963038",\n          "LONG_NBR": "-122.200950",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2042077",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "18.9682211967126",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "15",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 1349",\n          "ADR_CTY_NM": "Martinez",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94553",\n          "LAT_NBR": "37.963038",\n          "LONG_NBR": "-122.200950",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2046402",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "18.9682211967126",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "15",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 1349",\n          "ADR_CTY_NM": "Martinez",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94553",\n          "LAT_NBR": "37.963038",\n          "LONG_NBR": "-122.200950",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2046440",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "18.9682211967126",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "15",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 1349",\n          "ADR_CTY_NM": "Martinez",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94553",\n          "LAT_NBR": "37.963038",\n          "LONG_NBR": "-122.200950",\n          "TEL_AREA_CD": "561",\n          "TEL_NBR": "9551761",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "18.9682211967126",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "15",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 1349",\n          "ADR_CTY_NM": "Martinez",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94553",\n          "LAT_NBR": "37.963038",\n          "LONG_NBR": "-122.200950",\n          "TEL_AREA_CD": "888",\n          "TEL_NBR": "3369121",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "377.445333885585",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2005-09-08",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "725 W Town And Country Rd",\n          "ADR_CTY_NM": "Orange",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92868",\n          "LAT_NBR": "33.776799",\n          "LONG_NBR": "-117.859910",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6498287",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "377.445333885585",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2005-09-08",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "725 W Town And Country Rd",\n          "ADR_CTY_NM": "Orange",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92868",\n          "LAT_NBR": "33.776799",\n          "LONG_NBR": "-117.859910",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "9180100",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "377.445333885585",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2005-09-08",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "725 W Town And Country Rd",\n          "ADR_CTY_NM": "Orange",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92868",\n          "LAT_NBR": "33.776799",\n          "LONG_NBR": "-117.859910",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "9180135",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "MD",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "011",\n          "SPCL_TYP_SML_DESC": "IM",\n          "SPCL_TYP_FULL_DESC": "INTERNAL MEDICINE",\n          "HCFA_SPCL_TYP_CD": "1",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "C",\n          "SPCL_BD_CERT_DT": "2004-08-24",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "2014-12-31",\n          "SPCL_EFF_DT": "2005-03-31",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "504",\n          "SPCL_TYP_SML_DESC": "HO",\n          "SPCL_TYP_FULL_DESC": "HEMATOLOGY\\/ONCOLOGY",\n          "HCFA_SPCL_TYP_CD": "8",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2008-06-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "340",\n          "SPCL_TYP_SML_DESC": "HOS",\n          "SPCL_TYP_FULL_DESC": "HOSPITALIST",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2005-10-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "N",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2005-11-11",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "N",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": [\n        {\n          "AFFIL_PROV_ID": "225865",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "AC",\n          "HOSP_AFFIL_DIR_IND": "Y",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "I"\n        },\n        {\n          "AFFIL_PROV_ID": "340436",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "AC",\n          "HOSP_AFFIL_DIR_IND": "Y",\n          "PRI_HOSP_AFFIL_CD": "P",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "334608",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "AC",\n          "HOSP_AFFIL_DIR_IND": "Y",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "943127",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "AC",\n          "HOSP_AFFIL_DIR_IND": "Y",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "24227",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "AC",\n          "HOSP_AFFIL_DIR_IND": "Y",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "225545",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "AC",\n          "HOSP_AFFIL_DIR_IND": "Y",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "I"\n        }\n      ]\n    },\n    {\n      "id": "2677965",\n      "PROV_ID": "2677965",\n      "PROV_EFF_DT": "2009-02-26",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "CHIEU",\n      "FST_NM": "CHANG WEI",\n      "PROV_BTH_DT": "1974-07-20",\n      "PROV_GDR_CD": "M",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1013958412",\n      "PROV_ORIG_EFF_DT": "2006-08-09",\n      "addresses": [\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2006-08-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523183",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2006-08-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523288",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2006-08-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491002",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2006-08-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491232",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2009-02-26",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523183",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2009-02-26",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523288",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2009-02-26",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491002",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2009-02-26",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491232",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2008-05-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523183",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2008-05-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523288",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2008-05-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491002",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2008-05-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491232",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.4024071333286",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "14",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "10011 N Foothill Blvd",\n          "ADR_CTY_NM": "Cupertino",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95014",\n          "LAT_NBR": "37.322004",\n          "LONG_NBR": "-122.068800",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "9842455",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2006-08-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523183",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2006-08-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523288",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2006-08-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491002",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2006-08-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491232",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2009-02-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523183",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2009-02-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523288",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2009-02-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491002",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2009-02-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491232",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2008-05-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523183",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2008-05-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523288",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2008-05-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491002",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2008-05-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491232",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "DC",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "S"\n        },\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2008-06-04",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "035",\n          "SPCL_TYP_SML_DESC": "CM",\n          "SPCL_TYP_FULL_DESC": "CHIROPRACTIC MEDICINE",\n          "HCFA_SPCL_TYP_CD": "3",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2006-08-09",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2653780",\n      "PROV_ID": "2653780",\n      "PROV_EFF_DT": "2005-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "TATSUMI",\n      "FST_NM": "JULIET",\n      "MDL_NM": "D",\n      "PROV_BTH_DT": "1968-12-24",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1528084365",\n      "PROV_ORIG_EFF_DT": "2005-01-01",\n      "addresses": [\n        {\n          "distance": "38.4698999599107",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3571 N 1st St",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95134",\n          "LAT_NBR": "37.407263",\n          "LONG_NBR": "-121.943740",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4242000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "41.1579739625811",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2006-06-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "20445 Prospect Rd Ste 1",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95129",\n          "LAT_NBR": "37.294242",\n          "LONG_NBR": "-122.030890",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4468444",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "41.1579739625811",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2006-06-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "20445 Prospect Rd Ste 1",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95129",\n          "LAT_NBR": "37.294242",\n          "LONG_NBR": "-122.030890",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4469444",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "43.4287572289344",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2006-06-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "427 N 2nd St Unit 310",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95112",\n          "LAT_NBR": "37.343575",\n          "LONG_NBR": "-121.894860",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4468444",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1572.52149398321",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "919 Northland Dr",\n          "ADR_CTY_NM": "Princeton",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55371",\n          "LAT_NBR": "45.558244",\n          "LONG_NBR": "-93.588642",\n          "TEL_AREA_CD": "763",\n          "TEL_NBR": "3893344",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1572.52337296305",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "12",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "911 Northland Dr",\n          "ADR_CTY_NM": "Princeton",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55371",\n          "LAT_NBR": "45.558151",\n          "LONG_NBR": "-93.588581",\n          "TEL_AREA_CD": "763",\n          "TEL_NBR": "3891313",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1574.02956628363",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "14500 99th Ave N",\n          "ADR_CTY_NM": "Maple Grove",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55369",\n          "LAT_NBR": "45.135021",\n          "LONG_NBR": "-93.462291",\n          "TEL_AREA_CD": "763",\n          "TEL_NBR": "8981000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1578.08444752479",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "15",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6401 France Ave S",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55435",\n          "LAT_NBR": "44.886122",\n          "LONG_NBR": "-93.328648",\n          "TEL_AREA_CD": "952",\n          "TEL_NBR": "9245000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1579.47845093128",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "201 E Nicollet Blvd",\n          "ADR_CTY_NM": "Burnsville",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55337",\n          "LAT_NBR": "44.749841",\n          "LONG_NBR": "-93.274628",\n          "TEL_AREA_CD": "952",\n          "TEL_NBR": "8922000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1582.06924920726",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 768",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55440",\n          "LAT_NBR": "44.983116",\n          "LONG_NBR": "-93.265080",\n          "TEL_AREA_CD": "612",\n          "TEL_NBR": "2733000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1582.06924920726",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 9372",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55440",\n          "LAT_NBR": "44.983116",\n          "LONG_NBR": "-93.265080",\n          "TEL_AREA_CD": "612",\n          "TEL_NBR": "6253600",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1582.06924920726",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 9372",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55440",\n          "LAT_NBR": "44.983116",\n          "LONG_NBR": "-93.265080",\n          "TEL_AREA_CD": "651",\n          "TEL_NBR": "9827000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1582.06924920726",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 9372",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55440",\n          "LAT_NBR": "44.983116",\n          "LONG_NBR": "-93.265080",\n          "TEL_AREA_CD": "763",\n          "TEL_NBR": "3891313",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1582.06924920726",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 9372",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55440",\n          "LAT_NBR": "44.983116",\n          "LONG_NBR": "-93.265080",\n          "TEL_AREA_CD": "763",\n          "TEL_NBR": "3893344",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1583.1277537478",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "14",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6341 University Ave NE",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55432",\n          "LAT_NBR": "45.083462",\n          "LONG_NBR": "-93.263065",\n          "TEL_AREA_CD": "763",\n          "TEL_NBR": "5725700",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1583.28435251828",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "16",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2450 Riverside Ave",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55454",\n          "LAT_NBR": "44.965856",\n          "LONG_NBR": "-93.236617",\n          "TEL_AREA_CD": "612",\n          "TEL_NBR": "6726000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1583.44079571599",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "17",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "420 Delaware St SE",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55455",\n          "LAT_NBR": "44.972289",\n          "LONG_NBR": "-93.234627",\n          "TEL_AREA_CD": "612",\n          "TEL_NBR": "2733000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1583.56647767041",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "18",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "516 Delaware St SE Ste 3-100",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55455",\n          "LAT_NBR": "44.972719",\n          "LONG_NBR": "-93.232113",\n          "TEL_AREA_CD": "612",\n          "TEL_NBR": "6253600",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1583.63402588937",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "500 Harvard St SE",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55455",\n          "LAT_NBR": "44.971283",\n          "LONG_NBR": "-93.230443",\n          "TEL_AREA_CD": "612",\n          "TEL_NBR": "2733000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1598.22069857828",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "5200 Fairview Blvd",\n          "ADR_CTY_NM": "Wyoming",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55092",\n          "LAT_NBR": "45.322248",\n          "LONG_NBR": "-92.998689",\n          "TEL_AREA_CD": "651",\n          "TEL_NBR": "9827000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "7944.53004325746",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO BOX 860217",\n          "ADR_CTY_NM": "MINNEAPOLIS",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55486",\n          "LAT_NBR": "0.000000",\n          "LONG_NBR": "0.000000",\n          "TEL_AREA_CD": "612",\n          "TEL_NBR": "2733000",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "PA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        },\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "S"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "338",\n          "SPCL_TYP_SML_DESC": "PHA",\n          "SPCL_TYP_FULL_DESC": "PHYSICIAN ASSISTANT",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2014-04-15",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2006-06-05",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2281302",\n      "PROV_ID": "2281302",\n      "PROV_EFF_DT": "2002-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "ZHAO",\n      "FST_NM": "WILLIAM",\n      "MDL_NM": "G",\n      "PROV_BTH_DT": "1955-09-27",\n      "PROV_GDR_CD": "M",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1558429381",\n      "PROV_ORIG_EFF_DT": "2002-01-01",\n      "addresses": [\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2012-03-13",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4183499",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2012-03-13",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6521829",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4183499",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6521829",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7881038",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7881983",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4183499",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6521829",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7881038",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7881983",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-02-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4183499",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-02-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6521829",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-02-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7881038",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-02-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7881983",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        },\n        {\n          "DEG_CD": "PHD",\n          "DEG_ACTV_CD": "I",\n          "DEG_PRI_CD": "S"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2002-01-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "3148863",\n      "PROV_ID": "3148863",\n      "PROV_EFF_DT": "2010-04-15",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "CHEN",\n      "FST_NM": "ZHI JUN",\n      "MDL_NM": "JUN",\n      "PROV_BTH_DT": "1948-10-24",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1255662300",\n      "PROV_ORIG_EFF_DT": "2009-01-01",\n      "addresses": [\n        {\n          "distance": "3.55541628900033",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2892 23rd St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.754489",\n          "LONG_NBR": "-122.409970",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4308251",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55541628900033",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2892 23rd St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.754489",\n          "LONG_NBR": "-122.409970",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7621960",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55541628900033",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2892 23rd St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.754489",\n          "LONG_NBR": "-122.409970",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "8677775",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55541628900033",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2892 23rd St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.754489",\n          "LONG_NBR": "-122.409970",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "8339555",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55541628900033",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2010-04-14",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2892 23rd St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.754489",\n          "LONG_NBR": "-122.409970",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4308251",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55541628900033",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2010-04-14",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2892 23rd St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.754489",\n          "LONG_NBR": "-122.409970",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7621960",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55541628900033",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2010-04-14",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2892 23rd St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.754489",\n          "LONG_NBR": "-122.409970",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "8677775",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55541628900033",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2010-04-14",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2892 23rd St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.754489",\n          "LONG_NBR": "-122.409970",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "8339555",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.706115495141",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7151 Amador Plaza Rd",\n          "ADR_CTY_NM": "Dublin",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94568",\n          "LAT_NBR": "37.707028",\n          "LONG_NBR": "-121.929000",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4308251",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.706115495141",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7151 Amador Plaza Rd",\n          "ADR_CTY_NM": "Dublin",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94568",\n          "LAT_NBR": "37.707028",\n          "LONG_NBR": "-121.929000",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7621960",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.706115495141",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7151 Amador Plaza Rd",\n          "ADR_CTY_NM": "Dublin",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94568",\n          "LAT_NBR": "37.707028",\n          "LONG_NBR": "-121.929000",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "8677775",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.706115495141",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7151 Amador Plaza Rd",\n          "ADR_CTY_NM": "Dublin",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94568",\n          "LAT_NBR": "37.707028",\n          "LONG_NBR": "-121.929000",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "8339555",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.706115495141",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2010-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7151 Amador Plaza Rd",\n          "ADR_CTY_NM": "Dublin",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94568",\n          "LAT_NBR": "37.707028",\n          "LONG_NBR": "-121.929000",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4308251",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.706115495141",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2010-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7151 Amador Plaza Rd",\n          "ADR_CTY_NM": "Dublin",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94568",\n          "LAT_NBR": "37.707028",\n          "LONG_NBR": "-121.929000",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7621960",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.706115495141",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2010-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7151 Amador Plaza Rd",\n          "ADR_CTY_NM": "Dublin",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94568",\n          "LAT_NBR": "37.707028",\n          "LONG_NBR": "-121.929000",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "8677775",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.706115495141",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2010-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7151 Amador Plaza Rd",\n          "ADR_CTY_NM": "Dublin",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94568",\n          "LAT_NBR": "37.707028",\n          "LONG_NBR": "-121.929000",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "8339555",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2010-03-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2600152",\n      "PROV_ID": "2600152",\n      "PROV_EFF_DT": "2008-08-07",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "KIM",\n      "FST_NM": "IN SUN",\n      "PROV_BTH_DT": "1963-07-04",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1689717274",\n      "PROV_ORIG_EFF_DT": "2003-01-01",\n      "addresses": [\n        {\n          "distance": "33.4652423501524",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "667 Fontes Dr",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94539",\n          "LAT_NBR": "37.540907",\n          "LONG_NBR": "-121.933520",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2601800",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "33.4652423501524",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "667 Fontes Dr",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94539",\n          "LAT_NBR": "37.540907",\n          "LONG_NBR": "-121.933520",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2601885",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "33.4652423501524",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "667 Fontes Dr",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94539",\n          "LAT_NBR": "37.540907",\n          "LONG_NBR": "-121.933520",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "9381376",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2013-07-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2601800",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2013-07-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2601885",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2013-07-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4476878",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2013-07-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7483342",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-08-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2601800",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-08-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2601885",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-08-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4476878",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-08-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7483342",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2013-07-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2601800",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2013-07-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2601885",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2013-07-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4476878",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2013-07-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7483342",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2006-01-05",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2885209",\n      "PROV_ID": "2885209",\n      "PROV_EFF_DT": "2007-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "CHEN",\n      "FST_NM": "AI YUN",\n      "PROV_BTH_DT": "1960-05-30",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1568590370",\n      "PROV_ORIG_EFF_DT": "2007-01-01",\n      "addresses": [\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2008-01-21",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3761052",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2008-01-21",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6521829",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2008-01-21",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2894878",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2008-01-21",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6518176",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2009-12-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3761052",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2009-12-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6521829",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2009-12-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2894878",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2009-12-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6518176",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2012-01-04",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3761052",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2012-01-04",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6521829",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2012-01-04",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2894878",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2012-01-04",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6518176",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.58003058519618",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-12-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "45 Esquina Dr",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94134",\n          "LAT_NBR": "37.709432",\n          "LONG_NBR": "-122.421130",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3761052",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.58003058519618",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-12-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "45 Esquina Dr",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94134",\n          "LAT_NBR": "37.709432",\n          "LONG_NBR": "-122.421130",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6521829",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.58003058519618",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-12-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "45 Esquina Dr",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94134",\n          "LAT_NBR": "37.709432",\n          "LONG_NBR": "-122.421130",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2894878",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.58003058519618",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-12-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "45 Esquina Dr",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94134",\n          "LAT_NBR": "37.709432",\n          "LONG_NBR": "-122.421130",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6518176",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.58003058519618",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-01-04",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "45 Esquina Dr",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94134",\n          "LAT_NBR": "37.709432",\n          "LONG_NBR": "-122.421130",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3761052",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.58003058519618",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-01-04",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "45 Esquina Dr",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94134",\n          "LAT_NBR": "37.709432",\n          "LONG_NBR": "-122.421130",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6521829",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.58003058519618",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-01-04",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "45 Esquina Dr",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94134",\n          "LAT_NBR": "37.709432",\n          "LONG_NBR": "-122.421130",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2894878",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.58003058519618",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-01-04",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "45 Esquina Dr",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94134",\n          "LAT_NBR": "37.709432",\n          "LONG_NBR": "-122.421130",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6518176",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2008-01-21",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2851264",\n      "PROV_ID": "2851264",\n      "PROV_EFF_DT": "2008-11-19",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "KIM",\n      "FST_NM": "A YOUNG",\n      "PROV_BTH_DT": "1975-09-16",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1306962584",\n      "PROV_ORIG_EFF_DT": "2006-01-01",\n      "addresses": [\n        {\n          "distance": "32.6635765394362",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2013-12-02",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "895 Sherwood Ave Ste 101",\n          "ADR_CTY_NM": "Los Altos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94022",\n          "LAT_NBR": "37.398925",\n          "LONG_NBR": "-122.113400",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "3863115",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "32.6635765394362",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2013-12-02",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "895 Sherwood Ave Ste 101",\n          "ADR_CTY_NM": "Los Altos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94022",\n          "LAT_NBR": "37.398925",\n          "LONG_NBR": "-122.113400",\n          "TEL_AREA_CD": "509",\n          "TEL_NBR": "6913730",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "47.4199903821059",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2013-12-02",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15690 LOS GATOS BLVD",\n          "ADR_CTY_NM": "LOS GATOS",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95032",\n          "LAT_NBR": "37.230793",\n          "LONG_NBR": "-121.946323",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "3863115",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "47.4199903821059",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2013-12-02",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15690 LOS GATOS BLVD",\n          "ADR_CTY_NM": "LOS GATOS",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95032",\n          "LAT_NBR": "37.230793",\n          "LONG_NBR": "-121.946323",\n          "TEL_AREA_CD": "509",\n          "TEL_NBR": "6913730",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "84.1117938890252",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2013-12-02",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3113 NICKLAS LN APT 3B",\n          "ADR_CTY_NM": "MARINA",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "93933",\n          "LAT_NBR": "36.684221",\n          "LONG_NBR": "-121.793348",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "3863115",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "84.1117938890252",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2013-12-02",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3113 NICKLAS LN APT 3B",\n          "ADR_CTY_NM": "MARINA",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "93933",\n          "LAT_NBR": "36.684221",\n          "LONG_NBR": "-121.793348",\n          "TEL_AREA_CD": "509",\n          "TEL_NBR": "6913730",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "320.652113810009",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "23206 Lyons Ave Ste 110",\n          "ADR_CTY_NM": "Newhall",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91321",\n          "LAT_NBR": "34.379729",\n          "LONG_NBR": "-118.538260",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "2880022",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "320.652113810009",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "23206 Lyons Ave Ste 110",\n          "ADR_CTY_NM": "Newhall",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91321",\n          "LAT_NBR": "34.379729",\n          "LONG_NBR": "-118.538260",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "2882030",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "320.727519726108",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2010-07-21",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "23043 Lyons Ave",\n          "ADR_CTY_NM": "Newhall",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91321",\n          "LAT_NBR": "34.380273",\n          "LONG_NBR": "-118.535550",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "2880022",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "320.727519726108",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2010-07-21",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "23043 Lyons Ave",\n          "ADR_CTY_NM": "Newhall",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91321",\n          "LAT_NBR": "34.380273",\n          "LONG_NBR": "-118.535550",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "2882030",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "320.727519726108",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2010-08-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "23043 Lyons Ave",\n          "ADR_CTY_NM": "Newhall",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91321",\n          "LAT_NBR": "34.380273",\n          "LONG_NBR": "-118.535550",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "2880022",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "320.727519726108",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2010-08-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "23043 Lyons Ave",\n          "ADR_CTY_NM": "Newhall",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91321",\n          "LAT_NBR": "34.380273",\n          "LONG_NBR": "-118.535550",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "2882030",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "322.113915962111",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-11-19",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "18261 Soledad Canyon Rd",\n          "ADR_CTY_NM": "Canyon Country",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91387",\n          "LAT_NBR": "34.416678",\n          "LONG_NBR": "-118.451470",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "2515930",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "322.113915962111",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-11-19",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "18261 Soledad Canyon Rd",\n          "ADR_CTY_NM": "Canyon Country",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91387",\n          "LAT_NBR": "34.416678",\n          "LONG_NBR": "-118.451470",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "2882030",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "322.113915962111",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-11-19",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "18261 Soledad Canyon Rd",\n          "ADR_CTY_NM": "Canyon Country",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91387",\n          "LAT_NBR": "34.416678",\n          "LONG_NBR": "-118.451470",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "3736838",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "322.113915962111",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2006-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "18261 Soledad Canyon Rd",\n          "ADR_CTY_NM": "Canyon Country",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91387",\n          "LAT_NBR": "34.416678",\n          "LONG_NBR": "-118.451470",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "2515930",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "322.113915962111",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2006-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "18261 Soledad Canyon Rd",\n          "ADR_CTY_NM": "Canyon Country",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91387",\n          "LAT_NBR": "34.416678",\n          "LONG_NBR": "-118.451470",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "2882030",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "322.113915962111",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2006-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "18261 Soledad Canyon Rd",\n          "ADR_CTY_NM": "Canyon Country",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91387",\n          "LAT_NBR": "34.416678",\n          "LONG_NBR": "-118.451470",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "3736838",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2006-01-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2483606",\n      "PROV_ID": "2483606",\n      "PROV_EFF_DT": "2003-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "LIN",\n      "FST_NM": "LISA",\n      "PROV_BTH_DT": "1950-07-15",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1548395692",\n      "PROV_ORIG_EFF_DT": "2003-01-01",\n      "addresses": [\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-04-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2305198",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-04-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "5201407",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.7931804251864",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3121 Park Ave Ste J",\n          "ADR_CTY_NM": "Soquel",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95073",\n          "LAT_NBR": "36.989874",\n          "LONG_NBR": "-121.935720",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4768355",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.7931804251864",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3121 Park Ave Ste J",\n          "ADR_CTY_NM": "Soquel",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95073",\n          "LAT_NBR": "36.989874",\n          "LONG_NBR": "-121.935720",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4768359",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.7931804251864",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3121 Park Ave Ste J",\n          "ADR_CTY_NM": "Soquel",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95073",\n          "LAT_NBR": "36.989874",\n          "LONG_NBR": "-121.935720",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "7066588",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.7931804251864",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3121 Park Ave Ste J",\n          "ADR_CTY_NM": "Soquel",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95073",\n          "LAT_NBR": "36.989874",\n          "LONG_NBR": "-121.935720",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4768355",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.7931804251864",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3121 Park Ave Ste J",\n          "ADR_CTY_NM": "Soquel",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95073",\n          "LAT_NBR": "36.989874",\n          "LONG_NBR": "-121.935720",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4768359",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.7931804251864",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3121 Park Ave Ste J",\n          "ADR_CTY_NM": "Soquel",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95073",\n          "LAT_NBR": "36.989874",\n          "LONG_NBR": "-121.935720",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "7066588",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.7931804251864",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3121 Park Ave Ste J",\n          "ADR_CTY_NM": "Soquel",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95073",\n          "LAT_NBR": "36.989874",\n          "LONG_NBR": "-121.935720",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4768355",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.7931804251864",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3121 Park Ave Ste J",\n          "ADR_CTY_NM": "Soquel",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95073",\n          "LAT_NBR": "36.989874",\n          "LONG_NBR": "-121.935720",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4768359",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.7931804251864",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3121 Park Ave Ste J",\n          "ADR_CTY_NM": "Soquel",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95073",\n          "LAT_NBR": "36.989874",\n          "LONG_NBR": "-121.935720",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "7066588",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        },\n        {\n          "DEG_CD": "PHD",\n          "DEG_ACTV_CD": "I",\n          "DEG_PRI_CD": "S"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-12-14",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2529393",\n      "PROV_ID": "2529393",\n      "PROV_EFF_DT": "2004-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "MARDIAN",\n      "FST_NM": "ARAM",\n      "PROV_BTH_DT": "1976-04-28",\n      "PROV_GDR_CD": "M",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1952366734",\n      "PROV_ORIG_EFF_DT": "2004-01-01",\n      "addresses": [\n        {\n          "distance": "11.9395624592001",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2008-04-04",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2520 Milvia St",\n          "ADR_CTY_NM": "Berkeley",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94704",\n          "LAT_NBR": "37.862528",\n          "LONG_NBR": "-122.269890",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "8417600",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "634.069027436511",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "15",\n          "ADR_EFF_DT": "2010-06-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15468 N Civic Center Dr",\n          "ADR_CTY_NM": "Surprise",\n          "ADR_ST_CD": "AZ",\n          "ADR_ZIP_CD": "85374",\n          "LAT_NBR": "33.624448",\n          "LONG_NBR": "-112.368190",\n          "TEL_AREA_CD": "623",\n          "TEL_NBR": "5842917",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "634.069027436511",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "15",\n          "ADR_EFF_DT": "2010-06-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15468 N Civic Center Dr",\n          "ADR_CTY_NM": "Surprise",\n          "ADR_ST_CD": "AZ",\n          "ADR_ZIP_CD": "85374",\n          "LAT_NBR": "33.624448",\n          "LONG_NBR": "-112.368190",\n          "TEL_AREA_CD": "623",\n          "TEL_NBR": "5842945",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "656.844778203583",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2010-02-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2601 E ROOSEVELT ST",\n          "ADR_CTY_NM": "PHOENIX",\n          "ADR_ST_CD": "AZ",\n          "ADR_ZIP_CD": "85008",\n          "LAT_NBR": "33.458383",\n          "LONG_NBR": "-112.026050",\n          "TEL_AREA_CD": "602",\n          "TEL_NBR": "3445011",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "656.844778203583",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2010-02-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2601 E ROOSEVELT ST",\n          "ADR_CTY_NM": "PHOENIX",\n          "ADR_ST_CD": "AZ",\n          "ADR_ZIP_CD": "85008",\n          "LAT_NBR": "33.458383",\n          "LONG_NBR": "-112.026050",\n          "TEL_AREA_CD": "602",\n          "TEL_NBR": "3445426",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "659.653679102564",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "19",\n          "ADR_EFF_DT": "2010-06-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 29637",\n          "ADR_CTY_NM": "Phoenix",\n          "ADR_ST_CD": "AZ",\n          "ADR_ZIP_CD": "85038",\n          "LAT_NBR": "33.451091",\n          "LONG_NBR": "-111.974860",\n          "TEL_AREA_CD": "623",\n          "TEL_NBR": "5445070",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "659.653679102564",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "19",\n          "ADR_EFF_DT": "2010-06-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 29637",\n          "ADR_CTY_NM": "Phoenix",\n          "ADR_ST_CD": "AZ",\n          "ADR_ZIP_CD": "85038",\n          "LAT_NBR": "33.451091",\n          "LONG_NBR": "-111.974860",\n          "TEL_AREA_CD": "623",\n          "TEL_NBR": "5445094",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "670.404533745625",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "21",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "8801 14th Ave S",\n          "ADR_CTY_NM": "Seattle",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98108",\n          "LAT_NBR": "47.524601",\n          "LONG_NBR": "-122.315150",\n          "TEL_AREA_CD": "206",\n          "TEL_NBR": "7623730",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "671.996619247401",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2007-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6520 226th Pl SE Ste 150",\n          "ADR_CTY_NM": "Issaquah",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98027",\n          "LAT_NBR": "47.543328",\n          "LONG_NBR": "-122.038290",\n          "TEL_AREA_CD": "425",\n          "TEL_NBR": "3691435",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "671.996619247401",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2007-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6520 226th Pl SE Ste 150",\n          "ADR_CTY_NM": "Issaquah",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98027",\n          "LAT_NBR": "47.543328",\n          "LONG_NBR": "-122.038290",\n          "TEL_AREA_CD": "425",\n          "TEL_NBR": "6885777",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "672.000401995669",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "20",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 34703",\n          "ADR_CTY_NM": "Seattle",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98124",\n          "LAT_NBR": "47.547782",\n          "LONG_NBR": "-122.314600",\n          "TEL_AREA_CD": "206",\n          "TEL_NBR": "7643335",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "672.000401995669",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "22",\n          "ADR_EFF_DT": "2011-05-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "MS 315010 PO Box 3947",\n          "ADR_CTY_NM": "Seattle",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98124",\n          "LAT_NBR": "47.547782",\n          "LONG_NBR": "-122.314600",\n          "TEL_AREA_CD": "866",\n          "TEL_NBR": "7753421",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "672.828060919064",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4744 41ST AVE SW STE 102",\n          "ADR_CTY_NM": "SEATTLE",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98116",\n          "LAT_NBR": "47.560247",\n          "LONG_NBR": "-122.383910",\n          "TEL_AREA_CD": "206",\n          "TEL_NBR": "6502184",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "672.828060919064",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4744 41ST AVE SW STE 102",\n          "ADR_CTY_NM": "SEATTLE",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98116",\n          "LAT_NBR": "47.560247",\n          "LONG_NBR": "-122.383910",\n          "TEL_AREA_CD": "206",\n          "TEL_NBR": "6743860",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "672.828060919064",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4744 41ST AVE SW STE 102",\n          "ADR_CTY_NM": "SEATTLE",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98116",\n          "LAT_NBR": "47.560247",\n          "LONG_NBR": "-122.383910",\n          "TEL_AREA_CD": "206",\n          "TEL_NBR": "9320880",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "672.828060919064",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4744 41ST AVE SW STE 102",\n          "ADR_CTY_NM": "SEATTLE",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98116",\n          "LAT_NBR": "47.560247",\n          "LONG_NBR": "-122.383910",\n          "TEL_AREA_CD": "206",\n          "TEL_NBR": "9323738",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "672.828060919064",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2005-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4744 41ST AVE SW STE 102",\n          "ADR_CTY_NM": "SEATTLE",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98116",\n          "LAT_NBR": "47.560247",\n          "LONG_NBR": "-122.383910",\n          "TEL_AREA_CD": "206",\n          "TEL_NBR": "6502184",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "672.828060919064",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2005-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4744 41ST AVE SW STE 102",\n          "ADR_CTY_NM": "SEATTLE",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98116",\n          "LAT_NBR": "47.560247",\n          "LONG_NBR": "-122.383910",\n          "TEL_AREA_CD": "206",\n          "TEL_NBR": "6743860",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "672.828060919064",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2005-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4744 41ST AVE SW STE 102",\n          "ADR_CTY_NM": "SEATTLE",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98116",\n          "LAT_NBR": "47.560247",\n          "LONG_NBR": "-122.383910",\n          "TEL_AREA_CD": "206",\n          "TEL_NBR": "9320880",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "672.828060919064",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2005-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4744 41ST AVE SW STE 102",\n          "ADR_CTY_NM": "SEATTLE",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98116",\n          "LAT_NBR": "47.560247",\n          "LONG_NBR": "-122.383910",\n          "TEL_AREA_CD": "206",\n          "TEL_NBR": "9323738",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1581.79046788228",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "35",\n          "ADR_EFF_DT": "2013-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 86 SDS 12-2955",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55486",\n          "LAT_NBR": "44.977214",\n          "LONG_NBR": "-93.269688",\n          "TEL_AREA_CD": "602",\n          "TEL_NBR": "4705000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1581.79046788228",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "35",\n          "ADR_EFF_DT": "2013-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 86 SDS 12-2955",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55486",\n          "LAT_NBR": "44.977214",\n          "LONG_NBR": "-93.269688",\n          "TEL_AREA_CD": "602",\n          "TEL_NBR": "4705070",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "MD",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "008",\n          "SPCL_TYP_SML_DESC": "FP",\n          "SPCL_TYP_FULL_DESC": "FAMILY PRACTICE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "C",\n          "SPCL_BD_CERT_DT": "2005-07-30",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "2012-12-31",\n          "SPCL_EFF_DT": "2004-01-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "275",\n          "SPCL_TYP_SML_DESC": "FPS",\n          "SPCL_TYP_FULL_DESC": "FAMILY PRACTICE SPECIALIST",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2011-12-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-01-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "026",\n          "SPCL_TYP_SML_DESC": "P",\n          "SPCL_TYP_FULL_DESC": "PSYCHIATRY",\n          "HCFA_SPCL_TYP_CD": "2",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "N",\n          "MHSA_IND": "Y",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2009-02-10",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "328",\n          "SPCL_TYP_SML_DESC": "UCA",\n          "SPCL_TYP_FULL_DESC": "URGENT CARE MEDICINE",\n          "HCFA_SPCL_TYP_CD": "7",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-01-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": [\n        {\n          "AFFIL_PROV_ID": "564290",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "UNK",\n          "HOSP_AFFIL_DIR_IND": "N",\n          "PRI_HOSP_AFFIL_CD": "P",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "734409",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "UNK",\n          "HOSP_AFFIL_DIR_IND": "N",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "2053138",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "UNK",\n          "HOSP_AFFIL_DIR_IND": "N",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "2084329",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "UNK",\n          "HOSP_AFFIL_DIR_IND": "N",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "2830263",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "UNK",\n          "HOSP_AFFIL_DIR_IND": "N",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "A"\n        }\n      ]\n    },\n    {\n      "id": "1856748",\n      "PROV_ID": "1856748",\n      "PROV_EFF_DT": "2007-01-02",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "CHAO",\n      "FST_NM": "LAWRENCE",\n      "MDL_NM": "L",\n      "PROV_BTH_DT": "1962-12-23",\n      "PROV_GDR_CD": "M",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1700896370",\n      "MDCR_ID": "00A555110",\n      "PROV_ORIG_EFF_DT": "1999-03-29",\n      "addresses": [\n        {\n          "distance": "0.421167026542003",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3838 California St Rm 416",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94118",\n          "LAT_NBR": "37.786016",\n          "LONG_NBR": "-122.457660",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3333091",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "0.421167026542003",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3838 California St Rm 416",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94118",\n          "LAT_NBR": "37.786016",\n          "LONG_NBR": "-122.457660",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3333302",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.43078998435007",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2009-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 39000 Dept Ste 34199",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94139",\n          "LAT_NBR": "37.792972",\n          "LONG_NBR": "-122.402770",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "9726000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2001-06-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3333302",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3333091",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3333302",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3339984",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6928688",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2001-10-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3333091",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2001-10-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3333302",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2001-10-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3339984",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2001-10-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6928688",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2009-05-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3333091",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2009-05-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3333302",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2009-05-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3339984",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2009-05-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6928688",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "MD",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "011",\n          "SPCL_TYP_SML_DESC": "IM",\n          "SPCL_TYP_FULL_DESC": "INTERNAL MEDICINE",\n          "HCFA_SPCL_TYP_CD": "1",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "C",\n          "SPCL_BD_CERT_DT": "1999-01-01",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "2019-12-31",\n          "SPCL_EFF_DT": "1999-03-29",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2008-08-18",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": [\n        {\n          "AFFIL_PROV_ID": "742821",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "AC",\n          "HOSP_AFFIL_DIR_IND": "Y",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "424821",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "COU",\n          "HOSP_AFFIL_DIR_IND": "Y",\n          "PRI_HOSP_AFFIL_CD": "P",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "448441",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "AC",\n          "HOSP_AFFIL_DIR_IND": "Y",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "735428",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "ACT",\n          "HOSP_AFFIL_DIR_IND": "Y",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "A"\n        }\n      ]\n    },\n    {\n      "id": "3312978",\n      "PROV_ID": "3312978",\n      "PROV_EFF_DT": "2011-05-11",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "MEI",\n      "FST_NM": "JIA",\n      "PROV_BTH_DT": "1962-01-12",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1992009518",\n      "PROV_ORIG_EFF_DT": "2011-05-11",\n      "addresses": [\n        {\n          "distance": "28.125672836567",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2011-05-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "35421 Purcell Pl",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.570397",\n          "LONG_NBR": "-122.024910",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4609954",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "28.125672836567",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2011-05-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "35421 Purcell Pl",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.570397",\n          "LONG_NBR": "-122.024910",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7138585",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "28.125672836567",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2011-05-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "35421 Purcell Pl",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.570397",\n          "LONG_NBR": "-122.024910",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7138588",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "28.125672836567",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2011-05-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "35421 Purcell Pl",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.570397",\n          "LONG_NBR": "-122.024910",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8475953",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "28.125672836567",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "35421 Purcell Pl",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.570397",\n          "LONG_NBR": "-122.024910",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4609954",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "28.125672836567",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "35421 Purcell Pl",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.570397",\n          "LONG_NBR": "-122.024910",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7138585",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "28.125672836567",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "35421 Purcell Pl",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.570397",\n          "LONG_NBR": "-122.024910",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7138588",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "28.125672836567",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "35421 Purcell Pl",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.570397",\n          "LONG_NBR": "-122.024910",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8475953",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.4446419473943",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2011-05-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3774 Peralta Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.558925",\n          "LONG_NBR": "-122.005500",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7138585",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.4446419473943",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2011-05-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3774 Peralta Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.558925",\n          "LONG_NBR": "-122.005500",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7138588",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.8532159583676",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "37982 Fremont Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.554807",\n          "LONG_NBR": "-121.999930",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4609954",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.8532159583676",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "37982 Fremont Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.554807",\n          "LONG_NBR": "-121.999930",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7138588",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.8532159583676",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "37982 Fremont Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.554807",\n          "LONG_NBR": "-121.999930",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8475953",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2011-05-11",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2419616",\n      "PROV_ID": "2419616",\n      "PROV_EFF_DT": "2009-07-21",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "LIU",\n      "FST_NM": "JINGYU",\n      "MDL_NM": "JENNIFER",\n      "PROV_BTH_DT": "1954-12-25",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1609947886",\n      "PROV_ORIG_EFF_DT": "2003-01-01",\n      "addresses": [\n        {\n          "distance": "31.8372801603149",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2010-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3 Fawn Glen Ct",\n          "ADR_CTY_NM": "Pittsburg",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94565",\n          "LAT_NBR": "38.008099",\n          "LONG_NBR": "-121.954100",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "6989770",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.6281927418034",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2007-01-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3796 Railroad Ave",\n          "ADR_CTY_NM": "Pittsburg",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94565",\n          "LAT_NBR": "38.004831",\n          "LONG_NBR": "-121.894190",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "2407099",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.6281927418034",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2007-01-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3796 Railroad Ave",\n          "ADR_CTY_NM": "Pittsburg",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94565",\n          "LAT_NBR": "38.004831",\n          "LONG_NBR": "-121.894190",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "6342493",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.6281927418034",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2007-01-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3796 Railroad Ave",\n          "ADR_CTY_NM": "Pittsburg",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94565",\n          "LAT_NBR": "38.004831",\n          "LONG_NBR": "-121.894190",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "6989770",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "36.0606719455824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2010-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "120 E 3rd St",\n          "ADR_CTY_NM": "Pittsburg",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94565",\n          "LAT_NBR": "38.033187",\n          "LONG_NBR": "-121.883000",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "6989770",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "36.0606719455824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2010-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "120 E 3rd St",\n          "ADR_CTY_NM": "Pittsburg",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94565",\n          "LAT_NBR": "38.033187",\n          "LONG_NBR": "-121.883000",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "7091236",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "36.4431218990069",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2007-01-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 183",\n          "ADR_CTY_NM": "Pittsburg",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94565",\n          "LAT_NBR": "38.008876",\n          "LONG_NBR": "-121.859690",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "2407099",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "36.4431218990069",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2007-01-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 183",\n          "ADR_CTY_NM": "Pittsburg",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94565",\n          "LAT_NBR": "38.008876",\n          "LONG_NBR": "-121.859690",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "6342493",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "36.4431218990069",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2007-01-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 183",\n          "ADR_CTY_NM": "Pittsburg",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94565",\n          "LAT_NBR": "38.008876",\n          "LONG_NBR": "-121.859690",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "6989770",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "40.5643982355084",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2010-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "5169 Lone Tree Way",\n          "ADR_CTY_NM": "Antioch",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94531",\n          "LAT_NBR": "37.961913",\n          "LONG_NBR": "-121.755570",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "6989770",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "40.5643982355084",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2010-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "5169 Lone Tree Way",\n          "ADR_CTY_NM": "Antioch",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94531",\n          "LAT_NBR": "37.961913",\n          "LONG_NBR": "-121.755570",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "7091236",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "47.6257445399514",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2009-07-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2489 Discovery Bay Blvd Ste 402",\n          "ADR_CTY_NM": "Discovery Bay",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94505",\n          "LAT_NBR": "37.890355",\n          "LONG_NBR": "-121.601990",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "6342400",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "47.6257445399514",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2009-07-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2489 Discovery Bay Blvd Ste 402",\n          "ADR_CTY_NM": "Discovery Bay",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94505",\n          "LAT_NBR": "37.890355",\n          "LONG_NBR": "-121.601990",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "6342493",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-06-11",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "3009890",\n      "PROV_ID": "3009890",\n      "PROV_EFF_DT": "2009-03-25",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "LIANG",\n      "FST_NM": "XIBIN",\n      "PROV_BTH_DT": "1965-04-06",\n      "PROV_GDR_CD": "M",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1699912030",\n      "PROV_ORIG_EFF_DT": "2009-03-25",\n      "addresses": [\n        {\n          "distance": "16.9869684649334",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2009-04-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "517 S B St Ste B",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94401",\n          "LAT_NBR": "37.564044",\n          "LONG_NBR": "-122.320560",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "3422643",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "16.9869684649334",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2009-04-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "517 S B St Ste B",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94401",\n          "LAT_NBR": "37.564044",\n          "LONG_NBR": "-122.320560",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8686632",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "27.4694945701544",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-03-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1155 University Dr Ste 1",\n          "ADR_CTY_NM": "Menlo Park",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94025",\n          "LAT_NBR": "37.450161",\n          "LONG_NBR": "-122.186900",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "3265929",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "27.4694945701544",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-03-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1155 University Dr Ste 1",\n          "ADR_CTY_NM": "Menlo Park",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94025",\n          "LAT_NBR": "37.450161",\n          "LONG_NBR": "-122.186900",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8686632",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.6354554038999",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-08-18",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "865 Altaire Walk",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94303",\n          "LAT_NBR": "37.424313",\n          "LONG_NBR": "-122.102510",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4986262",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.6354554038999",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-08-18",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "865 Altaire Walk",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94303",\n          "LAT_NBR": "37.424313",\n          "LONG_NBR": "-122.102510",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8559625",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.6354554038999",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-08-18",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "865 Altaire Walk",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94303",\n          "LAT_NBR": "37.424313",\n          "LONG_NBR": "-122.102510",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8686632",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.8401729168183",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2009-03-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4274 Wilkie Way Apt C",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94306",\n          "LAT_NBR": "37.410273",\n          "LONG_NBR": "-122.119360",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "3265929",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.8401729168183",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2009-03-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4274 Wilkie Way Apt C",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94306",\n          "LAT_NBR": "37.410273",\n          "LONG_NBR": "-122.119360",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "3422643",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.8401729168183",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2009-03-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4274 Wilkie Way Apt C",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94306",\n          "LAT_NBR": "37.410273",\n          "LONG_NBR": "-122.119360",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8686632",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.8401729168183",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2009-04-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4274 Wilkie Way Apt C",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94306",\n          "LAT_NBR": "37.410273",\n          "LONG_NBR": "-122.119360",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "3265929",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.8401729168183",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2009-04-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4274 Wilkie Way Apt C",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94306",\n          "LAT_NBR": "37.410273",\n          "LONG_NBR": "-122.119360",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "3422643",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.8401729168183",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2009-04-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4274 Wilkie Way Apt C",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94306",\n          "LAT_NBR": "37.410273",\n          "LONG_NBR": "-122.119360",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8686632",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.986246929634",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2010-08-18",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "744 San Antonio Rd Ste 1",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94303",\n          "LAT_NBR": "37.417841",\n          "LONG_NBR": "-122.102460",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4986262",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.986246929634",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2010-08-18",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "744 San Antonio Rd Ste 1",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94303",\n          "LAT_NBR": "37.417841",\n          "LONG_NBR": "-122.102460",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8559625",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.986246929634",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2010-08-18",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "744 San Antonio Rd Ste 1",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94303",\n          "LAT_NBR": "37.417841",\n          "LONG_NBR": "-122.102460",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8686632",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2009-03-25",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "3516062",\n      "PROV_ID": "3516062",\n      "PROV_EFF_DT": "2011-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "CONNELLY",\n      "FST_NM": "MARCIA",\n      "MDL_NM": "D",\n      "PROV_BTH_DT": "1973-01-26",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1255667309",\n      "PROV_ORIG_EFF_DT": "2011-01-01",\n      "addresses": [\n        {\n          "distance": "34.3871639587013",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2013-07-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43353 Mission Blvd Ste B",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94539",\n          "LAT_NBR": "37.532668",\n          "LONG_NBR": "-121.920070",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "4380128",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.3871639587013",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2013-07-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43353 Mission Blvd Ste B",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94539",\n          "LAT_NBR": "37.532668",\n          "LONG_NBR": "-121.920070",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "8371945",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "36.1438883005737",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1000 Fremont Ave Ste 152",\n          "ADR_CTY_NM": "Los Altos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94024",\n          "LAT_NBR": "37.352218",\n          "LONG_NBR": "-122.086340",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9494325",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "36.1438883005737",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1000 Fremont Ave Ste 152",\n          "ADR_CTY_NM": "Los Altos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94024",\n          "LAT_NBR": "37.352218",\n          "LONG_NBR": "-122.086340",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "8187051",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "48.592352715536",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2013-07-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 6671",\n          "ADR_CTY_NM": "Santa Rosa",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95406",\n          "LAT_NBR": "38.457351",\n          "LONG_NBR": "-122.730040",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9494325",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "48.592352715536",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2013-07-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 6671",\n          "ADR_CTY_NM": "Santa Rosa",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95406",\n          "LAT_NBR": "38.457351",\n          "LONG_NBR": "-122.730040",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "5447331",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "48.592352715536",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2013-07-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 6671",\n          "ADR_CTY_NM": "Santa Rosa",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95406",\n          "LAT_NBR": "38.457351",\n          "LONG_NBR": "-122.730040",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "6239409",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "48.592352715536",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2013-07-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 6671",\n          "ADR_CTY_NM": "Santa Rosa",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95406",\n          "LAT_NBR": "38.457351",\n          "LONG_NBR": "-122.730040",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "8187051",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "53.872529757741",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2013-07-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7971 W Zayante Rd",\n          "ADR_CTY_NM": "Felton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95018",\n          "LAT_NBR": "37.070198",\n          "LONG_NBR": "-122.057490",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "4380128",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "53.872529757741",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2013-07-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7971 W Zayante Rd",\n          "ADR_CTY_NM": "Felton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95018",\n          "LAT_NBR": "37.070198",\n          "LONG_NBR": "-122.057490",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "8371945",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.3712930394226",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6892B Soquel Ave",\n          "ADR_CTY_NM": "Santa Cruz",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95062",\n          "LAT_NBR": "36.982716",\n          "LONG_NBR": "-121.970120",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "8187051",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.3712930394226",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6892B Soquel Ave Ste B",\n          "ADR_CTY_NM": "Santa Cruz",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95062",\n          "LAT_NBR": "36.982716",\n          "LONG_NBR": "-121.970120",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9494325",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.3712930394226",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6892B Soquel Ave Ste B",\n          "ADR_CTY_NM": "Santa Cruz",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95062",\n          "LAT_NBR": "36.982716",\n          "LONG_NBR": "-121.970120",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "8187051",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2012-10-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "1953671",\n      "PROV_ID": "1953671",\n      "PROV_EFF_DT": "2009-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "ANGELONE",\n      "FST_NM": "ANNEMARIE",\n      "PROV_BTH_DT": "1966-03-30",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1679689327",\n      "PROV_ORIG_EFF_DT": "2000-05-26",\n      "addresses": [\n        {\n          "distance": "3.10960382993267",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2013-07-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1193 Valencia St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.753917",\n          "LONG_NBR": "-122.420660",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6213259",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.10960382993267",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2013-07-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1193 Valencia St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.753917",\n          "LONG_NBR": "-122.420660",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6476222",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.10960382993267",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2013-07-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1193 Valencia St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.753917",\n          "LONG_NBR": "-122.420660",\n          "TEL_AREA_CD": "615",\n          "TEL_NBR": "6476222",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.77044690691395",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-12-31",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1796 18th St Ste B",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94107",\n          "LAT_NBR": "37.762500",\n          "LONG_NBR": "-122.400260",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2558970",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.77044690691395",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-12-31",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1796 18th St Ste B",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94107",\n          "LAT_NBR": "37.762500",\n          "LONG_NBR": "-122.400260",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4079851",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.77044690691395",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-12-31",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1796 18th St Ste B",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94107",\n          "LAT_NBR": "37.762500",\n          "LONG_NBR": "-122.400260",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "3876447",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.77044690691395",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1796 18th St Ste B",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94107",\n          "LAT_NBR": "37.762500",\n          "LONG_NBR": "-122.400260",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2558970",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.77044690691395",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1796 18th St Ste B",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94107",\n          "LAT_NBR": "37.762500",\n          "LONG_NBR": "-122.400260",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4079851",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.77044690691395",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1796 18th St Ste B",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94107",\n          "LAT_NBR": "37.762500",\n          "LONG_NBR": "-122.400260",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "3876447",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "7944.53004325746",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2013-07-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "418 WALKER ST",\n          "ADR_CTY_NM": "ORLAND",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95963",\n          "LAT_NBR": "0.000000",\n          "LONG_NBR": "0.000000",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "3876447",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "7944.53004325746",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2013-07-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "418 WALKER ST",\n          "ADR_CTY_NM": "ORLAND",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95963",\n          "LAT_NBR": "0.000000",\n          "LONG_NBR": "0.000000",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "8658727",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2000-05-26",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2578296",\n      "PROV_ID": "2578296",\n      "PROV_EFF_DT": "2004-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "ZILAVY",\n      "FST_NM": "PAMELA",\n      "PROV_BTH_DT": "9999-12-31",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1194952309",\n      "PROV_ORIG_EFF_DT": "2004-01-01",\n      "addresses": [\n        {\n          "distance": "2.97254021152994",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 31572",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94131",\n          "LAT_NBR": "37.744776",\n          "LONG_NBR": "-122.438790",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2798376",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.97254021152994",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 31572",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94131",\n          "LAT_NBR": "37.744776",\n          "LONG_NBR": "-122.438790",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "5021347",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.97254021152994",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 31572",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94131",\n          "LAT_NBR": "37.744776",\n          "LONG_NBR": "-122.438790",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "3876447",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.97254021152994",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 31572",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94131",\n          "LAT_NBR": "37.744776",\n          "LONG_NBR": "-122.438790",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "8658727",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.97254021152994",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 31572",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94131",\n          "LAT_NBR": "37.744776",\n          "LONG_NBR": "-122.438790",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2798376",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.97254021152994",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 31572",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94131",\n          "LAT_NBR": "37.744776",\n          "LONG_NBR": "-122.438790",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "5021347",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.97254021152994",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 31572",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94131",\n          "LAT_NBR": "37.744776",\n          "LONG_NBR": "-122.438790",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "3876447",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.97254021152994",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 31572",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94131",\n          "LAT_NBR": "37.744776",\n          "LONG_NBR": "-122.438790",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "8658727",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.15451919658957",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2011-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "360 W Portal Ave Ste A",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94127",\n          "LAT_NBR": "37.737322",\n          "LONG_NBR": "-122.470210",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "3876447",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.15451919658957",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2011-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "360 W Portal Ave Ste A",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94127",\n          "LAT_NBR": "37.737322",\n          "LONG_NBR": "-122.470210",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "8658727",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.27739013628289",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "95 Ora Way Unit F202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94131",\n          "LAT_NBR": "37.740297",\n          "LONG_NBR": "-122.437560",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2798376",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.27739013628289",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "95 Ora Way Unit F202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94131",\n          "LAT_NBR": "37.740297",\n          "LONG_NBR": "-122.437560",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "5021347",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2005-10-14",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "3087484",\n      "PROV_ID": "3087484",\n      "PROV_EFF_DT": "2009-09-16",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "O",\n      "LST_NM": "JASENG CENTER FOR ALTERNATIVE MEDICINE",\n      "PROV_BTH_DT": "9999-12-31",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1851540009",\n      "PROV_ORIG_EFF_DT": "2009-09-16",\n      "addresses": [\n        {\n          "distance": "41.5797718598588",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2013-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "100 Saratoga Ave Ste 110",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.325225",\n          "LONG_NBR": "-121.968500",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "6458232",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "42.5539116891529",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2011-05-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2858 Stevens Creek Blvd Ste 208",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95128",\n          "LAT_NBR": "37.323156",\n          "LONG_NBR": "-121.944560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "6458232",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "344.014345329164",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-10-13",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "5901 W Olympic Blvd Ste 500",\n          "ADR_CTY_NM": "Los Angeles",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "90036",\n          "LAT_NBR": "34.057690",\n          "LONG_NBR": "-118.359990",\n          "TEL_AREA_CD": "323",\n          "TEL_NBR": "6774900",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "368.02571854046",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2011-11-23",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2236 Clark Dr",\n          "ADR_CTY_NM": "Fullerton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92833",\n          "LAT_NBR": "33.882652",\n          "LONG_NBR": "-117.964270",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "7737000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "368.02571854046",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2011-11-23",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2236 Clark Dr",\n          "ADR_CTY_NM": "Fullerton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92833",\n          "LAT_NBR": "33.882652",\n          "LONG_NBR": "-117.964270",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "8705028",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "368.75200831471",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2009-09-16",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1950 Sunnycrest Dr Ste 2000",\n          "ADR_CTY_NM": "Fullerton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92835",\n          "LAT_NBR": "33.893161",\n          "LONG_NBR": "-117.931380",\n          "TEL_AREA_CD": "310",\n          "TEL_NBR": "9446189",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "368.75200831471",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2009-09-16",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1950 Sunnycrest Dr Ste 2000",\n          "ADR_CTY_NM": "Fullerton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92835",\n          "LAT_NBR": "33.893161",\n          "LONG_NBR": "-117.931380",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "7737000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "368.75200831471",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2009-09-16",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1950 Sunnycrest Dr Ste 2000",\n          "ADR_CTY_NM": "Fullerton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92835",\n          "LAT_NBR": "33.893161",\n          "LONG_NBR": "-117.931380",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "8705028",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "368.75200831471",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2011-11-23",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1950 Sunnycrest Dr Ste 2000",\n          "ADR_CTY_NM": "Fullerton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92835",\n          "LAT_NBR": "33.893161",\n          "LONG_NBR": "-117.931380",\n          "TEL_AREA_CD": "310",\n          "TEL_NBR": "9446189",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "368.75200831471",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2011-11-23",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1950 Sunnycrest Dr Ste 2000",\n          "ADR_CTY_NM": "Fullerton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92835",\n          "LAT_NBR": "33.893161",\n          "LONG_NBR": "-117.931380",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "7737000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "368.75200831471",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2011-11-23",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1950 Sunnycrest Dr Ste 2000",\n          "ADR_CTY_NM": "Fullerton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92835",\n          "LAT_NBR": "33.893161",\n          "LONG_NBR": "-117.931380",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "8705028",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "378.483190381545",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2010-12-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "8011 Ebbtide Cir",\n          "ADR_CTY_NM": "Huntington Beach",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92646",\n          "LAT_NBR": "33.663759",\n          "LONG_NBR": "-117.987920",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "7737000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "378.483190381545",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2010-12-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "8011 Ebbtide Cir",\n          "ADR_CTY_NM": "Huntington Beach",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92646",\n          "LAT_NBR": "33.663759",\n          "LONG_NBR": "-117.987920",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "8705028",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "386.971401998558",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2012-08-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "113 Waterworks Way Ste 205",\n          "ADR_CTY_NM": "Irvine",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92618",\n          "LAT_NBR": "33.663887",\n          "LONG_NBR": "-117.762420",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "8705028",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "386.971401998558",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2012-08-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "113 Waterworks Way Ste 205",\n          "ADR_CTY_NM": "Irvine",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92618",\n          "LAT_NBR": "33.663887",\n          "LONG_NBR": "-117.762420",\n          "TEL_AREA_CD": "949",\n          "TEL_NBR": "3906480",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "448.689287649303",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2013-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "5348 Carroll Canyon Rd Ste 101",\n          "ADR_CTY_NM": "San Diego",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92121",\n          "LAT_NBR": "32.892062",\n          "LONG_NBR": "-117.192240",\n          "TEL_AREA_CD": "858",\n          "TEL_NBR": "7521815",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "452.86533101609",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2011-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "5222 Balboa Ave Ste 73",\n          "ADR_CTY_NM": "San Diego",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92117",\n          "LAT_NBR": "32.818737",\n          "LONG_NBR": "-117.184170",\n          "TEL_AREA_CD": "858",\n          "TEL_NBR": "7521815",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2009-09-16",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2464234",\n      "PROV_ID": "2464234",\n      "PROV_EFF_DT": "2006-04-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "CRISSMAN",\n      "FST_NM": "JENNIFER",\n      "MDL_NM": "C",\n      "PROV_BTH_DT": "1962-11-24",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1528136306",\n      "PROV_ORIG_EFF_DT": "2003-01-01",\n      "addresses": [\n        {\n          "distance": "3.02994008425926",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2003-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1085 Valencia St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.755607",\n          "LONG_NBR": "-122.420820",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "8215830",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.02994008425926",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2003-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1085 Valencia St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.755607",\n          "LONG_NBR": "-122.420820",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "8215830",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.02994008425926",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2003-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1085 Valencia St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.755607",\n          "LONG_NBR": "-122.420820",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "9382600",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.0964604451908",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2009-09-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6536 Telegraph Ave Ste 201",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94609",\n          "LAT_NBR": "37.851409",\n          "LONG_NBR": "-122.260170",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "8215830",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.0964604451908",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2009-09-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6536 Telegraph Ave Ste 201",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94609",\n          "LAT_NBR": "37.851409",\n          "LONG_NBR": "-122.260170",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2809203",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.0964604451908",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2009-09-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6536 Telegraph Ave Ste 201",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94609",\n          "LAT_NBR": "37.851409",\n          "LONG_NBR": "-122.260170",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "5950700",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.0964604451908",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2009-09-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6536 Telegraph Ave Ste 201",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94609",\n          "LAT_NBR": "37.851409",\n          "LONG_NBR": "-122.260170",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "9382600",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.7195007182983",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2006-04-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 20501",\n          "ADR_CTY_NM": "Piedmont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94620",\n          "LAT_NBR": "37.776836",\n          "LONG_NBR": "-122.213170",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "8215830",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.7195007182983",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2006-04-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 20501",\n          "ADR_CTY_NM": "Piedmont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94620",\n          "LAT_NBR": "37.776836",\n          "LONG_NBR": "-122.213170",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2809203",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.7195007182983",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2006-04-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 20501",\n          "ADR_CTY_NM": "Piedmont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94620",\n          "LAT_NBR": "37.776836",\n          "LONG_NBR": "-122.213170",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "5950700",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.7195007182983",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2006-04-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 20501",\n          "ADR_CTY_NM": "Piedmont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94620",\n          "LAT_NBR": "37.776836",\n          "LONG_NBR": "-122.213170",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "9382600",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-10-06",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2652254",\n      "PROV_ID": "2652254",\n      "PROV_EFF_DT": "2005-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "WANG",\n      "FST_NM": "LING",\n      "PROV_BTH_DT": "1957-05-28",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1871664524",\n      "PROV_ORIG_EFF_DT": "2005-01-01",\n      "addresses": [\n        {\n          "distance": "1.55482829992115",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2008-07-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1929 Irving St Ste 205",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.763376",\n          "LONG_NBR": "-122.478580",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7599568",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1.55482829992115",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2008-07-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1929 Irving St Ste 205",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.763376",\n          "LONG_NBR": "-122.478580",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7599586",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1.55482829992115",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2008-07-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1929 Irving St Ste 205",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.763376",\n          "LONG_NBR": "-122.478580",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "6921886",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2305198",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3761052",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.9990176009391",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2007-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "475 El Camino Real Ste 418",\n          "ADR_CTY_NM": "Millbrae",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94030",\n          "LAT_NBR": "37.602758",\n          "LONG_NBR": "-122.392690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2305198",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.9990176009391",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2007-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "475 El Camino Real Ste 418",\n          "ADR_CTY_NM": "Millbrae",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94030",\n          "LAT_NBR": "37.602758",\n          "LONG_NBR": "-122.392690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3761052",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.9990176009391",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2007-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "475 El Camino Real Ste 418",\n          "ADR_CTY_NM": "Millbrae",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94030",\n          "LAT_NBR": "37.602758",\n          "LONG_NBR": "-122.392690",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "6921886",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.9990176009391",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "475 El Camino Real Ste 418",\n          "ADR_CTY_NM": "Millbrae",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94030",\n          "LAT_NBR": "37.602758",\n          "LONG_NBR": "-122.392690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2305198",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.9990176009391",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "475 El Camino Real Ste 418",\n          "ADR_CTY_NM": "Millbrae",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94030",\n          "LAT_NBR": "37.602758",\n          "LONG_NBR": "-122.392690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3761052",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.9990176009391",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "475 El Camino Real Ste 418",\n          "ADR_CTY_NM": "Millbrae",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94030",\n          "LAT_NBR": "37.602758",\n          "LONG_NBR": "-122.392690",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "6921886",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.3555968361107",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2008-07-16",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 532",\n          "ADR_CTY_NM": "Millbrae",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94030",\n          "LAT_NBR": "37.595285",\n          "LONG_NBR": "-122.401700",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7599586",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.3555968361107",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2008-07-16",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 532",\n          "ADR_CTY_NM": "Millbrae",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94030",\n          "LAT_NBR": "37.595285",\n          "LONG_NBR": "-122.401700",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "6921886",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2006-06-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2220086",\n      "PROV_ID": "2220086",\n      "PROV_EFF_DT": "2002-09-17",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "LUU",\n      "FST_NM": "JAMES THINH",\n      "MDL_NM": "R",\n      "PROV_BTH_DT": "1966-11-02",\n      "PROV_GDR_CD": "M",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1104915198",\n      "PROV_ORIG_EFF_DT": "2002-09-17",\n      "addresses": [\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2009-03-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 60000 File 74010",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8123838",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "30.9747235985467",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3161 Walnut Ave",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94538",\n          "LAT_NBR": "37.550704",\n          "LONG_NBR": "-121.979060",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7961000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "30.9747235985467",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3161 Walnut Ave",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94538",\n          "LAT_NBR": "37.550704",\n          "LONG_NBR": "-121.979060",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7961050",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.2416382475382",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2009-03-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3200 Kearney St",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94538",\n          "LAT_NBR": "37.549051",\n          "LONG_NBR": "-121.974620",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "4901222",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "40.4520365734469",\n          "ADR_TYP_CD": "P",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1825 Civic Center Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95050",\n          "LAT_NBR": "37.355375",\n          "LONG_NBR": "-121.957160",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "6600120",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "40.4570034723092",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "12",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1825 CIVIC CENTER DR STE 7",\n          "ADR_CTY_NM": "SANTA CLARA",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95050",\n          "LAT_NBR": "37.355274",\n          "LONG_NBR": "-121.957160",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "9852401",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "40.4570034723092",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "12",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1825 CIVIC CENTER DR STE 7",\n          "ADR_CTY_NM": "SANTA CLARA",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95050",\n          "LAT_NBR": "37.355274",\n          "LONG_NBR": "-121.957160",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "9852405",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "44.6248447189139",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1863 ALUM ROCK AVE STE B",\n          "ADR_CTY_NM": "SAN JOSE",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95116",\n          "LAT_NBR": "37.354343",\n          "LONG_NBR": "-121.852600",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "9232595",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "44.6248447189139",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1863 ALUM ROCK AVE STE B",\n          "ADR_CTY_NM": "SAN JOSE",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95116",\n          "LAT_NBR": "37.354343",\n          "LONG_NBR": "-121.852600",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "9637351",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "45.998552702181",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1364 S King Rd",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95122",\n          "LAT_NBR": "37.336231",\n          "LONG_NBR": "-121.839330",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "9232595",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "45.998552702181",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1364 S King Rd",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95122",\n          "LAT_NBR": "37.336231",\n          "LONG_NBR": "-121.839330",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "9338773",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "47.1982480126852",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-09-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1692 Tully Rd Ste 12",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95122",\n          "LAT_NBR": "37.321981",\n          "LONG_NBR": "-121.826040",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2381665",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "47.1982480126852",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-09-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1692 Tully Rd Ste 12",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95122",\n          "LAT_NBR": "37.321981",\n          "LONG_NBR": "-121.826040",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2381672",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "47.1982480126852",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-09-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1692 Tully Rd Ste 12",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95122",\n          "LAT_NBR": "37.321981",\n          "LONG_NBR": "-121.826040",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "8449671",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "47.1982480126852",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-09-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1692 Tully Rd Ste 12",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95122",\n          "LAT_NBR": "37.321981",\n          "LONG_NBR": "-121.826040",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "9338773",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "47.1982480126852",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-09-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1692 Tully Rd Ste 12",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95122",\n          "LAT_NBR": "37.321981",\n          "LONG_NBR": "-121.826040",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "9637351",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "S"\n        },\n        {\n          "DEG_CD": "DO",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "008",\n          "SPCL_TYP_SML_DESC": "FP",\n          "SPCL_TYP_FULL_DESC": "FAMILY PRACTICE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "2002-03-01",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "2014-12-31",\n          "SPCL_EFF_DT": "2006-01-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2002-09-17",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "3048545",\n      "PROV_ID": "3048545",\n      "PROV_EFF_DT": "2013-07-18",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "DAUPHIN",\n      "FST_NM": "MEGAN",\n      "MDL_NM": "E",\n      "PROV_BTH_DT": "1982-09-16",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1144461781",\n      "PROV_ORIG_EFF_DT": "2008-01-01",\n      "addresses": [\n        {\n          "distance": "33.5240558016069",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-11-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43528 Fremont Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94538",\n          "LAT_NBR": "37.514908",\n          "LONG_NBR": "-121.952470",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "5770977",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "33.5240558016069",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-11-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43528 Fremont Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94538",\n          "LAT_NBR": "37.514908",\n          "LONG_NBR": "-121.952470",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "4380128",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "33.5240558016069",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-11-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43528 Fremont Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94538",\n          "LAT_NBR": "37.514908",\n          "LONG_NBR": "-121.952470",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "3876447",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "33.5240558016069",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-11-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43528 Fremont Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94538",\n          "LAT_NBR": "37.514908",\n          "LONG_NBR": "-121.952470",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "8658727",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "33.5240558016069",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-11-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43528 Fremont Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94538",\n          "LAT_NBR": "37.514908",\n          "LONG_NBR": "-121.952470",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "8371945",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.3871639587013",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2012-05-07",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43353 Mission Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94539",\n          "LAT_NBR": "37.532668",\n          "LONG_NBR": "-121.920070",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "4380128",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.3871639587013",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2012-05-07",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43353 Mission Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94539",\n          "LAT_NBR": "37.532668",\n          "LONG_NBR": "-121.920070",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "6239409",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.3871639587013",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2013-07-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43353 Mission Blvd Ste B",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94539",\n          "LAT_NBR": "37.532668",\n          "LONG_NBR": "-121.920070",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "4380128",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.3871639587013",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2013-07-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43353 Mission Blvd Ste B",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94539",\n          "LAT_NBR": "37.532668",\n          "LONG_NBR": "-121.920070",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "9524001",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "48.592352715536",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2012-05-07",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 6671",\n          "ADR_CTY_NM": "Santa Rosa",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95406",\n          "LAT_NBR": "38.457351",\n          "LONG_NBR": "-122.730040",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "5447331",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "48.592352715536",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2012-05-07",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 6671",\n          "ADR_CTY_NM": "Santa Rosa",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95406",\n          "LAT_NBR": "38.457351",\n          "LONG_NBR": "-122.730040",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "6239409",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "53.872529757741",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7971 W Zayante Rd",\n          "ADR_CTY_NM": "Felton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95018",\n          "LAT_NBR": "37.070198",\n          "LONG_NBR": "-122.057490",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "4380128",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "53.872529757741",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7971 W Zayante Rd",\n          "ADR_CTY_NM": "Felton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95018",\n          "LAT_NBR": "37.070198",\n          "LONG_NBR": "-122.057490",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "9524001",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "53.872529757741",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7971 W Zayante Rd",\n          "ADR_CTY_NM": "Felton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95018",\n          "LAT_NBR": "37.070198",\n          "LONG_NBR": "-122.057490",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "5447331",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2009-07-08",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2851568",\n      "PROV_ID": "2851568",\n      "PROV_EFF_DT": "2006-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "BARANZINI",\n      "FST_NM": "GARY",\n      "MDL_NM": "W",\n      "PROV_BTH_DT": "1951-05-29",\n      "PROV_GDR_CD": "M",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1992918742",\n      "PROV_ORIG_EFF_DT": "2006-01-01",\n      "addresses": [\n        {\n          "distance": "32.997434551553",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2013-03-21",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4133 Mohr Ave Ste I",\n          "ADR_CTY_NM": "Pleasanton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94566",\n          "LAT_NBR": "37.682052",\n          "LONG_NBR": "-121.873890",\n          "TEL_AREA_CD": "866",\n          "TEL_NBR": "9294101",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "32.997434551553",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2013-03-21",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4133 Mohr Ave Ste I",\n          "ADR_CTY_NM": "Pleasanton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94566",\n          "LAT_NBR": "37.682052",\n          "LONG_NBR": "-121.873890",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "4260127",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "32.997434551553",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2013-03-21",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4133 Mohr Ave Ste I",\n          "ADR_CTY_NM": "Pleasanton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94566",\n          "LAT_NBR": "37.682052",\n          "LONG_NBR": "-121.873890",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "4615372",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "32.997434551553",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2013-03-21",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4133 Mohr Ave Ste I",\n          "ADR_CTY_NM": "Pleasanton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94566",\n          "LAT_NBR": "37.682052",\n          "LONG_NBR": "-121.873890",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "9984768",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "32.997434551553",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4133 Mohr Ave Ste I",\n          "ADR_CTY_NM": "Pleasanton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94566",\n          "LAT_NBR": "37.682052",\n          "LONG_NBR": "-121.873890",\n          "TEL_AREA_CD": "866",\n          "TEL_NBR": "9294101",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "32.997434551553",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4133 Mohr Ave Ste I",\n          "ADR_CTY_NM": "Pleasanton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94566",\n          "LAT_NBR": "37.682052",\n          "LONG_NBR": "-121.873890",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "4260127",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "32.997434551553",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4133 Mohr Ave Ste I",\n          "ADR_CTY_NM": "Pleasanton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94566",\n          "LAT_NBR": "37.682052",\n          "LONG_NBR": "-121.873890",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "4615372",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "32.997434551553",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4133 Mohr Ave Ste I",\n          "ADR_CTY_NM": "Pleasanton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94566",\n          "LAT_NBR": "37.682052",\n          "LONG_NBR": "-121.873890",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "9984768",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "56.2757661029876",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2010-06-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1770 N Tracy Blvd Ste A",\n          "ADR_CTY_NM": "Tracy",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95376",\n          "LAT_NBR": "37.748416",\n          "LONG_NBR": "-121.434780",\n          "TEL_AREA_CD": "209",\n          "TEL_NBR": "6270204",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "56.2757661029876",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2010-06-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1770 N Tracy Blvd Ste A",\n          "ADR_CTY_NM": "Tracy",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95376",\n          "LAT_NBR": "37.748416",\n          "LONG_NBR": "-121.434780",\n          "TEL_AREA_CD": "209",\n          "TEL_NBR": "8799764",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "56.2757661029876",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2010-06-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1770 N Tracy Blvd Ste A",\n          "ADR_CTY_NM": "Tracy",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95376",\n          "LAT_NBR": "37.748416",\n          "LONG_NBR": "-121.434780",\n          "TEL_AREA_CD": "866",\n          "TEL_NBR": "9294101",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "56.2757661029876",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2010-06-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1770 N Tracy Blvd Ste A",\n          "ADR_CTY_NM": "Tracy",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95376",\n          "LAT_NBR": "37.748416",\n          "LONG_NBR": "-121.434780",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "4615372",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "56.2757661029876",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1770 N Tracy Blvd Ste A",\n          "ADR_CTY_NM": "Tracy",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95376",\n          "LAT_NBR": "37.748416",\n          "LONG_NBR": "-121.434780",\n          "TEL_AREA_CD": "209",\n          "TEL_NBR": "6270204",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "56.2757661029876",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1770 N Tracy Blvd Ste A",\n          "ADR_CTY_NM": "Tracy",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95376",\n          "LAT_NBR": "37.748416",\n          "LONG_NBR": "-121.434780",\n          "TEL_AREA_CD": "209",\n          "TEL_NBR": "8799764",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "56.2757661029876",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1770 N Tracy Blvd Ste A",\n          "ADR_CTY_NM": "Tracy",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95376",\n          "LAT_NBR": "37.748416",\n          "LONG_NBR": "-121.434780",\n          "TEL_AREA_CD": "866",\n          "TEL_NBR": "9294101",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "56.2757661029876",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1770 N Tracy Blvd Ste A",\n          "ADR_CTY_NM": "Tracy",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95376",\n          "LAT_NBR": "37.748416",\n          "LONG_NBR": "-121.434780",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "4615372",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2007-12-04",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2520801",\n      "PROV_ID": "2520801",\n      "PROV_EFF_DT": "2004-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "O",\n      "LST_NM": "CRYSTAL SPRINGS CHIROPRACTIC",\n      "PROV_BTH_DT": "9999-12-31",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "0",\n      "PROV_ORIG_EFF_DT": "2004-01-01",\n      "addresses": [\n        {\n          "distance": "18.2309538499057",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2007-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "13847 E 14th St Ste 203",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.714418",\n          "LONG_NBR": "-122.141930",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "3573206",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "18.2309538499057",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2007-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "13847 E 14th St Ste 203",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.714418",\n          "LONG_NBR": "-122.141930",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "3573260",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "18.6088621714148",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2007-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "220 Town Green Ln",\n          "ADR_CTY_NM": "Foster City",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94404",\n          "LAT_NBR": "37.557320",\n          "LONG_NBR": "-122.276590",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "3573260",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.3499102638859",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2010-08-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "214 De Anza Blvd",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94402",\n          "LAT_NBR": "37.520459",\n          "LONG_NBR": "-122.337170",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "5741007",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.3499102638859",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2010-08-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "214 De Anza Blvd",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94402",\n          "LAT_NBR": "37.520459",\n          "LONG_NBR": "-122.337170",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "5741456",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.3499102638859",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2006-07-05",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "214 De Anza Blvd",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94402",\n          "LAT_NBR": "37.520459",\n          "LONG_NBR": "-122.337170",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "5741007",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.3499102638859",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2006-07-05",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "214 De Anza Blvd",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94402",\n          "LAT_NBR": "37.520459",\n          "LONG_NBR": "-122.337170",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "5741456",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.3499102638859",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2008-02-14",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "214 De Anza Blvd",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94402",\n          "LAT_NBR": "37.520459",\n          "LONG_NBR": "-122.337170",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "5741007",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.3499102638859",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2008-02-14",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "214 De Anza Blvd",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94402",\n          "LAT_NBR": "37.520459",\n          "LONG_NBR": "-122.337170",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "5741456",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.3499102638859",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "214 De Anza Blvd",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94402",\n          "LAT_NBR": "37.520459",\n          "LONG_NBR": "-122.337170",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "5741007",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.3499102638859",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "214 De Anza Blvd",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94402",\n          "LAT_NBR": "37.520459",\n          "LONG_NBR": "-122.337170",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "5741456",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.3499102638859",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2007-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "214 De Anza Blvd",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94402",\n          "LAT_NBR": "37.520459",\n          "LONG_NBR": "-122.337170",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "5741007",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.3499102638859",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2007-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "214 De Anza Blvd",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94402",\n          "LAT_NBR": "37.520459",\n          "LONG_NBR": "-122.337170",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "5741456",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2007-10-24",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "035",\n          "SPCL_TYP_SML_DESC": "CM",\n          "SPCL_TYP_FULL_DESC": "CHIROPRACTIC MEDICINE",\n          "HCFA_SPCL_TYP_CD": "3",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2005-04-18",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "3023710",\n      "PROV_ID": "3023710",\n      "PROV_EFF_DT": "2010-04-07",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "TANG",\n      "FST_NM": "SOPHIA HUI-FEN",\n      "PROV_BTH_DT": "1969-05-22",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1700037181",\n      "PROV_ORIG_EFF_DT": "2008-01-01",\n      "addresses": [\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "6151250",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "2062469",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9401688",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9601231",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9601237",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9601239",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "2062469",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "6151250",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "2062469",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9401688",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9601231",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9601237",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9601239",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2009-04-29",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "1793955",\n      "PROV_ID": "1793955",\n      "PROV_EFF_DT": "2006-04-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "BERNARDI WRIGHT",\n      "FST_NM": "NEIL",\n      "MDL_NM": "S",\n      "PROV_BTH_DT": "1961-07-14",\n      "PROV_GDR_CD": "M",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1518087394",\n      "PROV_ORIG_EFF_DT": "1998-07-14",\n      "addresses": [\n        {\n          "distance": "46.4307934205216",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2005-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15251 National Ave Ste 106",\n          "ADR_CTY_NM": "Los Gatos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95032",\n          "LAT_NBR": "37.246457",\n          "LONG_NBR": "-121.950190",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "3587350",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.4307934205216",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2005-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15251 National Ave Ste 106",\n          "ADR_CTY_NM": "Los Gatos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95032",\n          "LAT_NBR": "37.246457",\n          "LONG_NBR": "-121.950190",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4021849",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.4307934205216",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2005-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15251 National Ave Ste 106",\n          "ADR_CTY_NM": "Los Gatos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95032",\n          "LAT_NBR": "37.246457",\n          "LONG_NBR": "-121.950190",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4257412",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.4307934205216",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2005-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15251 National Ave Ste 106",\n          "ADR_CTY_NM": "Los Gatos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95032",\n          "LAT_NBR": "37.246457",\n          "LONG_NBR": "-121.950190",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4598319",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.4307934205216",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15251 National Ave Ste 106",\n          "ADR_CTY_NM": "Los Gatos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95032",\n          "LAT_NBR": "37.246457",\n          "LONG_NBR": "-121.950190",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "3587350",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.4307934205216",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15251 National Ave Ste 106",\n          "ADR_CTY_NM": "Los Gatos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95032",\n          "LAT_NBR": "37.246457",\n          "LONG_NBR": "-121.950190",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4021849",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.4307934205216",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15251 National Ave Ste 106",\n          "ADR_CTY_NM": "Los Gatos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95032",\n          "LAT_NBR": "37.246457",\n          "LONG_NBR": "-121.950190",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4257412",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.4307934205216",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15251 National Ave Ste 106",\n          "ADR_CTY_NM": "Los Gatos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95032",\n          "LAT_NBR": "37.246457",\n          "LONG_NBR": "-121.950190",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4598319",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.5682072614839",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "1998-07-14",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "413 Oxford Way",\n          "ADR_CTY_NM": "Santa Cruz",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95060",\n          "LAT_NBR": "36.953612",\n          "LONG_NBR": "-122.042750",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "3582188",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.5682072614839",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "1998-07-14",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "413 Oxford Way",\n          "ADR_CTY_NM": "Santa Cruz",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95060",\n          "LAT_NBR": "36.953612",\n          "LONG_NBR": "-122.042750",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "3587350",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.5682072614839",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "1998-07-14",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "413 Oxford Way",\n          "ADR_CTY_NM": "Santa Cruz",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95060",\n          "LAT_NBR": "36.953612",\n          "LONG_NBR": "-122.042750",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4257412",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.5682072614839",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "1998-07-14",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "413 Oxford Way",\n          "ADR_CTY_NM": "Santa Cruz",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95060",\n          "LAT_NBR": "36.953612",\n          "LONG_NBR": "-122.042750",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4598319",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "1998-07-14",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "1947116",\n      "PROV_ID": "1947116",\n      "PROV_EFF_DT": "2011-08-25",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "WANG",\n      "FST_NM": "HONG",\n      "MDL_NM": "J",\n      "PROV_BTH_DT": "1948-12-15",\n      "PROV_GDR_CD": "M",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1336291418",\n      "PROV_ORIG_EFF_DT": "2000-04-28",\n      "addresses": [\n        {\n          "distance": "19.100151681227",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2012-09-13",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1460 150th Ave",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.706384",\n          "LONG_NBR": "-122.128230",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2764845",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.100151681227",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2012-09-13",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1460 150th Ave",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.706384",\n          "LONG_NBR": "-122.128230",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2768452",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.100151681227",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2012-09-13",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1460 150th Ave",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.706384",\n          "LONG_NBR": "-122.128230",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7863300",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.100151681227",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2012-09-13",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1460 150th Ave",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.706384",\n          "LONG_NBR": "-122.128230",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7880280",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.100151681227",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2011-08-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1460 150th Ave",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.706384",\n          "LONG_NBR": "-122.128230",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2764845",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.100151681227",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2011-08-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1460 150th Ave",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.706384",\n          "LONG_NBR": "-122.128230",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2768452",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.100151681227",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2011-08-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1460 150th Ave",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.706384",\n          "LONG_NBR": "-122.128230",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7863300",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.100151681227",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2011-08-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1460 150th Ave",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.706384",\n          "LONG_NBR": "-122.128230",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7880280",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "22.3643817501951",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2011-08-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "100 W Jackson St",\n          "ADR_CTY_NM": "Hayward",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94544",\n          "LAT_NBR": "37.653807",\n          "LONG_NBR": "-122.088740",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7863300",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "22.3643817501951",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2011-08-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "100 W Jackson St",\n          "ADR_CTY_NM": "Hayward",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94544",\n          "LAT_NBR": "37.653807",\n          "LONG_NBR": "-122.088740",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7880280",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "364.31482232601",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-06-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "18043 Pioneer Blvd Ste 200",\n          "ADR_CTY_NM": "Artesia",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "90701",\n          "LAT_NBR": "33.867492",\n          "LONG_NBR": "-118.082460",\n          "TEL_AREA_CD": "562",\n          "TEL_NBR": "9243260",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2000-04-28",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2140496",\n      "PROV_ID": "2140496",\n      "PROV_EFF_DT": "2002-01-22",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "YE",\n      "FST_NM": "LIN",\n      "PROV_BTH_DT": "1956-09-23",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1679591655",\n      "PROV_ORIG_EFF_DT": "2002-01-22",\n      "addresses": [\n        {\n          "distance": "37.6747522478981",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "60 Dixon Rd",\n          "ADR_CTY_NM": "Milpitas",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95035",\n          "LAT_NBR": "37.457721",\n          "LONG_NBR": "-121.910370",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2633238",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "37.6747522478981",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "60 Dixon Rd",\n          "ADR_CTY_NM": "Milpitas",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95035",\n          "LAT_NBR": "37.457721",\n          "LONG_NBR": "-121.910370",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2633239",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "37.6747522478981",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-08-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "60 Dixon Rd",\n          "ADR_CTY_NM": "Milpitas",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95035",\n          "LAT_NBR": "37.457721",\n          "LONG_NBR": "-121.910370",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2633238",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "37.6747522478981",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-08-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "60 Dixon Rd",\n          "ADR_CTY_NM": "Milpitas",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95035",\n          "LAT_NBR": "37.457721",\n          "LONG_NBR": "-121.910370",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2633239",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "37.6747522478981",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "60 Dixon Rd",\n          "ADR_CTY_NM": "Milpitas",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95035",\n          "LAT_NBR": "37.457721",\n          "LONG_NBR": "-121.910370",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2633238",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "37.6747522478981",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "60 Dixon Rd",\n          "ADR_CTY_NM": "Milpitas",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95035",\n          "LAT_NBR": "37.457721",\n          "LONG_NBR": "-121.910370",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2633239",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "40.9968675159392",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-01-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3246 McKinley Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.324210",\n          "LONG_NBR": "-121.986500",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2473203",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "40.9968675159392",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-01-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3246 McKinley Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.324210",\n          "LONG_NBR": "-121.986500",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2473232",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "40.9968675159392",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-01-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3246 McKinley Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.324210",\n          "LONG_NBR": "-121.986500",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2633238",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "40.9968675159392",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-01-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3246 McKinley Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.324210",\n          "LONG_NBR": "-121.986500",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2633239",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "7944.53004325746",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "30 DIXON RD",\n          "ADR_CTY_NM": "MILPITAS",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95035",\n          "LAT_NBR": "0.000000",\n          "LONG_NBR": "0.000000",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2633238",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2002-01-22",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "86689",\n      "PROV_ID": "86689",\n      "PROV_EFF_DT": "2012-04-19",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "LI",\n      "FST_NM": "JING",\n      "PROV_BTH_DT": "1953-11-13",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1922193507",\n      "PROV_ORIG_EFF_DT": "1988-06-24",\n      "addresses": [\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2011-03-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2305198",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2011-03-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3988329",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.40502477491217",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2002-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "582A San Jose Ave",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.746769",\n          "LONG_NBR": "-122.421750",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2821880",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.40502477491217",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2002-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "582A San Jose Ave",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.746769",\n          "LONG_NBR": "-122.421750",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3761052",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.40502477491217",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2002-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "582A San Jose Ave",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.746769",\n          "LONG_NBR": "-122.421750",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6541531",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.40502477491217",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2010-12-02",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "582A San Jose Ave",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.746769",\n          "LONG_NBR": "-122.421750",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2821880",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.40502477491217",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2010-12-02",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "582A San Jose Ave",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.746769",\n          "LONG_NBR": "-122.421750",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3761052",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.40502477491217",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2010-12-02",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "582A San Jose Ave",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.746769",\n          "LONG_NBR": "-122.421750",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6541531",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.31264500442",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2000-06-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4414 Piedmont Ave",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94611",\n          "LAT_NBR": "37.830446",\n          "LONG_NBR": "-122.246840",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2821880",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.31264500442",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2000-06-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4414 Piedmont Ave",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94611",\n          "LAT_NBR": "37.830446",\n          "LONG_NBR": "-122.246840",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6541531",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.31264500442",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2000-06-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4414 Piedmont Ave",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94611",\n          "LAT_NBR": "37.830446",\n          "LONG_NBR": "-122.246840",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6541567",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "1988-06-24",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2185980",\n      "PROV_ID": "2185980",\n      "PROV_EFF_DT": "2002-06-04",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "SIRA",\n      "FST_NM": "ANCA",\n      "PROV_BTH_DT": "9999-12-31",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1710111844",\n      "PROV_ORIG_EFF_DT": "2002-06-04",\n      "addresses": [\n        {\n          "distance": "13.5843175172059",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-06-04",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1299 4th St Ste 208",\n          "ADR_CTY_NM": "San Rafael",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94901",\n          "LAT_NBR": "37.973284",\n          "LONG_NBR": "-122.530590",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4567808",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.5843175172059",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2006-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1299 4th St Ste 208",\n          "ADR_CTY_NM": "San Rafael",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94901",\n          "LAT_NBR": "37.973284",\n          "LONG_NBR": "-122.530590",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4567808",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.8651663772445",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1938 4th St Ste A",\n          "ADR_CTY_NM": "San Rafael",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94901",\n          "LAT_NBR": "37.974732",\n          "LONG_NBR": "-122.542440",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4567808",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.8651663772445",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1938 4th St Ste A",\n          "ADR_CTY_NM": "San Rafael",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94901",\n          "LAT_NBR": "37.974732",\n          "LONG_NBR": "-122.542440",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "3876447",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.8651663772445",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1938 4th St Ste A",\n          "ADR_CTY_NM": "San Rafael",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94901",\n          "LAT_NBR": "37.974732",\n          "LONG_NBR": "-122.542440",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "8651831",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.8651663772445",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1938 4th St Ste A",\n          "ADR_CTY_NM": "San Rafael",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94901",\n          "LAT_NBR": "37.974732",\n          "LONG_NBR": "-122.542440",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "8658727",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.8651663772445",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-07-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1938 4th St Ste A",\n          "ADR_CTY_NM": "San Rafael",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94901",\n          "LAT_NBR": "37.974732",\n          "LONG_NBR": "-122.542440",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4567808",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.8651663772445",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-07-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1938 4th St Ste A",\n          "ADR_CTY_NM": "San Rafael",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94901",\n          "LAT_NBR": "37.974732",\n          "LONG_NBR": "-122.542440",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "3876447",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.8651663772445",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-07-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1938 4th St Ste A",\n          "ADR_CTY_NM": "San Rafael",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94901",\n          "LAT_NBR": "37.974732",\n          "LONG_NBR": "-122.542440",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "8651831",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.8651663772445",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-07-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1938 4th St Ste A",\n          "ADR_CTY_NM": "San Rafael",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94901",\n          "LAT_NBR": "37.974732",\n          "LONG_NBR": "-122.542440",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "8658727",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2002-06-04",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2399455",\n      "PROV_ID": "2399455",\n      "PROV_EFF_DT": "2006-04-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "LI",\n      "FST_NM": "LINDA",\n      "MDL_NM": "D",\n      "PROV_BTH_DT": "1960-11-25",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1548331051",\n      "PROV_ORIG_EFF_DT": "2003-01-01",\n      "addresses": [\n        {\n          "distance": "19.100151681227",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2011-08-03",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1460 150th Ave",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.706384",\n          "LONG_NBR": "-122.128230",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "4512165",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.100151681227",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2011-08-03",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1460 150th Ave",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.706384",\n          "LONG_NBR": "-122.128230",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "4517426",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.944293233412",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-08-03",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1690 W Texas St Ste 1W",\n          "ADR_CTY_NM": "Fairfield",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94533",\n          "LAT_NBR": "38.249428",\n          "LONG_NBR": "-122.058970",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "4272600",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.944293233412",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-08-03",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1690 W Texas St Ste 1W",\n          "ADR_CTY_NM": "Fairfield",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94533",\n          "LAT_NBR": "38.249428",\n          "LONG_NBR": "-122.058970",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "4272662",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.1892092113892",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2011-08-03",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "177 Butcher Rd Ste A",\n          "ADR_CTY_NM": "Vacaville",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95687",\n          "LAT_NBR": "38.343932",\n          "LONG_NBR": "-121.997770",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "4512165",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.1892092113892",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2011-08-03",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "177 Butcher Rd Ste A",\n          "ADR_CTY_NM": "Vacaville",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95687",\n          "LAT_NBR": "38.343932",\n          "LONG_NBR": "-121.997770",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "4517426",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.4278194345385",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2003-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "831 Alamo Dr Ste 6C",\n          "ADR_CTY_NM": "Vacaville",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95688",\n          "LAT_NBR": "38.348618",\n          "LONG_NBR": "-121.998810",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "4558262",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.4278194345385",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2003-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "831 Alamo Dr Ste 6C",\n          "ADR_CTY_NM": "Vacaville",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95688",\n          "LAT_NBR": "38.348618",\n          "LONG_NBR": "-121.998810",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "4558628",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.5296810616032",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2013-01-16",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1961 Alamo Dr Ste C",\n          "ADR_CTY_NM": "Vacaville",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95687",\n          "LAT_NBR": "38.335638",\n          "LONG_NBR": "-121.971280",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "4558628",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-03-30",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    }\n  ],\n  "metadata": {\n    "total": 2234,\n    "pageSize": 33,\n    "offset": 0,\n    "facets": {\n      "PROV_GDR_CD": [\n        {\n          "value": "F",\n          "count": 916\n        },\n        {\n          "value": "M",\n          "count": 606\n        },\n        {\n          "value": "U",\n          "count": 104\n        }\n      ],\n      "ADR_CTY_NM": [\n        {\n          "value": "San Francisco",\n          "count": 1251\n        },\n        {\n          "value": "San Jose",\n          "count": 550\n        },\n        {\n          "value": "Oakland",\n          "count": 302\n        },\n        {\n          "value": "Palo Alto",\n          "count": 296\n        },\n        {\n          "value": "Sunnyvale",\n          "count": 208\n        },\n        {\n          "value": "Fremont",\n          "count": 188\n        },\n        {\n          "value": "Santa Clara",\n          "count": 179\n        },\n        {\n          "value": "Berkeley",\n          "count": 174\n        },\n        {\n          "value": "Mountain View",\n          "count": 156\n        },\n        {\n          "value": "San Mateo",\n          "count": 126\n        }\n      ],\n      "SPCL_TYP_FULL_DESC": [\n        {\n          "value": "ACUPUNCTURE",\n          "count": 2234\n        },\n        {\n          "value": "CHIROPRACTIC MEDICINE",\n          "count": 37\n        },\n        {\n          "value": "PHYSICAL THERAPY",\n          "count": 12\n        },\n        {\n          "value": "DOCTOR OF NATUROPATHY",\n          "count": 11\n        },\n        {\n          "value": "FAMILY PRACTICE",\n          "count": 8\n        },\n        {\n          "value": "CLINICAL PSYCHOLOGY",\n          "count": 6\n        },\n        {\n          "value": "UNKNOWN SPECIAL PHYSICIAN",\n          "count": 6\n        },\n        {\n          "value": "MASSAGE THERAPY",\n          "count": 5\n        },\n        {\n          "value": "ANESTHESIOLOGY",\n          "count": 4\n        },\n        {\n          "value": "INTERNAL MEDICINE",\n          "count": 4\n        }\n      ]\n    }\n  }\n}\n';});


define('text!../test/fixtures/provider/providers_100.json',[],function () { return '{\n  "records": [\n    {\n      "id": "1740151",\n      "PROV_ID": "1740151",\n      "PROV_EFF_DT": "2006-07-21",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "O",\n      "LST_NM": "STANFORD UNIVERSITY MEDICAL CENTER",\n      "PROV_BTH_DT": "9999-12-31",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1174698468",\n      "MDCR_ID": "050441",\n      "PROV_ORIG_EFF_DT": "1997-12-16",\n      "addresses": [\n        {\n          "distance": "0",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "14",\n          "ADR_EFF_DT": "2000-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 44000 Dept 44774",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94144",\n          "LAT_NBR": "37.782936",\n          "LONG_NBR": "-122.464320",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4985850",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1.38751848636604",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "137",\n          "ADR_EFF_DT": "2011-07-05",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "500 Parnassus Ave Ste LEVEL1",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94143",\n          "LAT_NBR": "37.763059",\n          "LONG_NBR": "-122.460010",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3531660",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1.38845601288502",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "175",\n          "ADR_EFF_DT": "2012-01-23",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "401 Parnassus Ave",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94143",\n          "LAT_NBR": "37.763667",\n          "LONG_NBR": "-122.456750",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4767500",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1.39630630907051",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "189",\n          "ADR_EFF_DT": "2012-03-05",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "505 Parnassus Ave",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94143",\n          "LAT_NBR": "37.763248",\n          "LONG_NBR": "-122.458110",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3531079",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1.39630630907051",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "189",\n          "ADR_EFF_DT": "2012-03-05",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "505 Parnassus Ave",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94143",\n          "LAT_NBR": "37.763248",\n          "LONG_NBR": "-122.458110",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3538593",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1.84801913148212",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "188",\n          "ADR_EFF_DT": "2012-03-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2340 Clay St Ste 251",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94115",\n          "LAT_NBR": "37.791157",\n          "LONG_NBR": "-122.432100",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6001061",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.13931276657428",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "151",\n          "ADR_EFF_DT": "2010-08-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "929 Clay St Ste 503",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.793857",\n          "LONG_NBR": "-122.408490",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "9863215",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.66360668537443",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "224",\n          "ADR_EFF_DT": "2012-07-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1001 Potrero Ave",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.756045",\n          "LONG_NBR": "-122.406420",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2063166",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2003-07-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 60000 File 74432",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4985638",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2003-07-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 60000 File 74432",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4985743",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2003-07-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 60000 File 74432",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4986960",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2003-07-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 60000 File 74432",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "7234000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2003-07-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 60000 File 74432",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "800",\n          "TEL_NBR": "5493720",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2003-07-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74432 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "3209443",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2003-07-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74432 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4985638",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2003-07-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74432 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4986960",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2003-07-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74432 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4989111",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2003-07-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74432 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "7234000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2003-07-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74432 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "800",\n          "TEL_NBR": "5493720",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2003-07-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74432 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "800",\n          "TEL_NBR": "7569000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "139",\n          "ADR_EFF_DT": "2011-08-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74432 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4987200",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "139",\n          "ADR_EFF_DT": "2011-08-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74432 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "800",\n          "TEL_NBR": "5493720",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "146",\n          "ADR_EFF_DT": "2007-11-07",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74432",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4989111",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "155",\n          "ADR_EFF_DT": "2003-07-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74431 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4985638",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "155",\n          "ADR_EFF_DT": "2003-07-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "File 74431 PO Box 60000",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4989111",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "014",\n          "SPCL_TYP_SML_DESC": "NS",\n          "SPCL_TYP_FULL_DESC": "NEUROLOGICAL SURGERY",\n          "HCFA_SPCL_TYP_CD": "1",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "1997-12-16",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-07-26",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "030",\n          "SPCL_TYP_SML_DESC": "R",\n          "SPCL_TYP_FULL_DESC": "RADIOLOGY",\n          "HCFA_SPCL_TYP_CD": "3",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2003-01-08",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "230",\n          "SPCL_TYP_SML_DESC": "OBG",\n          "SPCL_TYP_FULL_DESC": "OBSTETRICS AND GYNECOLOGY",\n          "HCFA_SPCL_TYP_CD": "1",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "1997-12-16",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "070",\n          "SPCL_TYP_SML_DESC": "PYG",\n          "SPCL_TYP_FULL_DESC": "CLINICAL PSYCHOLOGY",\n          "HCFA_SPCL_TYP_CD": "6",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "Y",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-08-27",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "338",\n          "SPCL_TYP_SML_DESC": "PHA",\n          "SPCL_TYP_FULL_DESC": "PHYSICIAN ASSISTANT",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2012-01-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "004",\n          "SPCL_TYP_SML_DESC": "OTO",\n          "SPCL_TYP_FULL_DESC": "OTOLARYNGOLOGY",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-08-28",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "095",\n          "SPCL_TYP_SML_DESC": "CDS",\n          "SPCL_TYP_FULL_DESC": "GENERAL VASCULAR SURGERY",\n          "HCFA_SPCL_TYP_CD": "7",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2011-04-29",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "037",\n          "SPCL_TYP_SML_DESC": "PD",\n          "SPCL_TYP_FULL_DESC": "PEDIATRICS",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "1997-12-16",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "015",\n          "SPCL_TYP_SML_DESC": "CRS",\n          "SPCL_TYP_FULL_DESC": "COLON AND RECTAL SURGERY",\n          "HCFA_SPCL_TYP_CD": "2",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2006-01-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "001",\n          "SPCL_TYP_SML_DESC": "GP",\n          "SPCL_TYP_FULL_DESC": "GENERAL PRACTICE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2003-08-07",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "026",\n          "SPCL_TYP_SML_DESC": "P",\n          "SPCL_TYP_FULL_DESC": "PSYCHIATRY",\n          "HCFA_SPCL_TYP_CD": "2",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "N",\n          "MHSA_IND": "Y",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "1997-12-16",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "002",\n          "SPCL_TYP_SML_DESC": "GS",\n          "SPCL_TYP_FULL_DESC": "SURGERY",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2011-04-29",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "509",\n          "SPCL_TYP_SML_DESC": "DD",\n          "SPCL_TYP_FULL_DESC": "DIGESTIVE DISEASES",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "C",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "1997-12-16",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "005",\n          "SPCL_TYP_SML_DESC": "AN",\n          "SPCL_TYP_FULL_DESC": "ANESTHESIOLOGY",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-12-22",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "018",\n          "SPCL_TYP_SML_DESC": "OPH",\n          "SPCL_TYP_FULL_DESC": "OPHTHALMOLOGY",\n          "HCFA_SPCL_TYP_CD": "1",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2011-04-29",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "073",\n          "SPCL_TYP_SML_DESC": "PT",\n          "SPCL_TYP_FULL_DESC": "PHYSICAL THERAPY",\n          "HCFA_SPCL_TYP_CD": "6",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2001-03-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "012",\n          "SPCL_TYP_SML_DESC": "C",\n          "SPCL_TYP_FULL_DESC": "CARDIOLOGY",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2009-01-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "008",\n          "SPCL_TYP_SML_DESC": "FP",\n          "SPCL_TYP_FULL_DESC": "FAMILY PRACTICE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "1997-12-16",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "034",\n          "SPCL_TYP_SML_DESC": "U",\n          "SPCL_TYP_FULL_DESC": "UROLOGY",\n          "HCFA_SPCL_TYP_CD": "3",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-03-23",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "275",\n          "SPCL_TYP_SML_DESC": "FPS",\n          "SPCL_TYP_FULL_DESC": "FAMILY PRACTICE SPECIALIST",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "1997-12-16",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "042",\n          "SPCL_TYP_SML_DESC": "EM",\n          "SPCL_TYP_FULL_DESC": "EMERGENCY MEDICINE",\n          "HCFA_SPCL_TYP_CD": "9",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "1997-12-16",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "033",\n          "SPCL_TYP_SML_DESC": "TCS",\n          "SPCL_TYP_FULL_DESC": "THORACIC CARDIOVASCULAR SURGERY",\n          "HCFA_SPCL_TYP_CD": "3",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2011-04-29",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2653776",\n      "PROV_ID": "2653776",\n      "PROV_EFF_DT": "2005-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "KWONG",\n      "FST_NM": "EVA",\n      "MDL_NM": "Y",\n      "PROV_BTH_DT": "1951-01-10",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1558432088",\n      "PROV_ORIG_EFF_DT": "2005-01-01",\n      "addresses": [\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2010-04-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2305198",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2010-04-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3988329",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2010-04-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "5201407",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2008-06-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3335777",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2008-06-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "5937696",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2008-06-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "9832573",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2008-06-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6632882",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "12",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3335777",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "12",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "5937696",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "12",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "9832573",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "12",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6632882",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2009-11-18",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3335777",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2009-11-18",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "5937696",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2009-11-18",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "9832573",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.17698429466809",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2009-11-18",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2388 35th Ave Ste 202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742620",\n          "LONG_NBR": "-122.492690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6632882",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "10.7781545578958",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2009-07-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "320 13th St Ste 107",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94612",\n          "LAT_NBR": "37.802549",\n          "LONG_NBR": "-122.268450",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3335777",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "10.7781545578958",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2009-07-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "320 13th St Ste 107",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94612",\n          "LAT_NBR": "37.802549",\n          "LONG_NBR": "-122.268450",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "9832523",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "10.7781545578958",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2009-07-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "320 13th St Ste 107",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94612",\n          "LAT_NBR": "37.802549",\n          "LONG_NBR": "-122.268450",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "9832573",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "10.7781545578958",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2009-07-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "320 13th St Ste 107",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94612",\n          "LAT_NBR": "37.802549",\n          "LONG_NBR": "-122.268450",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "4658380",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "10.7781545578958",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2009-12-19",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "320 13th St Ste 107",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94612",\n          "LAT_NBR": "37.802549",\n          "LONG_NBR": "-122.268450",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3335777",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "10.7781545578958",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2009-12-19",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "320 13th St Ste 107",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94612",\n          "LAT_NBR": "37.802549",\n          "LONG_NBR": "-122.268450",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "9832523",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "10.7781545578958",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2009-12-19",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "320 13th St Ste 107",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94612",\n          "LAT_NBR": "37.802549",\n          "LONG_NBR": "-122.268450",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "9832573",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "10.7781545578958",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2009-12-19",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "320 13th St Ste 107",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94612",\n          "LAT_NBR": "37.802549",\n          "LONG_NBR": "-122.268450",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "4658380",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.6298466103282",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2013-03-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1828 El Camino Real Ste 401",\n          "ADR_CTY_NM": "Burlingame",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94010",\n          "LAT_NBR": "37.595471",\n          "LONG_NBR": "-122.383640",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3335777",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.6298466103282",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2013-03-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1828 El Camino Real Ste 401",\n          "ADR_CTY_NM": "Burlingame",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94010",\n          "LAT_NBR": "37.595471",\n          "LONG_NBR": "-122.383640",\n          "TEL_AREA_CD": "888",\n          "TEL_NBR": "9060346",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2006-06-05",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2515741",\n      "PROV_ID": "2515741",\n      "PROV_EFF_DT": "2005-03-31",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "MATECKI",\n      "FST_NM": "AMY",\n      "MDL_NM": "L",\n      "PROV_BTH_DT": "1966-09-09",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1770571077",\n      "MDCR_ID": "00A807472",\n      "PROV_ORIG_EFF_DT": "2005-03-31",\n      "addresses": [\n        {\n          "distance": "11.9900444253409",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "16",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2001 Dwight Way",\n          "ADR_CTY_NM": "Berkeley",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94704",\n          "LAT_NBR": "37.863811",\n          "LONG_NBR": "-122.269690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2041591",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "11.9900444253409",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "16",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2001 Dwight Way",\n          "ADR_CTY_NM": "Berkeley",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94704",\n          "LAT_NBR": "37.863811",\n          "LONG_NBR": "-122.269690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2044711",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "11.9900444253409",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "16",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2001 Dwight Way",\n          "ADR_CTY_NM": "Berkeley",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94704",\n          "LAT_NBR": "37.863811",\n          "LONG_NBR": "-122.269690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2046440",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "11.9900444253409",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2005-03-31",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2001 Dwight Way",\n          "ADR_CTY_NM": "Berkeley",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94704",\n          "LAT_NBR": "37.863811",\n          "LONG_NBR": "-122.269690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2041591",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "11.9900444253409",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2005-03-31",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2001 Dwight Way",\n          "ADR_CTY_NM": "Berkeley",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94704",\n          "LAT_NBR": "37.863811",\n          "LONG_NBR": "-122.269690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2044711",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "11.9900444253409",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2005-03-31",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2001 Dwight Way",\n          "ADR_CTY_NM": "Berkeley",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94704",\n          "LAT_NBR": "37.863811",\n          "LONG_NBR": "-122.269690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2044771",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "11.9900444253409",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2005-03-31",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2001 Dwight Way",\n          "ADR_CTY_NM": "Berkeley",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94704",\n          "LAT_NBR": "37.863811",\n          "LONG_NBR": "-122.269690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2046402",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "11.9900444253409",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2005-03-31",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2001 Dwight Way",\n          "ADR_CTY_NM": "Berkeley",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94704",\n          "LAT_NBR": "37.863811",\n          "LONG_NBR": "-122.269690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2046440",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "11.9900444253409",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2005-03-31",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2001 Dwight Way",\n          "ADR_CTY_NM": "Berkeley",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94704",\n          "LAT_NBR": "37.863811",\n          "LONG_NBR": "-122.269690",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "8480801",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.7147157187891",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2006-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2000 Vale Rd",\n          "ADR_CTY_NM": "San Pablo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94806",\n          "LAT_NBR": "37.954646",\n          "LONG_NBR": "-122.336550",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2041591",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.7147157187891",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2006-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2000 Vale Rd",\n          "ADR_CTY_NM": "San Pablo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94806",\n          "LAT_NBR": "37.954646",\n          "LONG_NBR": "-122.336550",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2046402",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.7147157187891",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2006-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2000 Vale Rd",\n          "ADR_CTY_NM": "San Pablo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94806",\n          "LAT_NBR": "37.954646",\n          "LONG_NBR": "-122.336550",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2046440",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.7147157187891",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2006-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2000 Vale Rd",\n          "ADR_CTY_NM": "San Pablo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94806",\n          "LAT_NBR": "37.954646",\n          "LONG_NBR": "-122.336550",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "8480801",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.7147157187891",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "14",\n          "ADR_EFF_DT": "2010-07-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2000 Vale Rd",\n          "ADR_CTY_NM": "San Pablo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94806",\n          "LAT_NBR": "37.954646",\n          "LONG_NBR": "-122.336550",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2041591",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.7147157187891",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "14",\n          "ADR_EFF_DT": "2010-07-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2000 Vale Rd",\n          "ADR_CTY_NM": "San Pablo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94806",\n          "LAT_NBR": "37.954646",\n          "LONG_NBR": "-122.336550",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2046440",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "18.9682211967126",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "15",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 1349",\n          "ADR_CTY_NM": "Martinez",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94553",\n          "LAT_NBR": "37.963038",\n          "LONG_NBR": "-122.200950",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2040801",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "18.9682211967126",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "15",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 1349",\n          "ADR_CTY_NM": "Martinez",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94553",\n          "LAT_NBR": "37.963038",\n          "LONG_NBR": "-122.200950",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2041591",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "18.9682211967126",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "15",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 1349",\n          "ADR_CTY_NM": "Martinez",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94553",\n          "LAT_NBR": "37.963038",\n          "LONG_NBR": "-122.200950",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2042077",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "18.9682211967126",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "15",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 1349",\n          "ADR_CTY_NM": "Martinez",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94553",\n          "LAT_NBR": "37.963038",\n          "LONG_NBR": "-122.200950",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2046402",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "18.9682211967126",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "15",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 1349",\n          "ADR_CTY_NM": "Martinez",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94553",\n          "LAT_NBR": "37.963038",\n          "LONG_NBR": "-122.200950",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2046440",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "18.9682211967126",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "15",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 1349",\n          "ADR_CTY_NM": "Martinez",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94553",\n          "LAT_NBR": "37.963038",\n          "LONG_NBR": "-122.200950",\n          "TEL_AREA_CD": "561",\n          "TEL_NBR": "9551761",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "18.9682211967126",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "15",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 1349",\n          "ADR_CTY_NM": "Martinez",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94553",\n          "LAT_NBR": "37.963038",\n          "LONG_NBR": "-122.200950",\n          "TEL_AREA_CD": "888",\n          "TEL_NBR": "3369121",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "377.445333885585",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2005-09-08",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "725 W Town And Country Rd",\n          "ADR_CTY_NM": "Orange",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92868",\n          "LAT_NBR": "33.776799",\n          "LONG_NBR": "-117.859910",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6498287",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "377.445333885585",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2005-09-08",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "725 W Town And Country Rd",\n          "ADR_CTY_NM": "Orange",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92868",\n          "LAT_NBR": "33.776799",\n          "LONG_NBR": "-117.859910",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "9180100",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "377.445333885585",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2005-09-08",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "725 W Town And Country Rd",\n          "ADR_CTY_NM": "Orange",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92868",\n          "LAT_NBR": "33.776799",\n          "LONG_NBR": "-117.859910",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "9180135",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "MD",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "011",\n          "SPCL_TYP_SML_DESC": "IM",\n          "SPCL_TYP_FULL_DESC": "INTERNAL MEDICINE",\n          "HCFA_SPCL_TYP_CD": "1",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "C",\n          "SPCL_BD_CERT_DT": "2004-08-24",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "2014-12-31",\n          "SPCL_EFF_DT": "2005-03-31",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "504",\n          "SPCL_TYP_SML_DESC": "HO",\n          "SPCL_TYP_FULL_DESC": "HEMATOLOGY\\/ONCOLOGY",\n          "HCFA_SPCL_TYP_CD": "8",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2008-06-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "340",\n          "SPCL_TYP_SML_DESC": "HOS",\n          "SPCL_TYP_FULL_DESC": "HOSPITALIST",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2005-10-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "N",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2005-11-11",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "N",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": [\n        {\n          "AFFIL_PROV_ID": "225865",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "AC",\n          "HOSP_AFFIL_DIR_IND": "Y",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "I"\n        },\n        {\n          "AFFIL_PROV_ID": "340436",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "AC",\n          "HOSP_AFFIL_DIR_IND": "Y",\n          "PRI_HOSP_AFFIL_CD": "P",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "334608",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "AC",\n          "HOSP_AFFIL_DIR_IND": "Y",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "943127",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "AC",\n          "HOSP_AFFIL_DIR_IND": "Y",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "24227",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "AC",\n          "HOSP_AFFIL_DIR_IND": "Y",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "225545",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "AC",\n          "HOSP_AFFIL_DIR_IND": "Y",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "I"\n        }\n      ]\n    },\n    {\n      "id": "2677965",\n      "PROV_ID": "2677965",\n      "PROV_EFF_DT": "2009-02-26",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "CHIEU",\n      "FST_NM": "CHANG WEI",\n      "PROV_BTH_DT": "1974-07-20",\n      "PROV_GDR_CD": "M",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1013958412",\n      "PROV_ORIG_EFF_DT": "2006-08-09",\n      "addresses": [\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2006-08-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523183",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2006-08-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523288",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2006-08-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491002",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2006-08-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491232",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2009-02-26",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523183",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2009-02-26",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523288",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2009-02-26",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491002",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2009-02-26",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491232",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2008-05-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523183",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2008-05-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523288",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2008-05-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491002",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.2723618144824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2008-05-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1288 Kifer Rd Ste 210",\n          "ADR_CTY_NM": "Sunnyvale",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94086",\n          "LAT_NBR": "37.373858",\n          "LONG_NBR": "-121.990560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491232",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.4024071333286",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "14",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "10011 N Foothill Blvd",\n          "ADR_CTY_NM": "Cupertino",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95014",\n          "LAT_NBR": "37.322004",\n          "LONG_NBR": "-122.068800",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "9842455",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2006-08-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523183",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2006-08-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523288",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2006-08-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491002",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2006-08-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491232",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2009-02-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523183",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2009-02-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523288",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2009-02-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491002",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2009-02-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491232",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2008-05-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523183",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2008-05-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2523288",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2008-05-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491002",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.5207641403819",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2008-05-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2465 Alvarado Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.366360",\n          "LONG_NBR": "-121.967290",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7491232",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "DC",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "S"\n        },\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2008-06-04",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "035",\n          "SPCL_TYP_SML_DESC": "CM",\n          "SPCL_TYP_FULL_DESC": "CHIROPRACTIC MEDICINE",\n          "HCFA_SPCL_TYP_CD": "3",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2006-08-09",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2653780",\n      "PROV_ID": "2653780",\n      "PROV_EFF_DT": "2005-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "TATSUMI",\n      "FST_NM": "JULIET",\n      "MDL_NM": "D",\n      "PROV_BTH_DT": "1968-12-24",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1528084365",\n      "PROV_ORIG_EFF_DT": "2005-01-01",\n      "addresses": [\n        {\n          "distance": "38.4698999599107",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3571 N 1st St",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95134",\n          "LAT_NBR": "37.407263",\n          "LONG_NBR": "-121.943740",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4242000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "41.1579739625811",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2006-06-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "20445 Prospect Rd Ste 1",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95129",\n          "LAT_NBR": "37.294242",\n          "LONG_NBR": "-122.030890",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4468444",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "41.1579739625811",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2006-06-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "20445 Prospect Rd Ste 1",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95129",\n          "LAT_NBR": "37.294242",\n          "LONG_NBR": "-122.030890",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4469444",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "43.4287572289344",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2006-06-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "427 N 2nd St Unit 310",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95112",\n          "LAT_NBR": "37.343575",\n          "LONG_NBR": "-121.894860",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4468444",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1572.52149398321",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "919 Northland Dr",\n          "ADR_CTY_NM": "Princeton",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55371",\n          "LAT_NBR": "45.558244",\n          "LONG_NBR": "-93.588642",\n          "TEL_AREA_CD": "763",\n          "TEL_NBR": "3893344",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1572.52337296305",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "12",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "911 Northland Dr",\n          "ADR_CTY_NM": "Princeton",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55371",\n          "LAT_NBR": "45.558151",\n          "LONG_NBR": "-93.588581",\n          "TEL_AREA_CD": "763",\n          "TEL_NBR": "3891313",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1574.02956628363",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "14500 99th Ave N",\n          "ADR_CTY_NM": "Maple Grove",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55369",\n          "LAT_NBR": "45.135021",\n          "LONG_NBR": "-93.462291",\n          "TEL_AREA_CD": "763",\n          "TEL_NBR": "8981000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1578.08444752479",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "15",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6401 France Ave S",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55435",\n          "LAT_NBR": "44.886122",\n          "LONG_NBR": "-93.328648",\n          "TEL_AREA_CD": "952",\n          "TEL_NBR": "9245000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1579.47845093128",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "201 E Nicollet Blvd",\n          "ADR_CTY_NM": "Burnsville",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55337",\n          "LAT_NBR": "44.749841",\n          "LONG_NBR": "-93.274628",\n          "TEL_AREA_CD": "952",\n          "TEL_NBR": "8922000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1582.06924920726",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 768",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55440",\n          "LAT_NBR": "44.983116",\n          "LONG_NBR": "-93.265080",\n          "TEL_AREA_CD": "612",\n          "TEL_NBR": "2733000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1582.06924920726",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 9372",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55440",\n          "LAT_NBR": "44.983116",\n          "LONG_NBR": "-93.265080",\n          "TEL_AREA_CD": "612",\n          "TEL_NBR": "6253600",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1582.06924920726",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 9372",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55440",\n          "LAT_NBR": "44.983116",\n          "LONG_NBR": "-93.265080",\n          "TEL_AREA_CD": "651",\n          "TEL_NBR": "9827000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1582.06924920726",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 9372",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55440",\n          "LAT_NBR": "44.983116",\n          "LONG_NBR": "-93.265080",\n          "TEL_AREA_CD": "763",\n          "TEL_NBR": "3891313",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1582.06924920726",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 9372",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55440",\n          "LAT_NBR": "44.983116",\n          "LONG_NBR": "-93.265080",\n          "TEL_AREA_CD": "763",\n          "TEL_NBR": "3893344",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1583.1277537478",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "14",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6341 University Ave NE",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55432",\n          "LAT_NBR": "45.083462",\n          "LONG_NBR": "-93.263065",\n          "TEL_AREA_CD": "763",\n          "TEL_NBR": "5725700",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1583.28435251828",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "16",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2450 Riverside Ave",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55454",\n          "LAT_NBR": "44.965856",\n          "LONG_NBR": "-93.236617",\n          "TEL_AREA_CD": "612",\n          "TEL_NBR": "6726000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1583.44079571599",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "17",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "420 Delaware St SE",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55455",\n          "LAT_NBR": "44.972289",\n          "LONG_NBR": "-93.234627",\n          "TEL_AREA_CD": "612",\n          "TEL_NBR": "2733000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1583.56647767041",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "18",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "516 Delaware St SE Ste 3-100",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55455",\n          "LAT_NBR": "44.972719",\n          "LONG_NBR": "-93.232113",\n          "TEL_AREA_CD": "612",\n          "TEL_NBR": "6253600",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1583.63402588937",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "500 Harvard St SE",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55455",\n          "LAT_NBR": "44.971283",\n          "LONG_NBR": "-93.230443",\n          "TEL_AREA_CD": "612",\n          "TEL_NBR": "2733000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1598.22069857828",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "5200 Fairview Blvd",\n          "ADR_CTY_NM": "Wyoming",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55092",\n          "LAT_NBR": "45.322248",\n          "LONG_NBR": "-92.998689",\n          "TEL_AREA_CD": "651",\n          "TEL_NBR": "9827000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "7944.53004325746",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2014-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO BOX 860217",\n          "ADR_CTY_NM": "MINNEAPOLIS",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55486",\n          "LAT_NBR": "0.000000",\n          "LONG_NBR": "0.000000",\n          "TEL_AREA_CD": "612",\n          "TEL_NBR": "2733000",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "PA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        },\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "S"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "338",\n          "SPCL_TYP_SML_DESC": "PHA",\n          "SPCL_TYP_FULL_DESC": "PHYSICIAN ASSISTANT",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2014-04-15",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2006-06-05",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2281302",\n      "PROV_ID": "2281302",\n      "PROV_EFF_DT": "2002-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "ZHAO",\n      "FST_NM": "WILLIAM",\n      "MDL_NM": "G",\n      "PROV_BTH_DT": "1955-09-27",\n      "PROV_GDR_CD": "M",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1558429381",\n      "PROV_ORIG_EFF_DT": "2002-01-01",\n      "addresses": [\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2012-03-13",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4183499",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2012-03-13",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6521829",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4183499",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6521829",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7881038",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7881983",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4183499",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6521829",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7881038",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7881983",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-02-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4183499",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-02-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6521829",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-02-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7881038",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.24423892235666",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-02-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "126 Waverly Pl",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94108",\n          "LAT_NBR": "37.794509",\n          "LONG_NBR": "-122.406720",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7881983",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        },\n        {\n          "DEG_CD": "PHD",\n          "DEG_ACTV_CD": "I",\n          "DEG_PRI_CD": "S"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2002-01-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "3148863",\n      "PROV_ID": "3148863",\n      "PROV_EFF_DT": "2010-04-15",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "CHEN",\n      "FST_NM": "ZHI JUN",\n      "MDL_NM": "JUN",\n      "PROV_BTH_DT": "1948-10-24",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1255662300",\n      "PROV_ORIG_EFF_DT": "2009-01-01",\n      "addresses": [\n        {\n          "distance": "3.55541628900033",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2892 23rd St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.754489",\n          "LONG_NBR": "-122.409970",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4308251",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55541628900033",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2892 23rd St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.754489",\n          "LONG_NBR": "-122.409970",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7621960",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55541628900033",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2892 23rd St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.754489",\n          "LONG_NBR": "-122.409970",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "8677775",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55541628900033",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2892 23rd St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.754489",\n          "LONG_NBR": "-122.409970",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "8339555",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55541628900033",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2010-04-14",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2892 23rd St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.754489",\n          "LONG_NBR": "-122.409970",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4308251",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55541628900033",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2010-04-14",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2892 23rd St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.754489",\n          "LONG_NBR": "-122.409970",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7621960",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55541628900033",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2010-04-14",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2892 23rd St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.754489",\n          "LONG_NBR": "-122.409970",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "8677775",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55541628900033",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2010-04-14",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2892 23rd St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.754489",\n          "LONG_NBR": "-122.409970",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "8339555",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.706115495141",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7151 Amador Plaza Rd",\n          "ADR_CTY_NM": "Dublin",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94568",\n          "LAT_NBR": "37.707028",\n          "LONG_NBR": "-121.929000",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4308251",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.706115495141",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7151 Amador Plaza Rd",\n          "ADR_CTY_NM": "Dublin",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94568",\n          "LAT_NBR": "37.707028",\n          "LONG_NBR": "-121.929000",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7621960",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.706115495141",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7151 Amador Plaza Rd",\n          "ADR_CTY_NM": "Dublin",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94568",\n          "LAT_NBR": "37.707028",\n          "LONG_NBR": "-121.929000",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "8677775",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.706115495141",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7151 Amador Plaza Rd",\n          "ADR_CTY_NM": "Dublin",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94568",\n          "LAT_NBR": "37.707028",\n          "LONG_NBR": "-121.929000",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "8339555",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.706115495141",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2010-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7151 Amador Plaza Rd",\n          "ADR_CTY_NM": "Dublin",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94568",\n          "LAT_NBR": "37.707028",\n          "LONG_NBR": "-121.929000",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4308251",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.706115495141",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2010-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7151 Amador Plaza Rd",\n          "ADR_CTY_NM": "Dublin",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94568",\n          "LAT_NBR": "37.707028",\n          "LONG_NBR": "-121.929000",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7621960",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.706115495141",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2010-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7151 Amador Plaza Rd",\n          "ADR_CTY_NM": "Dublin",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94568",\n          "LAT_NBR": "37.707028",\n          "LONG_NBR": "-121.929000",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "8677775",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.706115495141",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2010-04-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7151 Amador Plaza Rd",\n          "ADR_CTY_NM": "Dublin",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94568",\n          "LAT_NBR": "37.707028",\n          "LONG_NBR": "-121.929000",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "8339555",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2010-03-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2600152",\n      "PROV_ID": "2600152",\n      "PROV_EFF_DT": "2008-08-07",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "KIM",\n      "FST_NM": "IN SUN",\n      "PROV_BTH_DT": "1963-07-04",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1689717274",\n      "PROV_ORIG_EFF_DT": "2003-01-01",\n      "addresses": [\n        {\n          "distance": "33.4652423501524",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "667 Fontes Dr",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94539",\n          "LAT_NBR": "37.540907",\n          "LONG_NBR": "-121.933520",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2601800",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "33.4652423501524",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "667 Fontes Dr",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94539",\n          "LAT_NBR": "37.540907",\n          "LONG_NBR": "-121.933520",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2601885",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "33.4652423501524",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "667 Fontes Dr",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94539",\n          "LAT_NBR": "37.540907",\n          "LONG_NBR": "-121.933520",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "9381376",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2013-07-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2601800",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2013-07-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2601885",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2013-07-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4476878",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2013-07-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7483342",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-08-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2601800",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-08-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2601885",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-08-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4476878",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-08-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7483342",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2013-07-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2601800",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2013-07-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2601885",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2013-07-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4476878",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "39.9719224120726",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2013-07-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2656 El Camino Real",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.352150",\n          "LONG_NBR": "-121.974470",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "7483342",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2006-01-05",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2885209",\n      "PROV_ID": "2885209",\n      "PROV_EFF_DT": "2007-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "CHEN",\n      "FST_NM": "AI YUN",\n      "PROV_BTH_DT": "1960-05-30",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1568590370",\n      "PROV_ORIG_EFF_DT": "2007-01-01",\n      "addresses": [\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2008-01-21",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3761052",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2008-01-21",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6521829",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2008-01-21",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2894878",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2008-01-21",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6518176",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2009-12-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3761052",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2009-12-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6521829",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2009-12-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2894878",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2009-12-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6518176",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2012-01-04",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3761052",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2012-01-04",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6521829",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2012-01-04",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2894878",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.82313419397946",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2012-01-04",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2409 19th Ave Ste A2",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94116",\n          "LAT_NBR": "37.742936",\n          "LONG_NBR": "-122.475870",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6518176",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.58003058519618",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-12-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "45 Esquina Dr",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94134",\n          "LAT_NBR": "37.709432",\n          "LONG_NBR": "-122.421130",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3761052",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.58003058519618",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-12-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "45 Esquina Dr",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94134",\n          "LAT_NBR": "37.709432",\n          "LONG_NBR": "-122.421130",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6521829",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.58003058519618",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-12-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "45 Esquina Dr",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94134",\n          "LAT_NBR": "37.709432",\n          "LONG_NBR": "-122.421130",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2894878",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.58003058519618",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-12-10",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "45 Esquina Dr",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94134",\n          "LAT_NBR": "37.709432",\n          "LONG_NBR": "-122.421130",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6518176",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.58003058519618",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-01-04",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "45 Esquina Dr",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94134",\n          "LAT_NBR": "37.709432",\n          "LONG_NBR": "-122.421130",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3761052",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.58003058519618",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-01-04",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "45 Esquina Dr",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94134",\n          "LAT_NBR": "37.709432",\n          "LONG_NBR": "-122.421130",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6521829",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.58003058519618",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-01-04",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "45 Esquina Dr",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94134",\n          "LAT_NBR": "37.709432",\n          "LONG_NBR": "-122.421130",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2894878",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "5.58003058519618",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-01-04",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "45 Esquina Dr",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94134",\n          "LAT_NBR": "37.709432",\n          "LONG_NBR": "-122.421130",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6518176",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2008-01-21",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2851264",\n      "PROV_ID": "2851264",\n      "PROV_EFF_DT": "2008-11-19",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "KIM",\n      "FST_NM": "A YOUNG",\n      "PROV_BTH_DT": "1975-09-16",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1306962584",\n      "PROV_ORIG_EFF_DT": "2006-01-01",\n      "addresses": [\n        {\n          "distance": "32.6635765394362",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2013-12-02",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "895 Sherwood Ave Ste 101",\n          "ADR_CTY_NM": "Los Altos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94022",\n          "LAT_NBR": "37.398925",\n          "LONG_NBR": "-122.113400",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "3863115",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "32.6635765394362",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2013-12-02",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "895 Sherwood Ave Ste 101",\n          "ADR_CTY_NM": "Los Altos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94022",\n          "LAT_NBR": "37.398925",\n          "LONG_NBR": "-122.113400",\n          "TEL_AREA_CD": "509",\n          "TEL_NBR": "6913730",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "47.4199903821059",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2013-12-02",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15690 LOS GATOS BLVD",\n          "ADR_CTY_NM": "LOS GATOS",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95032",\n          "LAT_NBR": "37.230793",\n          "LONG_NBR": "-121.946323",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "3863115",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "47.4199903821059",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2013-12-02",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15690 LOS GATOS BLVD",\n          "ADR_CTY_NM": "LOS GATOS",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95032",\n          "LAT_NBR": "37.230793",\n          "LONG_NBR": "-121.946323",\n          "TEL_AREA_CD": "509",\n          "TEL_NBR": "6913730",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "84.1117938890252",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2013-12-02",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3113 NICKLAS LN APT 3B",\n          "ADR_CTY_NM": "MARINA",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "93933",\n          "LAT_NBR": "36.684221",\n          "LONG_NBR": "-121.793348",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "3863115",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "84.1117938890252",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2013-12-02",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3113 NICKLAS LN APT 3B",\n          "ADR_CTY_NM": "MARINA",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "93933",\n          "LAT_NBR": "36.684221",\n          "LONG_NBR": "-121.793348",\n          "TEL_AREA_CD": "509",\n          "TEL_NBR": "6913730",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "320.652113810009",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "23206 Lyons Ave Ste 110",\n          "ADR_CTY_NM": "Newhall",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91321",\n          "LAT_NBR": "34.379729",\n          "LONG_NBR": "-118.538260",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "2880022",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "320.652113810009",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "23206 Lyons Ave Ste 110",\n          "ADR_CTY_NM": "Newhall",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91321",\n          "LAT_NBR": "34.379729",\n          "LONG_NBR": "-118.538260",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "2882030",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "320.727519726108",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2010-07-21",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "23043 Lyons Ave",\n          "ADR_CTY_NM": "Newhall",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91321",\n          "LAT_NBR": "34.380273",\n          "LONG_NBR": "-118.535550",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "2880022",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "320.727519726108",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2010-07-21",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "23043 Lyons Ave",\n          "ADR_CTY_NM": "Newhall",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91321",\n          "LAT_NBR": "34.380273",\n          "LONG_NBR": "-118.535550",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "2882030",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "320.727519726108",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2010-08-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "23043 Lyons Ave",\n          "ADR_CTY_NM": "Newhall",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91321",\n          "LAT_NBR": "34.380273",\n          "LONG_NBR": "-118.535550",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "2880022",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "320.727519726108",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2010-08-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "23043 Lyons Ave",\n          "ADR_CTY_NM": "Newhall",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91321",\n          "LAT_NBR": "34.380273",\n          "LONG_NBR": "-118.535550",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "2882030",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "322.113915962111",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-11-19",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "18261 Soledad Canyon Rd",\n          "ADR_CTY_NM": "Canyon Country",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91387",\n          "LAT_NBR": "34.416678",\n          "LONG_NBR": "-118.451470",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "2515930",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "322.113915962111",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-11-19",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "18261 Soledad Canyon Rd",\n          "ADR_CTY_NM": "Canyon Country",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91387",\n          "LAT_NBR": "34.416678",\n          "LONG_NBR": "-118.451470",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "2882030",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "322.113915962111",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-11-19",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "18261 Soledad Canyon Rd",\n          "ADR_CTY_NM": "Canyon Country",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91387",\n          "LAT_NBR": "34.416678",\n          "LONG_NBR": "-118.451470",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "3736838",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "322.113915962111",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2006-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "18261 Soledad Canyon Rd",\n          "ADR_CTY_NM": "Canyon Country",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91387",\n          "LAT_NBR": "34.416678",\n          "LONG_NBR": "-118.451470",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "2515930",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "322.113915962111",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2006-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "18261 Soledad Canyon Rd",\n          "ADR_CTY_NM": "Canyon Country",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91387",\n          "LAT_NBR": "34.416678",\n          "LONG_NBR": "-118.451470",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "2882030",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "322.113915962111",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2006-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "18261 Soledad Canyon Rd",\n          "ADR_CTY_NM": "Canyon Country",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "91387",\n          "LAT_NBR": "34.416678",\n          "LONG_NBR": "-118.451470",\n          "TEL_AREA_CD": "661",\n          "TEL_NBR": "3736838",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2006-01-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2483606",\n      "PROV_ID": "2483606",\n      "PROV_EFF_DT": "2003-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "LIN",\n      "FST_NM": "LISA",\n      "PROV_BTH_DT": "1950-07-15",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1548395692",\n      "PROV_ORIG_EFF_DT": "2003-01-01",\n      "addresses": [\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-04-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2305198",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-04-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "5201407",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.7931804251864",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3121 Park Ave Ste J",\n          "ADR_CTY_NM": "Soquel",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95073",\n          "LAT_NBR": "36.989874",\n          "LONG_NBR": "-121.935720",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4768355",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.7931804251864",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3121 Park Ave Ste J",\n          "ADR_CTY_NM": "Soquel",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95073",\n          "LAT_NBR": "36.989874",\n          "LONG_NBR": "-121.935720",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4768359",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.7931804251864",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3121 Park Ave Ste J",\n          "ADR_CTY_NM": "Soquel",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95073",\n          "LAT_NBR": "36.989874",\n          "LONG_NBR": "-121.935720",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "7066588",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.7931804251864",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3121 Park Ave Ste J",\n          "ADR_CTY_NM": "Soquel",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95073",\n          "LAT_NBR": "36.989874",\n          "LONG_NBR": "-121.935720",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4768355",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.7931804251864",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3121 Park Ave Ste J",\n          "ADR_CTY_NM": "Soquel",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95073",\n          "LAT_NBR": "36.989874",\n          "LONG_NBR": "-121.935720",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4768359",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.7931804251864",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3121 Park Ave Ste J",\n          "ADR_CTY_NM": "Soquel",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95073",\n          "LAT_NBR": "36.989874",\n          "LONG_NBR": "-121.935720",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "7066588",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.7931804251864",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3121 Park Ave Ste J",\n          "ADR_CTY_NM": "Soquel",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95073",\n          "LAT_NBR": "36.989874",\n          "LONG_NBR": "-121.935720",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4768355",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.7931804251864",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3121 Park Ave Ste J",\n          "ADR_CTY_NM": "Soquel",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95073",\n          "LAT_NBR": "36.989874",\n          "LONG_NBR": "-121.935720",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4768359",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.7931804251864",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3121 Park Ave Ste J",\n          "ADR_CTY_NM": "Soquel",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95073",\n          "LAT_NBR": "36.989874",\n          "LONG_NBR": "-121.935720",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "7066588",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        },\n        {\n          "DEG_CD": "PHD",\n          "DEG_ACTV_CD": "I",\n          "DEG_PRI_CD": "S"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-12-14",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2529393",\n      "PROV_ID": "2529393",\n      "PROV_EFF_DT": "2004-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "MARDIAN",\n      "FST_NM": "ARAM",\n      "PROV_BTH_DT": "1976-04-28",\n      "PROV_GDR_CD": "M",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1952366734",\n      "PROV_ORIG_EFF_DT": "2004-01-01",\n      "addresses": [\n        {\n          "distance": "11.9395624592001",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2008-04-04",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2520 Milvia St",\n          "ADR_CTY_NM": "Berkeley",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94704",\n          "LAT_NBR": "37.862528",\n          "LONG_NBR": "-122.269890",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "8417600",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "634.069027436511",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "15",\n          "ADR_EFF_DT": "2010-06-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15468 N Civic Center Dr",\n          "ADR_CTY_NM": "Surprise",\n          "ADR_ST_CD": "AZ",\n          "ADR_ZIP_CD": "85374",\n          "LAT_NBR": "33.624448",\n          "LONG_NBR": "-112.368190",\n          "TEL_AREA_CD": "623",\n          "TEL_NBR": "5842917",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "634.069027436511",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "15",\n          "ADR_EFF_DT": "2010-06-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15468 N Civic Center Dr",\n          "ADR_CTY_NM": "Surprise",\n          "ADR_ST_CD": "AZ",\n          "ADR_ZIP_CD": "85374",\n          "LAT_NBR": "33.624448",\n          "LONG_NBR": "-112.368190",\n          "TEL_AREA_CD": "623",\n          "TEL_NBR": "5842945",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "656.844778203583",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2010-02-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2601 E ROOSEVELT ST",\n          "ADR_CTY_NM": "PHOENIX",\n          "ADR_ST_CD": "AZ",\n          "ADR_ZIP_CD": "85008",\n          "LAT_NBR": "33.458383",\n          "LONG_NBR": "-112.026050",\n          "TEL_AREA_CD": "602",\n          "TEL_NBR": "3445011",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "656.844778203583",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2010-02-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2601 E ROOSEVELT ST",\n          "ADR_CTY_NM": "PHOENIX",\n          "ADR_ST_CD": "AZ",\n          "ADR_ZIP_CD": "85008",\n          "LAT_NBR": "33.458383",\n          "LONG_NBR": "-112.026050",\n          "TEL_AREA_CD": "602",\n          "TEL_NBR": "3445426",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "659.653679102564",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "19",\n          "ADR_EFF_DT": "2010-06-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 29637",\n          "ADR_CTY_NM": "Phoenix",\n          "ADR_ST_CD": "AZ",\n          "ADR_ZIP_CD": "85038",\n          "LAT_NBR": "33.451091",\n          "LONG_NBR": "-111.974860",\n          "TEL_AREA_CD": "623",\n          "TEL_NBR": "5445070",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "659.653679102564",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "19",\n          "ADR_EFF_DT": "2010-06-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 29637",\n          "ADR_CTY_NM": "Phoenix",\n          "ADR_ST_CD": "AZ",\n          "ADR_ZIP_CD": "85038",\n          "LAT_NBR": "33.451091",\n          "LONG_NBR": "-111.974860",\n          "TEL_AREA_CD": "623",\n          "TEL_NBR": "5445094",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "670.404533745625",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "21",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "8801 14th Ave S",\n          "ADR_CTY_NM": "Seattle",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98108",\n          "LAT_NBR": "47.524601",\n          "LONG_NBR": "-122.315150",\n          "TEL_AREA_CD": "206",\n          "TEL_NBR": "7623730",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "671.996619247401",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2007-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6520 226th Pl SE Ste 150",\n          "ADR_CTY_NM": "Issaquah",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98027",\n          "LAT_NBR": "47.543328",\n          "LONG_NBR": "-122.038290",\n          "TEL_AREA_CD": "425",\n          "TEL_NBR": "3691435",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "671.996619247401",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2007-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6520 226th Pl SE Ste 150",\n          "ADR_CTY_NM": "Issaquah",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98027",\n          "LAT_NBR": "47.543328",\n          "LONG_NBR": "-122.038290",\n          "TEL_AREA_CD": "425",\n          "TEL_NBR": "6885777",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "672.000401995669",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "20",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 34703",\n          "ADR_CTY_NM": "Seattle",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98124",\n          "LAT_NBR": "47.547782",\n          "LONG_NBR": "-122.314600",\n          "TEL_AREA_CD": "206",\n          "TEL_NBR": "7643335",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "672.000401995669",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "22",\n          "ADR_EFF_DT": "2011-05-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "MS 315010 PO Box 3947",\n          "ADR_CTY_NM": "Seattle",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98124",\n          "LAT_NBR": "47.547782",\n          "LONG_NBR": "-122.314600",\n          "TEL_AREA_CD": "866",\n          "TEL_NBR": "7753421",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "672.828060919064",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4744 41ST AVE SW STE 102",\n          "ADR_CTY_NM": "SEATTLE",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98116",\n          "LAT_NBR": "47.560247",\n          "LONG_NBR": "-122.383910",\n          "TEL_AREA_CD": "206",\n          "TEL_NBR": "6502184",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "672.828060919064",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4744 41ST AVE SW STE 102",\n          "ADR_CTY_NM": "SEATTLE",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98116",\n          "LAT_NBR": "47.560247",\n          "LONG_NBR": "-122.383910",\n          "TEL_AREA_CD": "206",\n          "TEL_NBR": "6743860",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "672.828060919064",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4744 41ST AVE SW STE 102",\n          "ADR_CTY_NM": "SEATTLE",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98116",\n          "LAT_NBR": "47.560247",\n          "LONG_NBR": "-122.383910",\n          "TEL_AREA_CD": "206",\n          "TEL_NBR": "9320880",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "672.828060919064",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4744 41ST AVE SW STE 102",\n          "ADR_CTY_NM": "SEATTLE",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98116",\n          "LAT_NBR": "47.560247",\n          "LONG_NBR": "-122.383910",\n          "TEL_AREA_CD": "206",\n          "TEL_NBR": "9323738",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "672.828060919064",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2005-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4744 41ST AVE SW STE 102",\n          "ADR_CTY_NM": "SEATTLE",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98116",\n          "LAT_NBR": "47.560247",\n          "LONG_NBR": "-122.383910",\n          "TEL_AREA_CD": "206",\n          "TEL_NBR": "6502184",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "672.828060919064",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2005-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4744 41ST AVE SW STE 102",\n          "ADR_CTY_NM": "SEATTLE",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98116",\n          "LAT_NBR": "47.560247",\n          "LONG_NBR": "-122.383910",\n          "TEL_AREA_CD": "206",\n          "TEL_NBR": "6743860",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "672.828060919064",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2005-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4744 41ST AVE SW STE 102",\n          "ADR_CTY_NM": "SEATTLE",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98116",\n          "LAT_NBR": "47.560247",\n          "LONG_NBR": "-122.383910",\n          "TEL_AREA_CD": "206",\n          "TEL_NBR": "9320880",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "672.828060919064",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2005-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4744 41ST AVE SW STE 102",\n          "ADR_CTY_NM": "SEATTLE",\n          "ADR_ST_CD": "WA",\n          "ADR_ZIP_CD": "98116",\n          "LAT_NBR": "47.560247",\n          "LONG_NBR": "-122.383910",\n          "TEL_AREA_CD": "206",\n          "TEL_NBR": "9323738",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1581.79046788228",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "35",\n          "ADR_EFF_DT": "2013-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 86 SDS 12-2955",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55486",\n          "LAT_NBR": "44.977214",\n          "LONG_NBR": "-93.269688",\n          "TEL_AREA_CD": "602",\n          "TEL_NBR": "4705000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1581.79046788228",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "35",\n          "ADR_EFF_DT": "2013-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 86 SDS 12-2955",\n          "ADR_CTY_NM": "Minneapolis",\n          "ADR_ST_CD": "MN",\n          "ADR_ZIP_CD": "55486",\n          "LAT_NBR": "44.977214",\n          "LONG_NBR": "-93.269688",\n          "TEL_AREA_CD": "602",\n          "TEL_NBR": "4705070",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "MD",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "008",\n          "SPCL_TYP_SML_DESC": "FP",\n          "SPCL_TYP_FULL_DESC": "FAMILY PRACTICE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "C",\n          "SPCL_BD_CERT_DT": "2005-07-30",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "2012-12-31",\n          "SPCL_EFF_DT": "2004-01-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "275",\n          "SPCL_TYP_SML_DESC": "FPS",\n          "SPCL_TYP_FULL_DESC": "FAMILY PRACTICE SPECIALIST",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2011-12-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-01-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "026",\n          "SPCL_TYP_SML_DESC": "P",\n          "SPCL_TYP_FULL_DESC": "PSYCHIATRY",\n          "HCFA_SPCL_TYP_CD": "2",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "N",\n          "MHSA_IND": "Y",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2009-02-10",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "328",\n          "SPCL_TYP_SML_DESC": "UCA",\n          "SPCL_TYP_FULL_DESC": "URGENT CARE MEDICINE",\n          "HCFA_SPCL_TYP_CD": "7",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-01-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": [\n        {\n          "AFFIL_PROV_ID": "564290",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "UNK",\n          "HOSP_AFFIL_DIR_IND": "N",\n          "PRI_HOSP_AFFIL_CD": "P",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "734409",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "UNK",\n          "HOSP_AFFIL_DIR_IND": "N",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "2053138",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "UNK",\n          "HOSP_AFFIL_DIR_IND": "N",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "2084329",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "UNK",\n          "HOSP_AFFIL_DIR_IND": "N",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "2830263",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "UNK",\n          "HOSP_AFFIL_DIR_IND": "N",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "A"\n        }\n      ]\n    },\n    {\n      "id": "1856748",\n      "PROV_ID": "1856748",\n      "PROV_EFF_DT": "2007-01-02",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "CHAO",\n      "FST_NM": "LAWRENCE",\n      "MDL_NM": "L",\n      "PROV_BTH_DT": "1962-12-23",\n      "PROV_GDR_CD": "M",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1700896370",\n      "MDCR_ID": "00A555110",\n      "PROV_ORIG_EFF_DT": "1999-03-29",\n      "addresses": [\n        {\n          "distance": "0.421167026542003",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3838 California St Rm 416",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94118",\n          "LAT_NBR": "37.786016",\n          "LONG_NBR": "-122.457660",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3333091",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "0.421167026542003",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3838 California St Rm 416",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94118",\n          "LAT_NBR": "37.786016",\n          "LONG_NBR": "-122.457660",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3333302",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.43078998435007",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2009-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 39000 Dept Ste 34199",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94139",\n          "LAT_NBR": "37.792972",\n          "LONG_NBR": "-122.402770",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "9726000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2001-06-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3333302",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3333091",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3333302",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3339984",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6928688",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2001-10-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3333091",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2001-10-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3333302",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2001-10-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3339984",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2001-10-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6928688",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2009-05-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3333091",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2009-05-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3333302",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2009-05-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3339984",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.55413547743728",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2009-05-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2645 Ocean Ave Ste 207",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94132",\n          "LAT_NBR": "37.731827",\n          "LONG_NBR": "-122.473810",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6928688",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "MD",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "011",\n          "SPCL_TYP_SML_DESC": "IM",\n          "SPCL_TYP_FULL_DESC": "INTERNAL MEDICINE",\n          "HCFA_SPCL_TYP_CD": "1",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "C",\n          "SPCL_BD_CERT_DT": "1999-01-01",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "2019-12-31",\n          "SPCL_EFF_DT": "1999-03-29",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2008-08-18",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": [\n        {\n          "AFFIL_PROV_ID": "742821",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "AC",\n          "HOSP_AFFIL_DIR_IND": "Y",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "424821",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "COU",\n          "HOSP_AFFIL_DIR_IND": "Y",\n          "PRI_HOSP_AFFIL_CD": "P",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "448441",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "AC",\n          "HOSP_AFFIL_DIR_IND": "Y",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "A"\n        },\n        {\n          "AFFIL_PROV_ID": "735428",\n          "AFFIL_TYP_CD": "H",\n          "ADMIT_PRVLG_TYP_CD": "ACT",\n          "HOSP_AFFIL_DIR_IND": "Y",\n          "PRI_HOSP_AFFIL_CD": "S",\n          "ACTV_CD": "A"\n        }\n      ]\n    },\n    {\n      "id": "3312978",\n      "PROV_ID": "3312978",\n      "PROV_EFF_DT": "2011-05-11",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "MEI",\n      "FST_NM": "JIA",\n      "PROV_BTH_DT": "1962-01-12",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1992009518",\n      "PROV_ORIG_EFF_DT": "2011-05-11",\n      "addresses": [\n        {\n          "distance": "28.125672836567",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2011-05-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "35421 Purcell Pl",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.570397",\n          "LONG_NBR": "-122.024910",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4609954",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "28.125672836567",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2011-05-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "35421 Purcell Pl",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.570397",\n          "LONG_NBR": "-122.024910",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7138585",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "28.125672836567",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2011-05-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "35421 Purcell Pl",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.570397",\n          "LONG_NBR": "-122.024910",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7138588",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "28.125672836567",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2011-05-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "35421 Purcell Pl",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.570397",\n          "LONG_NBR": "-122.024910",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8475953",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "28.125672836567",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "35421 Purcell Pl",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.570397",\n          "LONG_NBR": "-122.024910",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4609954",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "28.125672836567",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "35421 Purcell Pl",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.570397",\n          "LONG_NBR": "-122.024910",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7138585",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "28.125672836567",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "35421 Purcell Pl",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.570397",\n          "LONG_NBR": "-122.024910",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7138588",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "28.125672836567",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "35421 Purcell Pl",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.570397",\n          "LONG_NBR": "-122.024910",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8475953",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.4446419473943",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2011-05-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3774 Peralta Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.558925",\n          "LONG_NBR": "-122.005500",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7138585",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.4446419473943",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2011-05-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3774 Peralta Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.558925",\n          "LONG_NBR": "-122.005500",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7138588",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.8532159583676",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "37982 Fremont Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.554807",\n          "LONG_NBR": "-121.999930",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4609954",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.8532159583676",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "37982 Fremont Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.554807",\n          "LONG_NBR": "-121.999930",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7138588",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "29.8532159583676",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "37982 Fremont Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94536",\n          "LAT_NBR": "37.554807",\n          "LONG_NBR": "-121.999930",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8475953",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2011-05-11",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2419616",\n      "PROV_ID": "2419616",\n      "PROV_EFF_DT": "2009-07-21",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "LIU",\n      "FST_NM": "JINGYU",\n      "MDL_NM": "JENNIFER",\n      "PROV_BTH_DT": "1954-12-25",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1609947886",\n      "PROV_ORIG_EFF_DT": "2003-01-01",\n      "addresses": [\n        {\n          "distance": "31.8372801603149",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2010-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3 Fawn Glen Ct",\n          "ADR_CTY_NM": "Pittsburg",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94565",\n          "LAT_NBR": "38.008099",\n          "LONG_NBR": "-121.954100",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "6989770",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.6281927418034",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2007-01-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3796 Railroad Ave",\n          "ADR_CTY_NM": "Pittsburg",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94565",\n          "LAT_NBR": "38.004831",\n          "LONG_NBR": "-121.894190",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "2407099",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.6281927418034",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2007-01-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3796 Railroad Ave",\n          "ADR_CTY_NM": "Pittsburg",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94565",\n          "LAT_NBR": "38.004831",\n          "LONG_NBR": "-121.894190",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "6342493",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.6281927418034",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2007-01-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3796 Railroad Ave",\n          "ADR_CTY_NM": "Pittsburg",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94565",\n          "LAT_NBR": "38.004831",\n          "LONG_NBR": "-121.894190",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "6989770",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "36.0606719455824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2010-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "120 E 3rd St",\n          "ADR_CTY_NM": "Pittsburg",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94565",\n          "LAT_NBR": "38.033187",\n          "LONG_NBR": "-121.883000",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "6989770",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "36.0606719455824",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2010-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "120 E 3rd St",\n          "ADR_CTY_NM": "Pittsburg",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94565",\n          "LAT_NBR": "38.033187",\n          "LONG_NBR": "-121.883000",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "7091236",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "36.4431218990069",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2007-01-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 183",\n          "ADR_CTY_NM": "Pittsburg",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94565",\n          "LAT_NBR": "38.008876",\n          "LONG_NBR": "-121.859690",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "2407099",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "36.4431218990069",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2007-01-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 183",\n          "ADR_CTY_NM": "Pittsburg",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94565",\n          "LAT_NBR": "38.008876",\n          "LONG_NBR": "-121.859690",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "6342493",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "36.4431218990069",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2007-01-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 183",\n          "ADR_CTY_NM": "Pittsburg",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94565",\n          "LAT_NBR": "38.008876",\n          "LONG_NBR": "-121.859690",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "6989770",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "40.5643982355084",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2010-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "5169 Lone Tree Way",\n          "ADR_CTY_NM": "Antioch",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94531",\n          "LAT_NBR": "37.961913",\n          "LONG_NBR": "-121.755570",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "6989770",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "40.5643982355084",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2010-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "5169 Lone Tree Way",\n          "ADR_CTY_NM": "Antioch",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94531",\n          "LAT_NBR": "37.961913",\n          "LONG_NBR": "-121.755570",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "7091236",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "47.6257445399514",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2009-07-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2489 Discovery Bay Blvd Ste 402",\n          "ADR_CTY_NM": "Discovery Bay",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94505",\n          "LAT_NBR": "37.890355",\n          "LONG_NBR": "-121.601990",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "6342400",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "47.6257445399514",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2009-07-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2489 Discovery Bay Blvd Ste 402",\n          "ADR_CTY_NM": "Discovery Bay",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94505",\n          "LAT_NBR": "37.890355",\n          "LONG_NBR": "-121.601990",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "6342493",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-06-11",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "3009890",\n      "PROV_ID": "3009890",\n      "PROV_EFF_DT": "2009-03-25",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "LIANG",\n      "FST_NM": "XIBIN",\n      "PROV_BTH_DT": "1965-04-06",\n      "PROV_GDR_CD": "M",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1699912030",\n      "PROV_ORIG_EFF_DT": "2009-03-25",\n      "addresses": [\n        {\n          "distance": "16.9869684649334",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2009-04-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "517 S B St Ste B",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94401",\n          "LAT_NBR": "37.564044",\n          "LONG_NBR": "-122.320560",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "3422643",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "16.9869684649334",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2009-04-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "517 S B St Ste B",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94401",\n          "LAT_NBR": "37.564044",\n          "LONG_NBR": "-122.320560",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8686632",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "27.4694945701544",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-03-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1155 University Dr Ste 1",\n          "ADR_CTY_NM": "Menlo Park",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94025",\n          "LAT_NBR": "37.450161",\n          "LONG_NBR": "-122.186900",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "3265929",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "27.4694945701544",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-03-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1155 University Dr Ste 1",\n          "ADR_CTY_NM": "Menlo Park",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94025",\n          "LAT_NBR": "37.450161",\n          "LONG_NBR": "-122.186900",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8686632",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.6354554038999",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-08-18",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "865 Altaire Walk",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94303",\n          "LAT_NBR": "37.424313",\n          "LONG_NBR": "-122.102510",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4986262",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.6354554038999",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-08-18",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "865 Altaire Walk",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94303",\n          "LAT_NBR": "37.424313",\n          "LONG_NBR": "-122.102510",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8559625",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.6354554038999",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-08-18",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "865 Altaire Walk",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94303",\n          "LAT_NBR": "37.424313",\n          "LONG_NBR": "-122.102510",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8686632",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.8401729168183",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2009-03-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4274 Wilkie Way Apt C",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94306",\n          "LAT_NBR": "37.410273",\n          "LONG_NBR": "-122.119360",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "3265929",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.8401729168183",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2009-03-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4274 Wilkie Way Apt C",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94306",\n          "LAT_NBR": "37.410273",\n          "LONG_NBR": "-122.119360",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "3422643",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.8401729168183",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2009-03-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4274 Wilkie Way Apt C",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94306",\n          "LAT_NBR": "37.410273",\n          "LONG_NBR": "-122.119360",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8686632",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.8401729168183",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2009-04-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4274 Wilkie Way Apt C",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94306",\n          "LAT_NBR": "37.410273",\n          "LONG_NBR": "-122.119360",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "3265929",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.8401729168183",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2009-04-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4274 Wilkie Way Apt C",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94306",\n          "LAT_NBR": "37.410273",\n          "LONG_NBR": "-122.119360",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "3422643",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.8401729168183",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2009-04-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4274 Wilkie Way Apt C",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94306",\n          "LAT_NBR": "37.410273",\n          "LONG_NBR": "-122.119360",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8686632",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.986246929634",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2010-08-18",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "744 San Antonio Rd Ste 1",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94303",\n          "LAT_NBR": "37.417841",\n          "LONG_NBR": "-122.102460",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "4986262",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.986246929634",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2010-08-18",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "744 San Antonio Rd Ste 1",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94303",\n          "LAT_NBR": "37.417841",\n          "LONG_NBR": "-122.102460",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8559625",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.986246929634",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2010-08-18",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "744 San Antonio Rd Ste 1",\n          "ADR_CTY_NM": "Palo Alto",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94303",\n          "LAT_NBR": "37.417841",\n          "LONG_NBR": "-122.102460",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8686632",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2009-03-25",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "3516062",\n      "PROV_ID": "3516062",\n      "PROV_EFF_DT": "2011-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "CONNELLY",\n      "FST_NM": "MARCIA",\n      "MDL_NM": "D",\n      "PROV_BTH_DT": "1973-01-26",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1255667309",\n      "PROV_ORIG_EFF_DT": "2011-01-01",\n      "addresses": [\n        {\n          "distance": "34.3871639587013",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2013-07-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43353 Mission Blvd Ste B",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94539",\n          "LAT_NBR": "37.532668",\n          "LONG_NBR": "-121.920070",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "4380128",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.3871639587013",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2013-07-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43353 Mission Blvd Ste B",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94539",\n          "LAT_NBR": "37.532668",\n          "LONG_NBR": "-121.920070",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "8371945",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "36.1438883005737",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1000 Fremont Ave Ste 152",\n          "ADR_CTY_NM": "Los Altos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94024",\n          "LAT_NBR": "37.352218",\n          "LONG_NBR": "-122.086340",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9494325",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "36.1438883005737",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1000 Fremont Ave Ste 152",\n          "ADR_CTY_NM": "Los Altos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94024",\n          "LAT_NBR": "37.352218",\n          "LONG_NBR": "-122.086340",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "8187051",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "48.592352715536",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2013-07-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 6671",\n          "ADR_CTY_NM": "Santa Rosa",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95406",\n          "LAT_NBR": "38.457351",\n          "LONG_NBR": "-122.730040",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9494325",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "48.592352715536",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2013-07-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 6671",\n          "ADR_CTY_NM": "Santa Rosa",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95406",\n          "LAT_NBR": "38.457351",\n          "LONG_NBR": "-122.730040",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "5447331",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "48.592352715536",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2013-07-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 6671",\n          "ADR_CTY_NM": "Santa Rosa",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95406",\n          "LAT_NBR": "38.457351",\n          "LONG_NBR": "-122.730040",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "6239409",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "48.592352715536",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2013-07-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 6671",\n          "ADR_CTY_NM": "Santa Rosa",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95406",\n          "LAT_NBR": "38.457351",\n          "LONG_NBR": "-122.730040",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "8187051",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "53.872529757741",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2013-07-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7971 W Zayante Rd",\n          "ADR_CTY_NM": "Felton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95018",\n          "LAT_NBR": "37.070198",\n          "LONG_NBR": "-122.057490",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "4380128",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "53.872529757741",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2013-07-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7971 W Zayante Rd",\n          "ADR_CTY_NM": "Felton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95018",\n          "LAT_NBR": "37.070198",\n          "LONG_NBR": "-122.057490",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "8371945",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.3712930394226",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6892B Soquel Ave",\n          "ADR_CTY_NM": "Santa Cruz",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95062",\n          "LAT_NBR": "36.982716",\n          "LONG_NBR": "-121.970120",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "8187051",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.3712930394226",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6892B Soquel Ave Ste B",\n          "ADR_CTY_NM": "Santa Cruz",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95062",\n          "LAT_NBR": "36.982716",\n          "LONG_NBR": "-121.970120",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9494325",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.3712930394226",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6892B Soquel Ave Ste B",\n          "ADR_CTY_NM": "Santa Cruz",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95062",\n          "LAT_NBR": "36.982716",\n          "LONG_NBR": "-121.970120",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "8187051",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2012-10-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "1953671",\n      "PROV_ID": "1953671",\n      "PROV_EFF_DT": "2009-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "ANGELONE",\n      "FST_NM": "ANNEMARIE",\n      "PROV_BTH_DT": "1966-03-30",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1679689327",\n      "PROV_ORIG_EFF_DT": "2000-05-26",\n      "addresses": [\n        {\n          "distance": "3.10960382993267",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2013-07-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1193 Valencia St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.753917",\n          "LONG_NBR": "-122.420660",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6213259",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.10960382993267",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2013-07-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1193 Valencia St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.753917",\n          "LONG_NBR": "-122.420660",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "6476222",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.10960382993267",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2013-07-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1193 Valencia St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.753917",\n          "LONG_NBR": "-122.420660",\n          "TEL_AREA_CD": "615",\n          "TEL_NBR": "6476222",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.77044690691395",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-12-31",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1796 18th St Ste B",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94107",\n          "LAT_NBR": "37.762500",\n          "LONG_NBR": "-122.400260",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2558970",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.77044690691395",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-12-31",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1796 18th St Ste B",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94107",\n          "LAT_NBR": "37.762500",\n          "LONG_NBR": "-122.400260",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4079851",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.77044690691395",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-12-31",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1796 18th St Ste B",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94107",\n          "LAT_NBR": "37.762500",\n          "LONG_NBR": "-122.400260",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "3876447",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.77044690691395",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1796 18th St Ste B",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94107",\n          "LAT_NBR": "37.762500",\n          "LONG_NBR": "-122.400260",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2558970",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.77044690691395",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1796 18th St Ste B",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94107",\n          "LAT_NBR": "37.762500",\n          "LONG_NBR": "-122.400260",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4079851",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.77044690691395",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1796 18th St Ste B",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94107",\n          "LAT_NBR": "37.762500",\n          "LONG_NBR": "-122.400260",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "3876447",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "7944.53004325746",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2013-07-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "418 WALKER ST",\n          "ADR_CTY_NM": "ORLAND",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95963",\n          "LAT_NBR": "0.000000",\n          "LONG_NBR": "0.000000",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "3876447",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "7944.53004325746",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2013-07-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "418 WALKER ST",\n          "ADR_CTY_NM": "ORLAND",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95963",\n          "LAT_NBR": "0.000000",\n          "LONG_NBR": "0.000000",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "8658727",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2000-05-26",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2578296",\n      "PROV_ID": "2578296",\n      "PROV_EFF_DT": "2004-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "ZILAVY",\n      "FST_NM": "PAMELA",\n      "PROV_BTH_DT": "9999-12-31",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1194952309",\n      "PROV_ORIG_EFF_DT": "2004-01-01",\n      "addresses": [\n        {\n          "distance": "2.97254021152994",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 31572",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94131",\n          "LAT_NBR": "37.744776",\n          "LONG_NBR": "-122.438790",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2798376",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.97254021152994",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 31572",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94131",\n          "LAT_NBR": "37.744776",\n          "LONG_NBR": "-122.438790",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "5021347",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.97254021152994",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 31572",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94131",\n          "LAT_NBR": "37.744776",\n          "LONG_NBR": "-122.438790",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "3876447",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.97254021152994",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 31572",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94131",\n          "LAT_NBR": "37.744776",\n          "LONG_NBR": "-122.438790",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "8658727",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.97254021152994",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 31572",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94131",\n          "LAT_NBR": "37.744776",\n          "LONG_NBR": "-122.438790",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2798376",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.97254021152994",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 31572",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94131",\n          "LAT_NBR": "37.744776",\n          "LONG_NBR": "-122.438790",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "5021347",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.97254021152994",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 31572",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94131",\n          "LAT_NBR": "37.744776",\n          "LONG_NBR": "-122.438790",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "3876447",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.97254021152994",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 31572",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94131",\n          "LAT_NBR": "37.744776",\n          "LONG_NBR": "-122.438790",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "8658727",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.15451919658957",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2011-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "360 W Portal Ave Ste A",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94127",\n          "LAT_NBR": "37.737322",\n          "LONG_NBR": "-122.470210",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "3876447",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.15451919658957",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2011-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "360 W Portal Ave Ste A",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94127",\n          "LAT_NBR": "37.737322",\n          "LONG_NBR": "-122.470210",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "8658727",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.27739013628289",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "95 Ora Way Unit F202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94131",\n          "LAT_NBR": "37.740297",\n          "LONG_NBR": "-122.437560",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2798376",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.27739013628289",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "95 Ora Way Unit F202",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94131",\n          "LAT_NBR": "37.740297",\n          "LONG_NBR": "-122.437560",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "5021347",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2005-10-14",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "3087484",\n      "PROV_ID": "3087484",\n      "PROV_EFF_DT": "2009-09-16",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "O",\n      "LST_NM": "JASENG CENTER FOR ALTERNATIVE MEDICINE",\n      "PROV_BTH_DT": "9999-12-31",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1851540009",\n      "PROV_ORIG_EFF_DT": "2009-09-16",\n      "addresses": [\n        {\n          "distance": "41.5797718598588",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2013-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "100 Saratoga Ave Ste 110",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.325225",\n          "LONG_NBR": "-121.968500",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "6458232",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "42.5539116891529",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2011-05-28",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2858 Stevens Creek Blvd Ste 208",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95128",\n          "LAT_NBR": "37.323156",\n          "LONG_NBR": "-121.944560",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "6458232",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "344.014345329164",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-10-13",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "5901 W Olympic Blvd Ste 500",\n          "ADR_CTY_NM": "Los Angeles",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "90036",\n          "LAT_NBR": "34.057690",\n          "LONG_NBR": "-118.359990",\n          "TEL_AREA_CD": "323",\n          "TEL_NBR": "6774900",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "368.02571854046",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2011-11-23",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2236 Clark Dr",\n          "ADR_CTY_NM": "Fullerton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92833",\n          "LAT_NBR": "33.882652",\n          "LONG_NBR": "-117.964270",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "7737000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "368.02571854046",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2011-11-23",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "2236 Clark Dr",\n          "ADR_CTY_NM": "Fullerton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92833",\n          "LAT_NBR": "33.882652",\n          "LONG_NBR": "-117.964270",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "8705028",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "368.75200831471",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2009-09-16",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1950 Sunnycrest Dr Ste 2000",\n          "ADR_CTY_NM": "Fullerton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92835",\n          "LAT_NBR": "33.893161",\n          "LONG_NBR": "-117.931380",\n          "TEL_AREA_CD": "310",\n          "TEL_NBR": "9446189",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "368.75200831471",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2009-09-16",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1950 Sunnycrest Dr Ste 2000",\n          "ADR_CTY_NM": "Fullerton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92835",\n          "LAT_NBR": "33.893161",\n          "LONG_NBR": "-117.931380",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "7737000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "368.75200831471",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2009-09-16",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1950 Sunnycrest Dr Ste 2000",\n          "ADR_CTY_NM": "Fullerton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92835",\n          "LAT_NBR": "33.893161",\n          "LONG_NBR": "-117.931380",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "8705028",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "368.75200831471",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2011-11-23",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1950 Sunnycrest Dr Ste 2000",\n          "ADR_CTY_NM": "Fullerton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92835",\n          "LAT_NBR": "33.893161",\n          "LONG_NBR": "-117.931380",\n          "TEL_AREA_CD": "310",\n          "TEL_NBR": "9446189",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "368.75200831471",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2011-11-23",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1950 Sunnycrest Dr Ste 2000",\n          "ADR_CTY_NM": "Fullerton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92835",\n          "LAT_NBR": "33.893161",\n          "LONG_NBR": "-117.931380",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "7737000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "368.75200831471",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2011-11-23",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1950 Sunnycrest Dr Ste 2000",\n          "ADR_CTY_NM": "Fullerton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92835",\n          "LAT_NBR": "33.893161",\n          "LONG_NBR": "-117.931380",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "8705028",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "378.483190381545",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2010-12-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "8011 Ebbtide Cir",\n          "ADR_CTY_NM": "Huntington Beach",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92646",\n          "LAT_NBR": "33.663759",\n          "LONG_NBR": "-117.987920",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "7737000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "378.483190381545",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2010-12-29",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "8011 Ebbtide Cir",\n          "ADR_CTY_NM": "Huntington Beach",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92646",\n          "LAT_NBR": "33.663759",\n          "LONG_NBR": "-117.987920",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "8705028",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "386.971401998558",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2012-08-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "113 Waterworks Way Ste 205",\n          "ADR_CTY_NM": "Irvine",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92618",\n          "LAT_NBR": "33.663887",\n          "LONG_NBR": "-117.762420",\n          "TEL_AREA_CD": "714",\n          "TEL_NBR": "8705028",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "386.971401998558",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2012-08-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "113 Waterworks Way Ste 205",\n          "ADR_CTY_NM": "Irvine",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92618",\n          "LAT_NBR": "33.663887",\n          "LONG_NBR": "-117.762420",\n          "TEL_AREA_CD": "949",\n          "TEL_NBR": "3906480",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "448.689287649303",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2013-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "5348 Carroll Canyon Rd Ste 101",\n          "ADR_CTY_NM": "San Diego",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92121",\n          "LAT_NBR": "32.892062",\n          "LONG_NBR": "-117.192240",\n          "TEL_AREA_CD": "858",\n          "TEL_NBR": "7521815",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "452.86533101609",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2011-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "5222 Balboa Ave Ste 73",\n          "ADR_CTY_NM": "San Diego",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "92117",\n          "LAT_NBR": "32.818737",\n          "LONG_NBR": "-117.184170",\n          "TEL_AREA_CD": "858",\n          "TEL_NBR": "7521815",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2009-09-16",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2464234",\n      "PROV_ID": "2464234",\n      "PROV_EFF_DT": "2006-04-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "CRISSMAN",\n      "FST_NM": "JENNIFER",\n      "MDL_NM": "C",\n      "PROV_BTH_DT": "1962-11-24",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1528136306",\n      "PROV_ORIG_EFF_DT": "2003-01-01",\n      "addresses": [\n        {\n          "distance": "3.02994008425926",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2003-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1085 Valencia St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.755607",\n          "LONG_NBR": "-122.420820",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "8215830",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.02994008425926",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2003-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1085 Valencia St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.755607",\n          "LONG_NBR": "-122.420820",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "8215830",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.02994008425926",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2003-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1085 Valencia St",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.755607",\n          "LONG_NBR": "-122.420820",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "9382600",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.0964604451908",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2009-09-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6536 Telegraph Ave Ste 201",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94609",\n          "LAT_NBR": "37.851409",\n          "LONG_NBR": "-122.260170",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "8215830",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.0964604451908",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2009-09-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6536 Telegraph Ave Ste 201",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94609",\n          "LAT_NBR": "37.851409",\n          "LONG_NBR": "-122.260170",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2809203",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.0964604451908",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2009-09-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6536 Telegraph Ave Ste 201",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94609",\n          "LAT_NBR": "37.851409",\n          "LONG_NBR": "-122.260170",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "5950700",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.0964604451908",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2009-09-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "6536 Telegraph Ave Ste 201",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94609",\n          "LAT_NBR": "37.851409",\n          "LONG_NBR": "-122.260170",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "9382600",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.7195007182983",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2006-04-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 20501",\n          "ADR_CTY_NM": "Piedmont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94620",\n          "LAT_NBR": "37.776836",\n          "LONG_NBR": "-122.213170",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "8215830",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.7195007182983",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2006-04-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 20501",\n          "ADR_CTY_NM": "Piedmont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94620",\n          "LAT_NBR": "37.776836",\n          "LONG_NBR": "-122.213170",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2809203",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.7195007182983",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2006-04-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 20501",\n          "ADR_CTY_NM": "Piedmont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94620",\n          "LAT_NBR": "37.776836",\n          "LONG_NBR": "-122.213170",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "5950700",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.7195007182983",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2006-04-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 20501",\n          "ADR_CTY_NM": "Piedmont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94620",\n          "LAT_NBR": "37.776836",\n          "LONG_NBR": "-122.213170",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "9382600",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-10-06",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2652254",\n      "PROV_ID": "2652254",\n      "PROV_EFF_DT": "2005-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "WANG",\n      "FST_NM": "LING",\n      "PROV_BTH_DT": "1957-05-28",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1871664524",\n      "PROV_ORIG_EFF_DT": "2005-01-01",\n      "addresses": [\n        {\n          "distance": "1.55482829992115",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2008-07-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1929 Irving St Ste 205",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.763376",\n          "LONG_NBR": "-122.478580",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7599568",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1.55482829992115",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2008-07-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1929 Irving St Ste 205",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.763376",\n          "LONG_NBR": "-122.478580",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7599586",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "1.55482829992115",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2008-07-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1929 Irving St Ste 205",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.763376",\n          "LONG_NBR": "-122.478580",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "6921886",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2305198",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3761052",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.9990176009391",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2007-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "475 El Camino Real Ste 418",\n          "ADR_CTY_NM": "Millbrae",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94030",\n          "LAT_NBR": "37.602758",\n          "LONG_NBR": "-122.392690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2305198",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.9990176009391",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2007-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "475 El Camino Real Ste 418",\n          "ADR_CTY_NM": "Millbrae",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94030",\n          "LAT_NBR": "37.602758",\n          "LONG_NBR": "-122.392690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3761052",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.9990176009391",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2007-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "475 El Camino Real Ste 418",\n          "ADR_CTY_NM": "Millbrae",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94030",\n          "LAT_NBR": "37.602758",\n          "LONG_NBR": "-122.392690",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "6921886",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.9990176009391",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "475 El Camino Real Ste 418",\n          "ADR_CTY_NM": "Millbrae",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94030",\n          "LAT_NBR": "37.602758",\n          "LONG_NBR": "-122.392690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2305198",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.9990176009391",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "475 El Camino Real Ste 418",\n          "ADR_CTY_NM": "Millbrae",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94030",\n          "LAT_NBR": "37.602758",\n          "LONG_NBR": "-122.392690",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3761052",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.9990176009391",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "475 El Camino Real Ste 418",\n          "ADR_CTY_NM": "Millbrae",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94030",\n          "LAT_NBR": "37.602758",\n          "LONG_NBR": "-122.392690",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "6921886",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.3555968361107",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2008-07-16",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 532",\n          "ADR_CTY_NM": "Millbrae",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94030",\n          "LAT_NBR": "37.595285",\n          "LONG_NBR": "-122.401700",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "7599586",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.3555968361107",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2008-07-16",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 532",\n          "ADR_CTY_NM": "Millbrae",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94030",\n          "LAT_NBR": "37.595285",\n          "LONG_NBR": "-122.401700",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "6921886",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2006-06-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2220086",\n      "PROV_ID": "2220086",\n      "PROV_EFF_DT": "2002-09-17",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "LUU",\n      "FST_NM": "JAMES THINH",\n      "MDL_NM": "R",\n      "PROV_BTH_DT": "1966-11-02",\n      "PROV_GDR_CD": "M",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1104915198",\n      "PROV_ORIG_EFF_DT": "2002-09-17",\n      "addresses": [\n        {\n          "distance": "5.34421323182545",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2009-03-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 60000 File 74010",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94160",\n          "LAT_NBR": "37.739894",\n          "LONG_NBR": "-122.382860",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "8123838",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "30.9747235985467",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3161 Walnut Ave",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94538",\n          "LAT_NBR": "37.550704",\n          "LONG_NBR": "-121.979060",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7961000",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "30.9747235985467",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "13",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3161 Walnut Ave",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94538",\n          "LAT_NBR": "37.550704",\n          "LONG_NBR": "-121.979060",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7961050",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "31.2416382475382",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2009-03-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3200 Kearney St",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94538",\n          "LAT_NBR": "37.549051",\n          "LONG_NBR": "-121.974620",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "4901222",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "40.4520365734469",\n          "ADR_TYP_CD": "P",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1825 Civic Center Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95050",\n          "LAT_NBR": "37.355375",\n          "LONG_NBR": "-121.957160",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "6600120",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "40.4570034723092",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "12",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1825 CIVIC CENTER DR STE 7",\n          "ADR_CTY_NM": "SANTA CLARA",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95050",\n          "LAT_NBR": "37.355274",\n          "LONG_NBR": "-121.957160",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "9852401",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "40.4570034723092",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "12",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1825 CIVIC CENTER DR STE 7",\n          "ADR_CTY_NM": "SANTA CLARA",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95050",\n          "LAT_NBR": "37.355274",\n          "LONG_NBR": "-121.957160",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "9852405",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "44.6248447189139",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1863 ALUM ROCK AVE STE B",\n          "ADR_CTY_NM": "SAN JOSE",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95116",\n          "LAT_NBR": "37.354343",\n          "LONG_NBR": "-121.852600",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "9232595",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "44.6248447189139",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "11",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1863 ALUM ROCK AVE STE B",\n          "ADR_CTY_NM": "SAN JOSE",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95116",\n          "LAT_NBR": "37.354343",\n          "LONG_NBR": "-121.852600",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "9637351",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "45.998552702181",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1364 S King Rd",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95122",\n          "LAT_NBR": "37.336231",\n          "LONG_NBR": "-121.839330",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "9232595",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "45.998552702181",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1364 S King Rd",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95122",\n          "LAT_NBR": "37.336231",\n          "LONG_NBR": "-121.839330",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "9338773",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "47.1982480126852",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-09-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1692 Tully Rd Ste 12",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95122",\n          "LAT_NBR": "37.321981",\n          "LONG_NBR": "-121.826040",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2381665",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "47.1982480126852",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-09-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1692 Tully Rd Ste 12",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95122",\n          "LAT_NBR": "37.321981",\n          "LONG_NBR": "-121.826040",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2381672",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "47.1982480126852",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-09-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1692 Tully Rd Ste 12",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95122",\n          "LAT_NBR": "37.321981",\n          "LONG_NBR": "-121.826040",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "8449671",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "47.1982480126852",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-09-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1692 Tully Rd Ste 12",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95122",\n          "LAT_NBR": "37.321981",\n          "LONG_NBR": "-121.826040",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "9338773",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "47.1982480126852",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-09-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1692 Tully Rd Ste 12",\n          "ADR_CTY_NM": "San Jose",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95122",\n          "LAT_NBR": "37.321981",\n          "LONG_NBR": "-121.826040",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "9637351",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "S"\n        },\n        {\n          "DEG_CD": "DO",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "008",\n          "SPCL_TYP_SML_DESC": "FP",\n          "SPCL_TYP_FULL_DESC": "FAMILY PRACTICE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "Y",\n          "AOA_IND": "Y",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "N",\n          "SPCL_BD_CERT_DT": "2002-03-01",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "2014-12-31",\n          "SPCL_EFF_DT": "2006-01-01",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2002-09-17",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "3048545",\n      "PROV_ID": "3048545",\n      "PROV_EFF_DT": "2013-07-18",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "DAUPHIN",\n      "FST_NM": "MEGAN",\n      "MDL_NM": "E",\n      "PROV_BTH_DT": "1982-09-16",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1144461781",\n      "PROV_ORIG_EFF_DT": "2008-01-01",\n      "addresses": [\n        {\n          "distance": "33.5240558016069",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-11-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43528 Fremont Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94538",\n          "LAT_NBR": "37.514908",\n          "LONG_NBR": "-121.952470",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "5770977",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "33.5240558016069",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-11-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43528 Fremont Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94538",\n          "LAT_NBR": "37.514908",\n          "LONG_NBR": "-121.952470",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "4380128",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "33.5240558016069",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-11-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43528 Fremont Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94538",\n          "LAT_NBR": "37.514908",\n          "LONG_NBR": "-121.952470",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "3876447",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "33.5240558016069",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-11-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43528 Fremont Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94538",\n          "LAT_NBR": "37.514908",\n          "LONG_NBR": "-121.952470",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "8658727",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "33.5240558016069",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2010-11-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43528 Fremont Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94538",\n          "LAT_NBR": "37.514908",\n          "LONG_NBR": "-121.952470",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "8371945",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.3871639587013",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2012-05-07",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43353 Mission Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94539",\n          "LAT_NBR": "37.532668",\n          "LONG_NBR": "-121.920070",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "4380128",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.3871639587013",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2012-05-07",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43353 Mission Blvd",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94539",\n          "LAT_NBR": "37.532668",\n          "LONG_NBR": "-121.920070",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "6239409",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.3871639587013",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2013-07-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43353 Mission Blvd Ste B",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94539",\n          "LAT_NBR": "37.532668",\n          "LONG_NBR": "-121.920070",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "4380128",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.3871639587013",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "10",\n          "ADR_EFF_DT": "2013-07-17",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "43353 Mission Blvd Ste B",\n          "ADR_CTY_NM": "Fremont",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94539",\n          "LAT_NBR": "37.532668",\n          "LONG_NBR": "-121.920070",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "9524001",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "48.592352715536",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2012-05-07",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 6671",\n          "ADR_CTY_NM": "Santa Rosa",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95406",\n          "LAT_NBR": "38.457351",\n          "LONG_NBR": "-122.730040",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "5447331",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "48.592352715536",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2012-05-07",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 6671",\n          "ADR_CTY_NM": "Santa Rosa",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95406",\n          "LAT_NBR": "38.457351",\n          "LONG_NBR": "-122.730040",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "6239409",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "53.872529757741",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7971 W Zayante Rd",\n          "ADR_CTY_NM": "Felton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95018",\n          "LAT_NBR": "37.070198",\n          "LONG_NBR": "-122.057490",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "4380128",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "53.872529757741",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7971 W Zayante Rd",\n          "ADR_CTY_NM": "Felton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95018",\n          "LAT_NBR": "37.070198",\n          "LONG_NBR": "-122.057490",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "9524001",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "53.872529757741",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "9",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "7971 W Zayante Rd",\n          "ADR_CTY_NM": "Felton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95018",\n          "LAT_NBR": "37.070198",\n          "LONG_NBR": "-122.057490",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "5447331",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2009-07-08",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2851568",\n      "PROV_ID": "2851568",\n      "PROV_EFF_DT": "2006-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "BARANZINI",\n      "FST_NM": "GARY",\n      "MDL_NM": "W",\n      "PROV_BTH_DT": "1951-05-29",\n      "PROV_GDR_CD": "M",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1992918742",\n      "PROV_ORIG_EFF_DT": "2006-01-01",\n      "addresses": [\n        {\n          "distance": "32.997434551553",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2013-03-21",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4133 Mohr Ave Ste I",\n          "ADR_CTY_NM": "Pleasanton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94566",\n          "LAT_NBR": "37.682052",\n          "LONG_NBR": "-121.873890",\n          "TEL_AREA_CD": "866",\n          "TEL_NBR": "9294101",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "32.997434551553",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2013-03-21",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4133 Mohr Ave Ste I",\n          "ADR_CTY_NM": "Pleasanton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94566",\n          "LAT_NBR": "37.682052",\n          "LONG_NBR": "-121.873890",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "4260127",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "32.997434551553",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2013-03-21",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4133 Mohr Ave Ste I",\n          "ADR_CTY_NM": "Pleasanton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94566",\n          "LAT_NBR": "37.682052",\n          "LONG_NBR": "-121.873890",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "4615372",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "32.997434551553",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2013-03-21",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4133 Mohr Ave Ste I",\n          "ADR_CTY_NM": "Pleasanton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94566",\n          "LAT_NBR": "37.682052",\n          "LONG_NBR": "-121.873890",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "9984768",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "32.997434551553",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4133 Mohr Ave Ste I",\n          "ADR_CTY_NM": "Pleasanton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94566",\n          "LAT_NBR": "37.682052",\n          "LONG_NBR": "-121.873890",\n          "TEL_AREA_CD": "866",\n          "TEL_NBR": "9294101",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "32.997434551553",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4133 Mohr Ave Ste I",\n          "ADR_CTY_NM": "Pleasanton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94566",\n          "LAT_NBR": "37.682052",\n          "LONG_NBR": "-121.873890",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "4260127",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "32.997434551553",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4133 Mohr Ave Ste I",\n          "ADR_CTY_NM": "Pleasanton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94566",\n          "LAT_NBR": "37.682052",\n          "LONG_NBR": "-121.873890",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "4615372",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "32.997434551553",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4133 Mohr Ave Ste I",\n          "ADR_CTY_NM": "Pleasanton",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94566",\n          "LAT_NBR": "37.682052",\n          "LONG_NBR": "-121.873890",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "9984768",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "56.2757661029876",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2010-06-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1770 N Tracy Blvd Ste A",\n          "ADR_CTY_NM": "Tracy",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95376",\n          "LAT_NBR": "37.748416",\n          "LONG_NBR": "-121.434780",\n          "TEL_AREA_CD": "209",\n          "TEL_NBR": "6270204",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "56.2757661029876",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2010-06-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1770 N Tracy Blvd Ste A",\n          "ADR_CTY_NM": "Tracy",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95376",\n          "LAT_NBR": "37.748416",\n          "LONG_NBR": "-121.434780",\n          "TEL_AREA_CD": "209",\n          "TEL_NBR": "8799764",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "56.2757661029876",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2010-06-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1770 N Tracy Blvd Ste A",\n          "ADR_CTY_NM": "Tracy",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95376",\n          "LAT_NBR": "37.748416",\n          "LONG_NBR": "-121.434780",\n          "TEL_AREA_CD": "866",\n          "TEL_NBR": "9294101",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "56.2757661029876",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2010-06-09",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1770 N Tracy Blvd Ste A",\n          "ADR_CTY_NM": "Tracy",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95376",\n          "LAT_NBR": "37.748416",\n          "LONG_NBR": "-121.434780",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "4615372",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "56.2757661029876",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1770 N Tracy Blvd Ste A",\n          "ADR_CTY_NM": "Tracy",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95376",\n          "LAT_NBR": "37.748416",\n          "LONG_NBR": "-121.434780",\n          "TEL_AREA_CD": "209",\n          "TEL_NBR": "6270204",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "56.2757661029876",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1770 N Tracy Blvd Ste A",\n          "ADR_CTY_NM": "Tracy",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95376",\n          "LAT_NBR": "37.748416",\n          "LONG_NBR": "-121.434780",\n          "TEL_AREA_CD": "209",\n          "TEL_NBR": "8799764",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "56.2757661029876",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1770 N Tracy Blvd Ste A",\n          "ADR_CTY_NM": "Tracy",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95376",\n          "LAT_NBR": "37.748416",\n          "LONG_NBR": "-121.434780",\n          "TEL_AREA_CD": "866",\n          "TEL_NBR": "9294101",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "56.2757661029876",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2013-03-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1770 N Tracy Blvd Ste A",\n          "ADR_CTY_NM": "Tracy",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95376",\n          "LAT_NBR": "37.748416",\n          "LONG_NBR": "-121.434780",\n          "TEL_AREA_CD": "925",\n          "TEL_NBR": "4615372",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2007-12-04",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2520801",\n      "PROV_ID": "2520801",\n      "PROV_EFF_DT": "2004-01-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "O",\n      "LST_NM": "CRYSTAL SPRINGS CHIROPRACTIC",\n      "PROV_BTH_DT": "9999-12-31",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "0",\n      "PROV_ORIG_EFF_DT": "2004-01-01",\n      "addresses": [\n        {\n          "distance": "18.2309538499057",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2007-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "13847 E 14th St Ste 203",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.714418",\n          "LONG_NBR": "-122.141930",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "3573206",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "18.2309538499057",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2007-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "13847 E 14th St Ste 203",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.714418",\n          "LONG_NBR": "-122.141930",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "3573260",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "18.6088621714148",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2007-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "220 Town Green Ln",\n          "ADR_CTY_NM": "Foster City",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94404",\n          "LAT_NBR": "37.557320",\n          "LONG_NBR": "-122.276590",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "3573260",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.3499102638859",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2010-08-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "214 De Anza Blvd",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94402",\n          "LAT_NBR": "37.520459",\n          "LONG_NBR": "-122.337170",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "5741007",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.3499102638859",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2010-08-11",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "214 De Anza Blvd",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94402",\n          "LAT_NBR": "37.520459",\n          "LONG_NBR": "-122.337170",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "5741456",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.3499102638859",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2006-07-05",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "214 De Anza Blvd",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94402",\n          "LAT_NBR": "37.520459",\n          "LONG_NBR": "-122.337170",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "5741007",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.3499102638859",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2006-07-05",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "214 De Anza Blvd",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94402",\n          "LAT_NBR": "37.520459",\n          "LONG_NBR": "-122.337170",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "5741456",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.3499102638859",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2008-02-14",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "214 De Anza Blvd",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94402",\n          "LAT_NBR": "37.520459",\n          "LONG_NBR": "-122.337170",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "5741007",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.3499102638859",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2008-02-14",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "214 De Anza Blvd",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94402",\n          "LAT_NBR": "37.520459",\n          "LONG_NBR": "-122.337170",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "5741456",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.3499102638859",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "214 De Anza Blvd",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94402",\n          "LAT_NBR": "37.520459",\n          "LONG_NBR": "-122.337170",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "5741007",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.3499102638859",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "214 De Anza Blvd",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94402",\n          "LAT_NBR": "37.520459",\n          "LONG_NBR": "-122.337170",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "5741456",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.3499102638859",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2007-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "214 De Anza Blvd",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94402",\n          "LAT_NBR": "37.520459",\n          "LONG_NBR": "-122.337170",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "5741007",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.3499102638859",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2007-11-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "214 De Anza Blvd",\n          "ADR_CTY_NM": "San Mateo",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94402",\n          "LAT_NBR": "37.520459",\n          "LONG_NBR": "-122.337170",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "5741456",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "S",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2007-10-24",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        },\n        {\n          "SPCL_TYP_CD": "035",\n          "SPCL_TYP_SML_DESC": "CM",\n          "SPCL_TYP_FULL_DESC": "CHIROPRACTIC MEDICINE",\n          "HCFA_SPCL_TYP_CD": "3",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2005-04-18",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "3023710",\n      "PROV_ID": "3023710",\n      "PROV_EFF_DT": "2010-04-07",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "TANG",\n      "FST_NM": "SOPHIA HUI-FEN",\n      "PROV_BTH_DT": "1969-05-22",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1700037181",\n      "PROV_ORIG_EFF_DT": "2008-01-01",\n      "addresses": [\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "6151250",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "2062469",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9401688",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9601231",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9601237",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2008-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9601239",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "2062469",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "6151250",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "2062469",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9401688",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9601231",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9601237",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "34.1484059194002",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2009-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "341 Castro St Ste D",\n          "ADR_CTY_NM": "Mountain View",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94041",\n          "LAT_NBR": "37.392055",\n          "LONG_NBR": "-122.079840",\n          "TEL_AREA_CD": "650",\n          "TEL_NBR": "9601239",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2009-04-29",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "1793955",\n      "PROV_ID": "1793955",\n      "PROV_EFF_DT": "2006-04-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "BERNARDI WRIGHT",\n      "FST_NM": "NEIL",\n      "MDL_NM": "S",\n      "PROV_BTH_DT": "1961-07-14",\n      "PROV_GDR_CD": "M",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1518087394",\n      "PROV_ORIG_EFF_DT": "1998-07-14",\n      "addresses": [\n        {\n          "distance": "46.4307934205216",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2005-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15251 National Ave Ste 106",\n          "ADR_CTY_NM": "Los Gatos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95032",\n          "LAT_NBR": "37.246457",\n          "LONG_NBR": "-121.950190",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "3587350",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.4307934205216",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2005-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15251 National Ave Ste 106",\n          "ADR_CTY_NM": "Los Gatos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95032",\n          "LAT_NBR": "37.246457",\n          "LONG_NBR": "-121.950190",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4021849",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.4307934205216",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2005-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15251 National Ave Ste 106",\n          "ADR_CTY_NM": "Los Gatos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95032",\n          "LAT_NBR": "37.246457",\n          "LONG_NBR": "-121.950190",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4257412",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.4307934205216",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "8",\n          "ADR_EFF_DT": "2005-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15251 National Ave Ste 106",\n          "ADR_CTY_NM": "Los Gatos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95032",\n          "LAT_NBR": "37.246457",\n          "LONG_NBR": "-121.950190",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4598319",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.4307934205216",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15251 National Ave Ste 106",\n          "ADR_CTY_NM": "Los Gatos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95032",\n          "LAT_NBR": "37.246457",\n          "LONG_NBR": "-121.950190",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "3587350",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.4307934205216",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15251 National Ave Ste 106",\n          "ADR_CTY_NM": "Los Gatos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95032",\n          "LAT_NBR": "37.246457",\n          "LONG_NBR": "-121.950190",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "4021849",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.4307934205216",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15251 National Ave Ste 106",\n          "ADR_CTY_NM": "Los Gatos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95032",\n          "LAT_NBR": "37.246457",\n          "LONG_NBR": "-121.950190",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4257412",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.4307934205216",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2004-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "15251 National Ave Ste 106",\n          "ADR_CTY_NM": "Los Gatos",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95032",\n          "LAT_NBR": "37.246457",\n          "LONG_NBR": "-121.950190",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4598319",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.5682072614839",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "1998-07-14",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "413 Oxford Way",\n          "ADR_CTY_NM": "Santa Cruz",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95060",\n          "LAT_NBR": "36.953612",\n          "LONG_NBR": "-122.042750",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "3582188",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.5682072614839",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "1998-07-14",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "413 Oxford Way",\n          "ADR_CTY_NM": "Santa Cruz",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95060",\n          "LAT_NBR": "36.953612",\n          "LONG_NBR": "-122.042750",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "3587350",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.5682072614839",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "1998-07-14",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "413 Oxford Way",\n          "ADR_CTY_NM": "Santa Cruz",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95060",\n          "LAT_NBR": "36.953612",\n          "LONG_NBR": "-122.042750",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4257412",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "61.5682072614839",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "1998-07-14",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "413 Oxford Way",\n          "ADR_CTY_NM": "Santa Cruz",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95060",\n          "LAT_NBR": "36.953612",\n          "LONG_NBR": "-122.042750",\n          "TEL_AREA_CD": "831",\n          "TEL_NBR": "4598319",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "1998-07-14",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "1947116",\n      "PROV_ID": "1947116",\n      "PROV_EFF_DT": "2011-08-25",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "WANG",\n      "FST_NM": "HONG",\n      "MDL_NM": "J",\n      "PROV_BTH_DT": "1948-12-15",\n      "PROV_GDR_CD": "M",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1336291418",\n      "PROV_ORIG_EFF_DT": "2000-04-28",\n      "addresses": [\n        {\n          "distance": "19.100151681227",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2012-09-13",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1460 150th Ave",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.706384",\n          "LONG_NBR": "-122.128230",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2764845",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.100151681227",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2012-09-13",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1460 150th Ave",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.706384",\n          "LONG_NBR": "-122.128230",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2768452",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.100151681227",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2012-09-13",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1460 150th Ave",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.706384",\n          "LONG_NBR": "-122.128230",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7863300",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.100151681227",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "6",\n          "ADR_EFF_DT": "2012-09-13",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1460 150th Ave",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.706384",\n          "LONG_NBR": "-122.128230",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7880280",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.100151681227",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2011-08-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1460 150th Ave",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.706384",\n          "LONG_NBR": "-122.128230",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2764845",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.100151681227",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2011-08-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1460 150th Ave",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.706384",\n          "LONG_NBR": "-122.128230",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "2768452",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.100151681227",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2011-08-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1460 150th Ave",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.706384",\n          "LONG_NBR": "-122.128230",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7863300",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.100151681227",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2011-08-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1460 150th Ave",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.706384",\n          "LONG_NBR": "-122.128230",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7880280",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "22.3643817501951",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2011-08-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "100 W Jackson St",\n          "ADR_CTY_NM": "Hayward",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94544",\n          "LAT_NBR": "37.653807",\n          "LONG_NBR": "-122.088740",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7863300",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "22.3643817501951",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2011-08-24",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "100 W Jackson St",\n          "ADR_CTY_NM": "Hayward",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94544",\n          "LAT_NBR": "37.653807",\n          "LONG_NBR": "-122.088740",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "7880280",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "364.31482232601",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-06-25",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "18043 Pioneer Blvd Ste 200",\n          "ADR_CTY_NM": "Artesia",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "90701",\n          "LAT_NBR": "33.867492",\n          "LONG_NBR": "-118.082460",\n          "TEL_AREA_CD": "562",\n          "TEL_NBR": "9243260",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2000-04-28",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2140496",\n      "PROV_ID": "2140496",\n      "PROV_EFF_DT": "2002-01-22",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "YE",\n      "FST_NM": "LIN",\n      "PROV_BTH_DT": "1956-09-23",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1679591655",\n      "PROV_ORIG_EFF_DT": "2002-01-22",\n      "addresses": [\n        {\n          "distance": "37.6747522478981",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "60 Dixon Rd",\n          "ADR_CTY_NM": "Milpitas",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95035",\n          "LAT_NBR": "37.457721",\n          "LONG_NBR": "-121.910370",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2633238",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "37.6747522478981",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "60 Dixon Rd",\n          "ADR_CTY_NM": "Milpitas",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95035",\n          "LAT_NBR": "37.457721",\n          "LONG_NBR": "-121.910370",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2633239",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "37.6747522478981",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-08-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "60 Dixon Rd",\n          "ADR_CTY_NM": "Milpitas",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95035",\n          "LAT_NBR": "37.457721",\n          "LONG_NBR": "-121.910370",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2633238",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "37.6747522478981",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2008-08-06",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "60 Dixon Rd",\n          "ADR_CTY_NM": "Milpitas",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95035",\n          "LAT_NBR": "37.457721",\n          "LONG_NBR": "-121.910370",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2633239",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "37.6747522478981",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "60 Dixon Rd",\n          "ADR_CTY_NM": "Milpitas",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95035",\n          "LAT_NBR": "37.457721",\n          "LONG_NBR": "-121.910370",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2633238",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "37.6747522478981",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "60 Dixon Rd",\n          "ADR_CTY_NM": "Milpitas",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95035",\n          "LAT_NBR": "37.457721",\n          "LONG_NBR": "-121.910370",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2633239",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "40.9968675159392",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-01-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3246 McKinley Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.324210",\n          "LONG_NBR": "-121.986500",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2473203",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "40.9968675159392",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-01-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3246 McKinley Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.324210",\n          "LONG_NBR": "-121.986500",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2473232",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "40.9968675159392",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-01-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3246 McKinley Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.324210",\n          "LONG_NBR": "-121.986500",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2633238",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "40.9968675159392",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-01-22",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "3246 McKinley Dr",\n          "ADR_CTY_NM": "Santa Clara",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95051",\n          "LAT_NBR": "37.324210",\n          "LONG_NBR": "-121.986500",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2633239",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "7944.53004325746",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2012-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "30 DIXON RD",\n          "ADR_CTY_NM": "MILPITAS",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95035",\n          "LAT_NBR": "0.000000",\n          "LONG_NBR": "0.000000",\n          "TEL_AREA_CD": "408",\n          "TEL_NBR": "2633238",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2002-01-22",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "86689",\n      "PROV_ID": "86689",\n      "PROV_EFF_DT": "2012-04-19",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "LI",\n      "FST_NM": "JING",\n      "PROV_BTH_DT": "1953-11-13",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1922193507",\n      "PROV_ORIG_EFF_DT": "1988-06-24",\n      "addresses": [\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2011-03-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2305198",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "2.30270784199584",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2011-03-15",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "PO Box 22043",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94122",\n          "LAT_NBR": "37.753603",\n          "LONG_NBR": "-122.484630",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3988329",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.40502477491217",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2002-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "582A San Jose Ave",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.746769",\n          "LONG_NBR": "-122.421750",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2821880",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.40502477491217",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2002-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "582A San Jose Ave",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.746769",\n          "LONG_NBR": "-122.421750",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3761052",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.40502477491217",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2002-10-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "582A San Jose Ave",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.746769",\n          "LONG_NBR": "-122.421750",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6541531",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.40502477491217",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2010-12-02",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "582A San Jose Ave",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.746769",\n          "LONG_NBR": "-122.421750",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2821880",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.40502477491217",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2010-12-02",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "582A San Jose Ave",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.746769",\n          "LONG_NBR": "-122.421750",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "3761052",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "3.40502477491217",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "7",\n          "ADR_EFF_DT": "2010-12-02",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "582A San Jose Ave",\n          "ADR_CTY_NM": "San Francisco",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94110",\n          "LAT_NBR": "37.746769",\n          "LONG_NBR": "-122.421750",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6541531",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.31264500442",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2000-06-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4414 Piedmont Ave",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94611",\n          "LAT_NBR": "37.830446",\n          "LONG_NBR": "-122.246840",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "2821880",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.31264500442",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2000-06-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4414 Piedmont Ave",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94611",\n          "LAT_NBR": "37.830446",\n          "LONG_NBR": "-122.246840",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6541531",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "12.31264500442",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "S",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2000-06-20",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "4414 Piedmont Ave",\n          "ADR_CTY_NM": "Oakland",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94611",\n          "LAT_NBR": "37.830446",\n          "LONG_NBR": "-122.246840",\n          "TEL_AREA_CD": "510",\n          "TEL_NBR": "6541567",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "1988-06-24",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2185980",\n      "PROV_ID": "2185980",\n      "PROV_EFF_DT": "2002-06-04",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "SIRA",\n      "FST_NM": "ANCA",\n      "PROV_BTH_DT": "9999-12-31",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1710111844",\n      "PROV_ORIG_EFF_DT": "2002-06-04",\n      "addresses": [\n        {\n          "distance": "13.5843175172059",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2002-06-04",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1299 4th St Ste 208",\n          "ADR_CTY_NM": "San Rafael",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94901",\n          "LAT_NBR": "37.973284",\n          "LONG_NBR": "-122.530590",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4567808",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.5843175172059",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2006-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1299 4th St Ste 208",\n          "ADR_CTY_NM": "San Rafael",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94901",\n          "LAT_NBR": "37.973284",\n          "LONG_NBR": "-122.530590",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4567808",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.8651663772445",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1938 4th St Ste A",\n          "ADR_CTY_NM": "San Rafael",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94901",\n          "LAT_NBR": "37.974732",\n          "LONG_NBR": "-122.542440",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4567808",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.8651663772445",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1938 4th St Ste A",\n          "ADR_CTY_NM": "San Rafael",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94901",\n          "LAT_NBR": "37.974732",\n          "LONG_NBR": "-122.542440",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "3876447",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.8651663772445",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1938 4th St Ste A",\n          "ADR_CTY_NM": "San Rafael",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94901",\n          "LAT_NBR": "37.974732",\n          "LONG_NBR": "-122.542440",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "8651831",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.8651663772445",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2010-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1938 4th St Ste A",\n          "ADR_CTY_NM": "San Rafael",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94901",\n          "LAT_NBR": "37.974732",\n          "LONG_NBR": "-122.542440",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "8658727",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.8651663772445",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-07-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1938 4th St Ste A",\n          "ADR_CTY_NM": "San Rafael",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94901",\n          "LAT_NBR": "37.974732",\n          "LONG_NBR": "-122.542440",\n          "TEL_AREA_CD": "415",\n          "TEL_NBR": "4567808",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.8651663772445",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-07-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1938 4th St Ste A",\n          "ADR_CTY_NM": "San Rafael",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94901",\n          "LAT_NBR": "37.974732",\n          "LONG_NBR": "-122.542440",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "3876447",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.8651663772445",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-07-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1938 4th St Ste A",\n          "ADR_CTY_NM": "San Rafael",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94901",\n          "LAT_NBR": "37.974732",\n          "LONG_NBR": "-122.542440",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "8651831",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "13.8651663772445",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-07-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1938 4th St Ste A",\n          "ADR_CTY_NM": "San Rafael",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94901",\n          "LAT_NBR": "37.974732",\n          "LONG_NBR": "-122.542440",\n          "TEL_AREA_CD": "530",\n          "TEL_NBR": "8658727",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2002-06-04",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "N",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    },\n    {\n      "id": "2399455",\n      "PROV_ID": "2399455",\n      "PROV_EFF_DT": "2006-04-01",\n      "PROV_CANC_DT": "9999-12-31",\n      "PROV_TYP_CD": "P",\n      "LST_NM": "LI",\n      "FST_NM": "LINDA",\n      "MDL_NM": "D",\n      "PROV_BTH_DT": "1960-11-25",\n      "PROV_GDR_CD": "F",\n      "SOC_SECUR_NBR": "*****",\n      "NAT_PROV_ID_NBR": "1548331051",\n      "PROV_ORIG_EFF_DT": "2003-01-01",\n      "addresses": [\n        {\n          "distance": "19.100151681227",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2011-08-03",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1460 150th Ave",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.706384",\n          "LONG_NBR": "-122.128230",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "4512165",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "19.100151681227",\n          "ADR_TYP_CD": "H",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "2",\n          "ADR_EFF_DT": "2011-08-03",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1460 150th Ave",\n          "ADR_CTY_NM": "San Leandro",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94578",\n          "LAT_NBR": "37.706384",\n          "LONG_NBR": "-122.128230",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "4517426",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.944293233412",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-08-03",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1690 W Texas St Ste 1W",\n          "ADR_CTY_NM": "Fairfield",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94533",\n          "LAT_NBR": "38.249428",\n          "LONG_NBR": "-122.058970",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "4272600",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "38.944293233412",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "3",\n          "ADR_EFF_DT": "2011-08-03",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1690 W Texas St Ste 1W",\n          "ADR_CTY_NM": "Fairfield",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "94533",\n          "LAT_NBR": "38.249428",\n          "LONG_NBR": "-122.058970",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "4272662",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.1892092113892",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2011-08-03",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "177 Butcher Rd Ste A",\n          "ADR_CTY_NM": "Vacaville",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95687",\n          "LAT_NBR": "38.343932",\n          "LONG_NBR": "-121.997770",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "4512165",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.1892092113892",\n          "ADR_TYP_CD": "L",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "4",\n          "ADR_EFF_DT": "2011-08-03",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "177 Butcher Rd Ste A",\n          "ADR_CTY_NM": "Vacaville",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95687",\n          "LAT_NBR": "38.343932",\n          "LONG_NBR": "-121.997770",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "4517426",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.4278194345385",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2003-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "831 Alamo Dr Ste 6C",\n          "ADR_CTY_NM": "Vacaville",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95688",\n          "LAT_NBR": "38.348618",\n          "LONG_NBR": "-121.998810",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "4558262",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.4278194345385",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "S",\n          "ADR_SEQ_NBR": "1",\n          "ADR_EFF_DT": "2003-01-01",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "831 Alamo Dr Ste 6C",\n          "ADR_CTY_NM": "Vacaville",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95688",\n          "LAT_NBR": "38.348618",\n          "LONG_NBR": "-121.998810",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "4558628",\n          "EXTENSION": "0"\n        },\n        {\n          "distance": "46.5296810616032",\n          "ADR_TYP_CD": "D",\n          "TAX_ID_NBR": "******",\n          "ADR_TAX_ID_TYP": "T",\n          "ADR_PRI_CD": "P",\n          "ADR_SEQ_NBR": "5",\n          "ADR_EFF_DT": "2013-01-16",\n          "ADR_CANC_DT": "9999-12-31",\n          "ADR_LN_1": "1961 Alamo Dr Ste C",\n          "ADR_CTY_NM": "Vacaville",\n          "ADR_ST_CD": "CA",\n          "ADR_ZIP_CD": "95687",\n          "LAT_NBR": "38.335638",\n          "LONG_NBR": "-121.971280",\n          "TEL_AREA_CD": "707",\n          "TEL_NBR": "4558628",\n          "EXTENSION": "0"\n        }\n      ],\n      "degrees": [\n        {\n          "DEG_CD": "CA",\n          "DEG_ACTV_CD": "A",\n          "DEG_PRI_CD": "P"\n        }\n      ],\n      "specialties": [\n        {\n          "SPCL_TYP_CD": "201",\n          "SPCL_TYP_SML_DESC": "ACU",\n          "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n          "HCFA_SPCL_TYP_CD": "0",\n          "ABMS_SPCL_IND": "N",\n          "AOA_IND": "N",\n          "MHSA_IND": "N",\n          "SUB_SPCL_TYP_IND": "P",\n          "SPCL_SUB_TYP_CD": "S",\n          "SPCL_PRI_CD": "P",\n          "SPCL_BD_CERT_CD": "X",\n          "SPCL_BD_CERT_DT": "9999-12-31",\n          "SPCL_BD_EXAM_DT": "9999-12-31",\n          "SQCL_BD_EXPIR_DT": "9999-12-31",\n          "SPCL_EFF_DT": "2004-03-30",\n          "SPCL_CANC_DT": "9999-12-31",\n          "PRAC_SPCL_IND": "Y",\n          "DIR_IND": "Y",\n          "RES_IND": "N"\n        }\n      ],\n      "affiliations": []\n    }\n  ],\n  "metadata": {\n    "total": 2234,\n    "pageSize": 33,\n    "offset": 0,\n    "facets": {\n      "PROV_GDR_CD": [\n        {\n          "value": "F",\n          "count": 916\n        },\n        {\n          "value": "M",\n          "count": 606\n        },\n        {\n          "value": "U",\n          "count": 104\n        }\n      ],\n      "ADR_CTY_NM": [\n        {\n          "value": "San Francisco",\n          "count": 1251\n        },\n        {\n          "value": "San Jose",\n          "count": 550\n        },\n        {\n          "value": "Oakland",\n          "count": 302\n        },\n        {\n          "value": "Palo Alto",\n          "count": 296\n        },\n        {\n          "value": "Sunnyvale",\n          "count": 208\n        },\n        {\n          "value": "Fremont",\n          "count": 188\n        },\n        {\n          "value": "Santa Clara",\n          "count": 179\n        },\n        {\n          "value": "Berkeley",\n          "count": 174\n        },\n        {\n          "value": "Mountain View",\n          "count": 156\n        },\n        {\n          "value": "San Mateo",\n          "count": 126\n        }\n      ],\n      "SPCL_TYP_FULL_DESC": [\n        {\n          "value": "ACUPUNCTURE",\n          "count": 2234\n        },\n        {\n          "value": "CHIROPRACTIC MEDICINE",\n          "count": 37\n        },\n        {\n          "value": "PHYSICAL THERAPY",\n          "count": 12\n        },\n        {\n          "value": "DOCTOR OF NATUROPATHY",\n          "count": 11\n        },\n        {\n          "value": "FAMILY PRACTICE",\n          "count": 8\n        },\n        {\n          "value": "CLINICAL PSYCHOLOGY",\n          "count": 6\n        },\n        {\n          "value": "UNKNOWN SPECIAL PHYSICIAN",\n          "count": 6\n        },\n        {\n          "value": "MASSAGE THERAPY",\n          "count": 5\n        },\n        {\n          "value": "ANESTHESIOLOGY",\n          "count": 4\n        },\n        {\n          "value": "INTERNAL MEDICINE",\n          "count": 4\n        }\n      ]\n    }\n  }\n}\n';});


define('text!../test/fixtures/provider/provider_2652254.json',[],function () { return '{\n  "id": "2652254",\n  "PROV_ID": "2652254",\n  "PROV_EFF_DT": "2005-01-01",\n  "PROV_CANC_DT": "9999-12-31",\n  "PROV_TYP_CD": "P",\n  "LST_NM": "WANG",\n  "FST_NM": "LING",\n  "PROV_BTH_DT": "1957-05-28",\n  "PROV_GDR_CD": "F",\n  "SOC_SECUR_NBR": "*****",\n  "NAT_PROV_ID_NBR": "1871664524",\n  "PROV_ORIG_EFF_DT": "2005-01-01",\n  "addresses": [\n    {\n      "ADR_TYP_CD": "H",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "S",\n      "ADR_PRI_CD": "S",\n      "ADR_SEQ_NBR": "3",\n      "ADR_EFF_DT": "2008-07-16",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "PO Box 532",\n      "ADR_CTY_NM": "Millbrae",\n      "ADR_ST_CD": "CA",\n      "ADR_ZIP_CD": "94030",\n      "LAT_NBR": "37.595285",\n      "LONG_NBR": "-122.401700",\n      "TEL_AREA_CD": "415",\n      "TEL_NBR": "7599586",\n      "EXTENSION": "0"\n    },\n    {\n      "ADR_TYP_CD": "H",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "S",\n      "ADR_PRI_CD": "S",\n      "ADR_SEQ_NBR": "3",\n      "ADR_EFF_DT": "2008-07-16",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "PO Box 532",\n      "ADR_CTY_NM": "Millbrae",\n      "ADR_ST_CD": "CA",\n      "ADR_ZIP_CD": "94030",\n      "LAT_NBR": "37.595285",\n      "LONG_NBR": "-122.401700",\n      "TEL_AREA_CD": "650",\n      "TEL_NBR": "6921886",\n      "EXTENSION": "0"\n    },\n    {\n      "ADR_TYP_CD": "H",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "T",\n      "ADR_PRI_CD": "S",\n      "ADR_SEQ_NBR": "6",\n      "ADR_EFF_DT": "2011-01-01",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "PO Box 22043",\n      "ADR_CTY_NM": "San Francisco",\n      "ADR_ST_CD": "CA",\n      "ADR_ZIP_CD": "94122",\n      "LAT_NBR": "37.753603",\n      "LONG_NBR": "-122.484630",\n      "TEL_AREA_CD": "415",\n      "TEL_NBR": "2305198",\n      "EXTENSION": "0"\n    },\n    {\n      "ADR_TYP_CD": "H",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "T",\n      "ADR_PRI_CD": "S",\n      "ADR_SEQ_NBR": "6",\n      "ADR_EFF_DT": "2011-01-01",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "PO Box 22043",\n      "ADR_CTY_NM": "San Francisco",\n      "ADR_ST_CD": "CA",\n      "ADR_ZIP_CD": "94122",\n      "LAT_NBR": "37.753603",\n      "LONG_NBR": "-122.484630",\n      "TEL_AREA_CD": "415",\n      "TEL_NBR": "3761052",\n      "EXTENSION": "0"\n    },\n    {\n      "ADR_TYP_CD": "L",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "S",\n      "ADR_PRI_CD": "P",\n      "ADR_SEQ_NBR": "4",\n      "ADR_EFF_DT": "2008-07-17",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "1929 Irving St Ste 205",\n      "ADR_CTY_NM": "San Francisco",\n      "ADR_ST_CD": "CA",\n      "ADR_ZIP_CD": "94122",\n      "LAT_NBR": "37.763376",\n      "LONG_NBR": "-122.478580",\n      "TEL_AREA_CD": "415",\n      "TEL_NBR": "7599568",\n      "EXTENSION": "0"\n    },\n    {\n      "ADR_TYP_CD": "L",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "S",\n      "ADR_PRI_CD": "P",\n      "ADR_SEQ_NBR": "4",\n      "ADR_EFF_DT": "2008-07-17",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "1929 Irving St Ste 205",\n      "ADR_CTY_NM": "San Francisco",\n      "ADR_ST_CD": "CA",\n      "ADR_ZIP_CD": "94122",\n      "LAT_NBR": "37.763376",\n      "LONG_NBR": "-122.478580",\n      "TEL_AREA_CD": "415",\n      "TEL_NBR": "7599586",\n      "EXTENSION": "0"\n    },\n    {\n      "ADR_TYP_CD": "L",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "S",\n      "ADR_PRI_CD": "P",\n      "ADR_SEQ_NBR": "4",\n      "ADR_EFF_DT": "2008-07-17",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "1929 Irving St Ste 205",\n      "ADR_CTY_NM": "San Francisco",\n      "ADR_ST_CD": "CA",\n      "ADR_ZIP_CD": "94122",\n      "LAT_NBR": "37.763376",\n      "LONG_NBR": "-122.478580",\n      "TEL_AREA_CD": "650",\n      "TEL_NBR": "6921886",\n      "EXTENSION": "0"\n    },\n    {\n      "ADR_TYP_CD": "L",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "S",\n      "ADR_PRI_CD": "S",\n      "ADR_SEQ_NBR": "2",\n      "ADR_EFF_DT": "2007-01-01",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "475 El Camino Real Ste 418",\n      "ADR_CTY_NM": "Millbrae",\n      "ADR_ST_CD": "CA",\n      "ADR_ZIP_CD": "94030",\n      "LAT_NBR": "37.602758",\n      "LONG_NBR": "-122.392690",\n      "TEL_AREA_CD": "415",\n      "TEL_NBR": "2305198",\n      "EXTENSION": "0"\n    },\n    {\n      "ADR_TYP_CD": "L",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "S",\n      "ADR_PRI_CD": "S",\n      "ADR_SEQ_NBR": "2",\n      "ADR_EFF_DT": "2007-01-01",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "475 El Camino Real Ste 418",\n      "ADR_CTY_NM": "Millbrae",\n      "ADR_ST_CD": "CA",\n      "ADR_ZIP_CD": "94030",\n      "LAT_NBR": "37.602758",\n      "LONG_NBR": "-122.392690",\n      "TEL_AREA_CD": "415",\n      "TEL_NBR": "3761052",\n      "EXTENSION": "0"\n    },\n    {\n      "ADR_TYP_CD": "L",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "S",\n      "ADR_PRI_CD": "S",\n      "ADR_SEQ_NBR": "2",\n      "ADR_EFF_DT": "2007-01-01",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "475 El Camino Real Ste 418",\n      "ADR_CTY_NM": "Millbrae",\n      "ADR_ST_CD": "CA",\n      "ADR_ZIP_CD": "94030",\n      "LAT_NBR": "37.602758",\n      "LONG_NBR": "-122.392690",\n      "TEL_AREA_CD": "650",\n      "TEL_NBR": "6921886",\n      "EXTENSION": "0"\n    },\n    {\n      "ADR_TYP_CD": "L",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "T",\n      "ADR_PRI_CD": "S",\n      "ADR_SEQ_NBR": "7",\n      "ADR_EFF_DT": "2011-01-01",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "475 El Camino Real Ste 418",\n      "ADR_CTY_NM": "Millbrae",\n      "ADR_ST_CD": "CA",\n      "ADR_ZIP_CD": "94030",\n      "LAT_NBR": "37.602758",\n      "LONG_NBR": "-122.392690",\n      "TEL_AREA_CD": "415",\n      "TEL_NBR": "2305198",\n      "EXTENSION": "0"\n    },\n    {\n      "ADR_TYP_CD": "L",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "T",\n      "ADR_PRI_CD": "S",\n      "ADR_SEQ_NBR": "7",\n      "ADR_EFF_DT": "2011-01-01",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "475 El Camino Real Ste 418",\n      "ADR_CTY_NM": "Millbrae",\n      "ADR_ST_CD": "CA",\n      "ADR_ZIP_CD": "94030",\n      "LAT_NBR": "37.602758",\n      "LONG_NBR": "-122.392690",\n      "TEL_AREA_CD": "415",\n      "TEL_NBR": "3761052",\n      "EXTENSION": "0"\n    },\n    {\n      "ADR_TYP_CD": "L",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "T",\n      "ADR_PRI_CD": "S",\n      "ADR_SEQ_NBR": "7",\n      "ADR_EFF_DT": "2011-01-01",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "475 El Camino Real Ste 418",\n      "ADR_CTY_NM": "Millbrae",\n      "ADR_ST_CD": "CA",\n      "ADR_ZIP_CD": "94030",\n      "LAT_NBR": "37.602758",\n      "LONG_NBR": "-122.392690",\n      "TEL_AREA_CD": "650",\n      "TEL_NBR": "6921886",\n      "EXTENSION": "0"\n    }\n  ],\n  "degrees": [\n    {\n      "DEG_CD": "CA",\n      "DEG_ACTV_CD": "A",\n      "DEG_PRI_CD": "P"\n    }\n  ],\n  "specialties": [\n    {\n      "SPCL_TYP_CD": "201",\n      "SPCL_TYP_SML_DESC": "ACU",\n      "SPCL_TYP_FULL_DESC": "ACUPUNCTURE",\n      "HCFA_SPCL_TYP_CD": "0",\n      "ABMS_SPCL_IND": "N",\n      "AOA_IND": "N",\n      "MHSA_IND": "N",\n      "SUB_SPCL_TYP_IND": "P",\n      "SPCL_SUB_TYP_CD": "S",\n      "SPCL_PRI_CD": "P",\n      "SPCL_BD_CERT_CD": "X",\n      "SPCL_BD_CERT_DT": "9999-12-31",\n      "SPCL_BD_EXAM_DT": "9999-12-31",\n      "SQCL_BD_EXPIR_DT": "9999-12-31",\n      "SPCL_EFF_DT": "2006-06-01",\n      "SPCL_CANC_DT": "9999-12-31",\n      "PRAC_SPCL_IND": "Y",\n      "DIR_IND": "N",\n      "RES_IND": "N"\n    }\n  ],\n  "affiliations": []\n}\n';});


define('text!../test/fixtures/provider/provider_2131213.json',[],function () { return '{\n  "id": "2131213",\n  "PROV_ID": "2131213",\n  "PROV_EFF_DT": "2001-12-28",\n  "PROV_CANC_DT": "9999-12-31",\n  "PROV_TYP_CD": "P",\n  "LST_NM": "LEACH",\n  "FST_NM": "JENNIE",\n  "MDL_NM": "A",\n  "PROV_BTH_DT": "1961-02-15",\n  "PROV_GDR_CD": "F",\n  "SOC_SECUR_NBR": "*****",\n  "NAT_PROV_ID_NBR": "1598795023",\n  "PROV_ORIG_EFF_DT": "2001-12-28",\n  "addresses": [\n    {\n      "ADR_TYP_CD": "D",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "T",\n      "ADR_PRI_CD": "S",\n      "ADR_SEQ_NBR": "6",\n      "ADR_EFF_DT": "2008-09-19",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "900 College Ave W",\n      "ADR_CTY_NM": "Ladysmith",\n      "ADR_ST_CD": "WI",\n      "ADR_ZIP_CD": "54848",\n      "LAT_NBR": "45.455634",\n      "LONG_NBR": "-91.109483",\n      "TEL_AREA_CD": "715",\n      "TEL_NBR": "5325561",\n      "EXTENSION": "0"\n    },\n    {\n      "ADR_TYP_CD": "D",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "T",\n      "ADR_PRI_CD": "S",\n      "ADR_SEQ_NBR": "9",\n      "ADR_EFF_DT": "2005-01-01",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "2251 N Shore Dr Ste 100",\n      "ADR_CTY_NM": "Rhinelander",\n      "ADR_ST_CD": "WI",\n      "ADR_ZIP_CD": "54501",\n      "LAT_NBR": "45.637300",\n      "LONG_NBR": "-89.361000",\n      "TEL_AREA_CD": "715",\n      "TEL_NBR": "3612000",\n      "EXTENSION": "0"\n    },\n    {\n      "ADR_TYP_CD": "H",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "T",\n      "ADR_PRI_CD": "S",\n      "ADR_SEQ_NBR": "1",\n      "ADR_EFF_DT": "2001-12-28",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "1020 Kabel Ave",\n      "ADR_CTY_NM": "Rhinelander",\n      "ADR_ST_CD": "WI",\n      "ADR_ZIP_CD": "54501",\n      "LAT_NBR": "45.628492",\n      "LONG_NBR": "-89.412626",\n      "TEL_AREA_CD": "715",\n      "TEL_NBR": "3614700",\n      "EXTENSION": "0"\n    },\n    {\n      "ADR_TYP_CD": "H",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "T",\n      "ADR_PRI_CD": "S",\n      "ADR_SEQ_NBR": "1",\n      "ADR_EFF_DT": "2001-12-28",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "1020 Kabel Ave",\n      "ADR_CTY_NM": "Rhinelander",\n      "ADR_ST_CD": "WI",\n      "ADR_ZIP_CD": "54501",\n      "LAT_NBR": "45.628492",\n      "LONG_NBR": "-89.412626",\n      "TEL_AREA_CD": "715",\n      "TEL_NBR": "3614769",\n      "EXTENSION": "0"\n    },\n    {\n      "ADR_TYP_CD": "H",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "T",\n      "ADR_PRI_CD": "S",\n      "ADR_SEQ_NBR": "10",\n      "ADR_EFF_DT": "2007-11-27",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "1000 N Oak Ave",\n      "ADR_CTY_NM": "Marshfield",\n      "ADR_ST_CD": "WI",\n      "ADR_ZIP_CD": "54449",\n      "LAT_NBR": "44.679245",\n      "LONG_NBR": "-90.175664",\n      "TEL_AREA_CD": "715",\n      "TEL_NBR": "3875511",\n      "EXTENSION": "0"\n    },\n    {\n      "ADR_TYP_CD": "H",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "T",\n      "ADR_PRI_CD": "S",\n      "ADR_SEQ_NBR": "10",\n      "ADR_EFF_DT": "2007-11-27",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "1000 N Oak Ave",\n      "ADR_CTY_NM": "Marshfield",\n      "ADR_ST_CD": "WI",\n      "ADR_ZIP_CD": "54449",\n      "LAT_NBR": "44.679245",\n      "LONG_NBR": "-90.175664",\n      "TEL_AREA_CD": "715",\n      "TEL_NBR": "7623212",\n      "EXTENSION": "0"\n    },\n    {\n      "ADR_TYP_CD": "H",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "T",\n      "ADR_PRI_CD": "S",\n      "ADR_SEQ_NBR": "11",\n      "ADR_EFF_DT": "2013-09-25",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "PO Box 860001",\n      "ADR_CTY_NM": "Minneapolis",\n      "ADR_ST_CD": "MN",\n      "ADR_ZIP_CD": "55486",\n      "LAT_NBR": "44.977214",\n      "LONG_NBR": "-93.269688",\n      "TEL_AREA_CD": "877",\n      "TEL_NBR": "3046332",\n      "EXTENSION": "0"\n    },\n    {\n      "ADR_TYP_CD": "L",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "T",\n      "ADR_PRI_CD": "P",\n      "ADR_SEQ_NBR": "12",\n      "ADR_EFF_DT": "2013-09-25",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "10101 S 27th St",\n      "ADR_CTY_NM": "Franklin",\n      "ADR_ST_CD": "WI",\n      "ADR_ZIP_CD": "53132",\n      "LAT_NBR": "42.861576",\n      "LONG_NBR": "-87.951866",\n      "TEL_AREA_CD": "414",\n      "TEL_NBR": "3255079",\n      "EXTENSION": "0"\n    },\n    {\n      "ADR_TYP_CD": "L",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "T",\n      "ADR_PRI_CD": "S",\n      "ADR_SEQ_NBR": "2",\n      "ADR_EFF_DT": "2001-12-28",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "930 E Wall St",\n      "ADR_CTY_NM": "Eagle River",\n      "ADR_ST_CD": "WI",\n      "ADR_ZIP_CD": "54521",\n      "LAT_NBR": "45.914888",\n      "LONG_NBR": "-89.237793",\n      "TEL_AREA_CD": "715",\n      "TEL_NBR": "4773000",\n      "EXTENSION": "0"\n    },\n    {\n      "ADR_TYP_CD": "L",\n      "TAX_ID_NBR": "******",\n      "ADR_TAX_ID_TYP": "T",\n      "ADR_PRI_CD": "S",\n      "ADR_SEQ_NBR": "8",\n      "ADR_EFF_DT": "2007-11-27",\n      "ADR_CANC_DT": "9999-12-31",\n      "ADR_LN_1": "50 Sherry Ave",\n      "ADR_CTY_NM": "Park Falls",\n      "ADR_ST_CD": "WI",\n      "ADR_ZIP_CD": "54552",\n      "LAT_NBR": "45.931135",\n      "LONG_NBR": "-90.442178",\n      "TEL_AREA_CD": "715",\n      "TEL_NBR": "7623212",\n      "EXTENSION": "0"\n    }\n  ],\n  "degrees": [\n    {\n      "DEG_CD": "MD",\n      "DEG_ACTV_CD": "A",\n      "DEG_PRI_CD": "P"\n    }\n  ],\n  "specialties": [\n    {\n      "SPCL_TYP_CD": "328",\n      "SPCL_TYP_SML_DESC": "UCA",\n      "SPCL_TYP_FULL_DESC": "URGENT CARE MEDICINE",\n      "HCFA_SPCL_TYP_CD": "7",\n      "ABMS_SPCL_IND": "N",\n      "AOA_IND": "N",\n      "MHSA_IND": "N",\n      "SUB_SPCL_TYP_IND": "P",\n      "SPCL_SUB_TYP_CD": "S",\n      "SPCL_PRI_CD": "S",\n      "SPCL_BD_CERT_CD": "N",\n      "SPCL_BD_CERT_DT": "9999-12-31",\n      "SPCL_BD_EXAM_DT": "9999-12-31",\n      "SQCL_BD_EXPIR_DT": "9999-12-31",\n      "SPCL_EFF_DT": "2003-09-08",\n      "SPCL_CANC_DT": "9999-12-31",\n      "PRAC_SPCL_IND": "N",\n      "DIR_IND": "N",\n      "RES_IND": "N"\n    },\n    {\n      "SPCL_TYP_CD": "008",\n      "SPCL_TYP_SML_DESC": "FP",\n      "SPCL_TYP_FULL_DESC": "FAMILY PRACTICE",\n      "HCFA_SPCL_TYP_CD": "0",\n      "ABMS_SPCL_IND": "Y",\n      "AOA_IND": "Y",\n      "MHSA_IND": "N",\n      "SUB_SPCL_TYP_IND": "P",\n      "SPCL_SUB_TYP_CD": "S",\n      "SPCL_PRI_CD": "P",\n      "SPCL_BD_CERT_CD": "C",\n      "SPCL_BD_CERT_DT": "2002-07-12",\n      "SPCL_BD_EXAM_DT": "9999-12-31",\n      "SQCL_BD_EXPIR_DT": "2016-12-31",\n      "SPCL_EFF_DT": "2001-12-28",\n      "SPCL_CANC_DT": "9999-12-31",\n      "PRAC_SPCL_IND": "N",\n      "DIR_IND": "N",\n      "RES_IND": "N"\n    },\n    {\n      "SPCL_TYP_CD": "042",\n      "SPCL_TYP_SML_DESC": "EM",\n      "SPCL_TYP_FULL_DESC": "EMERGENCY MEDICINE",\n      "HCFA_SPCL_TYP_CD": "9",\n      "ABMS_SPCL_IND": "Y",\n      "AOA_IND": "Y",\n      "MHSA_IND": "N",\n      "SUB_SPCL_TYP_IND": "P",\n      "SPCL_SUB_TYP_CD": "S",\n      "SPCL_PRI_CD": "S",\n      "SPCL_BD_CERT_CD": "N",\n      "SPCL_BD_CERT_DT": "9999-12-31",\n      "SPCL_BD_EXAM_DT": "9999-12-31",\n      "SQCL_BD_EXPIR_DT": "9999-12-31",\n      "SPCL_EFF_DT": "2005-03-14",\n      "SPCL_CANC_DT": "9999-12-31",\n      "PRAC_SPCL_IND": "N",\n      "DIR_IND": "N",\n      "RES_IND": "N"\n    }\n  ],\n  "affiliations": [\n    {\n      "AFFIL_PROV_ID": "248601",\n      "AFFIL_TYP_CD": "H",\n      "ADMIT_PRVLG_TYP_CD": "UNK",\n      "HOSP_AFFIL_DIR_IND": "N",\n      "PRI_HOSP_AFFIL_CD": "P",\n      "ACTV_CD": "A"\n    },\n    {\n      "AFFIL_PROV_ID": "2893624",\n      "AFFIL_TYP_CD": "H",\n      "ADMIT_PRVLG_TYP_CD": "UNK",\n      "HOSP_AFFIL_DIR_IND": "N",\n      "PRI_HOSP_AFFIL_CD": "S",\n      "ACTV_CD": "A"\n    }\n  ]\n}\n';});


define('text!../test/fixtures/provider/specialties_A.json',[],function () { return '["ACUPUNCTURE","ADDICTION MEDICINE","ADDICTION MEDICINE SPECIALISTS","ADDICTION PSYCHIATRY","ADOLESCENT MEDICINE","ADVANCED PRACTICE REGISTERED PSYCHIATRIC NURSE SP","ADVANCED REGISTERED NURSE PRACTITIONER","AEROSPACE MEDICINE","ALCOHOL \\u0026 DRUG COUNSELOR","ALLERGY","ALLERGY AND IMMUNOLOGY","AMBULANCE SERVICES","AMBULATORY SURGERY CENTER (FREE STANDING)","ANATOMIC \\u0026 CLINICAL PATHOLOGY","ANATOMIC PATHOLOGY","ANESTHESIOLOGY","ATHLETIC TRAINER","AUDIOLOGY","AUTISM TUTOR"]\n';});


define('text!../test/fixtures/provider/specialties_B.json',[],function () { return '["BACK AND SPINE SURGERY","BEHAVIORAL ANALYST - AUTISM","BEHAVIORAL PEDIATRICS","BLOOD BANKING","BLOOD BANKING/TRANSFUSION MEDICINE","BONE MARROW TRANSPLANT","BREAST RECONSTRUCTION","BREAST SURGERY","BRONCO ESOPHAGOLOGY"]';});


define('text!../test/fixtures/provider/specialties_C.json',[],function () { return '["CARDIAC DIAGNOSTIC","CARDIAC REHAB","CARDIOLOGY","CARDIOVASCULAR DISEASE","CARDIOVASCULAR SURGERY","CERTIFIED DIABETIC EDUCATOR","CHEMICAL PATHOLOGY","CHEST AND RESPIRATORY THERAPY","CHILD \\u0026 ADOLESCENT PSYCHIATRY","CHILD NEUROLOGY","CHILD PSYCHIATRY","CHILD PSYCHOLOGY","CHIROPRACTIC MEDICINE","CHRISTIAN SCIENCE PRACTITIONER","CLINIC","CLINICAL BIOCHEMICAL GENETICS","CLINICAL BIOCHEMICAL/MOLECULAR GENETICS","CLINICAL CARDIAC ELECTROPHYSIOLOGY","CLINICAL CYTOGENETICS","CLINICAL GENETICS","CLINICAL MOLECULAR GENETICS","CLINICAL NEUROPHYSIOLOGY","CLINICAL PATHOLOGY","CLINICAL PHARMACOLOGY","CLINICAL PSYCHOLOGY","CLINICAL/MEDICAL SOCIAL WORKER","COLON AND RECTAL SURGERY","COMMUNITY MENTAL HEALTH CENTER","CORNEA SURGERY","CRISIS DIVERSION","CRITICAL CARE MEDICINE","CUTANEOUS MICROGRAPHIC SURG \\u0026 ONC","CYTOPATHOLOGY"]';});


define('text!../test/fixtures/provider/specialties_D.json',[],function () { return '["DENTAL MEDICINE","DERMAPATHOLOGY","DERMATOLOGY","DERMATOLOGY IMMUNOLOGY","DIABETES","DIAG RAD WITH SPECIAL COMPETENCE IN NUCLEAR RAD","DIAGNOSTIC LAB IMMUNOLOGY","DIAGNOSTIC RADIOLOGY","DIGESTIVE DISEASES","DME MEDICAL SUPPLY COMPANY","DME ORTHOTICS/PROSTHETICS ONLY","DOCTOR OF NAPROPATHY","DOCTOR OF NATUROPATHY"]';});


define('text!../test/fixtures/provider/specialties_E.json',[],function () { return '["EARLY INTERVENTION","EMERGENCY MEDICINE","EMPLOYEE ASSISTANCE PROGRAM (EAP) COUNSELOR","EMPOWERMENT COACH","ENDOCRINOLOGY, DIABETES, AND METABOLISM","ENDODONTICS","ENDOSCOPY"]';});


define('text!../test/fixtures/provider/specialties_F.json',[],function () { return '["FAMILY NURSE PRACTITIONER","FAMILY PLANNING","FAMILY PRACTICE","FAMILY PRACTICE SPECIALIST","FLEXIBLE","FORENSIC PATHOLOGY","FORENSIC PSYCHIATRY"]';});


define('text!../test/fixtures/provider/specialties_S.json',[],function () { return '["SHOULDER SURGERY","SKILLED NURSING FACILITY","SLEEP STUDY","SPEECH PATHOLOGY","SPEECH THERAPY","SPINAL CORD INJURY MEDICINE","SPORTS MEDICINE","SUBSTANCE ABUSE SERVICES","SURGERY","SURGERY ABDOMINAL","SURGERY HEAD AND NECK","SURGERY TRAUMATIC","SURGICAL CRITICAL CARE","SURGICAL ONCOLOGISTS","SURGICAL TECHNICIAN"]';});

define('test.env',["angular-mocks", "text!../test/fixtures/user/sumo_profile.json", "text!../test/fixtures/user/businessadmin_profile.json", "text!../test/fixtures/user/itadmin_profile.json", "text!../test/fixtures/user/dataadmin_profile.json", "text!../test/fixtures/drug/drugs_0.json", "text!../test/fixtures/drug/drugs_100.json", "text!../test/fixtures/drug/drug_1.json", "text!../test/fixtures/drug/drug_2.json", "text!../test/fixtures/drug/drug_3.json", "text!../test/fixtures/provider/providers_0.json", "text!../test/fixtures/provider/providers_100.json", "text!../test/fixtures/provider/provider_2652254.json", "text!../test/fixtures/provider/provider_2131213.json", "text!../test/fixtures/provider/specialties_A.json", "text!../test/fixtures/provider/specialties_B.json", "text!../test/fixtures/provider/specialties_C.json", "text!../test/fixtures/provider/specialties_D.json", "text!../test/fixtures/provider/specialties_E.json", "text!../test/fixtures/provider/specialties_F.json", "text!../test/fixtures/provider/specialties_S.json", "./reactive/EventBus"], function($__0,$__1,$__2,$__3,$__4,$__5,$__6,$__7,$__8,$__9,$__10,$__11,$__12,$__13,$__14,$__15,$__16,$__17,$__18,$__19,$__20,$__21) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__1 || !$__1.__esModule)
    $__1 = {default: $__1};
  if (!$__2 || !$__2.__esModule)
    $__2 = {default: $__2};
  if (!$__3 || !$__3.__esModule)
    $__3 = {default: $__3};
  if (!$__4 || !$__4.__esModule)
    $__4 = {default: $__4};
  if (!$__5 || !$__5.__esModule)
    $__5 = {default: $__5};
  if (!$__6 || !$__6.__esModule)
    $__6 = {default: $__6};
  if (!$__7 || !$__7.__esModule)
    $__7 = {default: $__7};
  if (!$__8 || !$__8.__esModule)
    $__8 = {default: $__8};
  if (!$__9 || !$__9.__esModule)
    $__9 = {default: $__9};
  if (!$__10 || !$__10.__esModule)
    $__10 = {default: $__10};
  if (!$__11 || !$__11.__esModule)
    $__11 = {default: $__11};
  if (!$__12 || !$__12.__esModule)
    $__12 = {default: $__12};
  if (!$__13 || !$__13.__esModule)
    $__13 = {default: $__13};
  if (!$__14 || !$__14.__esModule)
    $__14 = {default: $__14};
  if (!$__15 || !$__15.__esModule)
    $__15 = {default: $__15};
  if (!$__16 || !$__16.__esModule)
    $__16 = {default: $__16};
  if (!$__17 || !$__17.__esModule)
    $__17 = {default: $__17};
  if (!$__18 || !$__18.__esModule)
    $__18 = {default: $__18};
  if (!$__19 || !$__19.__esModule)
    $__19 = {default: $__19};
  if (!$__20 || !$__20.__esModule)
    $__20 = {default: $__20};
  if (!$__21 || !$__21.__esModule)
    $__21 = {default: $__21};
  $__0;
  $__1;
  $__2;
  $__3;
  $__4;
  $__5;
  $__6;
  $__7;
  $__8;
  $__9;
  $__10;
  $__11;
  $__12;
  $__13;
  $__14;
  $__15;
  $__16;
  $__17;
  $__18;
  $__19;
  $__20;
  var EBUS_CONFIG = $__21.EBUS_CONFIG;
  var moduleName = 'spaApp.test.env';
  var testEnvModule = angular.module(moduleName, ['ngMockE2E']);
  testEnvModule.config((function() {
    
    console.log('in testEnvModule... ');
    EBUS_CONFIG.BASE_URL = 'http://localhost:8080/apiApp/stomp';
  }));
  function parseURL(url) {
    var parser = document.createElement('a'),
        params = {},
        queries,
        split,
        i;
    parser.href = url;
    queries = parser.search.replace(/^\?/, '').split('&');
    for (i = 0; i < queries.length; i++) {
      split = queries[i].split('=');
      params[split[0]] = split[1];
    }
    return {
      protocol: parser.protocol,
      host: parser.host,
      hostname: parser.hostname,
      port: parser.port,
      pathname: parser.pathname,
      search: parser.search,
      params: params,
      hash: parser.hash
    };
  }
  function parseParamFromURL(url) {
    return url.split('/').pop();
  }
  testEnvModule.run((function($httpBackend) {
    
    console.log('in testEnvModule... ');
    $httpBackend.whenPOST(/\http:\/\/apsrd3850:8080\/apiApp\/j_spring_security_check/).respond((function(method, url, data, headers) {
      console.log('Received data', method, url, data, headers);
      if (data.contains('j_username=sumo&j_password=demo')) {
        window.username = 'sumo';
        return [200, {
          success: true,
          username: 'sumo'
        }];
      } else if (data.contains('j_username=businessadmin&j_password=businessadmin')) {
        window.username = 'businessadmin';
        return [200, {
          success: true,
          username: 'businessadmin'
        }];
      } else if (data.contains('j_username=itadmin&j_password=itadmin')) {
        window.username = 'itadmin';
        return [200, {
          success: true,
          username: 'itadmin'
        }];
      } else if (data.contains('j_username=dataadmin&j_password=dataadmin')) {
        window.username = 'dataadmin';
        return [200, {
          success: true,
          username: 'dataadmin'
        }];
      } else {
        return [200, {error: 'Sorry, we were not able to find a user with that username and password.'}];
      }
    }));
    $httpBackend.whenGET(/\http:\/\/apsrd3850:8080\/apiApp\/login\/currentUser/).respond((function(method, url) {
      console.log('Received URL', url);
      console.log('window.username', window.username);
      if (window.username === 'sumo') {
        return [200, require('text!../test/fixtures/user/sumo_profile.json')];
      } else if (window.username === 'businessadmin') {
        return [200, require('text!../test/fixtures/user/businessadmin_profile.json')];
      } else if (window.username === 'itadmin') {
        return [200, require('text!../test/fixtures/user/itadmin_profile.json')];
      } else if (window.username === 'dataadmin') {
        return [200, require('text!../test/fixtures/user/dataadmin_profile.json')];
      } else {
        return [200, {error: 'Sorry, we were not able to find a user with that username and password.'}];
      }
    }));
    $httpBackend.whenPOST(/\http:\/\/apsrd3850:8080\/apiApp\/logout/).respond((function() {
      window.username = undefined;
      return [200, {}];
    }));
    $httpBackend.when('GET', /\http:\/\/apsrd3850:8080\/apiApp\/drugs\?fields*/).respond((function(method, url) {
      console.log('url', url);
      if (!window.username) {
        return [401, {message: 'authentication required'}];
      }
      if (url.contains('offset=0')) {
        return [200, require('text!../test/fixtures/drug/drugs_0.json')];
      } else if (url.contains('offset=100')) {
        return [200, require('text!../test/fixtures/drug/drugs_100.json')];
      } else {
        return [200, require('text!../test/fixtures/drug/drugs_0.json')];
      }
    }));
    $httpBackend.whenGET(/\http:\/\/apsrd3850:8080\/apiApp\/drugs\/[1-9]*/).respond((function(method, url) {
      console.log('url', url);
      var id = parseParamFromURL(url);
      if (['1', '2', '3'].indexOf(id) < 0) {
        id = '1';
      }
      return [200, require(("text!../test/fixtures/drug/drug_" + id + ".json"))];
    }));
    $httpBackend.whenGET(/http:\/\/apsed2427:8080\/api\/providers\?facets*/).respond((function(method, url) {
      console.log('url', url);
      if (url.contains('offset=0')) {
        return [200, require('text!../test/fixtures/provider/providers_0.json')];
      } else if (url.contains('offset=100')) {
        return [200, require('text!../test/fixtures/provider/providers_100.json')];
      } else {
        return [200, require('text!../test/fixtures/provider/providers_0.json')];
      }
    }));
    $httpBackend.whenGET(/\http:\/\/apsed2427:8080\/api\/providers\/(\d+)/).respond((function(method, url) {
      console.log('url', url);
      var id = parseParamFromURL(url);
      if (['2652254', '2131213'].indexOf(id) < 0) {
        id = '2652254';
      }
      return [200, require(("text!../test/fixtures/provider/provider_" + id + ".json"))];
    }));
    $httpBackend.whenGET(/http:\/\/apsed2427:8080\/api\/providers\/specialties\?*/).respond((function(method, url) {
      var prefix = parseURL(url).params.prefix.toUpperCase();
      if (prefix.startsWith('A')) {
        return [200, require('text!../test/fixtures/provider/specialties_A.json')];
      } else if (prefix.startsWith('B')) {
        return [200, require('text!../test/fixtures/provider/specialties_B.json')];
      } else if (prefix.startsWith('C')) {
        return [200, require('text!../test/fixtures/provider/specialties_C.json')];
      } else if (prefix.startsWith('D')) {
        return [200, require('text!../test/fixtures/provider/specialties_D.json')];
      } else if (prefix.startsWith('E')) {
        return [200, require('text!../test/fixtures/provider/specialties_E.json')];
      } else if (prefix.startsWith('F')) {
        return [200, require('text!../test/fixtures/provider/specialties_F.json')];
      } else {
        return [200, require('text!../test/fixtures/provider/specialties_S.json')];
      }
    }));
    $httpBackend.whenGET(/views\/\w+.*/).passThrough();
    $httpBackend.whenJSONP('http://www.telize.com/geoip?callback=JSON_CALLBACK').passThrough();
    $httpBackend.whenGET(/^\w+.*/).passThrough();
    $httpBackend.whenPOST(/^\w+.*/).passThrough();
  }));
  var $__default = moduleName;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

angular.module("templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("common/views/footer.html","<div class=\"container\">\n  <p class=\"text-muted credit\" align=\"right\">Copyright Sumo</p>\n</div>\n");
$templateCache.put("common/views/header.html","<!-- Fixed navbar -->\n<div ng-class=\"[\'navbar\', \'navbar-default\',\'navbar-fixed-top\']\">\n  <div class=\"container\">\n    <div class=\"navbar-header\">\n      <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n      </button>\n      <a class=\"navbar-brand\" href=\"#\">Member Portal</a>\n    </div>\n    <div class=\"navbar-collapse collapse\">\n      <ul class=\"nav navbar-nav\">\n        <li ui-sref-active=\"active\"><a ui-sref=\"home\">Home</a></li>\n        <li has-permission=\'ROLE_USER\' ng-class=\"{active: $state.includes(\'providers.**\')}\"><a ui-sref=\"providers.search\">Providers</a></li>\n        <li has-permission=\'ROLE_IT_ADMIN\' ng-class=\"{active: $state.includes(\'**.drugs.**\')}\"><a ui-sref=\"drugs.list\">Formulary</a></li>\n        <li class=\"dropdown\" dropdown>\n          <a href=\"#\" class=\"dropdown-toggle\" dropdown-toggle>Experiments <b class=\"caret\"></b></a>\n          <ul class=\"dropdown-menu\">\n            <li class=\"dropdown-header\">Experiments</li>\n            <li has-permission=\'ROLE_BUSINESS_ADMIN\'><a href=\"#\">Enabled for BA</a></li>\n            <li><a ui-sref=\"testAuth\">Test Auth</a></li>\n            <li><a ui-sref=\"elements\">Elements</a></li>\n            <li><a ui-sref=\"todoMVC\">ES6 Todo</a></li>\n            <li><a ui-sref=\"IoT\">IoT</a></li>\n            <li><a ui-sref=\"async\">Async</a></li>\n            <li class=\"divider\"></li>\n            <li class=\"dropdown-header\">Dev Experiments</li>\n            <li><a ui-sref=\"slow\">Slow Test</a></li>\n            <li><a ui-sref=\"messaging\">Messaging</a></li>\n            <li><a ui-sref=\"terminal({containerId: 123})\">Terminal</a></li>\n            <li><a ui-sref=\"experiments\">Experiments</a></li>\n            <li has-permission=\'ROLE_IT_ADMIN\'><a  tabindex=\"-1\" ui-sref=\"home\">Enabled for IA</a></li>\n            <li><a  ui-sref=\"translations\">Translations</a></li>\n\n          </ul>\n        </li>\n      </ul>\n      <ul class=\"nav navbar-nav navbar-right\" ng-controller=\"LoginController as lc\" ng-switch on=\"lc.isLoggedIn()\">\n        <li><a ui-sref=\"about\">About</a></li>\n        <li><a  ui-sref=\"contact\">Contact</a></li>\n\n        <li class=\"dropdown\" dropdown ng-switch-when=\"true\">\n          <a href=\"#\" class=\"dropdown-toggle\" dropdown-toggle>{{lc.getUsername() | uppercase}} <b class=\"caret\"></b></a>\n          <ul class=\"dropdown-menu\">\n            <li><a ui-sref=\"settings\">Settings</a></li>\n            <li><a ng-click=\"lc.logout()\">Logout</a></li>\n          </ul>\n        </li>\n        <li ng-switch-default><a  ng-click=\"lc.login()\">Login</a></li>\n\n      </ul>\n    </div><!--/.nav-collapse -->\n  </div>\n</div>\n");
$templateCache.put("common/views/login.html","<span ng-controller=\"LoginModalController as lmc\">\n<div class=\"modal-header\">\n    <button type=\"button\" class=\"close\" ng-click=\"lmc.cancel()\">&times;</button>\n    <h3>Login</h3>\n    <div class=\"text-info\">\n        <small>\n        Log in as <strong>sumo/demo</strong> or <strong>itadmin/itadmin</strong>\n        See <code>/app/test.env.js</code>\n        </small>\n    </div>\n</div>\n<form name=\"loginForm\" role=\"form\" ng-submit=\"lmc.submit(credentials)\" novalidate>\n<div class=\"modal-body\">\n    <div class=\"form-group\">\n        <label class=\"sr-only\" for=\"user_username\">Username</label>\n        <input id=\"user_username\" type=\"text\" class=\"form-control\" ng-model=\"credentials.username\" placeholder=\"Username\" autofocus required/>\n    </div>\n    <div class=\"form-group\">\n        <label class=\"sr-only\" for=\"user_password\">Password</label>\n        <input id=\"user_password\" type=\"password\" class=\"form-control\" ng-model=\"credentials.password\" placeholder=\"Password\" required/>\n    </div>\n    <div class=\"checkbox\">\n        <label>\n            <input type=\"checkbox\" ng-model=\"credentials.rememberMe\"  > Remember me\n        </label>\n    </div>\n</div>\n<div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default\" ng-click=\"lmc.cancel()\">Cancel</button>\n    <button type=\"submit\" ng-disabled=\"!loginForm.$valid\" class=\"btn btn-primary\">Sign in</button>\n</div>\n</form>\n</span>\n");
$templateCache.put("common/views/settings.html","<div  class=\"container\">\n    <div class=\"row\" ng-controller=\"LoginController as lc\">\n        <div class=\"col-md-8\">\n            <div class=\"panel panel-success\">\n                <div class=\"panel-heading\">\n                    <div class=\"panel-title\">{{currentUser.displayName}}</div>\n                </div>\n                <table class=\"table table-hover table-responsive\">\n                    <tbody>\n                        <tr ng-repeat=\"(key, value) in currentUser track by key\"  ng-hide=\"key === \'reqParams\' || key === \'authorities\' || key === \'parentResource\' || key === \'route\' \">\n                            <td>{{key}}</td>\n                            <td>{{value}}</td>\n                        </tr>\n                        <tr ng-repeat=\"authority in currentUser.authorities\">\n                            <td>Authority</td>\n                            <td>{{authority.authority}}</td>\n                        </tr>\n                    </tbody>\n                </table>\n                <div class=\"panel-footer\"></div>\n            </div>\n        </div>\n    </div>\n</div>");
$templateCache.put("drug/views/drugs.detail.html","<div class=\"row\">\n    <div class=\"col-md-4\">\n        <div class=\"panel panel-primary\">\n            <div class=\"panel-heading\">\n                <div class=\"panel-title\">Record Type G</div>\n            </div>\n            <div class=\"panel-body\">\n                Record Type G details for NDC: {{selectedDrug.ndc}}\n            </div>\n            <ul class=\"list-group\">\n                <li class=\"list-group-item repeat-animation\"\n                    ng-repeat=\"(key, value) in selectedDrug.recordTypeG track by key\"\n                    ng-hide=\"key === \'errors\' || key === \'id\' || key === \'version\'\">{{key}} - {{value}}\n                </li><!-- TODO: version hide cause panel box bottom disappear -->\n            </ul>\n        </div>\n    </div>\n    <div class=\"col-md-4\">\n        <div class=\"panel panel-primary\">\n            <div class=\"panel-heading\">\n                <div class=\"panel-title\">Record Type J</div>\n            </div>\n            <div class=\"panel-body\">\n                Record Type J details for NDC: {{selectedDrug.ndc}}\n            </div>\n            <ul class=\"list-group\">\n                <li class=\"list-group-item repeat-animation\"\n                    ng-repeat=\"(key, value) in selectedDrug.recordTypeJ track by key\"\n                    ng-hide=\"key === \'errors\' || key === \'id\' || key === \'version\'\">{{key}} - {{value}}\n                </li>\n            </ul>\n        </div>\n    </div>\n    <div class=\"col-md-4\">\n        <div class=\"panel panel-primary\">\n            <div class=\"panel-heading\">\n                <div class=\"panel-title\">Record Type M</div>\n            </div>\n            <div class=\"panel-body\">\n                Record Type M details for NDC: {{selectedDrug.ndc}}\n            </div>\n            <ul class=\"list-group\">\n                <li class=\"list-group-item repeat-animation\"\n                    ng-repeat=\"(key, value) in selectedDrug.recordTypeM track by key\"\n                    ng-hide=\"key === \'errors\' || key === \'id\' || key === \'version\'\">{{key}} - {{value}}\n                </li>\n            </ul>\n        </div>\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"col-md-4\">\n        <div class=\"panel panel-primary\">\n            <div class=\"panel-heading\">\n                <div class=\"panel-title\">Record Type A</div>\n            </div>\n            <div class=\"panel-body\">\n                Record Type A details for NDC: {{selectedDrug.ndc}}\n            </div>\n            <ul class=\"list-group\">\n                <li class=\"list-group-item repeat-animation\"\n                    ng-repeat=\"(key, value) in selectedDrug.recordTypeA track by key\"\n                    ng-hide=\"key === \'errors\' || key === \'id\' || key === \'version\'\">{{key}} - {{value}}\n                </li>\n            </ul>\n        </div>\n    </div>\n    <div class=\"col-md-4\">\n        <div class=\"panel panel-primary\">\n            <div class=\"panel-heading\">\n                <div class=\"panel-title\">Record Type L</div>\n            </div>\n            <div class=\"panel-body\">\n                Record Type L details for NDC: {{selectedDrug.ndc}}\n            </div>\n            <ul class=\"list-group\">\n                <li class=\"list-group-item repeat-animation\"\n                    ng-repeat=\"(key, value) in selectedDrug.recordTypeL track by key\"\n                    ng-hide=\"key === \'errors\' || key === \'id\' || key === \'version\'\">{{key}} - {{value}}\n                </li>\n            </ul>\n        </div>\n    </div>\n    <div class=\"col-md-4\">\n        <div class=\"panel panel-primary\">\n            <div class=\"panel-heading\">\n                <div class=\"panel-title\">Record Type E</div>\n            </div>\n            <div class=\"panel-body\">\n                Record Type E details for NDC: {{selectedDrug.ndc}}\n            </div>\n            <ul class=\"list-group\">\n                <li class=\"list-group-item repeat-animation\"\n                    ng-repeat=\"(key, value) in selectedDrug.recordTypeE track by key\"\n                    ng-hide=\"key === \'errors\' || key === \'id\' || key === \'version\'\">{{key}} - {{value}}\n                </li>\n            </ul>\n        </div>\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"panel panel-success\">\n        <div class=\"panel-heading\">\n            <div class=\"panel-title\">Record Type P</div>\n        </div>\n        <table class=\"table table-hover table-responsive\">\n            <thead>\n            <tr>\n                <td ng-repeat=\"(key, value) in selectedDrug.recordTypePs[0] track by key | filter:{key :!errors}\"\n                    ng-hide=\"key === \'class\' || key === \'drug\'\">{{key}}\n                </td>\n            </tr>\n            </thead>\n            <tbody>\n            <tr ng-repeat=\"recordType in selectedDrug.recordTypePs track by recordType.id | filter:{key :!errors} \">\n                <td ng-repeat=\"(key, value) in recordType track by key\" ng-hide=\"key === \'class\' || key === \'drug\'\">\n                    {{value}}\n                </td>\n            </tr>\n            </tbody>\n        </table>\n        <div class=\"panel-footer\"></div>\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"panel panel-success\">\n        <div class=\"panel-heading\">\n            <div class=\"panel-title\">Record Type Q</div>\n        </div>\n        <table class=\"table table-hover table-responsive\">\n            <thead>\n            <tr>\n                <td ng-repeat=\"(key, value) in selectedDrug.recordTypeQs[0] track by key | filter:{key :!errors}\"\n                    ng-hide=\"key === \'class\' || key === \'drug\'\">{{key}}\n                </td>\n            </tr>\n            </thead>\n            <tbody>\n            <tr ng-repeat=\"recordType in selectedDrug.recordTypeQs track by recordType.id | filter:{key :!errors} \">\n                <td ng-repeat=\"(key, value) in recordType track by key\" ng-hide=\"key === \'class\' || key === \'drug\'\">\n                    {{value}}\n                </td>\n            </tr>\n            </tbody>\n        </table>\n        <div class=\"panel-footer\"></div>\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"panel panel-success\">\n        <div class=\"panel-heading\">\n            <div class=\"panel-title\">Record Type R</div>\n        </div>\n        <table class=\"table table-hover table-responsive\">\n            <thead>\n            <tr>\n                <td ng-repeat=\"(key, value) in selectedDrug.recordTypeRs[0] track by key | filter:{key :!errors}\"\n                    ng-hide=\"key === \'class\' || key === \'drug\'\">{{key}}\n                </td>\n            </tr>\n            </thead>\n            <tbody>\n            <tr ng-repeat=\"recordType in selectedDrug.recordTypeRs track by recordType.id | filter:{key :!errors} \">\n                <td ng-repeat=\"(key, value) in recordType track by key\" ng-hide=\"key === \'class\' || key === \'drug\'\">\n                    {{value}}\n                </td>\n            </tr>\n            </tbody>\n        </table>\n        <div class=\"panel-footer\"></div>\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"panel panel-success\">\n        <div class=\"panel-heading\">\n            <div class=\"panel-title\">Record Type S</div>\n        </div>\n        <table class=\"table table-hover table-responsive\">\n            <thead>\n            <tr>\n                <td ng-repeat=\"(key, value) in selectedDrug.recordTypeSs[0] track by key | filter:{key :!errors}\"\n                    ng-hide=\"key === \'class\' || key === \'drug\'\">{{key}}\n                </td>\n            </tr>\n            </thead>\n            <tbody>\n            <tr ng-repeat=\"recordType in selectedDrug.recordTypeSs track by recordType.id | filter:{key :!errors} \">\n                <td ng-repeat=\"(key, value) in recordType track by key\" ng-hide=\"key === \'class\' || key === \'drug\'\">\n                    {{value}}\n                </td>\n            </tr>\n            </tbody>\n        </table>\n        <div class=\"panel-footer\"></div>\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"panel panel-success\">\n        <div class=\"panel-heading\">\n            <div class=\"panel-title\">Record Type T</div>\n        </div>\n        <table class=\"table table-hover table-responsive\">\n            <thead>\n            <tr>\n                <td ng-repeat=\"(key, value) in selectedDrug.recordTypeTs[0] track by key | filter:{key :!errors}\"\n                    ng-hide=\"key === \'class\' || key === \'drug\'\">{{key}}\n                </td>\n            </tr>\n            </thead>\n            <tbody>\n            <tr ng-repeat=\"recordType in selectedDrug.recordTypeTs track by recordType.id | filter:{key :!errors} \">\n                <td ng-repeat=\"(key, value) in recordType track by key\" ng-hide=\"key === \'class\' || key === \'drug\'\">\n                    {{value}}\n                </td>\n            </tr>\n            </tbody>\n        </table>\n        <div class=\"panel-footer\"></div>\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"panel panel-success\">\n        <div class=\"panel-heading\">\n            <div class=\"panel-title\">Record Type C</div>\n        </div>\n        <table class=\"table table-hover table-responsive\">\n            <thead>\n            <tr>\n                <td ng-repeat=\"(key, value) in selectedDrug.recordTypeCs[0] track by key | filter:{key :!errors}\"\n                    ng-hide=\"key === \'class\' || key === \'drug\'\">{{key}}\n                </td>\n            </tr>\n            </thead>\n            <tbody>\n            <tr ng-repeat=\"recordType in selectedDrug.recordTypeCs track by recordType.id | filter:{key :!errors} \">\n                <td ng-repeat=\"(key, value) in recordType track by key\" ng-hide=\"key === \'class\' || key === \'drug\'\">\n                    {{value}}\n                </td>\n            </tr>\n            </tbody>\n        </table>\n        <div class=\"panel-footer\"></div>\n    </div>\n</div>\n");
$templateCache.put("drug/views/drugs.html","<div  class=\"container\" ui-view autoscroll=\"false\">\n\n    <section ui-view=\"filters\" autoscroll=\"false\"></section>\n\n    <section ui-view=\"results\" autoscroll=\"false\"></section>\n\n    <section class=\"slide-reveal\" ui-view=\"details\"  autoscroll=\"false\"></section>\n\n</div>");
$templateCache.put("drug/views/drugs.results.html","<div class=\"row\">\n    <div class=\"col-md-12\">\n    <span class=\"btn btn-info disabled pull-left\">Total <span class=\"badge\">{{metadata.total}}</span>    Offset <span class=\"badge\">{{metadata.offset}}</span></span>\n    <!-- TODO: use custom pagination template -->\n    <a class=\"btn btn-link\" ng-disabled=\"metadata.offset <=0\" ng-click=\"dbCursorMove(-100)\">&laquo; Previous from DB</a>\n    <!-- TODO: disable forward button based on drugTotalCount-->\n    <a class=\"btn btn-link\" ng-disabled=\"metadata.total - metadata.offset <= 100\" ng-click=\"dbCursorMove(100)\"> Next from DB &raquo;</a>\n\n    <span ><strong>Filter:</strong> {{tableParams.filter()|json}} <strong>Sorting:</strong> {{tableParams.sorting()|json}}</span>\n\n    <a class=\"btn btn-default pull-right\" ng-click=\"$parent.searchCollapsed = !$parent.searchCollapsed\">\n        <span class=\"glyphicon\" ng-class=\"$parent.searchCollapsed ? \'glyphicon-arrow-down\': \'glyphicon-arrow-up\'\"></span> Search\n    </a>\n\n    <a ng-click=\"tableParams.sorting({});tableParams.filter({})\" class=\"btn btn-default pull-right\">Clear Filter</a>\n    </div>\n</div>\n\n<div class=\"row\">\n    <div class=\"col-md-12\">\n        <table ng-table=\"tableParams\" class=\"table\" show-filter=\"true\">\n            <style scoped>\n                .ng-table {\n                    border: 1px solid #000;\n                }\n            </style>\n            <tbody>\n            <tr ng-repeat=\"drug in drugs track by drug.id\" ng-class=\"{ active: ($state.params.drugId == drug.id)}\">\n                <td data-title=\"\'NDC\'\" sortable=\"\'ndc\'\" filter=\"{ \'ndc\': \'text\' }\">\n                    <a ui-sref=\".detail({ drugId: drug.id })\">{{drug.ndc}}</a>\n                </td>\n                <td data-title=\"\'GPI\'\" sortable=\"\'recordTypeG.g017\'\">\n                    {{drug.recordTypeG.g017}}\n                </td>\n                <td data-title=\"\'Label\'\" sortable=\"\'recordTypeJ.j017\'\">\n                    {{drug.recordTypeJ.j017}}\n                </td>\n                <td data-title=\"\'Product\'\" sortable=\"\'recordTypeE.e017\'\" filter=\"{ \'recordTypeE\': \'text\' }\">\n                    {{drug.recordTypeE.e017}}\n                </td>\n                <td data-title=\"\'Package\'\" sortable=\"\'recordTypeL.l073\'\">\n                    {{drug.recordTypeL.l073}}\n                </td>\n                <td data-title=\"\'Sequence\'\" sortable=\"\'recordTypeA.a017\'\">\n                    {{drug.recordTypeA.a017}}\n                </td>\n                <td data-title=\"\'Generic ID\'\" sortable=\"\'recordTypeA.a030\'\">\n                    {{drug.recordTypeA.a030}}\n                </td>\n                <td data-title=\"\'TCC\'\" sortable=\"\'recordTypeA.a044\'\">\n                    {{drug.recordTypeA.a044}}\n                </td>\n            </tr>\n            </tbody>\n        </table>\n    </div>\n</div>");
$templateCache.put("drug/views/drugs.search.html","<div class=\"row\" collapse=\"searchCollapsed\" >\n    <form class=\"form-horizontal\" role=\"form\" ng-submit=\"dsc.onSearch(dsc.drugSearchParams)\" novalidate>\n        <div class=\"form-group\">\n            <label for=\"inputNDC\" class=\"col-md-1 control-label\">NDC</label>\n            <div class=\"col-md-2\">\n                <input type=\"text\" class=\"form-control\" id=\"inputNDC\" ng-model=\"dsc.drugSearchParams.ndc\" placeholder=\"ndc\">\n            </div>\n            <label for=\"inputLabel\" class=\"col-md-1 control-label\">Label</label>\n            <div class=\"col-md-2\">\n                <input type=\"text\" class=\"form-control\" id=\"inputLabel\" ng-model=\"dsc.drugSearchParams.labelerName\" placeholder=\"labeler name\">\n            </div>\n            <label for=\"inputProduct\" class=\"col-md-1 control-label\">Product</label>\n            <div class=\"col-md-2\">\n                <input type=\"text\" class=\"form-control\" id=\"inputProduct\" ng-model=\"dsc.drugSearchParams.productName\" placeholder=\"product name\">\n            </div>\n            <div class=\"col-md-1\">\n                <div class=\"checkbox\">\n                    <label>\n                        <input type=\"checkbox\" ng-model=\"dsc.drugSearch.check1\"> Check1\n                    </label>\n                </div>\n            </div>\n            <div class=\"col-md-1\">\n                <button type=\"submit\" class=\"btn btn-default\">Search</button>\n            </div>\n        </div>\n    </form>\n</div>");
$templateCache.put("experiments/views/IoT.html","<style scoped>\n  .tempCenter {\n    font-size: 16px;\n    font-family: \"Helvetica Neue\", \"Helvetica\", \"Arial\";\n    font-weight: 100;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n  }\n\n  .p10 {\n    font-size: 10rem;\n  }\n  .units {\n    font-size: 3rem;\n    vertical-align: middle;\n    letter-spacing: .35rem;\n  }\n</style>\n<div class=\"tempCenter\">\n  <p class=\"p10\">{{ic.temp|| \'--\'}}<span class=\"units\">ºC</span>\n</div>\n\n");
$templateCache.put("experiments/views/async.html","<div class=\"container\">\n  <style scoped>\n    body {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n    }\n    .sumo {\n      position: absolute;\n      left: 0;\n      top: 0;\n      white-space: nowrap;\n      border-radius: 5px;\n      text-shadow: 0 0 5px yellow;\n      font: 25px sans-serif;\n      text-align: center;\n      line-height: 22px;\n      letter-spacing: -2px;\n    }\n  </style>\n  <div class=\"sumo\" ng-style=\"{ left: ( ac.move.x + \'px\' ), top: ( ac.move.y + \'px\' ) }\">Sumo<br>Rocks!</div>\n</div>\n\n");
$templateCache.put("experiments/views/elements.html","<div  class=\"container\">\n    <ng-switch on=\"supportsWebComponents()\">\n        <span ng-switch-when=\"3\">\n            <alert type=\"success\" ng-hide=\"hideMe\" close=\"hideMe =true\">Congratulations! your browser supports Web Components</alert>\n        </span>\n        <span ng-switch-when=\"2\">\n            <alert type=\"info\" ng-hide=\"hideMe\" close=\"hideMe =true\">Great! your browser supports HTML Templates and HTML Imports but not HTML CustomElements.You may wanna try this page with <b>Chrome 35</b></alert>\n        </span>\n        <span ng-switch-when=\"1\">\n            <alert type=\"warning\" ng-hide=\"hideMe\" close=\"hideMe =true\">Not bad! your browser supports HTML Templates but not HTML Imports and HTML CustomElements.You may wanna try this page with <b>Chrome 35</b></alert>\n        </span>\n        <span ng-switch-default>\n            <alert  type=\"danger\" ng-hide=\"hideMe\" close=\"hideMe =true\">Sorry! this demo page is designed to show native web components in supported browsers like <b>Chrome 35</b></alert>\n        </span>\n    </ng-switch>\n\n    <!-- change the appearance of the ticker part -->\n    <style>\n        #news::x-ticker {\n            background: gray;\n            color: lightblue;\n            var-highlight-primary: green;\n            var-highlight-accent: yellow;\n        }\n    </style>\n\n    <div class=\"row\">\n        <div class=\"col-md-4\">\n            <div class=\"panel panel-primary\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">{{ \'HEADLINE\' | translate }}</h3>\n                </div>\n                <div class=\"panel-body\">\n                    <my-element max=\"3\" startCount=\"1\"></my-element>\n                </div>\n            </div>\n        </div><!-- /.col-md-4 -->\n        <div class=\"col-md-4\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">Insertion Points Demo</h3>\n                </div>\n                <div class=\"panel-body\">\n                    <button is=\"custom-button\"></button>\n                    <my-news id=\"news\">\n                        <h3>Top news</h3>\n                        <div ng-repeat=\'newsItem in news\' ng-class=\"{breaking: newsItem.breaking}\">{{newsItem.news}}</div>\n                    </my-news>\n                </div>\n            </div>\n        </div><!-- /.col-md-4 -->\n        <div class=\"col-md-4\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">Panel title II</h3>\n                </div>\n                <div class=\"panel-body\">\n                    <!--This will throw Error: \'Max must be non-negative.\' with: <my-element max=\"-3\" startCount=\"1\">Light DOM</my-element>-->\n                    <my-element max=\"6\" startCount=\"1\">Light DOM</my-element>\n                </div>\n            </div>\n        </div><!-- /.col-md-4 -->\n    </div>\n</div>\n");
$templateCache.put("experiments/views/experiment.html","<div  class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-8\">\n            <div class=\"row\">\n                <div class=\"col-md-6\">\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-heading\">\n                            <h3 class=\"panel-title\">Panel title</h3>\n                        </div>\n                        <div class=\"panel-body\">\n                            <div>Future panel</div>\n                        </div>\n                    </div>\n                </div><!-- /.col-md-4 -->\n                <div class=\"col-md-6\">\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-heading\">\n                            <h3 class=\"panel-title\">Panel title</h3>\n                        </div>\n                        <div class=\"panel-body\">\n                            Name: <a href=\"#\" editable-text=\"user.name\">{{ user.name || \"empty\" }}</a><br/>\n                            DOB:\n                            <a href=\"#\" editable-bsdate=\"user.dob\" e-datepicker-popup=\"dd-MMMM-yyyy\">\n                                {{ (user.dob | date:\"dd/MM/yyyy\") || \'empty\' }}\n                            </a>\n                        </div>\n                    </div>\n                </div><!-- /.col-md-4 -->\n            </div>\n            <div>\n                <div class=\"panel panel-default\">\n                    <div class=\"panel-heading\">\n                        <h3 class=\"panel-title\">Command Panel</h3>\n                    </div>\n                    <div class=\"panel-body\">\n                        <div class=\"well \">\n                            <form class=\"form-inline\" role=\"form\">\n                                    <label for=\"input\">Prime Number Generator</label>\n                                    <input type=\"number\" class=\"form-control\" id=\"input\" ng-model=\"input\" ng-change=\"genPrime(input)\" min=\"1\" max=\"99\" autofocus>\n                                    <button type=\"button\" class=\"btn btn-info pull-right\"  ng-click=\"output = \'\';\">Clean Output</button>\n                            </form>\n                        </div>\n                        <div class=\"well well-lg\">\n                            <button type=\"button\" class=\"btn btn-danger\"  ng-click=\"sendEmail(\'sumo@demo.com\')\">Send Email</button>\n                            <button type=\"button\" class=\"btn btn-info\"  ng-click=\"currentUser()\">Get Current User</button>\n                            <button type=\"button\" class=\"btn btn-info\"  ng-click=\"clearUser()\">Clear User Cache</button>\n                            <button type=\"button\" class=\"btn btn-info\"  ng-click=\"test403()\">Test 403 URL</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <div class=\"panel panel-default\">\n                    <div class=\"panel-heading\">\n                        <h3 class=\"panel-title\">Result Panel</h3>\n                    </div>\n                    <div class=\"panel-body\">\n                        <div class=\"well well-lg\">\n                            <div>{{ output }}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-md-4\">\n            <div class=\"panel panel-success\" ng-init=\"names=[\'Igor Minar\', \'Brad Green\', \'Dave Geddes\', \'Naomi Black\', \'Greg Weber\', \'Dean Sofer\', \'Wes Alvaro\', \'John Scott\', \'Daniel Nadasi\'];\">\n                <div class=\"panel-heading\">\n                    <span class=\"panel-title\">Search </span>\n                </div>\n                <div class=\"panel-body\">\n                    <input type=\"text\" class=\"form-control\" ng-model=\"search\">\n                    <ul class=\"nav nav-pills nav-stacked\">\n                        <li ng-repeat=\"name in names | filter:search\" class=\"repeat-animation\">\n                            <a href=\"#\"> {{name}} </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div><!-- /.col-md-4 -->\n    </div>\n</div>");
$templateCache.put("experiments/views/growlTranslate.html","<div  class=\"container\">\n    <section class=\"row\">\n        <div class=\"col-md-4\">\n            <div class=\"panel panel-primary\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">{{ \'HEADLINE\' | translate }}</h3>\n                </div>\n                <div class=\"panel-body\">\n                    <div class=\"pull-right\">\n                        <a ng-click=\"setLang(\'de_DE\')\" translate=\"BUTTON_LANG_DE\"></a>\n                        <a ng-click=\"setLang(\'en_EN\')\" translate=\"BUTTON_LANG_EN\"></a>\n                    </div>\n                    <p>{{ \'PARAGRAPH\' | translate }}</p>\n                </div>\n            </div>\n        </div><!-- /.col-md-4 -->\n        <div class=\"col-md-4\">\n            <div class=\"panel panel-warning\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">Panel title I</h3>\n                </div>\n                <div class=\"panel-body\">\n                    <p>{{ \'PASSED_AS_ATTRIBUTE\' | translate }}</p>\n                </div>\n            </div>\n        </div><!-- /.col-md-4 -->\n        <div class=\"col-md-4\">\n            <div class=\"panel panel-success\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">Panel title II</h3>\n                </div>\n                <div class=\"panel-body\">\n                    <p>{{ \'PASSED_AS_INTERPOLATION\' | translate }}</p>\n                </div>\n            </div>\n        </div><!-- /.col-md-4 -->\n    </section>\n\n    <section class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"well well-lg\">\n                <button type=\"button\" class=\"btn btn-danger\"  ng-click=\"addErrorMessage()\">Add Error Alert</button>\n                <button type=\"button\" class=\"btn btn-warning\" ng-click=\"addWarnMessage()\">Add Warning Alert</button>\n                <button type=\"button\" class=\"btn btn-info\"    ng-click=\"addInfoMessage()\">Add Info Alert</button>\n                <button type=\"button\" class=\"btn btn-success\" ng-click=\"addSuccessMessage()\">Add Success Alert</button>\n                <button type=\"button\" class=\"btn btn-warning\" ng-click=\"addTranslatedMessage()\">Add Translated Alert</button>\n            </div>\n        </div>\n    </section>\n</div>\n");
$templateCache.put("experiments/views/messaging.html","<div  class=\"container\">\n\n    <style scoped type=\"text/css\">\n        @import \"experiments/messaging.css\";\n    </style>\n\n    <div class=\"panel panel-dark\">\n        <div class=\"panel-heading\">\n            <h3 class=\"panel-title\">Notifications\n                <div class=\"led pull-right\" ng-class=\"{0: \'led-yellow led-yellow-blink\', 1: \'led-green\', 2: \'led-blue\', 3: \'led-orange\', 4: \'led-red\'}[mc.readyState]\"></div>\n                <span class=\"pull-right\" >\n                    <span class=\"label change\" highlighter=\"mc.AAPL\" up-class=\"label-success\" down-class=\"label-danger\">AAPL: {{mc.AAPL}}</span>\n                    <span class=\"label change\" highlighter=\"mc.GOOG\" up-class=\"label-success\" down-class=\"label-danger\">GOOG: {{mc.GOOG}}</span>\n                    <span class=\"label change\" highlighter=\"mc.YHOO\" up-class=\"label-success\" down-class=\"label-danger\">YHOO: {{mc.YHOO}} </span>\n                    &nbsp;&nbsp;&nbsp;&nbsp;\n                </span>\n            </h3>\n        </div>\n        <div class=\"panel-body\">\n            <div class=\"well well-lg\">\n                <p ng-repeat=\'notification in mc.notifications track by $index\'  ng-class=\"{true: \'text-danger\', false: \'text-success\'}[notification.error === true]\">{{ notification.message }}</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"row\">\n        <div class=\"col-md-offset-2 col-md-10\">\n            <ul class=\"nav nav-pills\">\n                <li ng-repeat=\'room in mc.rooms\' ng-click=\"mc.selectedRoom=room\" ng-class=\"{ active: (room == mc.selectedRoom) }\"><a>{{room}}</a></li>\n                <li class=\"pull-right\"><a class=\"btn\" ng-class=\"{true: \'btn-danger\', false: \'btn-success\'}[mc.joined]\" has-permission=\"ROLE_USER\" ng-click=\"mc.joinLeave()\">{{mc.joined ? \'Leave\': \'Join\'}}</a></li>\n            </ul>\n        </div>\n    </div>\n\n    <div class=\'row\'>\n        <div class=\'col-md-2\'>\n            <small class=\'marker\'>Presence</small>\n            <ul class=\"nav nav-pills nav-stacked\">\n                <li ng-repeat=\'user in mc.users\' ng-click=\"mc.selectedUser=user\" ng-class=\"{ active: (user == mc.selectedUser) }\"><a>{{user}}</a></li>\n            </ul>\n        </div>\n        <div class=\'col-md-10\'>\n            <small class=\'marker\'>Chat</small>\n            <form name=\"chatForm\" role=\"form\" ng-submit=\"mc.sendMessage(mc.newMessage)\" novalidate>\n                <div class=\'input-group\'>\n                    <input class=\'input-sm form-control\' ng-model=\'mc.newMessage\' type=\'text\' required>\n                    <span class=\'input-group-btn\'>\n                        <button type=\"submit\" has-permission=\"ROLE_USER\" ng-disabled=\"!chatForm.$valid\" class=\"input-sm btn btn-default\">Send</button>\n                    </span>\n                </div>\n            </form>\n\n            <div class=\'well\'>\n                <ul class=\'list-unstyled\'>\n                    <li ng-repeat=\'msg in mc.messages track by $index\'>\n                        <span class=\"glyphicon\" ng-class=\"{true: \'glyphicon-eye-open\', false: \'glyphicon-forward\'}[msg.private]\"></span>\n                        {{msg.message}}\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </div>\n\n</div>\n");
$templateCache.put("experiments/views/terminal.html","<div class=\"container\">\n    <style>\n        .terminal {\n            float: left;\n            border: #000 solid 5px;\n            font-family: \"DejaVu Sans Mono\", \"Liberation Mono\", monospace;\n            font-size: 11px;\n            color: #f0f0f0;\n            background: #000;\n        }\n\n        .terminal-cursor {\n            color: #000;\n            background: #f0f0f0;\n        }\n    </style>\n\n    <div id=\"terminal\"></div>\n</div>");
$templateCache.put("experiments/views/testAuth.html","<div  class=\"container\">\n    <div class=\"jumbotron\">\n        <h1>Hello, {{lc.getCurrentUser().displayName}}!</h1>\n        <span ng-switch on=\"lc.getCurrentUser().authorities[0].authority\">\n            <span ng-switch-when=\"ROLE_BUSINESS_ADMIN\">You\'re business admin.</span>\n            <span ng-switch-when=\"ROLE_IT_ADMIN\">You\'re IT admin.</span>\n            <span ng-switch-when=\"ROLE_DATA_ADMIN\">You\'re data admin.</span>\n            <span ng-switch-when=\"ROLE_SUPER_ADMIN\">You\'re super admin.</span>\n            <span ng-switch-default>You\'re something else.</span>\n        </span>\n        <p>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Fusce dapibus, tellus ac cursus\n            commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet.</p>\n        <p><a href=\"#\" has-permission=\"!ROLE_SUPER_ADMIN\" class=\"btn btn-primary btn-lg\" role=\"button\"> Enabled for non-Super Admins &raquo;</a></p>\n    </div>\n\n    <div class=\"row\">\n        <div class=\"col-md-4\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">IT Admin</h3>\n                </div>\n                <div class=\"panel-body\">\n                    <div has-permission=\"ROLE_IT_ADMIN\">Content for IT admin</div>\n                </div>\n            </div>\n            <div class=\"panel panel-primary\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">Data Admin</h3>\n                </div>\n                <div class=\"panel-body\">\n                    <div has-permission=\"ROLE_DATA_ADMIN\">Content for Data admin</div>\n                </div>\n            </div>\n        </div><!-- /.col-md-4 -->\n        <div class=\"col-md-4\">\n            <div class=\"panel panel-success\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">Business Admin</h3>\n                </div>\n                <div class=\"panel-body\">\n                    <div has-permission=\"ROLE_BUSINESS_ADMIN\">Content for Business admin</div>\n                </div>\n            </div>\n            <div class=\"panel panel-info\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">Switch User</h3>\n                </div>\n                <div class=\"panel-body\">\n                    <div has-permission=\"ROLE_SWITCH_USER\">Content for Switch User</div>\n                </div>\n            </div>\n        </div><!-- /.col-md-4 -->\n        <div class=\"col-md-4\">\n            <div class=\"panel panel-warning\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">Super Admin</h3>\n                </div>\n                <div class=\"panel-body\">\n                    <div has-permission=\"ROLE_SUPER_ADMIN\">Content for Super admin</div>\n                </div>\n            </div>\n            <div class=\"panel panel-danger\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">User</h3>\n                </div>\n                <div class=\"panel-body\">\n                    <div has-permission=\"ROLE_USER\">Content for User</div>\n                </div>\n            </div>\n        </div><!-- /.col-md-4 -->\n    </div>\n\n    <div class=\"well\">\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sed diam eget risus varius blandit sit amet non magna. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Cras mattis consectetur purus sit amet fermentum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Aenean lacinia bibendum nulla sed consectetur.</p>\n    </div>\n</div>");
$templateCache.put("experiments/views/todo.html","<div  class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-4 col-md-offset-3\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">ES6 Todo List</h3>\n                </div>\n                <div class=\"panel-body\">\n                    <form ng-submit=\"tc.addTodo()\">\n                        <input type=\"text\" ng-model=\"tc.newTodo\" class=\"form-control\" placeholder=\"New todo item goes here, then press Enter\" focus>\n                    </form>\n                    <br>\n                    <div class=\"list-group\">\n                        <div class=\"list-group-item todo-item\" ng-repeat=\"(key, todo) in tc.todos.todos\" ng-class=\"{\'todo-complete\': todo.done}\">\n                            <span class=\"close\" ng-click=\"tc.removeTodo(key)\">&times;</span>\n                            <label>\n                                <input type=\"checkbox\" ng-model=\"todo.done\">\n                                <span ng-bind=\"todo.text\">This is the content of the Todo</span>\n                            </label>\n                        </div>\n                    </div>\n                    <button class=\"btn btn-block btn-danger\" ng-click=\"tc.clearAll()\">Clear All Items</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>");
$templateCache.put("home/views/home.html","<div  class=\"container\">\n\n  <!-- Jumbotron -->\n  <div class=\"jumbotron\">\n    <h1>SPA Starter Kit</h1>\n\n    <p class=\"lead\">Cras justo odio, dapibus ac facilisis in, egestas eget quam. Fusce dapibus, tellus ac cursus\n      commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet.<br/>Here you can request\n      infrastructure services, monitor and manager infrastructure.\n    </p>\n    <p>\n      <a class=\"btn btn-lg btn-success\" ui-sref=\"providers.search\">Get started today</a>\n      <a class=\"btn btn-lg btn-success\" href=\"#testAuth\" has-permission=\"ROLE_BUSINESS_ADMIN\">Enabled for Business Admins</a>\n    </p>\n  </div>\n\n  <!-- Example row of columns -->\n  <div class=\"row\">\n    <div class=\"col-md-4\">\n      <h2>Heading</h2>\n\n      <p>Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris\n        condimentum nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod.\n        Donec sed odio dui. </p>\n\n      <p><a class=\"btn btn-primary\" ui-sref=\"providers.search\">View details &raquo;</a></p>\n    </div>\n    <div class=\"col-md-4\">\n      <h2>Heading</h2>\n\n      <p>Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris\n        condimentum nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod.\n        Donec sed odio dui. </p>\n\n      <p><a class=\"btn btn-primary\" ui-sref=\"drugs.list\">View details &raquo;</a></p>\n    </div>\n    <div class=\"col-md-4\">\n      <h2>Heading</a></h2>\n\n      <p>Donec sed odio dui. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Vestibulum id ligula porta\n        felis euismod semper. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum\n        massa.</p>\n\n      <p><a class=\"btn btn-primary\" ui-sref=\"todoMVC\">View details &raquo;</a></p>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("provider/views/providers.detail.html","<div class=\"row\">\n    <div class=\"col-md-8\">\n        <div class=\"panel panel-primary\">\n            <div class=\"panel-heading\">\n                <div class=\"panel-title\">\n                    <div class=\"btn-group pull-right\">\n                        <a class=\"btn btn-sm btn-primary\" ng-click=\"$parent.resultsCollapsed = !$parent.resultsCollapsed\">\n                            <span class=\"glyphicon\" ng-class=\"$parent.resultsCollapsed ? \'glyphicon-arrow-down\': \'glyphicon-arrow-up\'\"></span>\n                        </a>\n                    </div>\n                    {{pdc.selectedProvider.FST_NM  + \' \' + pdc.selectedProvider.MDL_NM + \' \' +pdc.selectedProvider.LST_NM}}\n                    <div class=\"clearfix\"></div>\n                </div>\n            </div>\n            <div class=\"panel-body\" style=\'padding:1px\'>\n            <h2>{{pdc.selectedProvider.FST_NM}}</h2>\n            </div>\n        </div>\n    </div>\n</div>\n</div>\n");
$templateCache.put("provider/views/providers.html","<div  class=\"container\" ui-view autoscroll=\"false\">\n\n    <style scoped type=\"text/css\">\n        @import \"provider/index.css\";\n    </style>\n\n    <section ui-view=\"filters\" autoscroll=\"false\" collapse=\"searchCollapsed\"></section>\n\n    <br/>\n\n    <section ui-view=\"map\" autoscroll=\"false\" collapse=\"resultsCollapsed\"></section>\n\n    <section class=\"slide-reveal\" ui-view=\"details\"  autoscroll=\"false\"></section>\n\n</div>");
$templateCache.put("provider/views/providers.map.html","<div class=\"row\">\n    <div class=\"col-md-12\">\n    <span class=\"btn btn-info disabled pull-left\">Total <span class=\"badge\">{{providers.metadata.total}}</span>    Offset <span class=\"badge\">{{providers.metadata.offset}}</span></span>\n    <!-- TODO: use custom pagination template -->\n    <a class=\"btn btn-link col-md-offset-1\" ng-disabled=\"providers.metadata.offset <=0\" ng-click=\"dbCursorMove(-100)\" role=\"button\">&laquo; Previous from DB</a>\n    <a class=\"btn btn-link\" ng-disabled=\"providers.metadata.total - providers.metadata.offset <= 100\" ng-click=\"dbCursorMove(100)\" role=\"button\"> Next from DB &raquo;</a>\n    <a class=\"btn btn-default pull-right\" ng-click=\"$parent.searchCollapsed = !$parent.searchCollapsed\" tooltip=\"Toggle Search Form\" tooltip-placement=\"right\" tooltip-popup-delay=\"1000\">\n        <span class=\"glyphicon\" ng-class=\"$parent.searchCollapsed ? \'glyphicon-arrow-down\': \'glyphicon-arrow-up\'\"></span> Search\n    </a>\n    </div>\n</div>\n<!--<div class=\"row\">-->\n    <!--<div class=\"col-md-12\">-->\n        <!--<span class=\"label label-primary\" ng-repeat=\"gendar in providers.metadata.facets.PROV_GDR_CD\">{{gendar.value}} : {{gendar.count}} </span>-->\n        <!--<span class=\"label label-success\" ng-repeat=\"city in providers.metadata.facets.ADR_CTY_NM\">{{city.value}} : {{city.count}} </span>-->\n        <!--<span class=\"label label-info\" ng-repeat=\"speciality in providers.metadata.facets.SPCL_TYP_FULL_DESC\">{{speciality.value}} : {{speciality.count}} </span>-->\n    <!--</div>-->\n<!--</div>-->\n<div class=\"row\">\n    <div class=\"col-md-12\">\n        <gm-map  gm-map-id=\"\'simpleMap\'\" gm-map-options=\"pmc.mapInitOptions\" gm-center=\"pmc.center.latLng\" gm-zoom=\"pmc.zoom\" gm-bounds=\"pmc.bounds\" class=\"map\">\n            <gm-markers gm-objects=\"providers\"\n                        gm-id=\"object.id\"\n                        gm-marker-options=\"pmc.getProviderOpts(object)\"\n                        gm-position=\"{ lat: object.addresses[0].LAT_NBR, lng: object.addresses[0].LONG_NBR }\"\n                        gm-on-activatemarker=\"pmc.activateMarker(marker);\"\n                        gm-on-openinfowindow=\"infoWindow.open(marker.getMap(), marker);\"\n                        gm-on-openmouseoverinfowindow=\"mouseOverInfoWindow.open(marker.getMap(), marker);\"\n                        gm-on-closemouseoverinfowindow=\"mouseOverInfoWindow.close();\"\n                        gm-events=\"markerEvents\"\n                        gm-on-mouseover=\"pmc.onMouseOver(object, marker)\"\n                        gm-on-mouseout=\"pmc.onMouseOut(object, marker)\"\n                        gm-on-click=\"pmc.onProviderClick(object, marker)\">\n            </gm-markers>\n        </gm-map>\n        <div gm-info-window=\"infoWindow\">\n            <div>\n                <p><strong><abbr title=\"Phone\">&#9742;:</abbr> {{pmc.selectedProvider.addresses[0].TEL_NBR}}</strong>  <strong>D:{{pmc.selectedProvider.degrees[0].DEG_CD}}</strong></p>\n                <rating ng-model=\"y\" ng-init=\"y = 3\" max=\"5\" readonly=\"false\"></rating>Rate Yourself!</span>\n                <address class=\"small\">\n                    <strong>{{pmc.selectedProvider.specialties[0].SPCL_TYP_FULL_DES}}</strong><br>\n                    {{pmc.selectedProvider.addresses[0].ADR_LN_1}}<br>\n                    {{pmc.selectedProvider.addresses[0].ADR_CTY_NM}}, {{pmc.selectedProvider.addresses[0].ADR_ST_CD}} {{pmc.selectedProvider.addresses[0].ADR_ZIP_CD}}<br>\n                </address>\n            </div>\n        </div>\n        <div gm-info-window=\"mouseOverInfoWindow\" gm-info-window-options=\"pmc.mouseOverInfoWindowOptions\">\n            <!-- TODO: show mouse over provider data, not selectedProvider -->\n            <div>{{pmc.selectedProvider.FST_NM  + \' \' + pmc.selectedProvider.MDL_NM + \' \' +pmc.selectedProvider.LST_NM| characters:12 :true}}</div>\n            <div>{{pmc.selectedProvider.specialties[0].SPCL_TYP_FULL_DES}}</div>\n        </div>\n        <ui-view name=\"results\" autoscroll=\"false\"></ui-view>\n        <aside class=\"search_btn_over_map\">\n            <a class=\"btn btn-default pull-right\" ng-click=\"doSearch()\" tooltip=\"Spot Search\"  tooltip-placement=\"right\" tooltip-popup-delay=\"500\"> <span class=\"glyphicon glyphicon-record\"></span> Search</a>\n        </aside><br>\n        <aside class=\"facets_over_map\" ng-controller=\"ProviderFacetsController as pfc\">\n            <accordion close-others=\"true\">\n                <accordion-group is-open=\"pfc.open1\">\n                    <accordion-heading> Gender </accordion-heading>\n                    <nvd3-pie-chart\n                            data=\"genders\"\n                            id=\"genders\"\n                            height=\"200\"\n                            margin=\"{left:0,top:0,bottom:0,right:0}\"\n                            x=\"pfc.xFunction()\"\n                            y=\"pfc.yFunction()\"\n                            showLabels=\"true\"\n                            pieLabelsOutside=\"false\"\n                            donut=\"true\"\n                            donutRatio=\".25\"\n                            tooltips=\"true\"\n                            objectEquality=\"true\"\n                            showValues=\"true\">\n                        <svg></svg>\n                        <div class=\"btn-group\">\n                            <label class=\"btn btn-primary\" ng-model=\"pfc.providerSearchParams.gender\" ng-repeat=\"gender in genders\" btn-radio=\"gender.value\" uncheckable>{{gender.value}}</label>\n                        </div>\n                    </nvd3-pie-chart>\n                </accordion-group>\n                <accordion-group heading=\"Cities\" is-open=\"pfc.open2\">\n                    <nvd3-pie-chart\n                            data=\"cities\"\n                            id=\"cities\"\n                            height=\"320\"\n                            margin=\"{left:0,top:0,bottom:0,right:0}\"\n                            x=\"pfc.xFunction()\"\n                            y=\"pfc.yFunction()\"\n                            showLabels=\"true\"\n                            showLegend=\"true\"\n                            tooltips=\"true\"\n                            objectEquality=\"true\"\n                            showValues=\"true\">\n                        <svg></svg>\n                    </nvd3-pie-chart>\n                </accordion-group>\n                <accordion-group heading=\"Specialties\" is-open=\"pfc.open3\">\n                    <nvd3-pie-chart\n                            data=\"specialties\"\n                            id=\"specialties\"\n                            height=\"200\"\n                            margin=\"{left:0,top:0,bottom:0,right:0}\"\n                            x=\"pfc.xFunction()\"\n                            y=\"pfc.yFunction()\"\n                            showLabels=\"true\"\n                            pieLabelsOutside=\"false\"\n                            showValues=\"true\"\n                            tooltips=\"true\"\n                            objectEquality=\"true\"\n                            labelType=\"value\">\n                        <svg></svg>\n                    </nvd3-pie-chart>\n                </accordion-group>\n            </accordion>\n        </aside>\n    </div>\n</div>\n\n<div class=\"text-info text-right\">\n    <span class=\"glyphicon glyphicon-screenshot\"></span>  {{pmc.center.latLng}}\n    <span class=\"glyphicon glyphicon-zoom-in\"></span> {{pmc.zoom}}\n</div>\n<br/>\n");
$templateCache.put("provider/views/providers.results.html","<aside id=\"search_results_over_map\" class=\"col-md-4\">\n\n    <form class=\"form-group has-feedback has-no-label\">\n        <input  type=\"search\" class=\"form-control\" placeholder=\"Type to filter by name\" ng-model=\"prc.filterField\" ng-change=\"filterProviders()\">\n        <span class=\"glyphicon glyphicon-filter form-control-feedback\"></span>\n    </form>\n\n    <ol class=\"list-group\">\n        <li class=\"list-group-item slide-reveal\"\n            ng-repeat=\'provider in filteredProviders | startFrom:(prc.currentPage -1)*prc.itemsPerPage | limitTo:prc.itemsPerPage\'\n            ng-click=\"pmc.onProviderClick(provider)\">\n            <div class=\"panel\" ng-class=\"{ active: (pmc.selectedProvider.id == provider.id)}\">\n                <div class=\"panel-body\">\n                    <div class=\"pull-left\">\n                        <!--<img ng-src=\"http://lorempixel.com/100/100/people/{{$index}}\" /> -->\n                        <img ng-if=\"provider.FST_NM\" ng-src=\"common/images/doc{{$index + 1}}.jpg\" />\n                        <img ng-if=\"!provider.FST_NM\" ng-src=\"common/images/hospital_big.png\" /> <!-- TODO use identifier -->\n                        <br /><small>{{provider.FST_NM  + \' \' + provider.MDL_NM + \' \' +provider.LST_NM| characters:12 :true}}</small>\n                    </div>\n                    <div class=\"pull-left\">\n                        <p><strong><abbr title=\"Phone\">&#9742;:</abbr> {{provider.addresses[0].TEL_NBR}}</strong>  <strong>D:{{provider.addresses[0].distance | number : 2 }}</strong></p>\n                        <address class=\"small\">\n                            <strong>{{provider.specialties[0].SPCL_TYP_FULL_DESC | characters:22 :true}}</strong><br>\n                            {{provider.addresses[0].ADR_LN_1 | characters:20  :true}}<br>\n                            {{provider.addresses[0].ADR_CTY_NM | characters:14 :true}}, {{provider.addresses[0].ADR_ST_CD}} {{provider.addresses[0].ADR_ZIP_CD}}<br>\n                        </address>\n                    </div>\n                    <span  class=\"pull-left\"><rating ng-model=\"y\" ng-init=\"y = 3\" max=\"5\" readonly=\"true\"></rating>Overall Rating</span>\n                </div>\n            </div>\n        </li>\n    </ol>\n    <pagination total-items=\"filteredProviders.length\" items-per-page=\"prc.itemsPerPage\" ng-model=\"prc.currentPage\" max-size=\"prc.maxSize\"  class=\"pagination-sm\"></pagination>\n</aside>\n\n");
$templateCache.put("provider/views/providers.search.html","<section class=\"row\">\n    <form name=\"searchForm\" class=\"form-horizontal\" role=\"form\" ng-submit=\"doSearch()\" novalidate>\n        <div class=\"form-group\">\n            <div class=\"col-md-4 col-md-offset-1\" ng-class=\"{\'has-error\': searchForm.specialty.$invalid}\">\n                <input type=\"text\" name=\"specialty\" class=\"form-control\" placeholder=\"specialty\"\n                       ng-model=\"psc.providerSearchParams.specialty\"  ng-model-options=\"{ debounce: 300 }\"\n                       typeahead=\"specialty for specialty in psc.getSpecialities($viewValue, true)\"\n                       typeahead-editable=\"false\">\n\n            </div>\n            <!--<div class=\"col-md-1\">-->\n            <!--<button type=\"button\" class=\"form-control btn btn-default btn-sm\">Add Filter</button>-->\n            <!--</div>-->\n            <div class=\"col-md-6\">\n                <div class=\"input-group\" ng-class=\"{\'has-error\': searchForm.address.$invalid}\">\n                    <div class=\"input-group-btn\" dropdown  is-open=\"psc.status.isopen\">\n                        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" dropdown-toggle ng-disabled=\"disabled\">\n                            Within {{psc.providerSearchParams.radius}} miles    <span class=\"caret\"></span>\n                        </button>\n                        <ul class=\"dropdown-menu\" role=\"menu\">\n                            <li><a ng-click=\"psc.setDistance(\'1\')\">Within 1 miles    </a></li>\n                            <li><a ng-click=\"psc.setDistance(\'2\')\">Within 2 miles    </a></li>\n                            <li><a ng-click=\"psc.setDistance(\'5\')\">Within 5 miles    </a></li>\n                            <li><a ng-click=\"psc.setDistance(\'10\')\">Within 10 miles  </a></li>\n                            <li><a ng-click=\"psc.setDistance(\'15\')\">Within 15 miles  </a></li>\n                            <li><a ng-click=\"psc.setDistance(\'25\')\">Within 25 miles  </a></li>\n                            <li><a ng-click=\"psc.setDistance(\'50\')\">Within 50 miles  </a></li>\n                            <li><a ng-click=\"psc.setDistance(\'75\')\">Within 75 miles  </a></li>\n                            <li><a ng-click=\"psc.setDistance(\'100\')\">Within 100 miles</a></li>\n                        </ul>\n                    </div>\n\n                    <input type=\"text\" name=\"address\" class=\"form-control\" placeholder=\"Zip, City or Address...\"\n                           ng-model=\"psc.providerSearchGeolocation.address\"\n                           typeahead=\"address as address.formatted_address for address in psc.getLocations($viewValue)\"\n                           typeahead-min-length=\"3\" ng-model-options=\"{ debounce: 300 }\"\n                           typeahead-on-select=\"psc.onSelect($item, $model, $label)\"\n                           typeahead-loading=\"loadingLocations\"  typeahead-editable=\"false\" required>\n                    <i ng-show=\"loadingLocations\" class=\"glyphicon glyphicon-refresh\"></i>\n\n                    <span class=\"input-group-btn\">\n                        <button class=\"btn btn-default\" ng-disabled=\"searchForm.$invalid\"  title=\"search\" type=\"submit\"><span class=\"glyphicon glyphicon-search\"></span></button>\n                    </span>\n                </div>\n            </div>\n        </div>\n    </form>\n</section>");}]);
define("templates", ["angular"], function(){});

define('index',["./vendor", "diary", "diary/reporters/console", "moment", "./common/index", "./home/index", "./drug/index", "./provider/index", "./experiments/index", "./test.env", "./templates"], function($__0,$__1,$__3,$__5,$__7,$__9,$__11,$__13,$__15,$__17,$__19) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__1 || !$__1.__esModule)
    $__1 = {default: $__1};
  if (!$__3 || !$__3.__esModule)
    $__3 = {default: $__3};
  if (!$__5 || !$__5.__esModule)
    $__5 = {default: $__5};
  if (!$__7 || !$__7.__esModule)
    $__7 = {default: $__7};
  if (!$__9 || !$__9.__esModule)
    $__9 = {default: $__9};
  if (!$__11 || !$__11.__esModule)
    $__11 = {default: $__11};
  if (!$__13 || !$__13.__esModule)
    $__13 = {default: $__13};
  if (!$__15 || !$__15.__esModule)
    $__15 = {default: $__15};
  if (!$__17 || !$__17.__esModule)
    $__17 = {default: $__17};
  if (!$__19 || !$__19.__esModule)
    $__19 = {default: $__19};
  $__0;
  var Diary = $__1.Diary;
  var ConsoleReporter = $__3.ConsoleReporter;
  var moment = $__5.default;
  var commonModule = $__7.default;
  var homeModule = $__9.default;
  var drugModule = $__11.default;
  var providerModule = $__13.default;
  var experimentsModule = $__15.default;
  var testEnvModule = $__17.default;
  var templateModule = $__19.default;
  var mainModule = angular.module('spaApp', ['ui.router', 'ui.bootstrap', 'ngAnimate', 'ngSanitize', 'restangular', 'pascalprecht.translate', 'angular-growl', 'xeditable', 'nvd3ChartDirectives', 'angular-data.DSCacheFactory', 'ui.router.tabs', 'mgcrea.ngStrap.datepicker', 'mgcrea.ngStrap.scrollspy', 'mgcrea.ngStrap.affix', commonModule, homeModule]);
  mainModule.config((function($stateProvider, $urlRouterProvider, growlProvider, $httpProvider, $translateProvider, $translatePartialLoaderProvider, DSCacheFactoryProvider) {
    
    $httpProvider.defaults.withCredentials = true;
    $httpProvider.defaults.useXDomain = true;
    delete $httpProvider.defaults.headers.common['X-Requested-With'];
    growlProvider.globalTimeToLive({
      success: 2000,
      error: 5000,
      warning: 2000,
      info: 2000
    });
    $translateProvider.registerAvailableLanguageKeys(['en_EN', 'de_DE'], {
      'en_US': 'en_EN',
      'en-us': 'en_EN',
      'en_UK': 'en_EN',
      'en-uk': 'en_EN',
      'de_DE': 'de_DE',
      'de_CH': 'de_DE'
    }).determinePreferredLanguage().fallbackLanguage(['en_EN']).useLoader('$translatePartialLoader', {urlTemplate: '{part}/i18n/{lang}.json'});
    $translatePartialLoaderProvider.addPart('home');
    DSCacheFactoryProvider.setCacheDefaults({
      maxAge: 3600000,
      deleteOnExpire: 'aggressive'
    });
    Diary.reporter(new ConsoleReporter({console: window.console}));
  }));
  mainModule.run((function($rootScope, editableOptions, $http, $log, growl, $state, $stateParams, $translate, DSCacheFactory, AuthenticationService, AuthorizationService) {
    
    $rootScope.$on('$translatePartialLoaderStructureChanged', function() {
      $translate.refresh();
    });
    editableOptions.theme = 'bs3';
    console.table(DSCacheFactory.info());
    new DSCacheFactory('defaultCache', {
      maxAge: 900000,
      cacheFlushInterval: 6000000,
      deleteOnExpire: 'aggressive'
    });
    $rootScope.$state = $state;
    $rootScope.$stateParams = $stateParams;
    $rootScope._ = window._;
    $rootScope.moment = moment;
    $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {
      $rootScope.destinationState = {
        state: toState,
        stateParams: toParams
      };
      $rootScope.previousState = {
        state: fromState,
        stateParams: fromParams
      };
      var allowAnonymous = (typeof toState.access === 'undefined' || typeof toState.access.allowAnonymous === 'undefined') ? true : toState.access.allowAnonymous;
      if (!allowAnonymous) {
        var authorizedRoles = toState.access.roles;
        if (!AuthorizationService.isAuthorized(authorizedRoles)) {
          event.preventDefault();
          if (AuthorizationService.isAuthenticated()) {
            AuthenticationService.notAuthorized();
          } else {
            AuthenticationService.notAuthenticated();
          }
          return ;
        }
      }
      $rootScope.spinner = true;
    });
    $rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {
      $rootScope.spinner = false;
      $rootScope.destinationState = false;
    });
    $rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams, error) {
      growl.error('State changed error :( =', {ttl: 10000});
      $log.error('Some service has failed: ', error.config ? error.config.url : error);
    });
    $rootScope.back = function() {
      $state.go($rootScope.previousState.state.name, $rootScope.previousState.stateParams);
      $rootScope.previousState = false;
    };
  }));
  mainModule.requires.push(drugModule);
  mainModule.requires.push(providerModule);
  mainModule.requires.push(experimentsModule);
  mainModule.requires.push(testEnvModule);
  mainModule.requires.push('templates');
  var $__default = mainModule;
  return {
    get default() {
      return $__default;
    },
    __esModule: true
  };
});

define('bootstrap',["angular", "traceur-runtime", "./index"], function($__0,$__2,$__3) {
  
  if (!$__0 || !$__0.__esModule)
    $__0 = {default: $__0};
  if (!$__2 || !$__2.__esModule)
    $__2 = {default: $__2};
  if (!$__3 || !$__3.__esModule)
    $__3 = {default: $__3};
  var ng = $__0.default;
  $__2;
  $__3;
  ng.element(document).ready(function() {
    
    ng.bootstrap(document, ['spaApp']);
  });
  return {};
});

